// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	"bytes"
	flatbuffers "github.com/google/flatbuffers/go"
)

/// project infos as set in plc engineering
type AppProjectInfoT struct {
	Name string `json:"name"`
	Title string `json:"title"`
	Version string `json:"version"`
	Author string `json:"author"`
	Description string `json:"description"`
}

func (t *AppProjectInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	titleOffset := flatbuffers.UOffsetT(0)
	if t.Title != "" {
		titleOffset = builder.CreateString(t.Title)
	}
	versionOffset := flatbuffers.UOffsetT(0)
	if t.Version != "" {
		versionOffset = builder.CreateString(t.Version)
	}
	authorOffset := flatbuffers.UOffsetT(0)
	if t.Author != "" {
		authorOffset = builder.CreateString(t.Author)
	}
	descriptionOffset := flatbuffers.UOffsetT(0)
	if t.Description != "" {
		descriptionOffset = builder.CreateString(t.Description)
	}
	AppProjectInfoStart(builder)
	AppProjectInfoAddName(builder, nameOffset)
	AppProjectInfoAddTitle(builder, titleOffset)
	AppProjectInfoAddVersion(builder, versionOffset)
	AppProjectInfoAddAuthor(builder, authorOffset)
	AppProjectInfoAddDescription(builder, descriptionOffset)
	return AppProjectInfoEnd(builder)
}

func (rcv *AppProjectInfo) UnPackTo(t *AppProjectInfoT) {
	t.Name = string(rcv.Name())
	t.Title = string(rcv.Title())
	t.Version = string(rcv.Version())
	t.Author = string(rcv.Author())
	t.Description = string(rcv.Description())
}

func (rcv *AppProjectInfo) UnPack() *AppProjectInfoT {
	if rcv == nil { return nil }
	t := &AppProjectInfoT{}
	rcv.UnPackTo(t)
	return t
}

type AppProjectInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsAppProjectInfo(buf []byte, offset flatbuffers.UOffsetT) *AppProjectInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AppProjectInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAppProjectInfo(buf []byte, offset flatbuffers.UOffsetT) *AppProjectInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AppProjectInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AppProjectInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AppProjectInfo) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the project as string
func (rcv *AppProjectInfo) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the project as string
func AppProjectInfoKeyCompare(o1, o2 flatbuffers.UOffsetT, buf []byte) bool {
	obj1 := &AppProjectInfo{}
	obj2 := &AppProjectInfo{}
	obj1.Init(buf, flatbuffers.UOffsetT(len(buf)) - o1)
	obj2.Init(buf, flatbuffers.UOffsetT(len(buf)) - o2)
	return string(obj1.Name()) < string(obj2.Name())
}

func (rcv *AppProjectInfo) LookupByKey(key string, vectorLocation flatbuffers.UOffsetT, buf []byte) bool {
	span := flatbuffers.GetUOffsetT(buf[vectorLocation - 4:])
	start := flatbuffers.UOffsetT(0)
	bKey := []byte(key)
	for span != 0 {
		middle := span / 2
		tableOffset := flatbuffers.GetIndirectOffset(buf, vectorLocation+ 4 * (start + middle))
		obj := &AppProjectInfo{}
		obj.Init(buf, tableOffset)
		comp := bytes.Compare(obj.Name(), bKey)
		if comp > 0 {
			span = middle
		} else if comp < 0 {
			middle += 1
			start += middle
			span -= middle
		} else {
			rcv.Init(buf, tableOffset)
			return true
		}
	}
	return false
}

func (rcv *AppProjectInfo) Title() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// version as string
func (rcv *AppProjectInfo) Version() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// version as string
/// author that created the project
func (rcv *AppProjectInfo) Author() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// author that created the project
/// project description
func (rcv *AppProjectInfo) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// project description
func AppProjectInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AppProjectInfoAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func AppProjectInfoAddTitle(builder *flatbuffers.Builder, title flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(title), 0)
}
func AppProjectInfoAddVersion(builder *flatbuffers.Builder, version flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(version), 0)
}
func AppProjectInfoAddAuthor(builder *flatbuffers.Builder, author flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(author), 0)
}
func AppProjectInfoAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(description), 0)
}
func AppProjectInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
