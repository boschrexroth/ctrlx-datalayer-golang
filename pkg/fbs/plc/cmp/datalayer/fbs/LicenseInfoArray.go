// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// An Array that holds all Licenses
type LicenseInfoArrayT struct {
	LicenseArray []*LicenseInfoT `json:"license_array"`
}

func (t *LicenseInfoArrayT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	licenseArrayOffset := flatbuffers.UOffsetT(0)
	if t.LicenseArray != nil {
		licenseArrayLength := len(t.LicenseArray)
		licenseArrayOffsets := make([]flatbuffers.UOffsetT, licenseArrayLength)
		for j := 0; j < licenseArrayLength; j++ {
			licenseArrayOffsets[j] = t.LicenseArray[j].Pack(builder)
		}
		LicenseInfoArrayStartLicenseArrayVector(builder, licenseArrayLength)
		for j := licenseArrayLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(licenseArrayOffsets[j])
		}
		licenseArrayOffset = builder.EndVector(licenseArrayLength)
	}
	LicenseInfoArrayStart(builder)
	LicenseInfoArrayAddLicenseArray(builder, licenseArrayOffset)
	return LicenseInfoArrayEnd(builder)
}

func (rcv *LicenseInfoArray) UnPackTo(t *LicenseInfoArrayT) {
	licenseArrayLength := rcv.LicenseArrayLength()
	t.LicenseArray = make([]*LicenseInfoT, licenseArrayLength)
	for j := 0; j < licenseArrayLength; j++ {
		x := LicenseInfo{}
		rcv.LicenseArray(&x, j)
		t.LicenseArray[j] = x.UnPack()
	}
}

func (rcv *LicenseInfoArray) UnPack() *LicenseInfoArrayT {
	if rcv == nil { return nil }
	t := &LicenseInfoArrayT{}
	rcv.UnPackTo(t)
	return t
}

type LicenseInfoArray struct {
	_tab flatbuffers.Table
}

func GetRootAsLicenseInfoArray(buf []byte, offset flatbuffers.UOffsetT) *LicenseInfoArray {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LicenseInfoArray{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsLicenseInfoArray(buf []byte, offset flatbuffers.UOffsetT) *LicenseInfoArray {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LicenseInfoArray{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *LicenseInfoArray) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LicenseInfoArray) Table() flatbuffers.Table {
	return rcv._tab
}

/// Description of all available cores
func (rcv *LicenseInfoArray) LicenseArray(obj *LicenseInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *LicenseInfoArray) LicenseArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Description of all available cores
func LicenseInfoArrayStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func LicenseInfoArrayAddLicenseArray(builder *flatbuffers.Builder, licenseArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(licenseArray), 0)
}
func LicenseInfoArrayStartLicenseArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LicenseInfoArrayEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
