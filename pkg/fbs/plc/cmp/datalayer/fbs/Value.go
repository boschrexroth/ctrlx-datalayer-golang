// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type Value byte

const (
	ValueNONE           Value = 0
	ValueBool_t         Value = 1
	ValueArrayBool_t    Value = 2
	ValueInt8_t         Value = 3
	ValueInt16_t        Value = 4
	ValueInt32_t        Value = 5
	ValueInt64_t        Value = 6
	ValueUint8_t        Value = 7
	ValueUint16_t       Value = 8
	ValueUint32_t       Value = 9
	ValueUint64_t       Value = 10
	ValueFloat32_t      Value = 11
	ValueFloat64_t      Value = 12
	ValueArrayInt8_t    Value = 13
	ValueArrayInt16_t   Value = 14
	ValueArrayInt32_t   Value = 15
	ValueArrayUint64_t  Value = 16
	ValueArrayUint8_t   Value = 17
	ValueArrayUint16_t  Value = 18
	ValueArrayUint32_t  Value = 19
	ValueArrayInt64_t   Value = 20
	ValueArrayFloat32_t Value = 21
	ValueArrayFloat64_t Value = 22
)

var EnumNamesValue = map[Value]string{
	ValueNONE:           "NONE",
	ValueBool_t:         "Bool_t",
	ValueArrayBool_t:    "ArrayBool_t",
	ValueInt8_t:         "Int8_t",
	ValueInt16_t:        "Int16_t",
	ValueInt32_t:        "Int32_t",
	ValueInt64_t:        "Int64_t",
	ValueUint8_t:        "Uint8_t",
	ValueUint16_t:       "Uint16_t",
	ValueUint32_t:       "Uint32_t",
	ValueUint64_t:       "Uint64_t",
	ValueFloat32_t:      "Float32_t",
	ValueFloat64_t:      "Float64_t",
	ValueArrayInt8_t:    "ArrayInt8_t",
	ValueArrayInt16_t:   "ArrayInt16_t",
	ValueArrayInt32_t:   "ArrayInt32_t",
	ValueArrayUint64_t:  "ArrayUint64_t",
	ValueArrayUint8_t:   "ArrayUint8_t",
	ValueArrayUint16_t:  "ArrayUint16_t",
	ValueArrayUint32_t:  "ArrayUint32_t",
	ValueArrayInt64_t:   "ArrayInt64_t",
	ValueArrayFloat32_t: "ArrayFloat32_t",
	ValueArrayFloat64_t: "ArrayFloat64_t",
}

var EnumValuesValue = map[string]Value{
	"NONE":           ValueNONE,
	"Bool_t":         ValueBool_t,
	"ArrayBool_t":    ValueArrayBool_t,
	"Int8_t":         ValueInt8_t,
	"Int16_t":        ValueInt16_t,
	"Int32_t":        ValueInt32_t,
	"Int64_t":        ValueInt64_t,
	"Uint8_t":        ValueUint8_t,
	"Uint16_t":       ValueUint16_t,
	"Uint32_t":       ValueUint32_t,
	"Uint64_t":       ValueUint64_t,
	"Float32_t":      ValueFloat32_t,
	"Float64_t":      ValueFloat64_t,
	"ArrayInt8_t":    ValueArrayInt8_t,
	"ArrayInt16_t":   ValueArrayInt16_t,
	"ArrayInt32_t":   ValueArrayInt32_t,
	"ArrayUint64_t":  ValueArrayUint64_t,
	"ArrayUint8_t":   ValueArrayUint8_t,
	"ArrayUint16_t":  ValueArrayUint16_t,
	"ArrayUint32_t":  ValueArrayUint32_t,
	"ArrayInt64_t":   ValueArrayInt64_t,
	"ArrayFloat32_t": ValueArrayFloat32_t,
	"ArrayFloat64_t": ValueArrayFloat64_t,
}

func (v Value) String() string {
	if s, ok := EnumNamesValue[v]; ok {
		return s
	}
	return "Value(" + strconv.FormatInt(int64(v), 10) + ")"
}

type ValueT struct {
	Type Value
	Value interface{}
}

func (t *ValueT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case ValueBool_t:
		return t.Value.(*Bool_tT).Pack(builder)
	case ValueArrayBool_t:
		return t.Value.(*ArrayBool_tT).Pack(builder)
	case ValueInt8_t:
		return t.Value.(*Int8_tT).Pack(builder)
	case ValueInt16_t:
		return t.Value.(*Int16_tT).Pack(builder)
	case ValueInt32_t:
		return t.Value.(*Int32_tT).Pack(builder)
	case ValueInt64_t:
		return t.Value.(*Int64_tT).Pack(builder)
	case ValueUint8_t:
		return t.Value.(*Uint8_tT).Pack(builder)
	case ValueUint16_t:
		return t.Value.(*Uint16_tT).Pack(builder)
	case ValueUint32_t:
		return t.Value.(*Uint32_tT).Pack(builder)
	case ValueUint64_t:
		return t.Value.(*Uint64_tT).Pack(builder)
	case ValueFloat32_t:
		return t.Value.(*Float32_tT).Pack(builder)
	case ValueFloat64_t:
		return t.Value.(*Float64_tT).Pack(builder)
	case ValueArrayInt8_t:
		return t.Value.(*ArrayInt8_tT).Pack(builder)
	case ValueArrayInt16_t:
		return t.Value.(*ArrayInt16_tT).Pack(builder)
	case ValueArrayInt32_t:
		return t.Value.(*ArrayInt32_tT).Pack(builder)
	case ValueArrayUint64_t:
		return t.Value.(*ArrayUint64_tT).Pack(builder)
	case ValueArrayUint8_t:
		return t.Value.(*ArrayUint8_tT).Pack(builder)
	case ValueArrayUint16_t:
		return t.Value.(*ArrayUint16_tT).Pack(builder)
	case ValueArrayUint32_t:
		return t.Value.(*ArrayUint32_tT).Pack(builder)
	case ValueArrayInt64_t:
		return t.Value.(*ArrayInt64_tT).Pack(builder)
	case ValueArrayFloat32_t:
		return t.Value.(*ArrayFloat32_tT).Pack(builder)
	case ValueArrayFloat64_t:
		return t.Value.(*ArrayFloat64_tT).Pack(builder)
	}
	return 0
}

func (rcv Value) UnPack(table flatbuffers.Table) *ValueT {
	switch rcv {
	case ValueBool_t:
		x := Bool_t{_tab: table}
		return &ValueT{ Type: ValueBool_t, Value: x.UnPack() }
	case ValueArrayBool_t:
		x := ArrayBool_t{_tab: table}
		return &ValueT{ Type: ValueArrayBool_t, Value: x.UnPack() }
	case ValueInt8_t:
		x := Int8_t{_tab: table}
		return &ValueT{ Type: ValueInt8_t, Value: x.UnPack() }
	case ValueInt16_t:
		x := Int16_t{_tab: table}
		return &ValueT{ Type: ValueInt16_t, Value: x.UnPack() }
	case ValueInt32_t:
		x := Int32_t{_tab: table}
		return &ValueT{ Type: ValueInt32_t, Value: x.UnPack() }
	case ValueInt64_t:
		x := Int64_t{_tab: table}
		return &ValueT{ Type: ValueInt64_t, Value: x.UnPack() }
	case ValueUint8_t:
		x := Uint8_t{_tab: table}
		return &ValueT{ Type: ValueUint8_t, Value: x.UnPack() }
	case ValueUint16_t:
		x := Uint16_t{_tab: table}
		return &ValueT{ Type: ValueUint16_t, Value: x.UnPack() }
	case ValueUint32_t:
		x := Uint32_t{_tab: table}
		return &ValueT{ Type: ValueUint32_t, Value: x.UnPack() }
	case ValueUint64_t:
		x := Uint64_t{_tab: table}
		return &ValueT{ Type: ValueUint64_t, Value: x.UnPack() }
	case ValueFloat32_t:
		x := Float32_t{_tab: table}
		return &ValueT{ Type: ValueFloat32_t, Value: x.UnPack() }
	case ValueFloat64_t:
		x := Float64_t{_tab: table}
		return &ValueT{ Type: ValueFloat64_t, Value: x.UnPack() }
	case ValueArrayInt8_t:
		x := ArrayInt8_t{_tab: table}
		return &ValueT{ Type: ValueArrayInt8_t, Value: x.UnPack() }
	case ValueArrayInt16_t:
		x := ArrayInt16_t{_tab: table}
		return &ValueT{ Type: ValueArrayInt16_t, Value: x.UnPack() }
	case ValueArrayInt32_t:
		x := ArrayInt32_t{_tab: table}
		return &ValueT{ Type: ValueArrayInt32_t, Value: x.UnPack() }
	case ValueArrayUint64_t:
		x := ArrayUint64_t{_tab: table}
		return &ValueT{ Type: ValueArrayUint64_t, Value: x.UnPack() }
	case ValueArrayUint8_t:
		x := ArrayUint8_t{_tab: table}
		return &ValueT{ Type: ValueArrayUint8_t, Value: x.UnPack() }
	case ValueArrayUint16_t:
		x := ArrayUint16_t{_tab: table}
		return &ValueT{ Type: ValueArrayUint16_t, Value: x.UnPack() }
	case ValueArrayUint32_t:
		x := ArrayUint32_t{_tab: table}
		return &ValueT{ Type: ValueArrayUint32_t, Value: x.UnPack() }
	case ValueArrayInt64_t:
		x := ArrayInt64_t{_tab: table}
		return &ValueT{ Type: ValueArrayInt64_t, Value: x.UnPack() }
	case ValueArrayFloat32_t:
		x := ArrayFloat32_t{_tab: table}
		return &ValueT{ Type: ValueArrayFloat32_t, Value: x.UnPack() }
	case ValueArrayFloat64_t:
		x := ArrayFloat64_t{_tab: table}
		return &ValueT{ Type: ValueArrayFloat64_t, Value: x.UnPack() }
	}
	return nil
}
