// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// This object defines the Timeouts for Asynchronus Methods
type AsyncTimeoutSettingsT struct {
	Timeout uint64 `json:"Timeout"`
}

func (t *AsyncTimeoutSettingsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AsyncTimeoutSettingsStart(builder)
	AsyncTimeoutSettingsAddTimeout(builder, t.Timeout)
	return AsyncTimeoutSettingsEnd(builder)
}

func (rcv *AsyncTimeoutSettings) UnPackTo(t *AsyncTimeoutSettingsT) {
	t.Timeout = rcv.Timeout()
}

func (rcv *AsyncTimeoutSettings) UnPack() *AsyncTimeoutSettingsT {
	if rcv == nil { return nil }
	t := &AsyncTimeoutSettingsT{}
	rcv.UnPackTo(t)
	return t
}

type AsyncTimeoutSettings struct {
	_tab flatbuffers.Table
}

func GetRootAsAsyncTimeoutSettings(buf []byte, offset flatbuffers.UOffsetT) *AsyncTimeoutSettings {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AsyncTimeoutSettings{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAsyncTimeoutSettings(buf []byte, offset flatbuffers.UOffsetT) *AsyncTimeoutSettings {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AsyncTimeoutSettings{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AsyncTimeoutSettings) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AsyncTimeoutSettings) Table() flatbuffers.Table {
	return rcv._tab
}

/// Variable that the defines the maximal waited time (ms) for an asynchronus Mehtod
func (rcv *AsyncTimeoutSettings) Timeout() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// Variable that the defines the maximal waited time (ms) for an asynchronus Mehtod
func (rcv *AsyncTimeoutSettings) MutateTimeout(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func AsyncTimeoutSettingsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AsyncTimeoutSettingsAddTimeout(builder *flatbuffers.Builder, timeout uint64) {
	builder.PrependUint64Slot(0, timeout, 0)
}
func AsyncTimeoutSettingsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
