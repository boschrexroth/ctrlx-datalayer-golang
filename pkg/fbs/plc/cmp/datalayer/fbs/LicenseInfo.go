// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// License Object
type LicenseInfoT struct {
	Name string `json:"name"`
	Version string `json:"version"`
	Quantity uint32 `json:"quantity"`
}

func (t *LicenseInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	versionOffset := flatbuffers.UOffsetT(0)
	if t.Version != "" {
		versionOffset = builder.CreateString(t.Version)
	}
	LicenseInfoStart(builder)
	LicenseInfoAddName(builder, nameOffset)
	LicenseInfoAddVersion(builder, versionOffset)
	LicenseInfoAddQuantity(builder, t.Quantity)
	return LicenseInfoEnd(builder)
}

func (rcv *LicenseInfo) UnPackTo(t *LicenseInfoT) {
	t.Name = string(rcv.Name())
	t.Version = string(rcv.Version())
	t.Quantity = rcv.Quantity()
}

func (rcv *LicenseInfo) UnPack() *LicenseInfoT {
	if rcv == nil { return nil }
	t := &LicenseInfoT{}
	rcv.UnPackTo(t)
	return t
}

type LicenseInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsLicenseInfo(buf []byte, offset flatbuffers.UOffsetT) *LicenseInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LicenseInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsLicenseInfo(buf []byte, offset flatbuffers.UOffsetT) *LicenseInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LicenseInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *LicenseInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LicenseInfo) Table() flatbuffers.Table {
	return rcv._tab
}

/// Name of the license
func (rcv *LicenseInfo) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the license
/// version of the license
func (rcv *LicenseInfo) Version() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// version of the license
/// quantity
func (rcv *LicenseInfo) Quantity() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// quantity
func (rcv *LicenseInfo) MutateQuantity(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func LicenseInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func LicenseInfoAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func LicenseInfoAddVersion(builder *flatbuffers.Builder, version flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(version), 0)
}
func LicenseInfoAddQuantity(builder *flatbuffers.Builder, quantity uint32) {
	builder.PrependUint32Slot(2, quantity, 0)
}
func LicenseInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
