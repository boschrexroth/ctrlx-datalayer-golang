// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// login information for the identity management
type AppIdmUserLoginT struct {
	User string `json:"user"`
	Password string `json:"password"`
}

func (t *AppIdmUserLoginT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	userOffset := flatbuffers.UOffsetT(0)
	if t.User != "" {
		userOffset = builder.CreateString(t.User)
	}
	passwordOffset := flatbuffers.UOffsetT(0)
	if t.Password != "" {
		passwordOffset = builder.CreateString(t.Password)
	}
	AppIdmUserLoginStart(builder)
	AppIdmUserLoginAddUser(builder, userOffset)
	AppIdmUserLoginAddPassword(builder, passwordOffset)
	return AppIdmUserLoginEnd(builder)
}

func (rcv *AppIdmUserLogin) UnPackTo(t *AppIdmUserLoginT) {
	t.User = string(rcv.User())
	t.Password = string(rcv.Password())
}

func (rcv *AppIdmUserLogin) UnPack() *AppIdmUserLoginT {
	if rcv == nil { return nil }
	t := &AppIdmUserLoginT{}
	rcv.UnPackTo(t)
	return t
}

type AppIdmUserLogin struct {
	_tab flatbuffers.Table
}

func GetRootAsAppIdmUserLogin(buf []byte, offset flatbuffers.UOffsetT) *AppIdmUserLogin {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AppIdmUserLogin{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAppIdmUserLogin(buf []byte, offset flatbuffers.UOffsetT) *AppIdmUserLogin {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AppIdmUserLogin{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AppIdmUserLogin) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AppIdmUserLogin) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AppIdmUserLogin) User() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// password as string
func (rcv *AppIdmUserLogin) Password() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// password as string
func AppIdmUserLoginStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AppIdmUserLoginAddUser(builder *flatbuffers.Builder, user flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(user), 0)
}
func AppIdmUserLoginAddPassword(builder *flatbuffers.Builder, password flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(password), 0)
}
func AppIdmUserLoginEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
