// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Different settings for symbols (such es representation)
type SymbolSettingsT struct {
	EnumRepresentation EnumFormat `json:"enumRepresentation"`
	ArrayDisplayName ArrayDisplayName `json:"arrayDisplayName"`
}

func (t *SymbolSettingsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	SymbolSettingsStart(builder)
	SymbolSettingsAddEnumRepresentation(builder, t.EnumRepresentation)
	SymbolSettingsAddArrayDisplayName(builder, t.ArrayDisplayName)
	return SymbolSettingsEnd(builder)
}

func (rcv *SymbolSettings) UnPackTo(t *SymbolSettingsT) {
	t.EnumRepresentation = rcv.EnumRepresentation()
	t.ArrayDisplayName = rcv.ArrayDisplayName()
}

func (rcv *SymbolSettings) UnPack() *SymbolSettingsT {
	if rcv == nil { return nil }
	t := &SymbolSettingsT{}
	rcv.UnPackTo(t)
	return t
}

type SymbolSettings struct {
	_tab flatbuffers.Table
}

func GetRootAsSymbolSettings(buf []byte, offset flatbuffers.UOffsetT) *SymbolSettings {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SymbolSettings{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSymbolSettings(buf []byte, offset flatbuffers.UOffsetT) *SymbolSettings {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SymbolSettings{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SymbolSettings) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SymbolSettings) Table() flatbuffers.Table {
	return rcv._tab
}

/// Set the representation type for enums, default value is flatbuffer
func (rcv *SymbolSettings) EnumRepresentation() EnumFormat {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return EnumFormat(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

/// Set the representation type for enums, default value is flatbuffer
func (rcv *SymbolSettings) MutateEnumRepresentation(n EnumFormat) bool {
	return rcv._tab.MutateUint32Slot(4, uint32(n))
}

/// Turn the displayname in the metadata ON or OFF
func (rcv *SymbolSettings) ArrayDisplayName() ArrayDisplayName {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ArrayDisplayName(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

/// Turn the displayname in the metadata ON or OFF
func (rcv *SymbolSettings) MutateArrayDisplayName(n ArrayDisplayName) bool {
	return rcv._tab.MutateUint32Slot(6, uint32(n))
}

func SymbolSettingsStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SymbolSettingsAddEnumRepresentation(builder *flatbuffers.Builder, enumRepresentation EnumFormat) {
	builder.PrependUint32Slot(0, uint32(enumRepresentation), 0)
}
func SymbolSettingsAddArrayDisplayName(builder *flatbuffers.Builder, arrayDisplayName ArrayDisplayName) {
	builder.PrependUint32Slot(1, uint32(arrayDisplayName), 0)
}
func SymbolSettingsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
