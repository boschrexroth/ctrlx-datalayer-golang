// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AppDateAndTimeT struct {
	DateAndTime string
}

func (t *AppDateAndTimeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	dateAndTimeOffset := builder.CreateString(t.DateAndTime)
	AppDateAndTimeStart(builder)
	AppDateAndTimeAddDateAndTime(builder, dateAndTimeOffset)
	return AppDateAndTimeEnd(builder)
}

func (rcv *AppDateAndTime) UnPackTo(t *AppDateAndTimeT) {
	t.DateAndTime = string(rcv.DateAndTime())
}

func (rcv *AppDateAndTime) UnPack() *AppDateAndTimeT {
	if rcv == nil { return nil }
	t := &AppDateAndTimeT{}
	rcv.UnPackTo(t)
	return t
}

type AppDateAndTime struct {
	_tab flatbuffers.Table
}

func GetRootAsAppDateAndTime(buf []byte, offset flatbuffers.UOffsetT) *AppDateAndTime {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AppDateAndTime{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAppDateAndTime(buf []byte, offset flatbuffers.UOffsetT) *AppDateAndTime {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AppDateAndTime{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AppDateAndTime) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AppDateAndTime) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AppDateAndTime) DateAndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func AppDateAndTimeStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AppDateAndTimeAddDateAndTime(builder *flatbuffers.Builder, dateAndTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(dateAndTime), 0)
}
func AppDateAndTimeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
