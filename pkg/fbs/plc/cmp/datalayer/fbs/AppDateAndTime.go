// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	"bytes"
	flatbuffers "github.com/google/flatbuffers/go"
)

type AppDateAndTimeT struct {
	DateAndTime string `json:"dateAndTime"`
}

func (t *AppDateAndTimeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	dateAndTimeOffset := flatbuffers.UOffsetT(0)
	if t.DateAndTime != "" {
		dateAndTimeOffset = builder.CreateString(t.DateAndTime)
	}
	AppDateAndTimeStart(builder)
	AppDateAndTimeAddDateAndTime(builder, dateAndTimeOffset)
	return AppDateAndTimeEnd(builder)
}

func (rcv *AppDateAndTime) UnPackTo(t *AppDateAndTimeT) {
	t.DateAndTime = string(rcv.DateAndTime())
}

func (rcv *AppDateAndTime) UnPack() *AppDateAndTimeT {
	if rcv == nil { return nil }
	t := &AppDateAndTimeT{}
	rcv.UnPackTo(t)
	return t
}

type AppDateAndTime struct {
	_tab flatbuffers.Table
}

func GetRootAsAppDateAndTime(buf []byte, offset flatbuffers.UOffsetT) *AppDateAndTime {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AppDateAndTime{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAppDateAndTime(buf []byte, offset flatbuffers.UOffsetT) *AppDateAndTime {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AppDateAndTime{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AppDateAndTime) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AppDateAndTime) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AppDateAndTime) DateAndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func AppDateAndTimeKeyCompare(o1, o2 flatbuffers.UOffsetT, buf []byte) bool {
	obj1 := &AppDateAndTime{}
	obj2 := &AppDateAndTime{}
	obj1.Init(buf, flatbuffers.UOffsetT(len(buf)) - o1)
	obj2.Init(buf, flatbuffers.UOffsetT(len(buf)) - o2)
	return string(obj1.DateAndTime()) < string(obj2.DateAndTime())
}

func (rcv *AppDateAndTime) LookupByKey(key string, vectorLocation flatbuffers.UOffsetT, buf []byte) bool {
	span := flatbuffers.GetUOffsetT(buf[vectorLocation - 4:])
	start := flatbuffers.UOffsetT(0)
	bKey := []byte(key)
	for span != 0 {
		middle := span / 2
		tableOffset := flatbuffers.GetIndirectOffset(buf, vectorLocation+ 4 * (start + middle))
		obj := &AppDateAndTime{}
		obj.Init(buf, tableOffset)
		comp := bytes.Compare(obj.DateAndTime(), bKey)
		if comp > 0 {
			span = middle
		} else if comp < 0 {
			middle += 1
			start += middle
			span -= middle
		} else {
			rcv.Init(buf, tableOffset)
			return true
		}
	}
	return false
}

func AppDateAndTimeStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AppDateAndTimeAddDateAndTime(builder *flatbuffers.Builder, dateAndTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(dateAndTime), 0)
}
func AppDateAndTimeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
