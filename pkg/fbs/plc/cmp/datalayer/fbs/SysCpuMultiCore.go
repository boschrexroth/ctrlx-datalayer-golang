// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SysCpuMultiCoreT struct {
	Taskgroup1 *TaskGroupT `json:"taskgroup1"`
	Taskgroup2 *TaskGroupT `json:"taskgroup2"`
	Taskgroup3 *TaskGroupT `json:"taskgroup3"`
	Taskgroup4 *TaskGroupT `json:"taskgroup4"`
	Taskgroup5 *TaskGroupT `json:"taskgroup5"`
	Ieccoreset []uint32 `json:"ieccoreset"`
}

func (t *SysCpuMultiCoreT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	taskgroup1Offset := t.Taskgroup1.Pack(builder)
	taskgroup2Offset := t.Taskgroup2.Pack(builder)
	taskgroup3Offset := t.Taskgroup3.Pack(builder)
	taskgroup4Offset := t.Taskgroup4.Pack(builder)
	taskgroup5Offset := t.Taskgroup5.Pack(builder)
	ieccoresetOffset := flatbuffers.UOffsetT(0)
	if t.Ieccoreset != nil {
		ieccoresetLength := len(t.Ieccoreset)
		SysCpuMultiCoreStartIeccoresetVector(builder, ieccoresetLength)
		for j := ieccoresetLength - 1; j >= 0; j-- {
			builder.PrependUint32(t.Ieccoreset[j])
		}
		ieccoresetOffset = builder.EndVector(ieccoresetLength)
	}
	SysCpuMultiCoreStart(builder)
	SysCpuMultiCoreAddTaskgroup1(builder, taskgroup1Offset)
	SysCpuMultiCoreAddTaskgroup2(builder, taskgroup2Offset)
	SysCpuMultiCoreAddTaskgroup3(builder, taskgroup3Offset)
	SysCpuMultiCoreAddTaskgroup4(builder, taskgroup4Offset)
	SysCpuMultiCoreAddTaskgroup5(builder, taskgroup5Offset)
	SysCpuMultiCoreAddIeccoreset(builder, ieccoresetOffset)
	return SysCpuMultiCoreEnd(builder)
}

func (rcv *SysCpuMultiCore) UnPackTo(t *SysCpuMultiCoreT) {
	t.Taskgroup1 = rcv.Taskgroup1(nil).UnPack()
	t.Taskgroup2 = rcv.Taskgroup2(nil).UnPack()
	t.Taskgroup3 = rcv.Taskgroup3(nil).UnPack()
	t.Taskgroup4 = rcv.Taskgroup4(nil).UnPack()
	t.Taskgroup5 = rcv.Taskgroup5(nil).UnPack()
	ieccoresetLength := rcv.IeccoresetLength()
	t.Ieccoreset = make([]uint32, ieccoresetLength)
	for j := 0; j < ieccoresetLength; j++ {
		t.Ieccoreset[j] = rcv.Ieccoreset(j)
	}
}

func (rcv *SysCpuMultiCore) UnPack() *SysCpuMultiCoreT {
	if rcv == nil { return nil }
	t := &SysCpuMultiCoreT{}
	rcv.UnPackTo(t)
	return t
}

type SysCpuMultiCore struct {
	_tab flatbuffers.Table
}

func GetRootAsSysCpuMultiCore(buf []byte, offset flatbuffers.UOffsetT) *SysCpuMultiCore {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SysCpuMultiCore{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSysCpuMultiCore(buf []byte, offset flatbuffers.UOffsetT) *SysCpuMultiCore {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SysCpuMultiCore{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SysCpuMultiCore) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SysCpuMultiCore) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SysCpuMultiCore) Taskgroup1(obj *TaskGroup) *TaskGroup {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TaskGroup)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SysCpuMultiCore) Taskgroup2(obj *TaskGroup) *TaskGroup {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TaskGroup)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SysCpuMultiCore) Taskgroup3(obj *TaskGroup) *TaskGroup {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TaskGroup)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SysCpuMultiCore) Taskgroup4(obj *TaskGroup) *TaskGroup {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TaskGroup)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SysCpuMultiCore) Taskgroup5(obj *TaskGroup) *TaskGroup {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TaskGroup)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SysCpuMultiCore) Ieccoreset(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *SysCpuMultiCore) IeccoresetLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SysCpuMultiCore) MutateIeccoreset(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func SysCpuMultiCoreStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func SysCpuMultiCoreAddTaskgroup1(builder *flatbuffers.Builder, taskgroup1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(taskgroup1), 0)
}
func SysCpuMultiCoreAddTaskgroup2(builder *flatbuffers.Builder, taskgroup2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(taskgroup2), 0)
}
func SysCpuMultiCoreAddTaskgroup3(builder *flatbuffers.Builder, taskgroup3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(taskgroup3), 0)
}
func SysCpuMultiCoreAddTaskgroup4(builder *flatbuffers.Builder, taskgroup4 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(taskgroup4), 0)
}
func SysCpuMultiCoreAddTaskgroup5(builder *flatbuffers.Builder, taskgroup5 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(taskgroup5), 0)
}
func SysCpuMultiCoreAddIeccoreset(builder *flatbuffers.Builder, ieccoreset flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(ieccoreset), 0)
}
func SysCpuMultiCoreStartIeccoresetVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SysCpuMultiCoreEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
