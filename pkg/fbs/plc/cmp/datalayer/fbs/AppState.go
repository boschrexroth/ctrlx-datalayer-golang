// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AppStateT struct {
	State State
}

func (t *AppStateT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AppStateStart(builder)
	AppStateAddState(builder, t.State)
	return AppStateEnd(builder)
}

func (rcv *AppState) UnPackTo(t *AppStateT) {
	t.State = rcv.State()
}

func (rcv *AppState) UnPack() *AppStateT {
	if rcv == nil { return nil }
	t := &AppStateT{}
	rcv.UnPackTo(t)
	return t
}

type AppState struct {
	_tab flatbuffers.Table
}

func GetRootAsAppState(buf []byte, offset flatbuffers.UOffsetT) *AppState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AppState{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAppState(buf []byte, offset flatbuffers.UOffsetT) *AppState {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AppState{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AppState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AppState) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AppState) State() State {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return State(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AppState) MutateState(n State) bool {
	return rcv._tab.MutateUint32Slot(4, uint32(n))
}

func AppStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AppStateAddState(builder *flatbuffers.Builder, state State) {
	builder.PrependUint32Slot(0, uint32(state), 0)
}
func AppStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
