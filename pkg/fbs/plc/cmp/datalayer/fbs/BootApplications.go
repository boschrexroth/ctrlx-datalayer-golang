// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// This object includes information to each boot application
type BootApplicationsT struct {
	IsAvailable bool `json:"IsAvailable"`
	Applications []*BootAppInfoT `json:"Applications"`
}

func (t *BootApplicationsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	applicationsOffset := flatbuffers.UOffsetT(0)
	if t.Applications != nil {
		applicationsLength := len(t.Applications)
		applicationsOffsets := make([]flatbuffers.UOffsetT, applicationsLength)
		for j := 0; j < applicationsLength; j++ {
			applicationsOffsets[j] = t.Applications[j].Pack(builder)
		}
		BootApplicationsStartApplicationsVector(builder, applicationsLength)
		for j := applicationsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(applicationsOffsets[j])
		}
		applicationsOffset = builder.EndVector(applicationsLength)
	}
	BootApplicationsStart(builder)
	BootApplicationsAddIsAvailable(builder, t.IsAvailable)
	BootApplicationsAddApplications(builder, applicationsOffset)
	return BootApplicationsEnd(builder)
}

func (rcv *BootApplications) UnPackTo(t *BootApplicationsT) {
	t.IsAvailable = rcv.IsAvailable()
	applicationsLength := rcv.ApplicationsLength()
	t.Applications = make([]*BootAppInfoT, applicationsLength)
	for j := 0; j < applicationsLength; j++ {
		x := BootAppInfo{}
		rcv.Applications(&x, j)
		t.Applications[j] = x.UnPack()
	}
}

func (rcv *BootApplications) UnPack() *BootApplicationsT {
	if rcv == nil { return nil }
	t := &BootApplicationsT{}
	rcv.UnPackTo(t)
	return t
}

type BootApplications struct {
	_tab flatbuffers.Table
}

func GetRootAsBootApplications(buf []byte, offset flatbuffers.UOffsetT) *BootApplications {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BootApplications{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBootApplications(buf []byte, offset flatbuffers.UOffsetT) *BootApplications {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BootApplications{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BootApplications) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BootApplications) Table() flatbuffers.Table {
	return rcv._tab
}

/// Flag that determines if the boot application is availabel
func (rcv *BootApplications) IsAvailable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag that determines if the boot application is availabel
func (rcv *BootApplications) MutateIsAvailable(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// Array including every boot application by name and time
func (rcv *BootApplications) Applications(obj *BootAppInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *BootApplications) ApplicationsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array including every boot application by name and time
func BootApplicationsStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func BootApplicationsAddIsAvailable(builder *flatbuffers.Builder, isAvailable bool) {
	builder.PrependBoolSlot(0, isAvailable, false)
}
func BootApplicationsAddApplications(builder *flatbuffers.Builder, applications flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(applications), 0)
}
func BootApplicationsStartApplicationsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func BootApplicationsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
