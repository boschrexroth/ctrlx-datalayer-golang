// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AppMemoryAreaAccessT struct {
	Area *AppMemoryAreaT
	Offset uint64
	Number uint64
	Value *ValueT
}

func (t *AppMemoryAreaAccessT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	areaOffset := t.Area.Pack(builder)
	valueOffset := t.Value.Pack(builder)
	
	AppMemoryAreaAccessStart(builder)
	AppMemoryAreaAccessAddArea(builder, areaOffset)
	AppMemoryAreaAccessAddOffset(builder, t.Offset)
	AppMemoryAreaAccessAddNumber(builder, t.Number)
	if t.Value != nil {
		AppMemoryAreaAccessAddValueType(builder, t.Value.Type)
	}
	AppMemoryAreaAccessAddValue(builder, valueOffset)
	return AppMemoryAreaAccessEnd(builder)
}

func (rcv *AppMemoryAreaAccess) UnPackTo(t *AppMemoryAreaAccessT) {
	t.Area = rcv.Area(nil).UnPack()
	t.Offset = rcv.Offset()
	t.Number = rcv.Number()
	valueTable := flatbuffers.Table{}
	if rcv.Value(&valueTable) {
		t.Value = rcv.ValueType().UnPack(valueTable)
	}
}

func (rcv *AppMemoryAreaAccess) UnPack() *AppMemoryAreaAccessT {
	if rcv == nil { return nil }
	t := &AppMemoryAreaAccessT{}
	rcv.UnPackTo(t)
	return t
}

type AppMemoryAreaAccess struct {
	_tab flatbuffers.Table
}

func GetRootAsAppMemoryAreaAccess(buf []byte, offset flatbuffers.UOffsetT) *AppMemoryAreaAccess {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AppMemoryAreaAccess{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAppMemoryAreaAccess(buf []byte, offset flatbuffers.UOffsetT) *AppMemoryAreaAccess {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AppMemoryAreaAccess{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AppMemoryAreaAccess) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AppMemoryAreaAccess) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AppMemoryAreaAccess) Area(obj *AppMemoryArea) *AppMemoryArea {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AppMemoryArea)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *AppMemoryAreaAccess) Offset() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AppMemoryAreaAccess) MutateOffset(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *AppMemoryAreaAccess) Number() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *AppMemoryAreaAccess) MutateNumber(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *AppMemoryAreaAccess) ValueType() Value {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return Value(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AppMemoryAreaAccess) MutateValueType(n Value) bool {
	return rcv._tab.MutateByteSlot(10, byte(n))
}

func (rcv *AppMemoryAreaAccess) Value(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func AppMemoryAreaAccessStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AppMemoryAreaAccessAddArea(builder *flatbuffers.Builder, area flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(area), 0)
}
func AppMemoryAreaAccessAddOffset(builder *flatbuffers.Builder, offset uint64) {
	builder.PrependUint64Slot(1, offset, 0)
}
func AppMemoryAreaAccessAddNumber(builder *flatbuffers.Builder, number uint64) {
	builder.PrependUint64Slot(2, number, 1)
}
func AppMemoryAreaAccessAddValueType(builder *flatbuffers.Builder, valueType Value) {
	builder.PrependByteSlot(3, byte(valueType), 0)
}
func AppMemoryAreaAccessAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(value), 0)
}
func AppMemoryAreaAccessEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
