// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AppIdmUserInfoT struct {
	User string `json:"user"`
	Userhandles []uint64 `json:"userhandles"`
}

func (t *AppIdmUserInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	userOffset := flatbuffers.UOffsetT(0)
	if t.User != "" {
		userOffset = builder.CreateString(t.User)
	}
	userhandlesOffset := flatbuffers.UOffsetT(0)
	if t.Userhandles != nil {
		userhandlesLength := len(t.Userhandles)
		AppIdmUserInfoStartUserhandlesVector(builder, userhandlesLength)
		for j := userhandlesLength - 1; j >= 0; j-- {
			builder.PrependUint64(t.Userhandles[j])
		}
		userhandlesOffset = builder.EndVector(userhandlesLength)
	}
	AppIdmUserInfoStart(builder)
	AppIdmUserInfoAddUser(builder, userOffset)
	AppIdmUserInfoAddUserhandles(builder, userhandlesOffset)
	return AppIdmUserInfoEnd(builder)
}

func (rcv *AppIdmUserInfo) UnPackTo(t *AppIdmUserInfoT) {
	t.User = string(rcv.User())
	userhandlesLength := rcv.UserhandlesLength()
	t.Userhandles = make([]uint64, userhandlesLength)
	for j := 0; j < userhandlesLength; j++ {
		t.Userhandles[j] = rcv.Userhandles(j)
	}
}

func (rcv *AppIdmUserInfo) UnPack() *AppIdmUserInfoT {
	if rcv == nil { return nil }
	t := &AppIdmUserInfoT{}
	rcv.UnPackTo(t)
	return t
}

type AppIdmUserInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsAppIdmUserInfo(buf []byte, offset flatbuffers.UOffsetT) *AppIdmUserInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AppIdmUserInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAppIdmUserInfo(buf []byte, offset flatbuffers.UOffsetT) *AppIdmUserInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AppIdmUserInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AppIdmUserInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AppIdmUserInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AppIdmUserInfo) User() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AppIdmUserInfo) Userhandles(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *AppIdmUserInfo) UserhandlesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AppIdmUserInfo) MutateUserhandles(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func AppIdmUserInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AppIdmUserInfoAddUser(builder *flatbuffers.Builder, user flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(user), 0)
}
func AppIdmUserInfoAddUserhandles(builder *flatbuffers.Builder, userhandles flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(userhandles), 0)
}
func AppIdmUserInfoStartUserhandlesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func AppIdmUserInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
