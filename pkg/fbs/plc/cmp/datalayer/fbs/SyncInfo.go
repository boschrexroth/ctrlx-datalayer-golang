// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// This object describes the synchronization properties
type SyncInfoT struct {
	IsSynced bool `json:"IsSynced"`
	LastChange uint64 `json:"LastChange"`
	MachineName string `json:"MachineName"`
	UserName string `json:"UserName"`
	ProjectCompleteFilename string `json:"ProjectCompleteFilename"`
}

func (t *SyncInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	machineNameOffset := flatbuffers.UOffsetT(0)
	if t.MachineName != "" {
		machineNameOffset = builder.CreateString(t.MachineName)
	}
	userNameOffset := flatbuffers.UOffsetT(0)
	if t.UserName != "" {
		userNameOffset = builder.CreateString(t.UserName)
	}
	projectCompleteFilenameOffset := flatbuffers.UOffsetT(0)
	if t.ProjectCompleteFilename != "" {
		projectCompleteFilenameOffset = builder.CreateString(t.ProjectCompleteFilename)
	}
	SyncInfoStart(builder)
	SyncInfoAddIsSynced(builder, t.IsSynced)
	SyncInfoAddLastChange(builder, t.LastChange)
	SyncInfoAddMachineName(builder, machineNameOffset)
	SyncInfoAddUserName(builder, userNameOffset)
	SyncInfoAddProjectCompleteFilename(builder, projectCompleteFilenameOffset)
	return SyncInfoEnd(builder)
}

func (rcv *SyncInfo) UnPackTo(t *SyncInfoT) {
	t.IsSynced = rcv.IsSynced()
	t.LastChange = rcv.LastChange()
	t.MachineName = string(rcv.MachineName())
	t.UserName = string(rcv.UserName())
	t.ProjectCompleteFilename = string(rcv.ProjectCompleteFilename())
}

func (rcv *SyncInfo) UnPack() *SyncInfoT {
	if rcv == nil { return nil }
	t := &SyncInfoT{}
	rcv.UnPackTo(t)
	return t
}

type SyncInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsSyncInfo(buf []byte, offset flatbuffers.UOffsetT) *SyncInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SyncInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSyncInfo(buf []byte, offset flatbuffers.UOffsetT) *SyncInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SyncInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SyncInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SyncInfo) Table() flatbuffers.Table {
	return rcv._tab
}

/// Flag that determines if the synchronization is active
func (rcv *SyncInfo) IsSynced() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag that determines if the synchronization is active
func (rcv *SyncInfo) MutateIsSynced(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// Timestamp from the last time this application was changed
func (rcv *SyncInfo) LastChange() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// Timestamp from the last time this application was changed
func (rcv *SyncInfo) MutateLastChange(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

/// Name of the machine
func (rcv *SyncInfo) MachineName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the machine
/// Name of the user that uploaded the application
func (rcv *SyncInfo) UserName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the user that uploaded the application
/// Complete name including the path where the project was created
func (rcv *SyncInfo) ProjectCompleteFilename() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Complete name including the path where the project was created
func SyncInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func SyncInfoAddIsSynced(builder *flatbuffers.Builder, isSynced bool) {
	builder.PrependBoolSlot(0, isSynced, false)
}
func SyncInfoAddLastChange(builder *flatbuffers.Builder, lastChange uint64) {
	builder.PrependUint64Slot(1, lastChange, 0)
}
func SyncInfoAddMachineName(builder *flatbuffers.Builder, machineName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(machineName), 0)
}
func SyncInfoAddUserName(builder *flatbuffers.Builder, userName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(userName), 0)
}
func SyncInfoAddProjectCompleteFilename(builder *flatbuffers.Builder, projectCompleteFilename flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(projectCompleteFilename), 0)
}
func SyncInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
