// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AppTasksInfoT struct {
	Info []*AppTaskInfoT
}

func (t *AppTasksInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	infoOffset := flatbuffers.UOffsetT(0)
	if t.Info != nil {
		infoLength := len(t.Info)
		infoOffsets := make([]flatbuffers.UOffsetT, infoLength)
		for j := 0; j < infoLength; j++ {
			infoOffsets[j] = t.Info[j].Pack(builder)
		}
		AppTasksInfoStartInfoVector(builder, infoLength)
		for j := infoLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(infoOffsets[j])
		}
		infoOffset = builder.EndVector(infoLength)
	}
	AppTasksInfoStart(builder)
	AppTasksInfoAddInfo(builder, infoOffset)
	return AppTasksInfoEnd(builder)
}

func (rcv *AppTasksInfo) UnPackTo(t *AppTasksInfoT) {
	infoLength := rcv.InfoLength()
	t.Info = make([]*AppTaskInfoT, infoLength)
	for j := 0; j < infoLength; j++ {
		x := AppTaskInfo{}
		rcv.Info(&x, j)
		t.Info[j] = x.UnPack()
	}
}

func (rcv *AppTasksInfo) UnPack() *AppTasksInfoT {
	if rcv == nil { return nil }
	t := &AppTasksInfoT{}
	rcv.UnPackTo(t)
	return t
}

type AppTasksInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsAppTasksInfo(buf []byte, offset flatbuffers.UOffsetT) *AppTasksInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AppTasksInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAppTasksInfo(buf []byte, offset flatbuffers.UOffsetT) *AppTasksInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AppTasksInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AppTasksInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AppTasksInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AppTasksInfo) Info(obj *AppTaskInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AppTasksInfo) InfoLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func AppTasksInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AppTasksInfoAddInfo(builder *flatbuffers.Builder, info flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(info), 0)
}
func AppTasksInfoStartInfoVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AppTasksInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
