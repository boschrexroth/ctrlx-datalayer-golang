// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AppMemoryAreaT struct {
	Area Area
}

func (t *AppMemoryAreaT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AppMemoryAreaStart(builder)
	AppMemoryAreaAddArea(builder, t.Area)
	return AppMemoryAreaEnd(builder)
}

func (rcv *AppMemoryArea) UnPackTo(t *AppMemoryAreaT) {
	t.Area = rcv.Area()
}

func (rcv *AppMemoryArea) UnPack() *AppMemoryAreaT {
	if rcv == nil { return nil }
	t := &AppMemoryAreaT{}
	rcv.UnPackTo(t)
	return t
}

type AppMemoryArea struct {
	_tab flatbuffers.Table
}

func GetRootAsAppMemoryArea(buf []byte, offset flatbuffers.UOffsetT) *AppMemoryArea {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AppMemoryArea{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAppMemoryArea(buf []byte, offset flatbuffers.UOffsetT) *AppMemoryArea {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AppMemoryArea{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AppMemoryArea) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AppMemoryArea) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AppMemoryArea) Area() Area {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Area(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AppMemoryArea) MutateArea(n Area) bool {
	return rcv._tab.MutateUint32Slot(4, uint32(n))
}

func AppMemoryAreaStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AppMemoryAreaAddArea(builder *flatbuffers.Builder, area Area) {
	builder.PrependUint32Slot(0, uint32(area), 0)
}
func AppMemoryAreaEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
