// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Settings for the complete Taskgroup
type TaskGroupT struct {
	Name string `json:"name"`
	Option uint32 `json:"option"`
	Coreset uint32 `json:"coreset"`
}

func (t *TaskGroupT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	TaskGroupStart(builder)
	TaskGroupAddName(builder, nameOffset)
	TaskGroupAddOption(builder, t.Option)
	TaskGroupAddCoreset(builder, t.Coreset)
	return TaskGroupEnd(builder)
}

func (rcv *TaskGroup) UnPackTo(t *TaskGroupT) {
	t.Name = string(rcv.Name())
	t.Option = rcv.Option()
	t.Coreset = rcv.Coreset()
}

func (rcv *TaskGroup) UnPack() *TaskGroupT {
	if rcv == nil { return nil }
	t := &TaskGroupT{}
	rcv.UnPackTo(t)
	return t
}

type TaskGroup struct {
	_tab flatbuffers.Table
}

func GetRootAsTaskGroup(buf []byte, offset flatbuffers.UOffsetT) *TaskGroup {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TaskGroup{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTaskGroup(buf []byte, offset flatbuffers.UOffsetT) *TaskGroup {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TaskGroup{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TaskGroup) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TaskGroup) Table() flatbuffers.Table {
	return rcv._tab
}

/// Name of the taskgroup (not changable)
func (rcv *TaskGroup) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the taskgroup (not changable)
/// Optionflags for the taskgroup (not changable)
func (rcv *TaskGroup) Option() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Optionflags for the taskgroup (not changable)
func (rcv *TaskGroup) MutateOption(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

/// The task is running on this core (changable)
func (rcv *TaskGroup) Coreset() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The task is running on this core (changable)
func (rcv *TaskGroup) MutateCoreset(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func TaskGroupStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func TaskGroupAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func TaskGroupAddOption(builder *flatbuffers.Builder, option uint32) {
	builder.PrependUint32Slot(1, option, 0)
}
func TaskGroupAddCoreset(builder *flatbuffers.Builder, coreset uint32) {
	builder.PrependUint32Slot(2, coreset, 0)
}
func TaskGroupEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
