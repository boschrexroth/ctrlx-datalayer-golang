// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AppResetT struct {
	Reset Reset `json:"reset"`
}

func (t *AppResetT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AppResetStart(builder)
	AppResetAddReset(builder, t.Reset)
	return AppResetEnd(builder)
}

func (rcv *AppReset) UnPackTo(t *AppResetT) {
	t.Reset = rcv.Reset()
}

func (rcv *AppReset) UnPack() *AppResetT {
	if rcv == nil { return nil }
	t := &AppResetT{}
	rcv.UnPackTo(t)
	return t
}

type AppReset struct {
	_tab flatbuffers.Table
}

func GetRootAsAppReset(buf []byte, offset flatbuffers.UOffsetT) *AppReset {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AppReset{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAppReset(buf []byte, offset flatbuffers.UOffsetT) *AppReset {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AppReset{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AppReset) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AppReset) Table() flatbuffers.Table {
	return rcv._tab
}

/// reset, default 0 = warm reset
func (rcv *AppReset) Reset() Reset {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Reset(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

/// reset, default 0 = warm reset
func (rcv *AppReset) MutateReset(n Reset) bool {
	return rcv._tab.MutateUint32Slot(4, uint32(n))
}

func AppResetStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AppResetAddReset(builder *flatbuffers.Builder, reset Reset) {
	builder.PrependUint32Slot(0, uint32(reset), 0)
}
func AppResetEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
