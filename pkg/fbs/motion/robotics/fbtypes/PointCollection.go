// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PointCollectionT struct {
	Points []*PointT `json:"points"`
}

func (t *PointCollectionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	pointsOffset := flatbuffers.UOffsetT(0)
	if t.Points != nil {
		pointsLength := len(t.Points)
		pointsOffsets := make([]flatbuffers.UOffsetT, pointsLength)
		for j := 0; j < pointsLength; j++ {
			pointsOffsets[j] = t.Points[j].Pack(builder)
		}
		PointCollectionStartPointsVector(builder, pointsLength)
		for j := pointsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(pointsOffsets[j])
		}
		pointsOffset = builder.EndVector(pointsLength)
	}
	PointCollectionStart(builder)
	PointCollectionAddPoints(builder, pointsOffset)
	return PointCollectionEnd(builder)
}

func (rcv *PointCollection) UnPackTo(t *PointCollectionT) {
	pointsLength := rcv.PointsLength()
	t.Points = make([]*PointT, pointsLength)
	for j := 0; j < pointsLength; j++ {
		x := Point{}
		rcv.Points(&x, j)
		t.Points[j] = x.UnPack()
	}
}

func (rcv *PointCollection) UnPack() *PointCollectionT {
	if rcv == nil { return nil }
	t := &PointCollectionT{}
	rcv.UnPackTo(t)
	return t
}

type PointCollection struct {
	_tab flatbuffers.Table
}

func GetRootAsPointCollection(buf []byte, offset flatbuffers.UOffsetT) *PointCollection {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PointCollection{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPointCollection(buf []byte, offset flatbuffers.UOffsetT) *PointCollection {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PointCollection{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PointCollection) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PointCollection) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PointCollection) Points(obj *Point, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *PointCollection) PointsByKey(obj *Point, key string) bool{
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *PointCollection) PointsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func PointCollectionStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func PointCollectionAddPoints(builder *flatbuffers.Builder, points flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(points), 0)
}
func PointCollectionStartPointsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PointCollectionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
