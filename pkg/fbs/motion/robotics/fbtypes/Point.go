// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	"bytes"
	flatbuffers "github.com/google/flatbuffers/go"
)

type PointT struct {
	Name string `json:"name"`
	Position *PositionT `json:"position"`
	ReferenceSystem ReferenceSystem `json:"referenceSystem"`
	Description string `json:"description"`
	UiData string `json:"uiData"`
}

func (t *PointT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	positionOffset := t.Position.Pack(builder)
	descriptionOffset := flatbuffers.UOffsetT(0)
	if t.Description != "" {
		descriptionOffset = builder.CreateString(t.Description)
	}
	uiDataOffset := flatbuffers.UOffsetT(0)
	if t.UiData != "" {
		uiDataOffset = builder.CreateString(t.UiData)
	}
	PointStart(builder)
	PointAddName(builder, nameOffset)
	PointAddPosition(builder, positionOffset)
	PointAddReferenceSystem(builder, t.ReferenceSystem)
	PointAddDescription(builder, descriptionOffset)
	PointAddUiData(builder, uiDataOffset)
	return PointEnd(builder)
}

func (rcv *Point) UnPackTo(t *PointT) {
	t.Name = string(rcv.Name())
	t.Position = rcv.Position(nil).UnPack()
	t.ReferenceSystem = rcv.ReferenceSystem()
	t.Description = string(rcv.Description())
	t.UiData = string(rcv.UiData())
}

func (rcv *Point) UnPack() *PointT {
	if rcv == nil { return nil }
	t := &PointT{}
	rcv.UnPackTo(t)
	return t
}

type Point struct {
	_tab flatbuffers.Table
}

func GetRootAsPoint(buf []byte, offset flatbuffers.UOffsetT) *Point {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Point{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPoint(buf []byte, offset flatbuffers.UOffsetT) *Point {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Point{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Point) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Point) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Point) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PointKeyCompare(o1, o2 flatbuffers.UOffsetT, buf []byte) bool {
	obj1 := &Point{}
	obj2 := &Point{}
	obj1.Init(buf, flatbuffers.UOffsetT(len(buf)) - o1)
	obj2.Init(buf, flatbuffers.UOffsetT(len(buf)) - o2)
	return string(obj1.Name()) < string(obj2.Name())
}

func (rcv *Point) LookupByKey(key string, vectorLocation flatbuffers.UOffsetT, buf []byte) bool {
	span := flatbuffers.GetUOffsetT(buf[vectorLocation - 4:])
	start := flatbuffers.UOffsetT(0)
	bKey := []byte(key)
	for span != 0 {
		middle := span / 2
		tableOffset := flatbuffers.GetIndirectOffset(buf, vectorLocation+ 4 * (start + middle))
		obj := &Point{}
		obj.Init(buf, tableOffset)
		comp := bytes.Compare(obj.Name(), bKey)
		if comp > 0 {
			span = middle
		} else if comp < 0 {
			middle += 1
			start += middle
			span -= middle
		} else {
			rcv.Init(buf, tableOffset)
			return true
		}
	}
	return false
}

func (rcv *Point) Position(obj *Position) *Position {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Position)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Point) ReferenceSystem() ReferenceSystem {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ReferenceSystem(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Point) MutateReferenceSystem(n ReferenceSystem) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *Point) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Point) UiData() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PointStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func PointAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func PointAddPosition(builder *flatbuffers.Builder, position flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(position), 0)
}
func PointAddReferenceSystem(builder *flatbuffers.Builder, referenceSystem ReferenceSystem) {
	builder.PrependByteSlot(2, byte(referenceSystem), 0)
}
func PointAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(description), 0)
}
func PointAddUiData(builder *flatbuffers.Builder, uiData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(uiData), 0)
}
func PointEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
