// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"

	motion__core__fbtypes "github.com/boschrexroth/ctrlx-datalayer-golang/pkg/fbs/motion/core/fbtypes"
)

/// just for test of additional bundle (motion extension API)
type KinCmdCircularDataT struct {
	CmdPos []float64 `json:"cmdPos"`
	CenterPos []float64 `json:"centerPos"`
	Direction bool `json:"direction"`
	Limits *motion__core__fbtypes.DynamicLimitsT `json:"limits"`
}

func (t *KinCmdCircularDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	cmdPosOffset := flatbuffers.UOffsetT(0)
	if t.CmdPos != nil {
		cmdPosLength := len(t.CmdPos)
		KinCmdCircularDataStartCmdPosVector(builder, cmdPosLength)
		for j := cmdPosLength - 1; j >= 0; j-- {
			builder.PrependFloat64(t.CmdPos[j])
		}
		cmdPosOffset = builder.EndVector(cmdPosLength)
	}
	centerPosOffset := flatbuffers.UOffsetT(0)
	if t.CenterPos != nil {
		centerPosLength := len(t.CenterPos)
		KinCmdCircularDataStartCenterPosVector(builder, centerPosLength)
		for j := centerPosLength - 1; j >= 0; j-- {
			builder.PrependFloat64(t.CenterPos[j])
		}
		centerPosOffset = builder.EndVector(centerPosLength)
	}
	limitsOffset := t.Limits.Pack(builder)
	KinCmdCircularDataStart(builder)
	KinCmdCircularDataAddCmdPos(builder, cmdPosOffset)
	KinCmdCircularDataAddCenterPos(builder, centerPosOffset)
	KinCmdCircularDataAddDirection(builder, t.Direction)
	KinCmdCircularDataAddLimits(builder, limitsOffset)
	return KinCmdCircularDataEnd(builder)
}

func (rcv *KinCmdCircularData) UnPackTo(t *KinCmdCircularDataT) {
	cmdPosLength := rcv.CmdPosLength()
	t.CmdPos = make([]float64, cmdPosLength)
	for j := 0; j < cmdPosLength; j++ {
		t.CmdPos[j] = rcv.CmdPos(j)
	}
	centerPosLength := rcv.CenterPosLength()
	t.CenterPos = make([]float64, centerPosLength)
	for j := 0; j < centerPosLength; j++ {
		t.CenterPos[j] = rcv.CenterPos(j)
	}
	t.Direction = rcv.Direction()
	t.Limits = rcv.Limits(nil).UnPack()
}

func (rcv *KinCmdCircularData) UnPack() *KinCmdCircularDataT {
	if rcv == nil { return nil }
	t := &KinCmdCircularDataT{}
	rcv.UnPackTo(t)
	return t
}

type KinCmdCircularData struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCmdCircularData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdCircularData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCmdCircularData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCmdCircularData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdCircularData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCmdCircularData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCmdCircularData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCmdCircularData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *KinCmdCircularData) CmdPos(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *KinCmdCircularData) CmdPosLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *KinCmdCircularData) MutateCmdPos(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *KinCmdCircularData) CenterPos(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *KinCmdCircularData) CenterPosLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *KinCmdCircularData) MutateCenterPos(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *KinCmdCircularData) Direction() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *KinCmdCircularData) MutateDirection(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *KinCmdCircularData) Limits(obj *motion__core__fbtypes.DynamicLimits) *motion__core__fbtypes.DynamicLimits {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(motion__core__fbtypes.DynamicLimits)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func KinCmdCircularDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func KinCmdCircularDataAddCmdPos(builder *flatbuffers.Builder, cmdPos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(cmdPos), 0)
}
func KinCmdCircularDataStartCmdPosVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func KinCmdCircularDataAddCenterPos(builder *flatbuffers.Builder, centerPos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(centerPos), 0)
}
func KinCmdCircularDataStartCenterPosVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func KinCmdCircularDataAddDirection(builder *flatbuffers.Builder, direction bool) {
	builder.PrependBoolSlot(2, direction, false)
}
func KinCmdCircularDataAddLimits(builder *flatbuffers.Builder, limits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(limits), 0)
}
func KinCmdCircularDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
