// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of all point tables for the whole motion system
type SysCfgAllPointTablesT struct {
	Tables []*SysCfgSinglePointTableT `json:"tables"`
}

func (t *SysCfgAllPointTablesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	tablesOffset := flatbuffers.UOffsetT(0)
	if t.Tables != nil {
		tablesLength := len(t.Tables)
		tablesOffsets := make([]flatbuffers.UOffsetT, tablesLength)
		for j := 0; j < tablesLength; j++ {
			tablesOffsets[j] = t.Tables[j].Pack(builder)
		}
		SysCfgAllPointTablesStartTablesVector(builder, tablesLength)
		for j := tablesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(tablesOffsets[j])
		}
		tablesOffset = builder.EndVector(tablesLength)
	}
	SysCfgAllPointTablesStart(builder)
	SysCfgAllPointTablesAddTables(builder, tablesOffset)
	return SysCfgAllPointTablesEnd(builder)
}

func (rcv *SysCfgAllPointTables) UnPackTo(t *SysCfgAllPointTablesT) {
	tablesLength := rcv.TablesLength()
	t.Tables = make([]*SysCfgSinglePointTableT, tablesLength)
	for j := 0; j < tablesLength; j++ {
		x := SysCfgSinglePointTable{}
		rcv.Tables(&x, j)
		t.Tables[j] = x.UnPack()
	}
}

func (rcv *SysCfgAllPointTables) UnPack() *SysCfgAllPointTablesT {
	if rcv == nil { return nil }
	t := &SysCfgAllPointTablesT{}
	rcv.UnPackTo(t)
	return t
}

type SysCfgAllPointTables struct {
	_tab flatbuffers.Table
}

func GetRootAsSysCfgAllPointTables(buf []byte, offset flatbuffers.UOffsetT) *SysCfgAllPointTables {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SysCfgAllPointTables{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSysCfgAllPointTables(buf []byte, offset flatbuffers.UOffsetT) *SysCfgAllPointTables {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SysCfgAllPointTables{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SysCfgAllPointTables) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SysCfgAllPointTables) Table() flatbuffers.Table {
	return rcv._tab
}

/// vector of all configured point tables
func (rcv *SysCfgAllPointTables) Tables(obj *SysCfgSinglePointTable, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SysCfgAllPointTables) TablesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of all configured point tables
func SysCfgAllPointTablesStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func SysCfgAllPointTablesAddTables(builder *flatbuffers.Builder, tables flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(tables), 0)
}
func SysCfgAllPointTablesStartTablesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SysCfgAllPointTablesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
