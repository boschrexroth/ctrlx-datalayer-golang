// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of all cam tables for the whole motion system
type SysCfgAllCamsT struct {
	Cam []*SysCfgSingleCamT
}

func (t *SysCfgAllCamsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	camOffset := flatbuffers.UOffsetT(0)
	if t.Cam != nil {
		camLength := len(t.Cam)
		camOffsets := make([]flatbuffers.UOffsetT, camLength)
		for j := 0; j < camLength; j++ {
			camOffsets[j] = t.Cam[j].Pack(builder)
		}
		SysCfgAllCamsStartCamVector(builder, camLength)
		for j := camLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(camOffsets[j])
		}
		camOffset = builder.EndVector(camLength)
	}
	SysCfgAllCamsStart(builder)
	SysCfgAllCamsAddCam(builder, camOffset)
	return SysCfgAllCamsEnd(builder)
}

func (rcv *SysCfgAllCams) UnPackTo(t *SysCfgAllCamsT) {
	camLength := rcv.CamLength()
	t.Cam = make([]*SysCfgSingleCamT, camLength)
	for j := 0; j < camLength; j++ {
		x := SysCfgSingleCam{}
		rcv.Cam(&x, j)
		t.Cam[j] = x.UnPack()
	}
}

func (rcv *SysCfgAllCams) UnPack() *SysCfgAllCamsT {
	if rcv == nil { return nil }
	t := &SysCfgAllCamsT{}
	rcv.UnPackTo(t)
	return t
}

type SysCfgAllCams struct {
	_tab flatbuffers.Table
}

func GetRootAsSysCfgAllCams(buf []byte, offset flatbuffers.UOffsetT) *SysCfgAllCams {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SysCfgAllCams{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSysCfgAllCams(buf []byte, offset flatbuffers.UOffsetT) *SysCfgAllCams {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SysCfgAllCams{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SysCfgAllCams) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SysCfgAllCams) Table() flatbuffers.Table {
	return rcv._tab
}

/// vector of all configured cam tables
func (rcv *SysCfgAllCams) Cam(obj *SysCfgSingleCam, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SysCfgAllCams) CamLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of all configured cam tables
func SysCfgAllCamsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func SysCfgAllCamsAddCam(builder *flatbuffers.Builder, cam flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(cam), 0)
}
func SysCfgAllCamsStartCamVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SysCfgAllCamsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
