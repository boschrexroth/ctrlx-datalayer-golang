// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of all calculation pipelines
type AxsCfgCalcPipelineAllT struct {
	Pipelines []*AxsCfgCalcPipelineT `json:"pipelines"`
}

func (t *AxsCfgCalcPipelineAllT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	pipelinesOffset := flatbuffers.UOffsetT(0)
	if t.Pipelines != nil {
		pipelinesLength := len(t.Pipelines)
		pipelinesOffsets := make([]flatbuffers.UOffsetT, pipelinesLength)
		for j := 0; j < pipelinesLength; j++ {
			pipelinesOffsets[j] = t.Pipelines[j].Pack(builder)
		}
		AxsCfgCalcPipelineAllStartPipelinesVector(builder, pipelinesLength)
		for j := pipelinesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(pipelinesOffsets[j])
		}
		pipelinesOffset = builder.EndVector(pipelinesLength)
	}
	AxsCfgCalcPipelineAllStart(builder)
	AxsCfgCalcPipelineAllAddPipelines(builder, pipelinesOffset)
	return AxsCfgCalcPipelineAllEnd(builder)
}

func (rcv *AxsCfgCalcPipelineAll) UnPackTo(t *AxsCfgCalcPipelineAllT) {
	pipelinesLength := rcv.PipelinesLength()
	t.Pipelines = make([]*AxsCfgCalcPipelineT, pipelinesLength)
	for j := 0; j < pipelinesLength; j++ {
		x := AxsCfgCalcPipeline{}
		rcv.Pipelines(&x, j)
		t.Pipelines[j] = x.UnPack()
	}
}

func (rcv *AxsCfgCalcPipelineAll) UnPack() *AxsCfgCalcPipelineAllT {
	if rcv == nil { return nil }
	t := &AxsCfgCalcPipelineAllT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgCalcPipelineAll struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgCalcPipelineAll(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgCalcPipelineAll {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgCalcPipelineAll{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgCalcPipelineAll(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgCalcPipelineAll {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgCalcPipelineAll{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgCalcPipelineAll) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgCalcPipelineAll) Table() flatbuffers.Table {
	return rcv._tab
}

/// vector of all pipelines
func (rcv *AxsCfgCalcPipelineAll) Pipelines(obj *AxsCfgCalcPipeline, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AxsCfgCalcPipelineAll) PipelinesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of all pipelines
func AxsCfgCalcPipelineAllStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AxsCfgCalcPipelineAllAddPipelines(builder *flatbuffers.Builder, pipelines flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(pipelines), 0)
}
func AxsCfgCalcPipelineAllStartPipelinesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AxsCfgCalcPipelineAllEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
