// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// current state of a single calculation pipeline of a single axis
type AxsStateCalcSinglePipelineT struct {
	Name string
	State PipelineState
	Validation []*PipelineValidationT
	IsBuiltIn bool
	Steps []*AxsStateCalcSingleStepT
}

func (t *AxsStateCalcSinglePipelineT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	validationOffset := flatbuffers.UOffsetT(0)
	if t.Validation != nil {
		validationLength := len(t.Validation)
		validationOffsets := make([]flatbuffers.UOffsetT, validationLength)
		for j := 0; j < validationLength; j++ {
			validationOffsets[j] = t.Validation[j].Pack(builder)
		}
		AxsStateCalcSinglePipelineStartValidationVector(builder, validationLength)
		for j := validationLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(validationOffsets[j])
		}
		validationOffset = builder.EndVector(validationLength)
	}
	stepsOffset := flatbuffers.UOffsetT(0)
	if t.Steps != nil {
		stepsLength := len(t.Steps)
		stepsOffsets := make([]flatbuffers.UOffsetT, stepsLength)
		for j := 0; j < stepsLength; j++ {
			stepsOffsets[j] = t.Steps[j].Pack(builder)
		}
		AxsStateCalcSinglePipelineStartStepsVector(builder, stepsLength)
		for j := stepsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(stepsOffsets[j])
		}
		stepsOffset = builder.EndVector(stepsLength)
	}
	AxsStateCalcSinglePipelineStart(builder)
	AxsStateCalcSinglePipelineAddName(builder, nameOffset)
	AxsStateCalcSinglePipelineAddState(builder, t.State)
	AxsStateCalcSinglePipelineAddValidation(builder, validationOffset)
	AxsStateCalcSinglePipelineAddIsBuiltIn(builder, t.IsBuiltIn)
	AxsStateCalcSinglePipelineAddSteps(builder, stepsOffset)
	return AxsStateCalcSinglePipelineEnd(builder)
}

func (rcv *AxsStateCalcSinglePipeline) UnPackTo(t *AxsStateCalcSinglePipelineT) {
	t.Name = string(rcv.Name())
	t.State = rcv.State()
	validationLength := rcv.ValidationLength()
	t.Validation = make([]*PipelineValidationT, validationLength)
	for j := 0; j < validationLength; j++ {
		x := PipelineValidation{}
		rcv.Validation(&x, j)
		t.Validation[j] = x.UnPack()
	}
	t.IsBuiltIn = rcv.IsBuiltIn()
	stepsLength := rcv.StepsLength()
	t.Steps = make([]*AxsStateCalcSingleStepT, stepsLength)
	for j := 0; j < stepsLength; j++ {
		x := AxsStateCalcSingleStep{}
		rcv.Steps(&x, j)
		t.Steps[j] = x.UnPack()
	}
}

func (rcv *AxsStateCalcSinglePipeline) UnPack() *AxsStateCalcSinglePipelineT {
	if rcv == nil { return nil }
	t := &AxsStateCalcSinglePipelineT{}
	rcv.UnPackTo(t)
	return t
}

type AxsStateCalcSinglePipeline struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsStateCalcSinglePipeline(buf []byte, offset flatbuffers.UOffsetT) *AxsStateCalcSinglePipeline {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsStateCalcSinglePipeline{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsStateCalcSinglePipeline(buf []byte, offset flatbuffers.UOffsetT) *AxsStateCalcSinglePipeline {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsStateCalcSinglePipeline{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsStateCalcSinglePipeline) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsStateCalcSinglePipeline) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the calculation pipeline
func (rcv *AxsStateCalcSinglePipeline) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the calculation pipeline
/// state of the calculation pipeline
func (rcv *AxsStateCalcSinglePipeline) State() PipelineState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return PipelineState(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

/// state of the calculation pipeline
func (rcv *AxsStateCalcSinglePipeline) MutateState(n PipelineState) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

/// validation on the calculation pipeline (multiple errors can occur)
func (rcv *AxsStateCalcSinglePipeline) Validation(obj *PipelineValidation, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AxsStateCalcSinglePipeline) ValidationLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// validation on the calculation pipeline (multiple errors can occur)
/// if the pipeline is a built-in pipeline (which is read-only)
func (rcv *AxsStateCalcSinglePipeline) IsBuiltIn() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// if the pipeline is a built-in pipeline (which is read-only)
func (rcv *AxsStateCalcSinglePipeline) MutateIsBuiltIn(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

/// all calculation steps of the calculation pipeline
func (rcv *AxsStateCalcSinglePipeline) Steps(obj *AxsStateCalcSingleStep, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AxsStateCalcSinglePipeline) StepsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// all calculation steps of the calculation pipeline
func AxsStateCalcSinglePipelineStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AxsStateCalcSinglePipelineAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func AxsStateCalcSinglePipelineAddState(builder *flatbuffers.Builder, state PipelineState) {
	builder.PrependInt32Slot(1, int32(state), 0)
}
func AxsStateCalcSinglePipelineAddValidation(builder *flatbuffers.Builder, validation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(validation), 0)
}
func AxsStateCalcSinglePipelineStartValidationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AxsStateCalcSinglePipelineAddIsBuiltIn(builder *flatbuffers.Builder, isBuiltIn bool) {
	builder.PrependBoolSlot(3, isBuiltIn, false)
}
func AxsStateCalcSinglePipelineAddSteps(builder *flatbuffers.Builder, steps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(steps), 0)
}
func AxsStateCalcSinglePipelineStartStepsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AxsStateCalcSinglePipelineEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
