// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// current state of a single calculation pipeline of a single axis
type AxsStateCalcSinglePipelineT struct {
	Name string
	State PipelineState
	Validation *PipelineValidationT
	IsBuiltIn bool
	DryRunResult string
	Steps *AxsStateCalcStepsT
}

func (t *AxsStateCalcSinglePipelineT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	validationOffset := t.Validation.Pack(builder)
	dryRunResultOffset := builder.CreateString(t.DryRunResult)
	stepsOffset := t.Steps.Pack(builder)
	AxsStateCalcSinglePipelineStart(builder)
	AxsStateCalcSinglePipelineAddName(builder, nameOffset)
	AxsStateCalcSinglePipelineAddState(builder, t.State)
	AxsStateCalcSinglePipelineAddValidation(builder, validationOffset)
	AxsStateCalcSinglePipelineAddIsBuiltIn(builder, t.IsBuiltIn)
	AxsStateCalcSinglePipelineAddDryRunResult(builder, dryRunResultOffset)
	AxsStateCalcSinglePipelineAddSteps(builder, stepsOffset)
	return AxsStateCalcSinglePipelineEnd(builder)
}

func (rcv *AxsStateCalcSinglePipeline) UnPackTo(t *AxsStateCalcSinglePipelineT) {
	t.Name = string(rcv.Name())
	t.State = rcv.State()
	t.Validation = rcv.Validation(nil).UnPack()
	t.IsBuiltIn = rcv.IsBuiltIn()
	t.DryRunResult = string(rcv.DryRunResult())
	t.Steps = rcv.Steps(nil).UnPack()
}

func (rcv *AxsStateCalcSinglePipeline) UnPack() *AxsStateCalcSinglePipelineT {
	if rcv == nil { return nil }
	t := &AxsStateCalcSinglePipelineT{}
	rcv.UnPackTo(t)
	return t
}

type AxsStateCalcSinglePipeline struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsStateCalcSinglePipeline(buf []byte, offset flatbuffers.UOffsetT) *AxsStateCalcSinglePipeline {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsStateCalcSinglePipeline{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsStateCalcSinglePipeline(buf []byte, offset flatbuffers.UOffsetT) *AxsStateCalcSinglePipeline {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsStateCalcSinglePipeline{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsStateCalcSinglePipeline) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsStateCalcSinglePipeline) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the calculation pipeline
func (rcv *AxsStateCalcSinglePipeline) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the calculation pipeline
/// state of the calculation pipeline
func (rcv *AxsStateCalcSinglePipeline) State() PipelineState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return PipelineState(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

/// state of the calculation pipeline
func (rcv *AxsStateCalcSinglePipeline) MutateState(n PipelineState) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

/// validation on the calculation pipeline (multiple errors can occur)
func (rcv *AxsStateCalcSinglePipeline) Validation(obj *PipelineValidation) *PipelineValidation {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(PipelineValidation)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// validation on the calculation pipeline (multiple errors can occur)
/// if the pipeline is a built-in pipeline (which is read-only)
func (rcv *AxsStateCalcSinglePipeline) IsBuiltIn() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// if the pipeline is a built-in pipeline (which is read-only)
func (rcv *AxsStateCalcSinglePipeline) MutateIsBuiltIn(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

/// result obtained after running calculation pipeline
func (rcv *AxsStateCalcSinglePipeline) DryRunResult() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// result obtained after running calculation pipeline
/// all calculation steps of the calculation pipeline
func (rcv *AxsStateCalcSinglePipeline) Steps(obj *AxsStateCalcSteps) *AxsStateCalcSteps {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsStateCalcSteps)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// all calculation steps of the calculation pipeline
func AxsStateCalcSinglePipelineStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func AxsStateCalcSinglePipelineAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func AxsStateCalcSinglePipelineAddState(builder *flatbuffers.Builder, state PipelineState) {
	builder.PrependInt32Slot(1, int32(state), 0)
}
func AxsStateCalcSinglePipelineAddValidation(builder *flatbuffers.Builder, validation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(validation), 0)
}
func AxsStateCalcSinglePipelineAddIsBuiltIn(builder *flatbuffers.Builder, isBuiltIn bool) {
	builder.PrependBoolSlot(3, isBuiltIn, false)
}
func AxsStateCalcSinglePipelineAddDryRunResult(builder *flatbuffers.Builder, dryRunResult flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(dryRunResult), 0)
}
func AxsStateCalcSinglePipelineAddSteps(builder *flatbuffers.Builder, steps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(steps), 0)
}
func AxsStateCalcSinglePipelineEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
