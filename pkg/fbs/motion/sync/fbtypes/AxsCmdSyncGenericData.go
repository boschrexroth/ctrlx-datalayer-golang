// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of the axis command for generic synchronized motion
type AxsCmdSyncGenericDataT struct {
	Master string `json:"master"`
	Pipeline string `json:"pipeline"`
	SyncSource SyncSource `json:"syncSource"`
	Buffered bool `json:"buffered"`
}

func (t *AxsCmdSyncGenericDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	masterOffset := flatbuffers.UOffsetT(0)
	if t.Master != "" {
		masterOffset = builder.CreateString(t.Master)
	}
	pipelineOffset := flatbuffers.UOffsetT(0)
	if t.Pipeline != "" {
		pipelineOffset = builder.CreateString(t.Pipeline)
	}
	AxsCmdSyncGenericDataStart(builder)
	AxsCmdSyncGenericDataAddMaster(builder, masterOffset)
	AxsCmdSyncGenericDataAddPipeline(builder, pipelineOffset)
	AxsCmdSyncGenericDataAddSyncSource(builder, t.SyncSource)
	AxsCmdSyncGenericDataAddBuffered(builder, t.Buffered)
	return AxsCmdSyncGenericDataEnd(builder)
}

func (rcv *AxsCmdSyncGenericData) UnPackTo(t *AxsCmdSyncGenericDataT) {
	t.Master = string(rcv.Master())
	t.Pipeline = string(rcv.Pipeline())
	t.SyncSource = rcv.SyncSource()
	t.Buffered = rcv.Buffered()
}

func (rcv *AxsCmdSyncGenericData) UnPack() *AxsCmdSyncGenericDataT {
	if rcv == nil { return nil }
	t := &AxsCmdSyncGenericDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdSyncGenericData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdSyncGenericData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdSyncGenericData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdSyncGenericData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdSyncGenericData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdSyncGenericData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdSyncGenericData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdSyncGenericData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdSyncGenericData) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the master axis
func (rcv *AxsCmdSyncGenericData) Master() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the master axis
/// name of the pipeline
func (rcv *AxsCmdSyncGenericData) Pipeline() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the pipeline
/// Sync source
func (rcv *AxsCmdSyncGenericData) SyncSource() SyncSource {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return SyncSource(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Sync source
func (rcv *AxsCmdSyncGenericData) MutateSyncSource(n SyncSource) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

/// should this be a buffered command?
func (rcv *AxsCmdSyncGenericData) Buffered() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// should this be a buffered command?
func (rcv *AxsCmdSyncGenericData) MutateBuffered(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func AxsCmdSyncGenericDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func AxsCmdSyncGenericDataAddMaster(builder *flatbuffers.Builder, master flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(master), 0)
}
func AxsCmdSyncGenericDataAddPipeline(builder *flatbuffers.Builder, pipeline flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(pipeline), 0)
}
func AxsCmdSyncGenericDataAddSyncSource(builder *flatbuffers.Builder, syncSource SyncSource) {
	builder.PrependInt8Slot(2, int8(syncSource), 0)
}
func AxsCmdSyncGenericDataAddBuffered(builder *flatbuffers.Builder, buffered bool) {
	builder.PrependBoolSlot(3, buffered, false)
}
func AxsCmdSyncGenericDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
