// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StateCalcStepMutexParamT struct {
	MutexParam []*MutexGroupPart2T
}

func (t *StateCalcStepMutexParamT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	mutexParamOffset := flatbuffers.UOffsetT(0)
	if t.MutexParam != nil {
		mutexParamLength := len(t.MutexParam)
		mutexParamOffsets := make([]flatbuffers.UOffsetT, mutexParamLength)
		for j := 0; j < mutexParamLength; j++ {
			mutexParamOffsets[j] = t.MutexParam[j].Pack(builder)
		}
		StateCalcStepMutexParamStartMutexParamVector(builder, mutexParamLength)
		for j := mutexParamLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(mutexParamOffsets[j])
		}
		mutexParamOffset = builder.EndVector(mutexParamLength)
	}
	StateCalcStepMutexParamStart(builder)
	StateCalcStepMutexParamAddMutexParam(builder, mutexParamOffset)
	return StateCalcStepMutexParamEnd(builder)
}

func (rcv *StateCalcStepMutexParam) UnPackTo(t *StateCalcStepMutexParamT) {
	mutexParamLength := rcv.MutexParamLength()
	t.MutexParam = make([]*MutexGroupPart2T, mutexParamLength)
	for j := 0; j < mutexParamLength; j++ {
		x := MutexGroupPart2{}
		rcv.MutexParam(&x, j)
		t.MutexParam[j] = x.UnPack()
	}
}

func (rcv *StateCalcStepMutexParam) UnPack() *StateCalcStepMutexParamT {
	if rcv == nil { return nil }
	t := &StateCalcStepMutexParamT{}
	rcv.UnPackTo(t)
	return t
}

type StateCalcStepMutexParam struct {
	_tab flatbuffers.Table
}

func GetRootAsStateCalcStepMutexParam(buf []byte, offset flatbuffers.UOffsetT) *StateCalcStepMutexParam {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StateCalcStepMutexParam{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStateCalcStepMutexParam(buf []byte, offset flatbuffers.UOffsetT) *StateCalcStepMutexParam {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StateCalcStepMutexParam{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *StateCalcStepMutexParam) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StateCalcStepMutexParam) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StateCalcStepMutexParam) MutexParam(obj *MutexGroupPart2, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *StateCalcStepMutexParam) MutexParamLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func StateCalcStepMutexParamStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func StateCalcStepMutexParamAddMutexParam(builder *flatbuffers.Builder, mutexParam flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(mutexParam), 0)
}
func StateCalcStepMutexParamStartMutexParamVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StateCalcStepMutexParamEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
