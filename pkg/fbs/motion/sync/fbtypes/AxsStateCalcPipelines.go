// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// all configured calculation pipelines of a single axis
type AxsStateCalcPipelinesT struct {
	Pipeline []*AxsStateCalcSinglePipelineT
}

func (t *AxsStateCalcPipelinesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	pipelineOffset := flatbuffers.UOffsetT(0)
	if t.Pipeline != nil {
		pipelineLength := len(t.Pipeline)
		pipelineOffsets := make([]flatbuffers.UOffsetT, pipelineLength)
		for j := 0; j < pipelineLength; j++ {
			pipelineOffsets[j] = t.Pipeline[j].Pack(builder)
		}
		AxsStateCalcPipelinesStartPipelineVector(builder, pipelineLength)
		for j := pipelineLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(pipelineOffsets[j])
		}
		pipelineOffset = builder.EndVector(pipelineLength)
	}
	AxsStateCalcPipelinesStart(builder)
	AxsStateCalcPipelinesAddPipeline(builder, pipelineOffset)
	return AxsStateCalcPipelinesEnd(builder)
}

func (rcv *AxsStateCalcPipelines) UnPackTo(t *AxsStateCalcPipelinesT) {
	pipelineLength := rcv.PipelineLength()
	t.Pipeline = make([]*AxsStateCalcSinglePipelineT, pipelineLength)
	for j := 0; j < pipelineLength; j++ {
		x := AxsStateCalcSinglePipeline{}
		rcv.Pipeline(&x, j)
		t.Pipeline[j] = x.UnPack()
	}
}

func (rcv *AxsStateCalcPipelines) UnPack() *AxsStateCalcPipelinesT {
	if rcv == nil { return nil }
	t := &AxsStateCalcPipelinesT{}
	rcv.UnPackTo(t)
	return t
}

type AxsStateCalcPipelines struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsStateCalcPipelines(buf []byte, offset flatbuffers.UOffsetT) *AxsStateCalcPipelines {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsStateCalcPipelines{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsStateCalcPipelines(buf []byte, offset flatbuffers.UOffsetT) *AxsStateCalcPipelines {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsStateCalcPipelines{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsStateCalcPipelines) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsStateCalcPipelines) Table() flatbuffers.Table {
	return rcv._tab
}

/// vector of all configured calculation pipelines of a single axis
func (rcv *AxsStateCalcPipelines) Pipeline(obj *AxsStateCalcSinglePipeline, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AxsStateCalcPipelines) PipelineLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of all configured calculation pipelines of a single axis
func AxsStateCalcPipelinesStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AxsStateCalcPipelinesAddPipeline(builder *flatbuffers.Builder, pipeline flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(pipeline), 0)
}
func AxsStateCalcPipelinesStartPipelineVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AxsStateCalcPipelinesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
