// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of all calculation steps of a single calculation pipeline
type AxsCfgCalcStepAllT struct {
	Steps []*AxsCfgCalcStepT `json:"steps"`
}

func (t *AxsCfgCalcStepAllT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	stepsOffset := flatbuffers.UOffsetT(0)
	if t.Steps != nil {
		stepsLength := len(t.Steps)
		stepsOffsets := make([]flatbuffers.UOffsetT, stepsLength)
		for j := 0; j < stepsLength; j++ {
			stepsOffsets[j] = t.Steps[j].Pack(builder)
		}
		AxsCfgCalcStepAllStartStepsVector(builder, stepsLength)
		for j := stepsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(stepsOffsets[j])
		}
		stepsOffset = builder.EndVector(stepsLength)
	}
	AxsCfgCalcStepAllStart(builder)
	AxsCfgCalcStepAllAddSteps(builder, stepsOffset)
	return AxsCfgCalcStepAllEnd(builder)
}

func (rcv *AxsCfgCalcStepAll) UnPackTo(t *AxsCfgCalcStepAllT) {
	stepsLength := rcv.StepsLength()
	t.Steps = make([]*AxsCfgCalcStepT, stepsLength)
	for j := 0; j < stepsLength; j++ {
		x := AxsCfgCalcStep{}
		rcv.Steps(&x, j)
		t.Steps[j] = x.UnPack()
	}
}

func (rcv *AxsCfgCalcStepAll) UnPack() *AxsCfgCalcStepAllT {
	if rcv == nil { return nil }
	t := &AxsCfgCalcStepAllT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgCalcStepAll struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgCalcStepAll(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgCalcStepAll {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgCalcStepAll{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgCalcStepAll(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgCalcStepAll {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgCalcStepAll{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgCalcStepAll) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgCalcStepAll) Table() flatbuffers.Table {
	return rcv._tab
}

/// vector of all steps
func (rcv *AxsCfgCalcStepAll) Steps(obj *AxsCfgCalcStep, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AxsCfgCalcStepAll) StepsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of all steps
func AxsCfgCalcStepAllStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AxsCfgCalcStepAllAddSteps(builder *flatbuffers.Builder, steps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(steps), 0)
}
func AxsCfgCalcStepAllStartStepsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AxsCfgCalcStepAllEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
