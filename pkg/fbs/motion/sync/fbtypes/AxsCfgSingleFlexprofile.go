// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of a single flexprofile
type AxsCfgSingleFlexprofileT struct {
	Name string
	Segments []*CfgFlexprofileSegmentT
	CamBuilderData string
}

func (t *AxsCfgSingleFlexprofileT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	segmentsOffset := flatbuffers.UOffsetT(0)
	if t.Segments != nil {
		segmentsLength := len(t.Segments)
		segmentsOffsets := make([]flatbuffers.UOffsetT, segmentsLength)
		for j := 0; j < segmentsLength; j++ {
			segmentsOffsets[j] = t.Segments[j].Pack(builder)
		}
		AxsCfgSingleFlexprofileStartSegmentsVector(builder, segmentsLength)
		for j := segmentsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(segmentsOffsets[j])
		}
		segmentsOffset = builder.EndVector(segmentsLength)
	}
	camBuilderDataOffset := builder.CreateString(t.CamBuilderData)
	AxsCfgSingleFlexprofileStart(builder)
	AxsCfgSingleFlexprofileAddName(builder, nameOffset)
	AxsCfgSingleFlexprofileAddSegments(builder, segmentsOffset)
	AxsCfgSingleFlexprofileAddCamBuilderData(builder, camBuilderDataOffset)
	return AxsCfgSingleFlexprofileEnd(builder)
}

func (rcv *AxsCfgSingleFlexprofile) UnPackTo(t *AxsCfgSingleFlexprofileT) {
	t.Name = string(rcv.Name())
	segmentsLength := rcv.SegmentsLength()
	t.Segments = make([]*CfgFlexprofileSegmentT, segmentsLength)
	for j := 0; j < segmentsLength; j++ {
		x := CfgFlexprofileSegment{}
		rcv.Segments(&x, j)
		t.Segments[j] = x.UnPack()
	}
	t.CamBuilderData = string(rcv.CamBuilderData())
}

func (rcv *AxsCfgSingleFlexprofile) UnPack() *AxsCfgSingleFlexprofileT {
	if rcv == nil { return nil }
	t := &AxsCfgSingleFlexprofileT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgSingleFlexprofile struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgSingleFlexprofile(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgSingleFlexprofile {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgSingleFlexprofile{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgSingleFlexprofile(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgSingleFlexprofile {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgSingleFlexprofile{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgSingleFlexprofile) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgSingleFlexprofile) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the single flexprofile
func (rcv *AxsCfgSingleFlexprofile) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the single flexprofile
/// flexprofile segment description
func (rcv *AxsCfgSingleFlexprofile) Segments(obj *CfgFlexprofileSegment, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AxsCfgSingleFlexprofile) SegmentsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// flexprofile segment description
/// cam builder data
func (rcv *AxsCfgSingleFlexprofile) CamBuilderData() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// cam builder data
func AxsCfgSingleFlexprofileStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AxsCfgSingleFlexprofileAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func AxsCfgSingleFlexprofileAddSegments(builder *flatbuffers.Builder, segments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(segments), 0)
}
func AxsCfgSingleFlexprofileStartSegmentsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AxsCfgSingleFlexprofileAddCamBuilderData(builder *flatbuffers.Builder, camBuilderData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(camBuilderData), 0)
}
func AxsCfgSingleFlexprofileEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
