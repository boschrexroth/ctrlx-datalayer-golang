// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Configuration of the error reaction behavior of a single axis
type AxsCfgErrReactionT struct {
	SlaveLimitsExceeded *AxsCfgErrReactionSlaveLimExceededT
}

func (t *AxsCfgErrReactionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	slaveLimitsExceededOffset := t.SlaveLimitsExceeded.Pack(builder)
	AxsCfgErrReactionStart(builder)
	AxsCfgErrReactionAddSlaveLimitsExceeded(builder, slaveLimitsExceededOffset)
	return AxsCfgErrReactionEnd(builder)
}

func (rcv *AxsCfgErrReaction) UnPackTo(t *AxsCfgErrReactionT) {
	t.SlaveLimitsExceeded = rcv.SlaveLimitsExceeded(nil).UnPack()
}

func (rcv *AxsCfgErrReaction) UnPack() *AxsCfgErrReactionT {
	if rcv == nil { return nil }
	t := &AxsCfgErrReactionT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgErrReaction struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgErrReaction(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgErrReaction {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgErrReaction{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgErrReaction(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgErrReaction {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgErrReaction{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgErrReaction) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgErrReaction) Table() flatbuffers.Table {
	return rcv._tab
}

/// Reference to configuration of the slave limits exceeded behavior of the axis
func (rcv *AxsCfgErrReaction) SlaveLimitsExceeded(obj *AxsCfgErrReactionSlaveLimExceeded) *AxsCfgErrReactionSlaveLimExceeded {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgErrReactionSlaveLimExceeded)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Reference to configuration of the slave limits exceeded behavior of the axis
func AxsCfgErrReactionStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AxsCfgErrReactionAddSlaveLimitsExceeded(builder *flatbuffers.Builder, slaveLimitsExceeded flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(slaveLimitsExceeded), 0)
}
func AxsCfgErrReactionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
