// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of the axis CamInEx command
type AxsCmdCamInExDataT struct {
	Master string `json:"master"`
	SyncSource SyncSource `json:"syncSource"`
	DynSyncDirection DynSyncDirection `json:"dynSyncDirection"`
	Parameters *AxsCmdCamInParamsT `json:"parameters"`
	DlParameters *AxsCmdCamInDlParamsT `json:"dlParameters"`
}

func (t *AxsCmdCamInExDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	masterOffset := flatbuffers.UOffsetT(0)
	if t.Master != "" {
		masterOffset = builder.CreateString(t.Master)
	}
	parametersOffset := t.Parameters.Pack(builder)
	dlParametersOffset := t.DlParameters.Pack(builder)
	AxsCmdCamInExDataStart(builder)
	AxsCmdCamInExDataAddMaster(builder, masterOffset)
	AxsCmdCamInExDataAddSyncSource(builder, t.SyncSource)
	AxsCmdCamInExDataAddDynSyncDirection(builder, t.DynSyncDirection)
	AxsCmdCamInExDataAddParameters(builder, parametersOffset)
	AxsCmdCamInExDataAddDlParameters(builder, dlParametersOffset)
	return AxsCmdCamInExDataEnd(builder)
}

func (rcv *AxsCmdCamInExData) UnPackTo(t *AxsCmdCamInExDataT) {
	t.Master = string(rcv.Master())
	t.SyncSource = rcv.SyncSource()
	t.DynSyncDirection = rcv.DynSyncDirection()
	t.Parameters = rcv.Parameters(nil).UnPack()
	t.DlParameters = rcv.DlParameters(nil).UnPack()
}

func (rcv *AxsCmdCamInExData) UnPack() *AxsCmdCamInExDataT {
	if rcv == nil { return nil }
	t := &AxsCmdCamInExDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdCamInExData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdCamInExData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdCamInExData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdCamInExData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdCamInExData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdCamInExData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdCamInExData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdCamInExData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdCamInExData) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the master axis
func (rcv *AxsCmdCamInExData) Master() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the master axis
/// sync source (Setpoint)
func (rcv *AxsCmdCamInExData) SyncSource() SyncSource {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return SyncSource(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// sync source (Setpoint)
func (rcv *AxsCmdCamInExData) MutateSyncSource(n SyncSource) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

/// dynamic sync direction (ShortestWay)
func (rcv *AxsCmdCamInExData) DynSyncDirection() DynSyncDirection {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return DynSyncDirection(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// dynamic sync direction (ShortestWay)
func (rcv *AxsCmdCamInExData) MutateDynSyncDirection(n DynSyncDirection) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

/// CamIn parameters (master offset, slave offset, ratio numerator, ratio denominator,...)
func (rcv *AxsCmdCamInExData) Parameters(obj *AxsCmdCamInParams) *AxsCmdCamInParams {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCmdCamInParams)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// CamIn parameters (master offset, slave offset, ratio numerator, ratio denominator,...)
/// CamIn data layer parameters
func (rcv *AxsCmdCamInExData) DlParameters(obj *AxsCmdCamInDlParams) *AxsCmdCamInDlParams {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCmdCamInDlParams)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// CamIn data layer parameters
func AxsCmdCamInExDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AxsCmdCamInExDataAddMaster(builder *flatbuffers.Builder, master flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(master), 0)
}
func AxsCmdCamInExDataAddSyncSource(builder *flatbuffers.Builder, syncSource SyncSource) {
	builder.PrependInt8Slot(1, int8(syncSource), 0)
}
func AxsCmdCamInExDataAddDynSyncDirection(builder *flatbuffers.Builder, dynSyncDirection DynSyncDirection) {
	builder.PrependInt8Slot(2, int8(dynSyncDirection), 0)
}
func AxsCmdCamInExDataAddParameters(builder *flatbuffers.Builder, parameters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(parameters), 0)
}
func AxsCmdCamInExDataAddDlParameters(builder *flatbuffers.Builder, dlParameters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(dlParameters), 0)
}
func AxsCmdCamInExDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
