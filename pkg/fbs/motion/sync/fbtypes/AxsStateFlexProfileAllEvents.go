// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// state of triggered, signaled and active events
type AxsStateFlexProfileAllEventsT struct {
	ConditionStatusMask uint64 `json:"conditionStatusMask"`
	ConditionControlMask uint64 `json:"conditionControlMask"`
}

func (t *AxsStateFlexProfileAllEventsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AxsStateFlexProfileAllEventsStart(builder)
	AxsStateFlexProfileAllEventsAddConditionStatusMask(builder, t.ConditionStatusMask)
	AxsStateFlexProfileAllEventsAddConditionControlMask(builder, t.ConditionControlMask)
	return AxsStateFlexProfileAllEventsEnd(builder)
}

func (rcv *AxsStateFlexProfileAllEvents) UnPackTo(t *AxsStateFlexProfileAllEventsT) {
	t.ConditionStatusMask = rcv.ConditionStatusMask()
	t.ConditionControlMask = rcv.ConditionControlMask()
}

func (rcv *AxsStateFlexProfileAllEvents) UnPack() *AxsStateFlexProfileAllEventsT {
	if rcv == nil { return nil }
	t := &AxsStateFlexProfileAllEventsT{}
	rcv.UnPackTo(t)
	return t
}

type AxsStateFlexProfileAllEvents struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsStateFlexProfileAllEvents(buf []byte, offset flatbuffers.UOffsetT) *AxsStateFlexProfileAllEvents {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsStateFlexProfileAllEvents{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsStateFlexProfileAllEvents(buf []byte, offset flatbuffers.UOffsetT) *AxsStateFlexProfileAllEvents {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsStateFlexProfileAllEvents{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsStateFlexProfileAllEvents) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsStateFlexProfileAllEvents) Table() flatbuffers.Table {
	return rcv._tab
}

/// bit mask shows triggered and signaled events
func (rcv *AxsStateFlexProfileAllEvents) ConditionStatusMask() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// bit mask shows triggered and signaled events
func (rcv *AxsStateFlexProfileAllEvents) MutateConditionStatusMask(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

/// bit mask with active control events
func (rcv *AxsStateFlexProfileAllEvents) ConditionControlMask() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// bit mask with active control events
func (rcv *AxsStateFlexProfileAllEvents) MutateConditionControlMask(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func AxsStateFlexProfileAllEventsStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AxsStateFlexProfileAllEventsAddConditionStatusMask(builder *flatbuffers.Builder, conditionStatusMask uint64) {
	builder.PrependUint64Slot(0, conditionStatusMask, 0)
}
func AxsStateFlexProfileAllEventsAddConditionControlMask(builder *flatbuffers.Builder, conditionControlMask uint64) {
	builder.PrependUint64Slot(1, conditionControlMask, 0)
}
func AxsStateFlexProfileAllEventsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
