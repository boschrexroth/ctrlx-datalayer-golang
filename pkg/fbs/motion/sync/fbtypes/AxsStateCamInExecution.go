// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// state information of the execution
type AxsStateCamInExecutionT struct {
	ActivePointTable string `json:"activePointTable"`
	WaitForSwitchPos bool `json:"waitForSwitchPos"`
	WaitForSwitchGain bool `json:"waitForSwitchGain"`
	SingleExecutionDone bool `json:"singleExecutionDone"`
}

func (t *AxsStateCamInExecutionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	activePointTableOffset := flatbuffers.UOffsetT(0)
	if t.ActivePointTable != "" {
		activePointTableOffset = builder.CreateString(t.ActivePointTable)
	}
	AxsStateCamInExecutionStart(builder)
	AxsStateCamInExecutionAddActivePointTable(builder, activePointTableOffset)
	AxsStateCamInExecutionAddWaitForSwitchPos(builder, t.WaitForSwitchPos)
	AxsStateCamInExecutionAddWaitForSwitchGain(builder, t.WaitForSwitchGain)
	AxsStateCamInExecutionAddSingleExecutionDone(builder, t.SingleExecutionDone)
	return AxsStateCamInExecutionEnd(builder)
}

func (rcv *AxsStateCamInExecution) UnPackTo(t *AxsStateCamInExecutionT) {
	t.ActivePointTable = string(rcv.ActivePointTable())
	t.WaitForSwitchPos = rcv.WaitForSwitchPos()
	t.WaitForSwitchGain = rcv.WaitForSwitchGain()
	t.SingleExecutionDone = rcv.SingleExecutionDone()
}

func (rcv *AxsStateCamInExecution) UnPack() *AxsStateCamInExecutionT {
	if rcv == nil { return nil }
	t := &AxsStateCamInExecutionT{}
	rcv.UnPackTo(t)
	return t
}

type AxsStateCamInExecution struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsStateCamInExecution(buf []byte, offset flatbuffers.UOffsetT) *AxsStateCamInExecution {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsStateCamInExecution{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsStateCamInExecution(buf []byte, offset flatbuffers.UOffsetT) *AxsStateCamInExecution {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsStateCamInExecution{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsStateCamInExecution) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsStateCamInExecution) Table() flatbuffers.Table {
	return rcv._tab
}

/// currently active point table 
func (rcv *AxsStateCamInExecution) ActivePointTable() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// currently active point table 
/// the CamIn is waiting for the specified switching position
func (rcv *AxsStateCamInExecution) WaitForSwitchPos() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// the CamIn is waiting for the specified switching position
func (rcv *AxsStateCamInExecution) MutateWaitForSwitchPos(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

/// the CamIn is waiting for the specified switch position for the gain factor
func (rcv *AxsStateCamInExecution) WaitForSwitchGain() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// the CamIn is waiting for the specified switch position for the gain factor
func (rcv *AxsStateCamInExecution) MutateWaitForSwitchGain(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

/// the one-time execution of the profile was completed (only for execution mode "SINGLE")
func (rcv *AxsStateCamInExecution) SingleExecutionDone() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// the one-time execution of the profile was completed (only for execution mode "SINGLE")
func (rcv *AxsStateCamInExecution) MutateSingleExecutionDone(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func AxsStateCamInExecutionStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func AxsStateCamInExecutionAddActivePointTable(builder *flatbuffers.Builder, activePointTable flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(activePointTable), 0)
}
func AxsStateCamInExecutionAddWaitForSwitchPos(builder *flatbuffers.Builder, waitForSwitchPos bool) {
	builder.PrependBoolSlot(1, waitForSwitchPos, false)
}
func AxsStateCamInExecutionAddWaitForSwitchGain(builder *flatbuffers.Builder, waitForSwitchGain bool) {
	builder.PrependBoolSlot(2, waitForSwitchGain, false)
}
func AxsStateCamInExecutionAddSingleExecutionDone(builder *flatbuffers.Builder, singleExecutionDone bool) {
	builder.PrependBoolSlot(3, singleExecutionDone, false)
}
func AxsStateCamInExecutionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
