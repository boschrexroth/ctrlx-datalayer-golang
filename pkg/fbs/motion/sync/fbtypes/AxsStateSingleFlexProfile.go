// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// state of a single FlexProfile
type AxsStateSingleFlexProfileT struct {
	Name string `json:"name"`
	AccessState string `json:"accessState"`
}

func (t *AxsStateSingleFlexProfileT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	accessStateOffset := flatbuffers.UOffsetT(0)
	if t.AccessState != "" {
		accessStateOffset = builder.CreateString(t.AccessState)
	}
	AxsStateSingleFlexProfileStart(builder)
	AxsStateSingleFlexProfileAddName(builder, nameOffset)
	AxsStateSingleFlexProfileAddAccessState(builder, accessStateOffset)
	return AxsStateSingleFlexProfileEnd(builder)
}

func (rcv *AxsStateSingleFlexProfile) UnPackTo(t *AxsStateSingleFlexProfileT) {
	t.Name = string(rcv.Name())
	t.AccessState = string(rcv.AccessState())
}

func (rcv *AxsStateSingleFlexProfile) UnPack() *AxsStateSingleFlexProfileT {
	if rcv == nil { return nil }
	t := &AxsStateSingleFlexProfileT{}
	rcv.UnPackTo(t)
	return t
}

type AxsStateSingleFlexProfile struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsStateSingleFlexProfile(buf []byte, offset flatbuffers.UOffsetT) *AxsStateSingleFlexProfile {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsStateSingleFlexProfile{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsStateSingleFlexProfile(buf []byte, offset flatbuffers.UOffsetT) *AxsStateSingleFlexProfile {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsStateSingleFlexProfile{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsStateSingleFlexProfile) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsStateSingleFlexProfile) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the single FlexProfile
func (rcv *AxsStateSingleFlexProfile) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the single FlexProfile
/// access state
func (rcv *AxsStateSingleFlexProfile) AccessState() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// access state
func AxsStateSingleFlexProfileStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AxsStateSingleFlexProfileAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func AxsStateSingleFlexProfileAddAccessState(builder *flatbuffers.Builder, accessState flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(accessState), 0)
}
func AxsStateSingleFlexProfileEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
