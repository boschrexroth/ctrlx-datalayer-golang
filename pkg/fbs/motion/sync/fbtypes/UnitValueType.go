// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import "strconv"

/// Unit value type of a single parameter
type UnitValueType int8

const (
	/// position type (mm; deg; inch; ...)
	UnitValueTypePOSITION     UnitValueType = 0
	/// velocity type (m/s; rpm; ...)
	UnitValueTypeVELOCITY     UnitValueType = 1
	/// acceleration type (mm/s^2; ...)
	UnitValueTypeACCELERATION UnitValueType = 2
	/// jerk type (m/s^3; ...)
	UnitValueTypeJERK         UnitValueType = 3
	/// force type (N)
	UnitValueTypeFORCE        UnitValueType = 4
	/// torque type (N*m)
	UnitValueTypeTORQUE       UnitValueType = 5
	/// time type (s; min; ms)
	UnitValueTypeTIME         UnitValueType = 6
	/// this must alway be the last entry
	UnitValueTypeCOUNT        UnitValueType = 7
)

var EnumNamesUnitValueType = map[UnitValueType]string{
	UnitValueTypePOSITION:     "POSITION",
	UnitValueTypeVELOCITY:     "VELOCITY",
	UnitValueTypeACCELERATION: "ACCELERATION",
	UnitValueTypeJERK:         "JERK",
	UnitValueTypeFORCE:        "FORCE",
	UnitValueTypeTORQUE:       "TORQUE",
	UnitValueTypeTIME:         "TIME",
	UnitValueTypeCOUNT:        "COUNT",
}

var EnumValuesUnitValueType = map[string]UnitValueType{
	"POSITION":     UnitValueTypePOSITION,
	"VELOCITY":     UnitValueTypeVELOCITY,
	"ACCELERATION": UnitValueTypeACCELERATION,
	"JERK":         UnitValueTypeJERK,
	"FORCE":        UnitValueTypeFORCE,
	"TORQUE":       UnitValueTypeTORQUE,
	"TIME":         UnitValueTypeTIME,
	"COUNT":        UnitValueTypeCOUNT,
}

func (v UnitValueType) String() string {
	if s, ok := EnumNamesUnitValueType[v]; ok {
		return s
	}
	return "UnitValueType(" + strconv.FormatInt(int64(v), 10) + ")"
}
