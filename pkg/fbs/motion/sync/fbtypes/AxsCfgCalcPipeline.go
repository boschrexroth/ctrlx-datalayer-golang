// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of a single calculation pipelines
type AxsCfgCalcPipelineT struct {
	Name string `json:"name"`
	Steps *AxsCfgCalcStepAllT `json:"steps"`
}

func (t *AxsCfgCalcPipelineT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	stepsOffset := t.Steps.Pack(builder)
	AxsCfgCalcPipelineStart(builder)
	AxsCfgCalcPipelineAddName(builder, nameOffset)
	AxsCfgCalcPipelineAddSteps(builder, stepsOffset)
	return AxsCfgCalcPipelineEnd(builder)
}

func (rcv *AxsCfgCalcPipeline) UnPackTo(t *AxsCfgCalcPipelineT) {
	t.Name = string(rcv.Name())
	t.Steps = rcv.Steps(nil).UnPack()
}

func (rcv *AxsCfgCalcPipeline) UnPack() *AxsCfgCalcPipelineT {
	if rcv == nil { return nil }
	t := &AxsCfgCalcPipelineT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgCalcPipeline struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgCalcPipeline(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgCalcPipeline {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgCalcPipeline{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgCalcPipeline(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgCalcPipeline {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgCalcPipeline{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgCalcPipeline) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgCalcPipeline) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the calculation pipeline
func (rcv *AxsCfgCalcPipeline) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the calculation pipeline
/// configuration of all steps of calculation pipeline
func (rcv *AxsCfgCalcPipeline) Steps(obj *AxsCfgCalcStepAll) *AxsCfgCalcStepAll {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgCalcStepAll)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// configuration of all steps of calculation pipeline
func AxsCfgCalcPipelineStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AxsCfgCalcPipelineAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func AxsCfgCalcPipelineAddSteps(builder *flatbuffers.Builder, steps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(steps), 0)
}
func AxsCfgCalcPipelineEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
