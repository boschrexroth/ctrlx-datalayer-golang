// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of a single calculation step
type CalcStepCfgT struct {
	StepID uint32
	Type string
	Inputs []string
	Parameter []*CalcStepCfgSingleParamT
}

func (t *CalcStepCfgT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	typeOffset := builder.CreateString(t.Type)
	inputsOffset := flatbuffers.UOffsetT(0)
	if t.Inputs != nil {
		inputsLength := len(t.Inputs)
		inputsOffsets := make([]flatbuffers.UOffsetT, inputsLength)
		for j := 0; j < inputsLength; j++ {
			inputsOffsets[j] = builder.CreateString(t.Inputs[j])
		}
		CalcStepCfgStartInputsVector(builder, inputsLength)
		for j := inputsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(inputsOffsets[j])
		}
		inputsOffset = builder.EndVector(inputsLength)
	}
	parameterOffset := flatbuffers.UOffsetT(0)
	if t.Parameter != nil {
		parameterLength := len(t.Parameter)
		parameterOffsets := make([]flatbuffers.UOffsetT, parameterLength)
		for j := 0; j < parameterLength; j++ {
			parameterOffsets[j] = t.Parameter[j].Pack(builder)
		}
		CalcStepCfgStartParameterVector(builder, parameterLength)
		for j := parameterLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(parameterOffsets[j])
		}
		parameterOffset = builder.EndVector(parameterLength)
	}
	CalcStepCfgStart(builder)
	CalcStepCfgAddStepID(builder, t.StepID)
	CalcStepCfgAddType(builder, typeOffset)
	CalcStepCfgAddInputs(builder, inputsOffset)
	CalcStepCfgAddParameter(builder, parameterOffset)
	return CalcStepCfgEnd(builder)
}

func (rcv *CalcStepCfg) UnPackTo(t *CalcStepCfgT) {
	t.StepID = rcv.StepID()
	t.Type = string(rcv.Type())
	inputsLength := rcv.InputsLength()
	t.Inputs = make([]string, inputsLength)
	for j := 0; j < inputsLength; j++ {
		t.Inputs[j] = string(rcv.Inputs(j))
	}
	parameterLength := rcv.ParameterLength()
	t.Parameter = make([]*CalcStepCfgSingleParamT, parameterLength)
	for j := 0; j < parameterLength; j++ {
		x := CalcStepCfgSingleParam{}
		rcv.Parameter(&x, j)
		t.Parameter[j] = x.UnPack()
	}
}

func (rcv *CalcStepCfg) UnPack() *CalcStepCfgT {
	if rcv == nil { return nil }
	t := &CalcStepCfgT{}
	rcv.UnPackTo(t)
	return t
}

type CalcStepCfg struct {
	_tab flatbuffers.Table
}

func GetRootAsCalcStepCfg(buf []byte, offset flatbuffers.UOffsetT) *CalcStepCfg {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CalcStepCfg{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCalcStepCfg(buf []byte, offset flatbuffers.UOffsetT) *CalcStepCfg {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CalcStepCfg{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CalcStepCfg) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CalcStepCfg) Table() flatbuffers.Table {
	return rcv._tab
}

/// ID of the calculation step
func (rcv *CalcStepCfg) StepID() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// ID of the calculation step
func (rcv *CalcStepCfg) MutateStepID(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// type of the calculation step
func (rcv *CalcStepCfg) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// type of the calculation step
/// inputs of the calculation step
func (rcv *CalcStepCfg) Inputs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CalcStepCfg) InputsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// inputs of the calculation step
/// data of all parameters of a single calculation step
func (rcv *CalcStepCfg) Parameter(obj *CalcStepCfgSingleParam, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *CalcStepCfg) ParameterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// data of all parameters of a single calculation step
func CalcStepCfgStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func CalcStepCfgAddStepID(builder *flatbuffers.Builder, stepID uint32) {
	builder.PrependUint32Slot(0, stepID, 0)
}
func CalcStepCfgAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(type_), 0)
}
func CalcStepCfgAddInputs(builder *flatbuffers.Builder, inputs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(inputs), 0)
}
func CalcStepCfgStartInputsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CalcStepCfgAddParameter(builder *flatbuffers.Builder, parameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(parameter), 0)
}
func CalcStepCfgStartParameterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CalcStepCfgEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
