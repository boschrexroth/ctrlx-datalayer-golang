// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of a single point table
type SysCfgSinglePointTableT struct {
	Name string `json:"name"`
	Points []float64 `json:"points"`
	Interpolation PointTableInterpolation `json:"interpolation"`
	CamBuilderData string `json:"camBuilderData"`
}

func (t *SysCfgSinglePointTableT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	pointsOffset := flatbuffers.UOffsetT(0)
	if t.Points != nil {
		pointsLength := len(t.Points)
		SysCfgSinglePointTableStartPointsVector(builder, pointsLength)
		for j := pointsLength - 1; j >= 0; j-- {
			builder.PrependFloat64(t.Points[j])
		}
		pointsOffset = builder.EndVector(pointsLength)
	}
	camBuilderDataOffset := flatbuffers.UOffsetT(0)
	if t.CamBuilderData != "" {
		camBuilderDataOffset = builder.CreateString(t.CamBuilderData)
	}
	SysCfgSinglePointTableStart(builder)
	SysCfgSinglePointTableAddName(builder, nameOffset)
	SysCfgSinglePointTableAddPoints(builder, pointsOffset)
	SysCfgSinglePointTableAddInterpolation(builder, t.Interpolation)
	SysCfgSinglePointTableAddCamBuilderData(builder, camBuilderDataOffset)
	return SysCfgSinglePointTableEnd(builder)
}

func (rcv *SysCfgSinglePointTable) UnPackTo(t *SysCfgSinglePointTableT) {
	t.Name = string(rcv.Name())
	pointsLength := rcv.PointsLength()
	t.Points = make([]float64, pointsLength)
	for j := 0; j < pointsLength; j++ {
		t.Points[j] = rcv.Points(j)
	}
	t.Interpolation = rcv.Interpolation()
	t.CamBuilderData = string(rcv.CamBuilderData())
}

func (rcv *SysCfgSinglePointTable) UnPack() *SysCfgSinglePointTableT {
	if rcv == nil { return nil }
	t := &SysCfgSinglePointTableT{}
	rcv.UnPackTo(t)
	return t
}

type SysCfgSinglePointTable struct {
	_tab flatbuffers.Table
}

func GetRootAsSysCfgSinglePointTable(buf []byte, offset flatbuffers.UOffsetT) *SysCfgSinglePointTable {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SysCfgSinglePointTable{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSysCfgSinglePointTable(buf []byte, offset flatbuffers.UOffsetT) *SysCfgSinglePointTable {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SysCfgSinglePointTable{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SysCfgSinglePointTable) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SysCfgSinglePointTable) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the point table (filled when reading; optional for writing [content is always ignored])
func (rcv *SysCfgSinglePointTable) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the point table (filled when reading; optional for writing [content is always ignored])
/// interpolation points of the point table
func (rcv *SysCfgSinglePointTable) Points(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SysCfgSinglePointTable) PointsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// interpolation points of the point table
func (rcv *SysCfgSinglePointTable) MutatePoints(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

/// interpolation type for this point table
func (rcv *SysCfgSinglePointTable) Interpolation() PointTableInterpolation {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return PointTableInterpolation(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// interpolation type for this point table
func (rcv *SysCfgSinglePointTable) MutateInterpolation(n PointTableInterpolation) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

/// data of the CamBuilder
func (rcv *SysCfgSinglePointTable) CamBuilderData() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// data of the CamBuilder
func SysCfgSinglePointTableStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SysCfgSinglePointTableAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func SysCfgSinglePointTableAddPoints(builder *flatbuffers.Builder, points flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(points), 0)
}
func SysCfgSinglePointTableStartPointsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SysCfgSinglePointTableAddInterpolation(builder *flatbuffers.Builder, interpolation PointTableInterpolation) {
	builder.PrependInt8Slot(2, int8(interpolation), 0)
}
func SysCfgSinglePointTableAddCamBuilderData(builder *flatbuffers.Builder, camBuilderData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(camBuilderData), 0)
}
func SysCfgSinglePointTableEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
