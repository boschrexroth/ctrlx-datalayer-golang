// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// TODO: Provide description
type AxsCfgErrReactionSlaveLimExceededT struct {
	Type SlaveCantFollowErrorReaction `json:"type"`
	Diagnosis SlaveCantFollowMessageType `json:"diagnosis"`
}

func (t *AxsCfgErrReactionSlaveLimExceededT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AxsCfgErrReactionSlaveLimExceededStart(builder)
	AxsCfgErrReactionSlaveLimExceededAddType(builder, t.Type)
	AxsCfgErrReactionSlaveLimExceededAddDiagnosis(builder, t.Diagnosis)
	return AxsCfgErrReactionSlaveLimExceededEnd(builder)
}

func (rcv *AxsCfgErrReactionSlaveLimExceeded) UnPackTo(t *AxsCfgErrReactionSlaveLimExceededT) {
	t.Type = rcv.Type()
	t.Diagnosis = rcv.Diagnosis()
}

func (rcv *AxsCfgErrReactionSlaveLimExceeded) UnPack() *AxsCfgErrReactionSlaveLimExceededT {
	if rcv == nil { return nil }
	t := &AxsCfgErrReactionSlaveLimExceededT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgErrReactionSlaveLimExceeded struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgErrReactionSlaveLimExceeded(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgErrReactionSlaveLimExceeded {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgErrReactionSlaveLimExceeded{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgErrReactionSlaveLimExceeded(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgErrReactionSlaveLimExceeded {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgErrReactionSlaveLimExceeded{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgErrReactionSlaveLimExceeded) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgErrReactionSlaveLimExceeded) Table() flatbuffers.Table {
	return rcv._tab
}

/// TODO: Provide description
func (rcv *AxsCfgErrReactionSlaveLimExceeded) Type() SlaveCantFollowErrorReaction {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return SlaveCantFollowErrorReaction(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// TODO: Provide description
func (rcv *AxsCfgErrReactionSlaveLimExceeded) MutateType(n SlaveCantFollowErrorReaction) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

/// TODO: Provide description
func (rcv *AxsCfgErrReactionSlaveLimExceeded) Diagnosis() SlaveCantFollowMessageType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return SlaveCantFollowMessageType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 2
}

/// TODO: Provide description
func (rcv *AxsCfgErrReactionSlaveLimExceeded) MutateDiagnosis(n SlaveCantFollowMessageType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func AxsCfgErrReactionSlaveLimExceededStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AxsCfgErrReactionSlaveLimExceededAddType(builder *flatbuffers.Builder, type_ SlaveCantFollowErrorReaction) {
	builder.PrependInt8Slot(0, int8(type_), 1)
}
func AxsCfgErrReactionSlaveLimExceededAddDiagnosis(builder *flatbuffers.Builder, diagnosis SlaveCantFollowMessageType) {
	builder.PrependInt8Slot(1, int8(diagnosis), 2)
}
func AxsCfgErrReactionSlaveLimExceededEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
