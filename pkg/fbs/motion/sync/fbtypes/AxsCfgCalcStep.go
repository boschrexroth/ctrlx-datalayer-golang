// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of a single calculation step
type AxsCfgCalcStepT struct {
	StepId uint32 `json:"stepID"`
	Type string `json:"type"`
	Inputs []string `json:"inputs"`
	Parameter *AxsCfgCalcStepParamAllT `json:"parameter"`
}

func (t *AxsCfgCalcStepT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	type_Offset := flatbuffers.UOffsetT(0)
	if t.Type != "" {
		type_Offset = builder.CreateString(t.Type)
	}
	inputsOffset := flatbuffers.UOffsetT(0)
	if t.Inputs != nil {
		inputsLength := len(t.Inputs)
		inputsOffsets := make([]flatbuffers.UOffsetT, inputsLength)
		for j := 0; j < inputsLength; j++ {
			inputsOffsets[j] = builder.CreateString(t.Inputs[j])
		}
		AxsCfgCalcStepStartInputsVector(builder, inputsLength)
		for j := inputsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(inputsOffsets[j])
		}
		inputsOffset = builder.EndVector(inputsLength)
	}
	parameterOffset := t.Parameter.Pack(builder)
	AxsCfgCalcStepStart(builder)
	AxsCfgCalcStepAddStepId(builder, t.StepId)
	AxsCfgCalcStepAddType(builder, type_Offset)
	AxsCfgCalcStepAddInputs(builder, inputsOffset)
	AxsCfgCalcStepAddParameter(builder, parameterOffset)
	return AxsCfgCalcStepEnd(builder)
}

func (rcv *AxsCfgCalcStep) UnPackTo(t *AxsCfgCalcStepT) {
	t.StepId = rcv.StepId()
	t.Type = string(rcv.Type())
	inputsLength := rcv.InputsLength()
	t.Inputs = make([]string, inputsLength)
	for j := 0; j < inputsLength; j++ {
		t.Inputs[j] = string(rcv.Inputs(j))
	}
	t.Parameter = rcv.Parameter(nil).UnPack()
}

func (rcv *AxsCfgCalcStep) UnPack() *AxsCfgCalcStepT {
	if rcv == nil { return nil }
	t := &AxsCfgCalcStepT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgCalcStep struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgCalcStep(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgCalcStep {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgCalcStep{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgCalcStep(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgCalcStep {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgCalcStep{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgCalcStep) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgCalcStep) Table() flatbuffers.Table {
	return rcv._tab
}

/// ID of the calculation step
func (rcv *AxsCfgCalcStep) StepId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// ID of the calculation step
func (rcv *AxsCfgCalcStep) MutateStepId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// Type string of the calculation step
func (rcv *AxsCfgCalcStep) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type string of the calculation step
/// configuration of inputs of the calcStep; define from which step/master the inputs are taken
func (rcv *AxsCfgCalcStep) Inputs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AxsCfgCalcStep) InputsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// configuration of inputs of the calcStep; define from which step/master the inputs are taken
/// all parameter values of the calculation step
func (rcv *AxsCfgCalcStep) Parameter(obj *AxsCfgCalcStepParamAll) *AxsCfgCalcStepParamAll {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgCalcStepParamAll)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// all parameter values of the calculation step
func AxsCfgCalcStepStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func AxsCfgCalcStepAddStepId(builder *flatbuffers.Builder, stepId uint32) {
	builder.PrependUint32Slot(0, stepId, 0)
}
func AxsCfgCalcStepAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(type_), 0)
}
func AxsCfgCalcStepAddInputs(builder *flatbuffers.Builder, inputs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(inputs), 0)
}
func AxsCfgCalcStepStartInputsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AxsCfgCalcStepAddParameter(builder *flatbuffers.Builder, parameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(parameter), 0)
}
func AxsCfgCalcStepEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
