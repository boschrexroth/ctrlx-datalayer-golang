// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of the axis FlexProfileEx command
type AxsCmdFlexProfileExDataT struct {
	Master string `json:"master"`
	SyncSource SyncSource `json:"syncSource"`
	DynSyncDirection DynSyncDirection `json:"dynSyncDirection"`
	Parameters *AxsCmdFlexProfileParamsT `json:"parameters"`
	DlParameters *AxsCmdFlexProfileDlParamsT `json:"dlParameters"`
	Buffered bool `json:"buffered"`
}

func (t *AxsCmdFlexProfileExDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	masterOffset := flatbuffers.UOffsetT(0)
	if t.Master != "" {
		masterOffset = builder.CreateString(t.Master)
	}
	parametersOffset := t.Parameters.Pack(builder)
	dlParametersOffset := t.DlParameters.Pack(builder)
	AxsCmdFlexProfileExDataStart(builder)
	AxsCmdFlexProfileExDataAddMaster(builder, masterOffset)
	AxsCmdFlexProfileExDataAddSyncSource(builder, t.SyncSource)
	AxsCmdFlexProfileExDataAddDynSyncDirection(builder, t.DynSyncDirection)
	AxsCmdFlexProfileExDataAddParameters(builder, parametersOffset)
	AxsCmdFlexProfileExDataAddDlParameters(builder, dlParametersOffset)
	AxsCmdFlexProfileExDataAddBuffered(builder, t.Buffered)
	return AxsCmdFlexProfileExDataEnd(builder)
}

func (rcv *AxsCmdFlexProfileExData) UnPackTo(t *AxsCmdFlexProfileExDataT) {
	t.Master = string(rcv.Master())
	t.SyncSource = rcv.SyncSource()
	t.DynSyncDirection = rcv.DynSyncDirection()
	t.Parameters = rcv.Parameters(nil).UnPack()
	t.DlParameters = rcv.DlParameters(nil).UnPack()
	t.Buffered = rcv.Buffered()
}

func (rcv *AxsCmdFlexProfileExData) UnPack() *AxsCmdFlexProfileExDataT {
	if rcv == nil { return nil }
	t := &AxsCmdFlexProfileExDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdFlexProfileExData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdFlexProfileExData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdFlexProfileExData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdFlexProfileExData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdFlexProfileExData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdFlexProfileExData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdFlexProfileExData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdFlexProfileExData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdFlexProfileExData) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the master axis
func (rcv *AxsCmdFlexProfileExData) Master() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the master axis
/// sync source (Setpoint)
func (rcv *AxsCmdFlexProfileExData) SyncSource() SyncSource {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return SyncSource(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// sync source (Setpoint)
func (rcv *AxsCmdFlexProfileExData) MutateSyncSource(n SyncSource) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

/// dynamic sync direction (ShortestWay)
func (rcv *AxsCmdFlexProfileExData) DynSyncDirection() DynSyncDirection {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return DynSyncDirection(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// dynamic sync direction (ShortestWay)
func (rcv *AxsCmdFlexProfileExData) MutateDynSyncDirection(n DynSyncDirection) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

/// FlexProfile parameters (master offset, slave offset, ratio numerator, ratio denominator, fine adjust, profileEntry, setSelection)
func (rcv *AxsCmdFlexProfileExData) Parameters(obj *AxsCmdFlexProfileParams) *AxsCmdFlexProfileParams {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCmdFlexProfileParams)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// FlexProfile parameters (master offset, slave offset, ratio numerator, ratio denominator, fine adjust, profileEntry, setSelection)
/// FlexProfile data layer parameters
func (rcv *AxsCmdFlexProfileExData) DlParameters(obj *AxsCmdFlexProfileDlParams) *AxsCmdFlexProfileDlParams {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCmdFlexProfileDlParams)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// FlexProfile data layer parameters
/// should this be a buffered command?
func (rcv *AxsCmdFlexProfileExData) Buffered() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// should this be a buffered command?
func (rcv *AxsCmdFlexProfileExData) MutateBuffered(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func AxsCmdFlexProfileExDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func AxsCmdFlexProfileExDataAddMaster(builder *flatbuffers.Builder, master flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(master), 0)
}
func AxsCmdFlexProfileExDataAddSyncSource(builder *flatbuffers.Builder, syncSource SyncSource) {
	builder.PrependInt8Slot(1, int8(syncSource), 0)
}
func AxsCmdFlexProfileExDataAddDynSyncDirection(builder *flatbuffers.Builder, dynSyncDirection DynSyncDirection) {
	builder.PrependInt8Slot(2, int8(dynSyncDirection), 0)
}
func AxsCmdFlexProfileExDataAddParameters(builder *flatbuffers.Builder, parameters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(parameters), 0)
}
func AxsCmdFlexProfileExDataAddDlParameters(builder *flatbuffers.Builder, dlParameters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(dlParameters), 0)
}
func AxsCmdFlexProfileExDataAddBuffered(builder *flatbuffers.Builder, buffered bool) {
	builder.PrependBoolSlot(5, buffered, false)
}
func AxsCmdFlexProfileExDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
