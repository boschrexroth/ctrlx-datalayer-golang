// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of a FlexProfile object
type AxsCfgFlexProfileObjT struct {
	Profiles []*AxsCfgSingleFlexProfileT `json:"profiles"`
}

func (t *AxsCfgFlexProfileObjT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	profilesOffset := flatbuffers.UOffsetT(0)
	if t.Profiles != nil {
		profilesLength := len(t.Profiles)
		profilesOffsets := make([]flatbuffers.UOffsetT, profilesLength)
		for j := 0; j < profilesLength; j++ {
			profilesOffsets[j] = t.Profiles[j].Pack(builder)
		}
		AxsCfgFlexProfileObjStartProfilesVector(builder, profilesLength)
		for j := profilesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(profilesOffsets[j])
		}
		profilesOffset = builder.EndVector(profilesLength)
	}
	AxsCfgFlexProfileObjStart(builder)
	AxsCfgFlexProfileObjAddProfiles(builder, profilesOffset)
	return AxsCfgFlexProfileObjEnd(builder)
}

func (rcv *AxsCfgFlexProfileObj) UnPackTo(t *AxsCfgFlexProfileObjT) {
	profilesLength := rcv.ProfilesLength()
	t.Profiles = make([]*AxsCfgSingleFlexProfileT, profilesLength)
	for j := 0; j < profilesLength; j++ {
		x := AxsCfgSingleFlexProfile{}
		rcv.Profiles(&x, j)
		t.Profiles[j] = x.UnPack()
	}
}

func (rcv *AxsCfgFlexProfileObj) UnPack() *AxsCfgFlexProfileObjT {
	if rcv == nil { return nil }
	t := &AxsCfgFlexProfileObjT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgFlexProfileObj struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgFlexProfileObj(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgFlexProfileObj {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgFlexProfileObj{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgFlexProfileObj(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgFlexProfileObj {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgFlexProfileObj{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgFlexProfileObj) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgFlexProfileObj) Table() flatbuffers.Table {
	return rcv._tab
}

/// configuration of single FlexProfiles
func (rcv *AxsCfgFlexProfileObj) Profiles(obj *AxsCfgSingleFlexProfile, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AxsCfgFlexProfileObj) ProfilesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// configuration of single FlexProfiles
func AxsCfgFlexProfileObjStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AxsCfgFlexProfileObjAddProfiles(builder *flatbuffers.Builder, profiles flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(profiles), 0)
}
func AxsCfgFlexProfileObjStartProfilesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AxsCfgFlexProfileObjEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
