// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Flexprofile configuration of an axis
type AxsCfgFlexprofileT struct {
	Obj *AxsCfgFlexprofileObjT
}

func (t *AxsCfgFlexprofileT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	objOffset := t.Obj.Pack(builder)
	AxsCfgFlexprofileStart(builder)
	AxsCfgFlexprofileAddObj(builder, objOffset)
	return AxsCfgFlexprofileEnd(builder)
}

func (rcv *AxsCfgFlexprofile) UnPackTo(t *AxsCfgFlexprofileT) {
	t.Obj = rcv.Obj(nil).UnPack()
}

func (rcv *AxsCfgFlexprofile) UnPack() *AxsCfgFlexprofileT {
	if rcv == nil { return nil }
	t := &AxsCfgFlexprofileT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgFlexprofile struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgFlexprofile(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgFlexprofile {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgFlexprofile{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgFlexprofile(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgFlexprofile {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgFlexprofile{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgFlexprofile) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgFlexprofile) Table() flatbuffers.Table {
	return rcv._tab
}

/// flexprofile object
func (rcv *AxsCfgFlexprofile) Obj(obj *AxsCfgFlexprofileObj) *AxsCfgFlexprofileObj {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgFlexprofileObj)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// flexprofile object
func AxsCfgFlexprofileStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AxsCfgFlexprofileAddObj(builder *flatbuffers.Builder, obj flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(obj), 0)
}
func AxsCfgFlexprofileEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
