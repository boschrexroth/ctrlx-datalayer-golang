// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// a single supported calculation step
type AxsStateCalcSingleStepT struct {
	StepID uint32
	Type string
	Inputs []string
	Outputs []string
	Parameter *AxsStateCalcStepParamsT
}

func (t *AxsStateCalcSingleStepT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	typeOffset := builder.CreateString(t.Type)
	inputsOffset := flatbuffers.UOffsetT(0)
	if t.Inputs != nil {
		inputsLength := len(t.Inputs)
		inputsOffsets := make([]flatbuffers.UOffsetT, inputsLength)
		for j := 0; j < inputsLength; j++ {
			inputsOffsets[j] = builder.CreateString(t.Inputs[j])
		}
		AxsStateCalcSingleStepStartInputsVector(builder, inputsLength)
		for j := inputsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(inputsOffsets[j])
		}
		inputsOffset = builder.EndVector(inputsLength)
	}
	outputsOffset := flatbuffers.UOffsetT(0)
	if t.Outputs != nil {
		outputsLength := len(t.Outputs)
		outputsOffsets := make([]flatbuffers.UOffsetT, outputsLength)
		for j := 0; j < outputsLength; j++ {
			outputsOffsets[j] = builder.CreateString(t.Outputs[j])
		}
		AxsStateCalcSingleStepStartOutputsVector(builder, outputsLength)
		for j := outputsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(outputsOffsets[j])
		}
		outputsOffset = builder.EndVector(outputsLength)
	}
	parameterOffset := t.Parameter.Pack(builder)
	AxsStateCalcSingleStepStart(builder)
	AxsStateCalcSingleStepAddStepID(builder, t.StepID)
	AxsStateCalcSingleStepAddType(builder, typeOffset)
	AxsStateCalcSingleStepAddInputs(builder, inputsOffset)
	AxsStateCalcSingleStepAddOutputs(builder, outputsOffset)
	AxsStateCalcSingleStepAddParameter(builder, parameterOffset)
	return AxsStateCalcSingleStepEnd(builder)
}

func (rcv *AxsStateCalcSingleStep) UnPackTo(t *AxsStateCalcSingleStepT) {
	t.StepID = rcv.StepID()
	t.Type = string(rcv.Type())
	inputsLength := rcv.InputsLength()
	t.Inputs = make([]string, inputsLength)
	for j := 0; j < inputsLength; j++ {
		t.Inputs[j] = string(rcv.Inputs(j))
	}
	outputsLength := rcv.OutputsLength()
	t.Outputs = make([]string, outputsLength)
	for j := 0; j < outputsLength; j++ {
		t.Outputs[j] = string(rcv.Outputs(j))
	}
	t.Parameter = rcv.Parameter(nil).UnPack()
}

func (rcv *AxsStateCalcSingleStep) UnPack() *AxsStateCalcSingleStepT {
	if rcv == nil { return nil }
	t := &AxsStateCalcSingleStepT{}
	rcv.UnPackTo(t)
	return t
}

type AxsStateCalcSingleStep struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsStateCalcSingleStep(buf []byte, offset flatbuffers.UOffsetT) *AxsStateCalcSingleStep {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsStateCalcSingleStep{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsStateCalcSingleStep(buf []byte, offset flatbuffers.UOffsetT) *AxsStateCalcSingleStep {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsStateCalcSingleStep{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsStateCalcSingleStep) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsStateCalcSingleStep) Table() flatbuffers.Table {
	return rcv._tab
}

/// ID of the calculation step
func (rcv *AxsStateCalcSingleStep) StepID() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// ID of the calculation step
func (rcv *AxsStateCalcSingleStep) MutateStepID(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// Typestring of the calculation step
func (rcv *AxsStateCalcSingleStep) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Typestring of the calculation step
/// current input values
func (rcv *AxsStateCalcSingleStep) Inputs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AxsStateCalcSingleStep) InputsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// current input values
/// current output values
func (rcv *AxsStateCalcSingleStep) Outputs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AxsStateCalcSingleStep) OutputsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// current output values
/// all parameter values of the calculation step
///parameter : [AxsStateCalcStepSingleParam];
func (rcv *AxsStateCalcSingleStep) Parameter(obj *AxsStateCalcStepParams) *AxsStateCalcStepParams {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsStateCalcStepParams)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// all parameter values of the calculation step
///parameter : [AxsStateCalcStepSingleParam];
func AxsStateCalcSingleStepStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AxsStateCalcSingleStepAddStepID(builder *flatbuffers.Builder, stepID uint32) {
	builder.PrependUint32Slot(0, stepID, 0)
}
func AxsStateCalcSingleStepAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(type_), 0)
}
func AxsStateCalcSingleStepAddInputs(builder *flatbuffers.Builder, inputs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(inputs), 0)
}
func AxsStateCalcSingleStepStartInputsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AxsStateCalcSingleStepAddOutputs(builder *flatbuffers.Builder, outputs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(outputs), 0)
}
func AxsStateCalcSingleStepStartOutputsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AxsStateCalcSingleStepAddParameter(builder *flatbuffers.Builder, parameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(parameter), 0)
}
func AxsStateCalcSingleStepEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
