// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of a FlexProfile event
type CfgFlexProfileEventT struct {
	SegmentNmb uint32 `json:"segmentNmb"`
	TriggerCondition SegmentTriggerCondition `json:"triggerCondition"`
	TriggerValue float64 `json:"triggerValue"`
	MasterType uint32 `json:"masterType"`
	ActionMode SegmentActionMode `json:"actionMode"`
	ActionBit uint32 `json:"actionBit"`
	SegmentNmbFormula uint32 `json:"segmentNmbFormula"`
	ValueFormula string `json:"valueFormula"`
}

func (t *CfgFlexProfileEventT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	valueFormulaOffset := flatbuffers.UOffsetT(0)
	if t.ValueFormula != "" {
		valueFormulaOffset = builder.CreateString(t.ValueFormula)
	}
	CfgFlexProfileEventStart(builder)
	CfgFlexProfileEventAddSegmentNmb(builder, t.SegmentNmb)
	CfgFlexProfileEventAddTriggerCondition(builder, t.TriggerCondition)
	CfgFlexProfileEventAddTriggerValue(builder, t.TriggerValue)
	CfgFlexProfileEventAddMasterType(builder, t.MasterType)
	CfgFlexProfileEventAddActionMode(builder, t.ActionMode)
	CfgFlexProfileEventAddActionBit(builder, t.ActionBit)
	CfgFlexProfileEventAddSegmentNmbFormula(builder, t.SegmentNmbFormula)
	CfgFlexProfileEventAddValueFormula(builder, valueFormulaOffset)
	return CfgFlexProfileEventEnd(builder)
}

func (rcv *CfgFlexProfileEvent) UnPackTo(t *CfgFlexProfileEventT) {
	t.SegmentNmb = rcv.SegmentNmb()
	t.TriggerCondition = rcv.TriggerCondition()
	t.TriggerValue = rcv.TriggerValue()
	t.MasterType = rcv.MasterType()
	t.ActionMode = rcv.ActionMode()
	t.ActionBit = rcv.ActionBit()
	t.SegmentNmbFormula = rcv.SegmentNmbFormula()
	t.ValueFormula = string(rcv.ValueFormula())
}

func (rcv *CfgFlexProfileEvent) UnPack() *CfgFlexProfileEventT {
	if rcv == nil { return nil }
	t := &CfgFlexProfileEventT{}
	rcv.UnPackTo(t)
	return t
}

type CfgFlexProfileEvent struct {
	_tab flatbuffers.Table
}

func GetRootAsCfgFlexProfileEvent(buf []byte, offset flatbuffers.UOffsetT) *CfgFlexProfileEvent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CfgFlexProfileEvent{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCfgFlexProfileEvent(buf []byte, offset flatbuffers.UOffsetT) *CfgFlexProfileEvent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CfgFlexProfileEvent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CfgFlexProfileEvent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CfgFlexProfileEvent) Table() flatbuffers.Table {
	return rcv._tab
}

/// The event is configured for this segment number
func (rcv *CfgFlexProfileEvent) SegmentNmb() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The event is configured for this segment number
func (rcv *CfgFlexProfileEvent) MutateSegmentNmb(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// Trigger condition of the event
func (rcv *CfgFlexProfileEvent) TriggerCondition() SegmentTriggerCondition {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return SegmentTriggerCondition(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Trigger condition of the event
func (rcv *CfgFlexProfileEvent) MutateTriggerCondition(n SegmentTriggerCondition) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

/// Trigger value
func (rcv *CfgFlexProfileEvent) TriggerValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Trigger value
func (rcv *CfgFlexProfileEvent) MutateTriggerValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// Trigger master type (0: time master, 1: axis master)
func (rcv *CfgFlexProfileEvent) MasterType() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Trigger master type (0: time master, 1: axis master)
func (rcv *CfgFlexProfileEvent) MutateMasterType(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

/// Action mode of the event
func (rcv *CfgFlexProfileEvent) ActionMode() SegmentActionMode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return SegmentActionMode(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

/// Action mode of the event
func (rcv *CfgFlexProfileEvent) MutateActionMode(n SegmentActionMode) bool {
	return rcv._tab.MutateUint32Slot(12, uint32(n))
}

/// Number of the status bit, that is set by the action
func (rcv *CfgFlexProfileEvent) ActionBit() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of the status bit, that is set by the action
func (rcv *CfgFlexProfileEvent) MutateActionBit(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

/// Cam-Builder data: segment number for formula
func (rcv *CfgFlexProfileEvent) SegmentNmbFormula() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Cam-Builder data: segment number for formula
func (rcv *CfgFlexProfileEvent) MutateSegmentNmbFormula(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

/// Cam-Builder data: formula string
func (rcv *CfgFlexProfileEvent) ValueFormula() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Cam-Builder data: formula string
func CfgFlexProfileEventStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func CfgFlexProfileEventAddSegmentNmb(builder *flatbuffers.Builder, segmentNmb uint32) {
	builder.PrependUint32Slot(0, segmentNmb, 0)
}
func CfgFlexProfileEventAddTriggerCondition(builder *flatbuffers.Builder, triggerCondition SegmentTriggerCondition) {
	builder.PrependInt8Slot(1, int8(triggerCondition), 0)
}
func CfgFlexProfileEventAddTriggerValue(builder *flatbuffers.Builder, triggerValue float64) {
	builder.PrependFloat64Slot(2, triggerValue, 0.0)
}
func CfgFlexProfileEventAddMasterType(builder *flatbuffers.Builder, masterType uint32) {
	builder.PrependUint32Slot(3, masterType, 0)
}
func CfgFlexProfileEventAddActionMode(builder *flatbuffers.Builder, actionMode SegmentActionMode) {
	builder.PrependUint32Slot(4, uint32(actionMode), 0)
}
func CfgFlexProfileEventAddActionBit(builder *flatbuffers.Builder, actionBit uint32) {
	builder.PrependUint32Slot(5, actionBit, 0)
}
func CfgFlexProfileEventAddSegmentNmbFormula(builder *flatbuffers.Builder, segmentNmbFormula uint32) {
	builder.PrependUint32Slot(6, segmentNmbFormula, 0)
}
func CfgFlexProfileEventAddValueFormula(builder *flatbuffers.Builder, valueFormula flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(valueFormula), 0)
}
func CfgFlexProfileEventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
