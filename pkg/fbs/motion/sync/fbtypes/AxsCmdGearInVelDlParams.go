// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// GearInVel calculation pipeline parameters, that are stored in the Datalayer RT, for the axis GearInVelEx command
type AxsCmdGearInVelDlParamsT struct {
	SoiMasterOffsetDlIdx int32 `json:"soiMasterOffsetDlIdx"`
	SoiMasterOffsetVelDlIdx int32 `json:"soiMasterOffsetVelDlIdx"`
	SoiMasterOffsetAccDlIdx int32 `json:"soiMasterOffsetAccDlIdx"`
	FofMasterOffsetDlIdx int32 `json:"fofMasterOffsetDlIdx"`
	FofMasterOffsetTimeConstantDlIdx int32 `json:"fofMasterOffsetTimeConstantDlIdx"`
	SlaveVelOffsetDlIdx int32 `json:"slaveVelOffsetDlIdx"`
	FoiSlaveOffsetDlIdx int32 `json:"foiSlaveOffsetDlIdx"`
	FoiSlaveOffsetAccDlIdx int32 `json:"foiSlaveOffsetAccDlIdx"`
	FineAdjustDlIdx int32 `json:"fineAdjustDlIdx"`
}

func (t *AxsCmdGearInVelDlParamsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AxsCmdGearInVelDlParamsStart(builder)
	AxsCmdGearInVelDlParamsAddSoiMasterOffsetDlIdx(builder, t.SoiMasterOffsetDlIdx)
	AxsCmdGearInVelDlParamsAddSoiMasterOffsetVelDlIdx(builder, t.SoiMasterOffsetVelDlIdx)
	AxsCmdGearInVelDlParamsAddSoiMasterOffsetAccDlIdx(builder, t.SoiMasterOffsetAccDlIdx)
	AxsCmdGearInVelDlParamsAddFofMasterOffsetDlIdx(builder, t.FofMasterOffsetDlIdx)
	AxsCmdGearInVelDlParamsAddFofMasterOffsetTimeConstantDlIdx(builder, t.FofMasterOffsetTimeConstantDlIdx)
	AxsCmdGearInVelDlParamsAddSlaveVelOffsetDlIdx(builder, t.SlaveVelOffsetDlIdx)
	AxsCmdGearInVelDlParamsAddFoiSlaveOffsetDlIdx(builder, t.FoiSlaveOffsetDlIdx)
	AxsCmdGearInVelDlParamsAddFoiSlaveOffsetAccDlIdx(builder, t.FoiSlaveOffsetAccDlIdx)
	AxsCmdGearInVelDlParamsAddFineAdjustDlIdx(builder, t.FineAdjustDlIdx)
	return AxsCmdGearInVelDlParamsEnd(builder)
}

func (rcv *AxsCmdGearInVelDlParams) UnPackTo(t *AxsCmdGearInVelDlParamsT) {
	t.SoiMasterOffsetDlIdx = rcv.SoiMasterOffsetDlIdx()
	t.SoiMasterOffsetVelDlIdx = rcv.SoiMasterOffsetVelDlIdx()
	t.SoiMasterOffsetAccDlIdx = rcv.SoiMasterOffsetAccDlIdx()
	t.FofMasterOffsetDlIdx = rcv.FofMasterOffsetDlIdx()
	t.FofMasterOffsetTimeConstantDlIdx = rcv.FofMasterOffsetTimeConstantDlIdx()
	t.SlaveVelOffsetDlIdx = rcv.SlaveVelOffsetDlIdx()
	t.FoiSlaveOffsetDlIdx = rcv.FoiSlaveOffsetDlIdx()
	t.FoiSlaveOffsetAccDlIdx = rcv.FoiSlaveOffsetAccDlIdx()
	t.FineAdjustDlIdx = rcv.FineAdjustDlIdx()
}

func (rcv *AxsCmdGearInVelDlParams) UnPack() *AxsCmdGearInVelDlParamsT {
	if rcv == nil { return nil }
	t := &AxsCmdGearInVelDlParamsT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdGearInVelDlParams struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdGearInVelDlParams(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdGearInVelDlParams {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdGearInVelDlParams{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdGearInVelDlParams(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdGearInVelDlParams {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdGearInVelDlParams{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdGearInVelDlParams) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdGearInVelDlParams) Table() flatbuffers.Table {
	return rcv._tab
}

/// data layer index of master offset target value, second order interpolated
func (rcv *AxsCmdGearInVelDlParams) SoiMasterOffsetDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of master offset target value, second order interpolated
func (rcv *AxsCmdGearInVelDlParams) MutateSoiMasterOffsetDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

/// data layer index of master offset velocity constraint for second order interpolation
func (rcv *AxsCmdGearInVelDlParams) SoiMasterOffsetVelDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of master offset velocity constraint for second order interpolation
func (rcv *AxsCmdGearInVelDlParams) MutateSoiMasterOffsetVelDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// data layer index of master offset acceleration constraint for second order interpolation
func (rcv *AxsCmdGearInVelDlParams) SoiMasterOffsetAccDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of master offset acceleration constraint for second order interpolation
func (rcv *AxsCmdGearInVelDlParams) MutateSoiMasterOffsetAccDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// data layer index of second master offset, first order filtered
func (rcv *AxsCmdGearInVelDlParams) FofMasterOffsetDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of second master offset, first order filtered
func (rcv *AxsCmdGearInVelDlParams) MutateFofMasterOffsetDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// data layer index of time constant for change rate of fofMasterOffset
func (rcv *AxsCmdGearInVelDlParams) FofMasterOffsetTimeConstantDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of time constant for change rate of fofMasterOffset
func (rcv *AxsCmdGearInVelDlParams) MutateFofMasterOffsetTimeConstantDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// data layer index of slave velocity offset target value
func (rcv *AxsCmdGearInVelDlParams) SlaveVelOffsetDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of slave velocity offset target value
func (rcv *AxsCmdGearInVelDlParams) MutateSlaveVelOffsetDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

///  data layer index of slave velocity offset target value, first order interpolated
func (rcv *AxsCmdGearInVelDlParams) FoiSlaveOffsetDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

///  data layer index of slave velocity offset target value, first order interpolated
func (rcv *AxsCmdGearInVelDlParams) MutateFoiSlaveOffsetDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// data layer index of slave offset acceleration constraint for first order interpolation
func (rcv *AxsCmdGearInVelDlParams) FoiSlaveOffsetAccDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of slave offset acceleration constraint for first order interpolation
func (rcv *AxsCmdGearInVelDlParams) MutateFoiSlaveOffsetAccDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// data layer index of fine adjust percentage in addition to the commanded fine adjust
func (rcv *AxsCmdGearInVelDlParams) FineAdjustDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of fine adjust percentage in addition to the commanded fine adjust
func (rcv *AxsCmdGearInVelDlParams) MutateFineAdjustDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func AxsCmdGearInVelDlParamsStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func AxsCmdGearInVelDlParamsAddSoiMasterOffsetDlIdx(builder *flatbuffers.Builder, soiMasterOffsetDlIdx int32) {
	builder.PrependInt32Slot(0, soiMasterOffsetDlIdx, -1)
}
func AxsCmdGearInVelDlParamsAddSoiMasterOffsetVelDlIdx(builder *flatbuffers.Builder, soiMasterOffsetVelDlIdx int32) {
	builder.PrependInt32Slot(1, soiMasterOffsetVelDlIdx, -1)
}
func AxsCmdGearInVelDlParamsAddSoiMasterOffsetAccDlIdx(builder *flatbuffers.Builder, soiMasterOffsetAccDlIdx int32) {
	builder.PrependInt32Slot(2, soiMasterOffsetAccDlIdx, -1)
}
func AxsCmdGearInVelDlParamsAddFofMasterOffsetDlIdx(builder *flatbuffers.Builder, fofMasterOffsetDlIdx int32) {
	builder.PrependInt32Slot(3, fofMasterOffsetDlIdx, -1)
}
func AxsCmdGearInVelDlParamsAddFofMasterOffsetTimeConstantDlIdx(builder *flatbuffers.Builder, fofMasterOffsetTimeConstantDlIdx int32) {
	builder.PrependInt32Slot(4, fofMasterOffsetTimeConstantDlIdx, -1)
}
func AxsCmdGearInVelDlParamsAddSlaveVelOffsetDlIdx(builder *flatbuffers.Builder, slaveVelOffsetDlIdx int32) {
	builder.PrependInt32Slot(5, slaveVelOffsetDlIdx, -1)
}
func AxsCmdGearInVelDlParamsAddFoiSlaveOffsetDlIdx(builder *flatbuffers.Builder, foiSlaveOffsetDlIdx int32) {
	builder.PrependInt32Slot(6, foiSlaveOffsetDlIdx, -1)
}
func AxsCmdGearInVelDlParamsAddFoiSlaveOffsetAccDlIdx(builder *flatbuffers.Builder, foiSlaveOffsetAccDlIdx int32) {
	builder.PrependInt32Slot(7, foiSlaveOffsetAccDlIdx, -1)
}
func AxsCmdGearInVelDlParamsAddFineAdjustDlIdx(builder *flatbuffers.Builder, fineAdjustDlIdx int32) {
	builder.PrependInt32Slot(8, fineAdjustDlIdx, -1)
}
func AxsCmdGearInVelDlParamsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
