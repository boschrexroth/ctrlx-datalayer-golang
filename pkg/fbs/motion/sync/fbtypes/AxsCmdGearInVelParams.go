// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// GearInVel calculation pipeline parameters for the axis GearInVel command
type AxsCmdGearInVelParamsT struct {
	SlaveVelOffset float64
	RatioNumerator int32
	RatioDenominator int32
	FineAdjust float64
}

func (t *AxsCmdGearInVelParamsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AxsCmdGearInVelParamsStart(builder)
	AxsCmdGearInVelParamsAddSlaveVelOffset(builder, t.SlaveVelOffset)
	AxsCmdGearInVelParamsAddRatioNumerator(builder, t.RatioNumerator)
	AxsCmdGearInVelParamsAddRatioDenominator(builder, t.RatioDenominator)
	AxsCmdGearInVelParamsAddFineAdjust(builder, t.FineAdjust)
	return AxsCmdGearInVelParamsEnd(builder)
}

func (rcv *AxsCmdGearInVelParams) UnPackTo(t *AxsCmdGearInVelParamsT) {
	t.SlaveVelOffset = rcv.SlaveVelOffset()
	t.RatioNumerator = rcv.RatioNumerator()
	t.RatioDenominator = rcv.RatioDenominator()
	t.FineAdjust = rcv.FineAdjust()
}

func (rcv *AxsCmdGearInVelParams) UnPack() *AxsCmdGearInVelParamsT {
	if rcv == nil { return nil }
	t := &AxsCmdGearInVelParamsT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdGearInVelParams struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdGearInVelParams(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdGearInVelParams {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdGearInVelParams{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdGearInVelParams(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdGearInVelParams {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdGearInVelParams{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdGearInVelParams) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdGearInVelParams) Table() flatbuffers.Table {
	return rcv._tab
}

/// slave velocity offset
func (rcv *AxsCmdGearInVelParams) SlaveVelOffset() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// slave velocity offset
func (rcv *AxsCmdGearInVelParams) MutateSlaveVelOffset(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// ratio numerator value
func (rcv *AxsCmdGearInVelParams) RatioNumerator() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

/// ratio numerator value
func (rcv *AxsCmdGearInVelParams) MutateRatioNumerator(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// ratio denominator value
func (rcv *AxsCmdGearInVelParams) RatioDenominator() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

/// ratio denominator value
func (rcv *AxsCmdGearInVelParams) MutateRatioDenominator(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// fine adjust parameter
func (rcv *AxsCmdGearInVelParams) FineAdjust() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// fine adjust parameter
func (rcv *AxsCmdGearInVelParams) MutateFineAdjust(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func AxsCmdGearInVelParamsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func AxsCmdGearInVelParamsAddSlaveVelOffset(builder *flatbuffers.Builder, slaveVelOffset float64) {
	builder.PrependFloat64Slot(0, slaveVelOffset, 0.0)
}
func AxsCmdGearInVelParamsAddRatioNumerator(builder *flatbuffers.Builder, ratioNumerator int32) {
	builder.PrependInt32Slot(1, ratioNumerator, 1)
}
func AxsCmdGearInVelParamsAddRatioDenominator(builder *flatbuffers.Builder, ratioDenominator int32) {
	builder.PrependInt32Slot(2, ratioDenominator, 1)
}
func AxsCmdGearInVelParamsAddFineAdjust(builder *flatbuffers.Builder, fineAdjust float64) {
	builder.PrependFloat64Slot(3, fineAdjust, 0.0)
}
func AxsCmdGearInVelParamsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
