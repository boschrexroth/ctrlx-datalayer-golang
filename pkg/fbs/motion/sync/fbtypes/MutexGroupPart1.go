// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// The first group of optional parameters, which mutually exclude each other
type MutexGroupPart1T struct {
	GroupPart1 []string
}

func (t *MutexGroupPart1T) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	groupPart1Offset := flatbuffers.UOffsetT(0)
	if t.GroupPart1 != nil {
		groupPart1Length := len(t.GroupPart1)
		groupPart1Offsets := make([]flatbuffers.UOffsetT, groupPart1Length)
		for j := 0; j < groupPart1Length; j++ {
			groupPart1Offsets[j] = builder.CreateString(t.GroupPart1[j])
		}
		MutexGroupPart1StartGroupPart1Vector(builder, groupPart1Length)
		for j := groupPart1Length - 1; j >= 0; j-- {
			builder.PrependUOffsetT(groupPart1Offsets[j])
		}
		groupPart1Offset = builder.EndVector(groupPart1Length)
	}
	MutexGroupPart1Start(builder)
	MutexGroupPart1AddGroupPart1(builder, groupPart1Offset)
	return MutexGroupPart1End(builder)
}

func (rcv *MutexGroupPart1) UnPackTo(t *MutexGroupPart1T) {
	groupPart1Length := rcv.GroupPart1Length()
	t.GroupPart1 = make([]string, groupPart1Length)
	for j := 0; j < groupPart1Length; j++ {
		t.GroupPart1[j] = string(rcv.GroupPart1(j))
	}
}

func (rcv *MutexGroupPart1) UnPack() *MutexGroupPart1T {
	if rcv == nil { return nil }
	t := &MutexGroupPart1T{}
	rcv.UnPackTo(t)
	return t
}

type MutexGroupPart1 struct {
	_tab flatbuffers.Table
}

func GetRootAsMutexGroupPart1(buf []byte, offset flatbuffers.UOffsetT) *MutexGroupPart1 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MutexGroupPart1{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMutexGroupPart1(buf []byte, offset flatbuffers.UOffsetT) *MutexGroupPart1 {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MutexGroupPart1{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MutexGroupPart1) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MutexGroupPart1) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MutexGroupPart1) GroupPart1(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MutexGroupPart1) GroupPart1Length() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func MutexGroupPart1Start(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func MutexGroupPart1AddGroupPart1(builder *flatbuffers.Builder, groupPart1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(groupPart1), 0)
}
func MutexGroupPart1StartGroupPart1Vector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MutexGroupPart1End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
