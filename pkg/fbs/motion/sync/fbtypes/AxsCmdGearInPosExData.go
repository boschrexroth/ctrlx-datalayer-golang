// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of the axis GearInPosEx command
type AxsCmdGearInPosExDataT struct {
	Master string `json:"master"`
	SyncSource SyncSource `json:"syncSource"`
	SyncMode SyncMode `json:"syncMode"`
	DynSyncDirection DynSyncDirection `json:"dynSyncDirection"`
	Parameters *AxsCmdGearInPosParamsT `json:"parameters"`
	DlParameters *AxsCmdGearInPosDlParamsT `json:"dlParameters"`
	Buffered bool `json:"buffered"`
}

func (t *AxsCmdGearInPosExDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	masterOffset := flatbuffers.UOffsetT(0)
	if t.Master != "" {
		masterOffset = builder.CreateString(t.Master)
	}
	parametersOffset := t.Parameters.Pack(builder)
	dlParametersOffset := t.DlParameters.Pack(builder)
	AxsCmdGearInPosExDataStart(builder)
	AxsCmdGearInPosExDataAddMaster(builder, masterOffset)
	AxsCmdGearInPosExDataAddSyncSource(builder, t.SyncSource)
	AxsCmdGearInPosExDataAddSyncMode(builder, t.SyncMode)
	AxsCmdGearInPosExDataAddDynSyncDirection(builder, t.DynSyncDirection)
	AxsCmdGearInPosExDataAddParameters(builder, parametersOffset)
	AxsCmdGearInPosExDataAddDlParameters(builder, dlParametersOffset)
	AxsCmdGearInPosExDataAddBuffered(builder, t.Buffered)
	return AxsCmdGearInPosExDataEnd(builder)
}

func (rcv *AxsCmdGearInPosExData) UnPackTo(t *AxsCmdGearInPosExDataT) {
	t.Master = string(rcv.Master())
	t.SyncSource = rcv.SyncSource()
	t.SyncMode = rcv.SyncMode()
	t.DynSyncDirection = rcv.DynSyncDirection()
	t.Parameters = rcv.Parameters(nil).UnPack()
	t.DlParameters = rcv.DlParameters(nil).UnPack()
	t.Buffered = rcv.Buffered()
}

func (rcv *AxsCmdGearInPosExData) UnPack() *AxsCmdGearInPosExDataT {
	if rcv == nil { return nil }
	t := &AxsCmdGearInPosExDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdGearInPosExData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdGearInPosExData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdGearInPosExData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdGearInPosExData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdGearInPosExData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdGearInPosExData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdGearInPosExData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdGearInPosExData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdGearInPosExData) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the master axis
func (rcv *AxsCmdGearInPosExData) Master() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the master axis
/// sync source (Actual/Setpoint/Actual-extrapolated)
func (rcv *AxsCmdGearInPosExData) SyncSource() SyncSource {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return SyncSource(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// sync source (Actual/Setpoint/Actual-extrapolated)
func (rcv *AxsCmdGearInPosExData) MutateSyncSource(n SyncSource) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

/// sync mode (Abs/Rel; Init/KeepState)
func (rcv *AxsCmdGearInPosExData) SyncMode() SyncMode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return SyncMode(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// sync mode (Abs/Rel; Init/KeepState)
func (rcv *AxsCmdGearInPosExData) MutateSyncMode(n SyncMode) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

/// dynamic sync direction (Positive/Negative/ShortestWay)
func (rcv *AxsCmdGearInPosExData) DynSyncDirection() DynSyncDirection {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return DynSyncDirection(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// dynamic sync direction (Positive/Negative/ShortestWay)
func (rcv *AxsCmdGearInPosExData) MutateDynSyncDirection(n DynSyncDirection) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

/// gear in pos parameters (master offset, slave offset, master ratio, slave ratio, fine adjust)
func (rcv *AxsCmdGearInPosExData) Parameters(obj *AxsCmdGearInPosParams) *AxsCmdGearInPosParams {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCmdGearInPosParams)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// gear in pos parameters (master offset, slave offset, master ratio, slave ratio, fine adjust)
/// gear in pos data layer parameters
func (rcv *AxsCmdGearInPosExData) DlParameters(obj *AxsCmdGearInPosDlParams) *AxsCmdGearInPosDlParams {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCmdGearInPosDlParams)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// gear in pos data layer parameters
/// should this be a buffered command?
func (rcv *AxsCmdGearInPosExData) Buffered() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// should this be a buffered command?
func (rcv *AxsCmdGearInPosExData) MutateBuffered(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func AxsCmdGearInPosExDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func AxsCmdGearInPosExDataAddMaster(builder *flatbuffers.Builder, master flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(master), 0)
}
func AxsCmdGearInPosExDataAddSyncSource(builder *flatbuffers.Builder, syncSource SyncSource) {
	builder.PrependInt8Slot(1, int8(syncSource), 0)
}
func AxsCmdGearInPosExDataAddSyncMode(builder *flatbuffers.Builder, syncMode SyncMode) {
	builder.PrependInt8Slot(2, int8(syncMode), 0)
}
func AxsCmdGearInPosExDataAddDynSyncDirection(builder *flatbuffers.Builder, dynSyncDirection DynSyncDirection) {
	builder.PrependInt8Slot(3, int8(dynSyncDirection), 0)
}
func AxsCmdGearInPosExDataAddParameters(builder *flatbuffers.Builder, parameters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(parameters), 0)
}
func AxsCmdGearInPosExDataAddDlParameters(builder *flatbuffers.Builder, dlParameters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(dlParameters), 0)
}
func AxsCmdGearInPosExDataAddBuffered(builder *flatbuffers.Builder, buffered bool) {
	builder.PrependBoolSlot(6, buffered, false)
}
func AxsCmdGearInPosExDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
