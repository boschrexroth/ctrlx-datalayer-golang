// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// validation of a calculation pipeline
type PipelineValidationT struct {
	Validations []*SinglePipelineValidationT `json:"validations"`
}

func (t *PipelineValidationT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	validationsOffset := flatbuffers.UOffsetT(0)
	if t.Validations != nil {
		validationsLength := len(t.Validations)
		validationsOffsets := make([]flatbuffers.UOffsetT, validationsLength)
		for j := 0; j < validationsLength; j++ {
			validationsOffsets[j] = t.Validations[j].Pack(builder)
		}
		PipelineValidationStartValidationsVector(builder, validationsLength)
		for j := validationsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(validationsOffsets[j])
		}
		validationsOffset = builder.EndVector(validationsLength)
	}
	PipelineValidationStart(builder)
	PipelineValidationAddValidations(builder, validationsOffset)
	return PipelineValidationEnd(builder)
}

func (rcv *PipelineValidation) UnPackTo(t *PipelineValidationT) {
	validationsLength := rcv.ValidationsLength()
	t.Validations = make([]*SinglePipelineValidationT, validationsLength)
	for j := 0; j < validationsLength; j++ {
		x := SinglePipelineValidation{}
		rcv.Validations(&x, j)
		t.Validations[j] = x.UnPack()
	}
}

func (rcv *PipelineValidation) UnPack() *PipelineValidationT {
	if rcv == nil { return nil }
	t := &PipelineValidationT{}
	rcv.UnPackTo(t)
	return t
}

type PipelineValidation struct {
	_tab flatbuffers.Table
}

func GetRootAsPipelineValidation(buf []byte, offset flatbuffers.UOffsetT) *PipelineValidation {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PipelineValidation{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPipelineValidation(buf []byte, offset flatbuffers.UOffsetT) *PipelineValidation {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PipelineValidation{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PipelineValidation) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PipelineValidation) Table() flatbuffers.Table {
	return rcv._tab
}

/// vector of single result validations (multiple errors can occur)
func (rcv *PipelineValidation) Validations(obj *SinglePipelineValidation, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *PipelineValidation) ValidationsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of single result validations (multiple errors can occur)
func PipelineValidationStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func PipelineValidationAddValidations(builder *flatbuffers.Builder, validations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(validations), 0)
}
func PipelineValidationStartValidationsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PipelineValidationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
