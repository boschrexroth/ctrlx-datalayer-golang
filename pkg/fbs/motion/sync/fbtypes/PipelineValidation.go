// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// single result of the validation of a calculation pipeline
type PipelineValidationT struct {
	MainDiag uint32
	DetailDiag uint32
	Uri string
	AddInfo string
}

func (t *PipelineValidationT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	uriOffset := builder.CreateString(t.Uri)
	addInfoOffset := builder.CreateString(t.AddInfo)
	PipelineValidationStart(builder)
	PipelineValidationAddMainDiag(builder, t.MainDiag)
	PipelineValidationAddDetailDiag(builder, t.DetailDiag)
	PipelineValidationAddUri(builder, uriOffset)
	PipelineValidationAddAddInfo(builder, addInfoOffset)
	return PipelineValidationEnd(builder)
}

func (rcv *PipelineValidation) UnPackTo(t *PipelineValidationT) {
	t.MainDiag = rcv.MainDiag()
	t.DetailDiag = rcv.DetailDiag()
	t.Uri = string(rcv.Uri())
	t.AddInfo = string(rcv.AddInfo())
}

func (rcv *PipelineValidation) UnPack() *PipelineValidationT {
	if rcv == nil { return nil }
	t := &PipelineValidationT{}
	rcv.UnPackTo(t)
	return t
}

type PipelineValidation struct {
	_tab flatbuffers.Table
}

func GetRootAsPipelineValidation(buf []byte, offset flatbuffers.UOffsetT) *PipelineValidation {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PipelineValidation{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPipelineValidation(buf []byte, offset flatbuffers.UOffsetT) *PipelineValidation {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PipelineValidation{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PipelineValidation) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PipelineValidation) Table() flatbuffers.Table {
	return rcv._tab
}

/// main diagnosis code
func (rcv *PipelineValidation) MainDiag() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// main diagnosis code
func (rcv *PipelineValidation) MutateMainDiag(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// detail diagnosis code
func (rcv *PipelineValidation) DetailDiag() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// detail diagnosis code
func (rcv *PipelineValidation) MutateDetailDiag(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

/// URI of the faulty instance
func (rcv *PipelineValidation) Uri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// URI of the faulty instance
/// additional infomation
func (rcv *PipelineValidation) AddInfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// additional infomation
func PipelineValidationStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func PipelineValidationAddMainDiag(builder *flatbuffers.Builder, mainDiag uint32) {
	builder.PrependUint32Slot(0, mainDiag, 0)
}
func PipelineValidationAddDetailDiag(builder *flatbuffers.Builder, detailDiag uint32) {
	builder.PrependUint32Slot(1, detailDiag, 0)
}
func PipelineValidationAddUri(builder *flatbuffers.Builder, uri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(uri), 0)
}
func PipelineValidationAddAddInfo(builder *flatbuffers.Builder, addInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(addInfo), 0)
}
func PipelineValidationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
