// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of the axis GearInPos command
type AxsCmdGearInPosDataT struct {
	Master string
	RatioMaster int32
	RatioSlave int32
	Offset float64
	OffsetDLIdx int32
	CmdMode SyncCmdMode
	Buffered bool
}

func (t *AxsCmdGearInPosDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	masterOffset := builder.CreateString(t.Master)
	AxsCmdGearInPosDataStart(builder)
	AxsCmdGearInPosDataAddMaster(builder, masterOffset)
	AxsCmdGearInPosDataAddRatioMaster(builder, t.RatioMaster)
	AxsCmdGearInPosDataAddRatioSlave(builder, t.RatioSlave)
	AxsCmdGearInPosDataAddOffset(builder, t.Offset)
	AxsCmdGearInPosDataAddOffsetDLIdx(builder, t.OffsetDLIdx)
	AxsCmdGearInPosDataAddCmdMode(builder, t.CmdMode)
	AxsCmdGearInPosDataAddBuffered(builder, t.Buffered)
	return AxsCmdGearInPosDataEnd(builder)
}

func (rcv *AxsCmdGearInPosData) UnPackTo(t *AxsCmdGearInPosDataT) {
	t.Master = string(rcv.Master())
	t.RatioMaster = rcv.RatioMaster()
	t.RatioSlave = rcv.RatioSlave()
	t.Offset = rcv.Offset()
	t.OffsetDLIdx = rcv.OffsetDLIdx()
	t.CmdMode = rcv.CmdMode()
	t.Buffered = rcv.Buffered()
}

func (rcv *AxsCmdGearInPosData) UnPack() *AxsCmdGearInPosDataT {
	if rcv == nil { return nil }
	t := &AxsCmdGearInPosDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdGearInPosData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdGearInPosData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdGearInPosData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdGearInPosData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdGearInPosData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdGearInPosData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdGearInPosData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdGearInPosData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdGearInPosData) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the master axis
func (rcv *AxsCmdGearInPosData) Master() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the master axis
/// gear ratio, master side (can be negative)
func (rcv *AxsCmdGearInPosData) RatioMaster() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

/// gear ratio, master side (can be negative)
func (rcv *AxsCmdGearInPosData) MutateRatioMaster(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// gear ratio, slave side (can be negative)
func (rcv *AxsCmdGearInPosData) RatioSlave() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

/// gear ratio, slave side (can be negative)
func (rcv *AxsCmdGearInPosData) MutateRatioSlave(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// post gear position offset as a constant value (set to 0.0, to have no offset); only used, when offsetDLIdx < 0
func (rcv *AxsCmdGearInPosData) Offset() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// post gear position offset as a constant value (set to 0.0, to have no offset); only used, when offsetDLIdx < 0
func (rcv *AxsCmdGearInPosData) MutateOffset(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// index of the DataLayerRT motion input for the post gear position offset (set to -1, to use the constant offset)
func (rcv *AxsCmdGearInPosData) OffsetDLIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// index of the DataLayerRT motion input for the post gear position offset (set to -1, to use the constant offset)
func (rcv *AxsCmdGearInPosData) MutateOffsetDLIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// Sync command mode
func (rcv *AxsCmdGearInPosData) CmdMode() SyncCmdMode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return SyncCmdMode(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 2
}

/// Sync command mode
func (rcv *AxsCmdGearInPosData) MutateCmdMode(n SyncCmdMode) bool {
	return rcv._tab.MutateInt8Slot(14, int8(n))
}

/// should this be a buffered command?
func (rcv *AxsCmdGearInPosData) Buffered() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// should this be a buffered command?
func (rcv *AxsCmdGearInPosData) MutateBuffered(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func AxsCmdGearInPosDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func AxsCmdGearInPosDataAddMaster(builder *flatbuffers.Builder, master flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(master), 0)
}
func AxsCmdGearInPosDataAddRatioMaster(builder *flatbuffers.Builder, ratioMaster int32) {
	builder.PrependInt32Slot(1, ratioMaster, 1)
}
func AxsCmdGearInPosDataAddRatioSlave(builder *flatbuffers.Builder, ratioSlave int32) {
	builder.PrependInt32Slot(2, ratioSlave, 1)
}
func AxsCmdGearInPosDataAddOffset(builder *flatbuffers.Builder, offset float64) {
	builder.PrependFloat64Slot(3, offset, 0.0)
}
func AxsCmdGearInPosDataAddOffsetDLIdx(builder *flatbuffers.Builder, offsetDLIdx int32) {
	builder.PrependInt32Slot(4, offsetDLIdx, -1)
}
func AxsCmdGearInPosDataAddCmdMode(builder *flatbuffers.Builder, cmdMode SyncCmdMode) {
	builder.PrependInt8Slot(5, int8(cmdMode), 2)
}
func AxsCmdGearInPosDataAddBuffered(builder *flatbuffers.Builder, buffered bool) {
	builder.PrependBoolSlot(6, buffered, false)
}
func AxsCmdGearInPosDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
