// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of a single FlexProfile
type AxsCfgSingleFlexProfileT struct {
	Name string `json:"name"`
	Segments []*CfgFlexProfileSegmentT `json:"segments"`
	Events []*CfgFlexProfileEventT `json:"events"`
	MasterAxsRefVel float64 `json:"masterAxsRefVel"`
	CamBuilderProfileData string `json:"camBuilderProfileData"`
}

func (t *AxsCfgSingleFlexProfileT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	segmentsOffset := flatbuffers.UOffsetT(0)
	if t.Segments != nil {
		segmentsLength := len(t.Segments)
		segmentsOffsets := make([]flatbuffers.UOffsetT, segmentsLength)
		for j := 0; j < segmentsLength; j++ {
			segmentsOffsets[j] = t.Segments[j].Pack(builder)
		}
		AxsCfgSingleFlexProfileStartSegmentsVector(builder, segmentsLength)
		for j := segmentsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(segmentsOffsets[j])
		}
		segmentsOffset = builder.EndVector(segmentsLength)
	}
	eventsOffset := flatbuffers.UOffsetT(0)
	if t.Events != nil {
		eventsLength := len(t.Events)
		eventsOffsets := make([]flatbuffers.UOffsetT, eventsLength)
		for j := 0; j < eventsLength; j++ {
			eventsOffsets[j] = t.Events[j].Pack(builder)
		}
		AxsCfgSingleFlexProfileStartEventsVector(builder, eventsLength)
		for j := eventsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(eventsOffsets[j])
		}
		eventsOffset = builder.EndVector(eventsLength)
	}
	camBuilderProfileDataOffset := flatbuffers.UOffsetT(0)
	if t.CamBuilderProfileData != "" {
		camBuilderProfileDataOffset = builder.CreateString(t.CamBuilderProfileData)
	}
	AxsCfgSingleFlexProfileStart(builder)
	AxsCfgSingleFlexProfileAddName(builder, nameOffset)
	AxsCfgSingleFlexProfileAddSegments(builder, segmentsOffset)
	AxsCfgSingleFlexProfileAddEvents(builder, eventsOffset)
	AxsCfgSingleFlexProfileAddMasterAxsRefVel(builder, t.MasterAxsRefVel)
	AxsCfgSingleFlexProfileAddCamBuilderProfileData(builder, camBuilderProfileDataOffset)
	return AxsCfgSingleFlexProfileEnd(builder)
}

func (rcv *AxsCfgSingleFlexProfile) UnPackTo(t *AxsCfgSingleFlexProfileT) {
	t.Name = string(rcv.Name())
	segmentsLength := rcv.SegmentsLength()
	t.Segments = make([]*CfgFlexProfileSegmentT, segmentsLength)
	for j := 0; j < segmentsLength; j++ {
		x := CfgFlexProfileSegment{}
		rcv.Segments(&x, j)
		t.Segments[j] = x.UnPack()
	}
	eventsLength := rcv.EventsLength()
	t.Events = make([]*CfgFlexProfileEventT, eventsLength)
	for j := 0; j < eventsLength; j++ {
		x := CfgFlexProfileEvent{}
		rcv.Events(&x, j)
		t.Events[j] = x.UnPack()
	}
	t.MasterAxsRefVel = rcv.MasterAxsRefVel()
	t.CamBuilderProfileData = string(rcv.CamBuilderProfileData())
}

func (rcv *AxsCfgSingleFlexProfile) UnPack() *AxsCfgSingleFlexProfileT {
	if rcv == nil { return nil }
	t := &AxsCfgSingleFlexProfileT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgSingleFlexProfile struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgSingleFlexProfile(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgSingleFlexProfile {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgSingleFlexProfile{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgSingleFlexProfile(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgSingleFlexProfile {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgSingleFlexProfile{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgSingleFlexProfile) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgSingleFlexProfile) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the single FlexProfile
func (rcv *AxsCfgSingleFlexProfile) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the single FlexProfile
/// FlexProfile segment description
func (rcv *AxsCfgSingleFlexProfile) Segments(obj *CfgFlexProfileSegment, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AxsCfgSingleFlexProfile) SegmentsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// FlexProfile segment description
/// FlexProfile event description
func (rcv *AxsCfgSingleFlexProfile) Events(obj *CfgFlexProfileEvent, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AxsCfgSingleFlexProfile) EventsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// FlexProfile event description
/// master axis reference velocity. This value is mandatory when segments are written.
func (rcv *AxsCfgSingleFlexProfile) MasterAxsRefVel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// master axis reference velocity. This value is mandatory when segments are written.
func (rcv *AxsCfgSingleFlexProfile) MutateMasterAxsRefVel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// cam builder data (profile specific)
func (rcv *AxsCfgSingleFlexProfile) CamBuilderProfileData() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// cam builder data (profile specific)
func AxsCfgSingleFlexProfileStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AxsCfgSingleFlexProfileAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func AxsCfgSingleFlexProfileAddSegments(builder *flatbuffers.Builder, segments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(segments), 0)
}
func AxsCfgSingleFlexProfileStartSegmentsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AxsCfgSingleFlexProfileAddEvents(builder *flatbuffers.Builder, events flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(events), 0)
}
func AxsCfgSingleFlexProfileStartEventsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AxsCfgSingleFlexProfileAddMasterAxsRefVel(builder *flatbuffers.Builder, masterAxsRefVel float64) {
	builder.PrependFloat64Slot(3, masterAxsRefVel, 0.0)
}
func AxsCfgSingleFlexProfileAddCamBuilderProfileData(builder *flatbuffers.Builder, camBuilderProfileData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(camBuilderProfileData), 0)
}
func AxsCfgSingleFlexProfileEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
