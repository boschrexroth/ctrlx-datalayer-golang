// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of a single calculation pipeline
type CalcPipelineCfgT struct {
	Name string
	Generic bool
	Steps []*CalcStepCfgT
}

func (t *CalcPipelineCfgT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	stepsOffset := flatbuffers.UOffsetT(0)
	if t.Steps != nil {
		stepsLength := len(t.Steps)
		stepsOffsets := make([]flatbuffers.UOffsetT, stepsLength)
		for j := 0; j < stepsLength; j++ {
			stepsOffsets[j] = t.Steps[j].Pack(builder)
		}
		CalcPipelineCfgStartStepsVector(builder, stepsLength)
		for j := stepsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(stepsOffsets[j])
		}
		stepsOffset = builder.EndVector(stepsLength)
	}
	CalcPipelineCfgStart(builder)
	CalcPipelineCfgAddName(builder, nameOffset)
	CalcPipelineCfgAddGeneric(builder, t.Generic)
	CalcPipelineCfgAddSteps(builder, stepsOffset)
	return CalcPipelineCfgEnd(builder)
}

func (rcv *CalcPipelineCfg) UnPackTo(t *CalcPipelineCfgT) {
	t.Name = string(rcv.Name())
	t.Generic = rcv.Generic()
	stepsLength := rcv.StepsLength()
	t.Steps = make([]*CalcStepCfgT, stepsLength)
	for j := 0; j < stepsLength; j++ {
		x := CalcStepCfg{}
		rcv.Steps(&x, j)
		t.Steps[j] = x.UnPack()
	}
}

func (rcv *CalcPipelineCfg) UnPack() *CalcPipelineCfgT {
	if rcv == nil { return nil }
	t := &CalcPipelineCfgT{}
	rcv.UnPackTo(t)
	return t
}

type CalcPipelineCfg struct {
	_tab flatbuffers.Table
}

func GetRootAsCalcPipelineCfg(buf []byte, offset flatbuffers.UOffsetT) *CalcPipelineCfg {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CalcPipelineCfg{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCalcPipelineCfg(buf []byte, offset flatbuffers.UOffsetT) *CalcPipelineCfg {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CalcPipelineCfg{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CalcPipelineCfg) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CalcPipelineCfg) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the calculation pipeline
func (rcv *CalcPipelineCfg) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the calculation pipeline
/// is this a generic pipeline (when not, its provided by a command and is read-only)
func (rcv *CalcPipelineCfg) Generic() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// is this a generic pipeline (when not, its provided by a command and is read-only)
func (rcv *CalcPipelineCfg) MutateGeneric(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

/// vector of all calculation steps
func (rcv *CalcPipelineCfg) Steps(obj *CalcStepCfg, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *CalcPipelineCfg) StepsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of all calculation steps
func CalcPipelineCfgStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func CalcPipelineCfgAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func CalcPipelineCfgAddGeneric(builder *flatbuffers.Builder, generic bool) {
	builder.PrependBoolSlot(1, generic, true)
}
func CalcPipelineCfgAddSteps(builder *flatbuffers.Builder, steps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(steps), 0)
}
func CalcPipelineCfgStartStepsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CalcPipelineCfgEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
