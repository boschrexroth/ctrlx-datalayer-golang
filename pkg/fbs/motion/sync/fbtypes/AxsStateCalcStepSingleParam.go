// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// a single parameter of a calculation step
type AxsStateCalcStepSingleParamT struct {
	Name string
	Value string
	Detail string
}

func (t *AxsStateCalcStepSingleParamT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	valueOffset := builder.CreateString(t.Value)
	detailOffset := builder.CreateString(t.Detail)
	AxsStateCalcStepSingleParamStart(builder)
	AxsStateCalcStepSingleParamAddName(builder, nameOffset)
	AxsStateCalcStepSingleParamAddValue(builder, valueOffset)
	AxsStateCalcStepSingleParamAddDetail(builder, detailOffset)
	return AxsStateCalcStepSingleParamEnd(builder)
}

func (rcv *AxsStateCalcStepSingleParam) UnPackTo(t *AxsStateCalcStepSingleParamT) {
	t.Name = string(rcv.Name())
	t.Value = string(rcv.Value())
	t.Detail = string(rcv.Detail())
}

func (rcv *AxsStateCalcStepSingleParam) UnPack() *AxsStateCalcStepSingleParamT {
	if rcv == nil { return nil }
	t := &AxsStateCalcStepSingleParamT{}
	rcv.UnPackTo(t)
	return t
}

type AxsStateCalcStepSingleParam struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsStateCalcStepSingleParam(buf []byte, offset flatbuffers.UOffsetT) *AxsStateCalcStepSingleParam {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsStateCalcStepSingleParam{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsStateCalcStepSingleParam(buf []byte, offset flatbuffers.UOffsetT) *AxsStateCalcStepSingleParam {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsStateCalcStepSingleParam{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsStateCalcStepSingleParam) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsStateCalcStepSingleParam) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the parameter
func (rcv *AxsStateCalcStepSingleParam) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the parameter
/// value of the parameter
func (rcv *AxsStateCalcStepSingleParam) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// value of the parameter
/// detail information of the parameter (e.g. content, when it's a real-time input value)
func (rcv *AxsStateCalcStepSingleParam) Detail() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// detail information of the parameter (e.g. content, when it's a real-time input value)
func AxsStateCalcStepSingleParamStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AxsStateCalcStepSingleParamAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func AxsStateCalcStepSingleParamAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}
func AxsStateCalcStepSingleParamAddDetail(builder *flatbuffers.Builder, detail flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(detail), 0)
}
func AxsStateCalcStepSingleParamEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
