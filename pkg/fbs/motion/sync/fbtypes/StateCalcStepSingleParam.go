// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// a single parameter of a calculation step
type StateCalcStepSingleParamT struct {
	Name string `json:"name"`
	Description string `json:"description"`
	Mandatory bool `json:"mandatory"`
	Type ParameterType `json:"type"`
	Unit UnitValueType `json:"unit"`
}

func (t *StateCalcStepSingleParamT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	descriptionOffset := flatbuffers.UOffsetT(0)
	if t.Description != "" {
		descriptionOffset = builder.CreateString(t.Description)
	}
	StateCalcStepSingleParamStart(builder)
	StateCalcStepSingleParamAddName(builder, nameOffset)
	StateCalcStepSingleParamAddDescription(builder, descriptionOffset)
	StateCalcStepSingleParamAddMandatory(builder, t.Mandatory)
	StateCalcStepSingleParamAddType(builder, t.Type)
	StateCalcStepSingleParamAddUnit(builder, t.Unit)
	return StateCalcStepSingleParamEnd(builder)
}

func (rcv *StateCalcStepSingleParam) UnPackTo(t *StateCalcStepSingleParamT) {
	t.Name = string(rcv.Name())
	t.Description = string(rcv.Description())
	t.Mandatory = rcv.Mandatory()
	t.Type = rcv.Type()
	t.Unit = rcv.Unit()
}

func (rcv *StateCalcStepSingleParam) UnPack() *StateCalcStepSingleParamT {
	if rcv == nil { return nil }
	t := &StateCalcStepSingleParamT{}
	rcv.UnPackTo(t)
	return t
}

type StateCalcStepSingleParam struct {
	_tab flatbuffers.Table
}

func GetRootAsStateCalcStepSingleParam(buf []byte, offset flatbuffers.UOffsetT) *StateCalcStepSingleParam {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StateCalcStepSingleParam{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStateCalcStepSingleParam(buf []byte, offset flatbuffers.UOffsetT) *StateCalcStepSingleParam {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StateCalcStepSingleParam{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *StateCalcStepSingleParam) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StateCalcStepSingleParam) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the parameter
func (rcv *StateCalcStepSingleParam) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the parameter
/// what the parameter of the calculation step does
func (rcv *StateCalcStepSingleParam) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// what the parameter of the calculation step does
/// is this parameter mandatory?
func (rcv *StateCalcStepSingleParam) Mandatory() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// is this parameter mandatory?
func (rcv *StateCalcStepSingleParam) MutateMandatory(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

/// type of the parameter
func (rcv *StateCalcStepSingleParam) Type() ParameterType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return ParameterType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// type of the parameter
func (rcv *StateCalcStepSingleParam) MutateType(n ParameterType) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

/// unit value of the parameter
func (rcv *StateCalcStepSingleParam) Unit() UnitValueType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return UnitValueType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// unit value of the parameter
func (rcv *StateCalcStepSingleParam) MutateUnit(n UnitValueType) bool {
	return rcv._tab.MutateInt8Slot(12, int8(n))
}

func StateCalcStepSingleParamStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func StateCalcStepSingleParamAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func StateCalcStepSingleParamAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(description), 0)
}
func StateCalcStepSingleParamAddMandatory(builder *flatbuffers.Builder, mandatory bool) {
	builder.PrependBoolSlot(2, mandatory, false)
}
func StateCalcStepSingleParamAddType(builder *flatbuffers.Builder, type_ ParameterType) {
	builder.PrependInt8Slot(3, int8(type_), 0)
}
func StateCalcStepSingleParamAddUnit(builder *flatbuffers.Builder, unit UnitValueType) {
	builder.PrependInt8Slot(4, int8(unit), 0)
}
func StateCalcStepSingleParamEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
