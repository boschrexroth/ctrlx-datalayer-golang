// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// state of a CamIn object
type AxsStateCamInObjT struct {
	Execution *AxsStateCamInExecutionT `json:"execution"`
}

func (t *AxsStateCamInObjT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	executionOffset := t.Execution.Pack(builder)
	AxsStateCamInObjStart(builder)
	AxsStateCamInObjAddExecution(builder, executionOffset)
	return AxsStateCamInObjEnd(builder)
}

func (rcv *AxsStateCamInObj) UnPackTo(t *AxsStateCamInObjT) {
	t.Execution = rcv.Execution(nil).UnPack()
}

func (rcv *AxsStateCamInObj) UnPack() *AxsStateCamInObjT {
	if rcv == nil { return nil }
	t := &AxsStateCamInObjT{}
	rcv.UnPackTo(t)
	return t
}

type AxsStateCamInObj struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsStateCamInObj(buf []byte, offset flatbuffers.UOffsetT) *AxsStateCamInObj {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsStateCamInObj{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsStateCamInObj(buf []byte, offset flatbuffers.UOffsetT) *AxsStateCamInObj {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsStateCamInObj{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsStateCamInObj) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsStateCamInObj) Table() flatbuffers.Table {
	return rcv._tab
}

/// state information of execution
func (rcv *AxsStateCamInObj) Execution(obj *AxsStateCamInExecution) *AxsStateCamInExecution {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsStateCamInExecution)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// state information of execution
func AxsStateCamInObjStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AxsStateCamInObjAddExecution(builder *flatbuffers.Builder, execution flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(execution), 0)
}
func AxsStateCamInObjEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
