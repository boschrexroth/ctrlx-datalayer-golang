// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// CamIn calculation pipeline parameters, that are stored in the Datalayer RT, for the axis CamInEx command
type AxsCmdCamInDlParamsT struct {
	SoiMasterOffsetDlIdx int32 `json:"soiMasterOffsetDlIdx"`
	SoiMasterOffsetVelDlIdx int32 `json:"soiMasterOffsetVelDlIdx"`
	SoiMasterOffsetAccDlIdx int32 `json:"soiMasterOffsetAccDlIdx"`
	SoiSlaveOffsetDlIdx int32 `json:"soiSlaveOffsetDlIdx"`
	SoiSlaveOffsetVelDlIdx int32 `json:"soiSlaveOffsetVelDlIdx"`
	SoiSlaveOffsetAccDlIdx int32 `json:"soiSlaveOffsetAccDlIdx"`
	FofMasterOffsetDlIdx int32 `json:"fofMasterOffsetDlIdx"`
	FofMasterOffsetTimeConstantDlIdx int32 `json:"fofMasterOffsetTimeConstantDlIdx"`
	FofSlaveOffsetDlIdx int32 `json:"fofSlaveOffsetDlIdx"`
	FofSlaveOffsetTimeConstantDlIdx int32 `json:"fofSlaveOffsetTimeConstantDlIdx"`
	FineAdjustDlIdx int32 `json:"fineAdjustDlIdx"`
	SoiAngleAdjustDlIdx int32 `json:"soiAngleAdjustDlIdx"`
	SoiAngleAdjustVelDlIdx int32 `json:"soiAngleAdjustVelDlIdx"`
	SoiAngleAdjustAccDlIdx int32 `json:"soiAngleAdjustAccDlIdx"`
	FofAngleAdjustDlIdx int32 `json:"fofAngleAdjustDlIdx"`
	FofAngleAdjustTimeConstantDlIdx int32 `json:"fofAngleAdjustTimeConstantDlIdx"`
}

func (t *AxsCmdCamInDlParamsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AxsCmdCamInDlParamsStart(builder)
	AxsCmdCamInDlParamsAddSoiMasterOffsetDlIdx(builder, t.SoiMasterOffsetDlIdx)
	AxsCmdCamInDlParamsAddSoiMasterOffsetVelDlIdx(builder, t.SoiMasterOffsetVelDlIdx)
	AxsCmdCamInDlParamsAddSoiMasterOffsetAccDlIdx(builder, t.SoiMasterOffsetAccDlIdx)
	AxsCmdCamInDlParamsAddSoiSlaveOffsetDlIdx(builder, t.SoiSlaveOffsetDlIdx)
	AxsCmdCamInDlParamsAddSoiSlaveOffsetVelDlIdx(builder, t.SoiSlaveOffsetVelDlIdx)
	AxsCmdCamInDlParamsAddSoiSlaveOffsetAccDlIdx(builder, t.SoiSlaveOffsetAccDlIdx)
	AxsCmdCamInDlParamsAddFofMasterOffsetDlIdx(builder, t.FofMasterOffsetDlIdx)
	AxsCmdCamInDlParamsAddFofMasterOffsetTimeConstantDlIdx(builder, t.FofMasterOffsetTimeConstantDlIdx)
	AxsCmdCamInDlParamsAddFofSlaveOffsetDlIdx(builder, t.FofSlaveOffsetDlIdx)
	AxsCmdCamInDlParamsAddFofSlaveOffsetTimeConstantDlIdx(builder, t.FofSlaveOffsetTimeConstantDlIdx)
	AxsCmdCamInDlParamsAddFineAdjustDlIdx(builder, t.FineAdjustDlIdx)
	AxsCmdCamInDlParamsAddSoiAngleAdjustDlIdx(builder, t.SoiAngleAdjustDlIdx)
	AxsCmdCamInDlParamsAddSoiAngleAdjustVelDlIdx(builder, t.SoiAngleAdjustVelDlIdx)
	AxsCmdCamInDlParamsAddSoiAngleAdjustAccDlIdx(builder, t.SoiAngleAdjustAccDlIdx)
	AxsCmdCamInDlParamsAddFofAngleAdjustDlIdx(builder, t.FofAngleAdjustDlIdx)
	AxsCmdCamInDlParamsAddFofAngleAdjustTimeConstantDlIdx(builder, t.FofAngleAdjustTimeConstantDlIdx)
	return AxsCmdCamInDlParamsEnd(builder)
}

func (rcv *AxsCmdCamInDlParams) UnPackTo(t *AxsCmdCamInDlParamsT) {
	t.SoiMasterOffsetDlIdx = rcv.SoiMasterOffsetDlIdx()
	t.SoiMasterOffsetVelDlIdx = rcv.SoiMasterOffsetVelDlIdx()
	t.SoiMasterOffsetAccDlIdx = rcv.SoiMasterOffsetAccDlIdx()
	t.SoiSlaveOffsetDlIdx = rcv.SoiSlaveOffsetDlIdx()
	t.SoiSlaveOffsetVelDlIdx = rcv.SoiSlaveOffsetVelDlIdx()
	t.SoiSlaveOffsetAccDlIdx = rcv.SoiSlaveOffsetAccDlIdx()
	t.FofMasterOffsetDlIdx = rcv.FofMasterOffsetDlIdx()
	t.FofMasterOffsetTimeConstantDlIdx = rcv.FofMasterOffsetTimeConstantDlIdx()
	t.FofSlaveOffsetDlIdx = rcv.FofSlaveOffsetDlIdx()
	t.FofSlaveOffsetTimeConstantDlIdx = rcv.FofSlaveOffsetTimeConstantDlIdx()
	t.FineAdjustDlIdx = rcv.FineAdjustDlIdx()
	t.SoiAngleAdjustDlIdx = rcv.SoiAngleAdjustDlIdx()
	t.SoiAngleAdjustVelDlIdx = rcv.SoiAngleAdjustVelDlIdx()
	t.SoiAngleAdjustAccDlIdx = rcv.SoiAngleAdjustAccDlIdx()
	t.FofAngleAdjustDlIdx = rcv.FofAngleAdjustDlIdx()
	t.FofAngleAdjustTimeConstantDlIdx = rcv.FofAngleAdjustTimeConstantDlIdx()
}

func (rcv *AxsCmdCamInDlParams) UnPack() *AxsCmdCamInDlParamsT {
	if rcv == nil { return nil }
	t := &AxsCmdCamInDlParamsT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdCamInDlParams struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdCamInDlParams(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdCamInDlParams {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdCamInDlParams{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdCamInDlParams(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdCamInDlParams {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdCamInDlParams{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdCamInDlParams) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdCamInDlParams) Table() flatbuffers.Table {
	return rcv._tab
}

/// data layer index of master offset target value, second order interpolated
func (rcv *AxsCmdCamInDlParams) SoiMasterOffsetDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of master offset target value, second order interpolated
func (rcv *AxsCmdCamInDlParams) MutateSoiMasterOffsetDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

/// data layer index of master offset velocity constraint for second order interpolation
func (rcv *AxsCmdCamInDlParams) SoiMasterOffsetVelDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of master offset velocity constraint for second order interpolation
func (rcv *AxsCmdCamInDlParams) MutateSoiMasterOffsetVelDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// data layer index of master offset acceleration constraint for second order interpolation
func (rcv *AxsCmdCamInDlParams) SoiMasterOffsetAccDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of master offset acceleration constraint for second order interpolation
func (rcv *AxsCmdCamInDlParams) MutateSoiMasterOffsetAccDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// data layer index of slave offset target value, second order interpolated
func (rcv *AxsCmdCamInDlParams) SoiSlaveOffsetDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of slave offset target value, second order interpolated
func (rcv *AxsCmdCamInDlParams) MutateSoiSlaveOffsetDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// data layer index of slave offset velocity constraint for second order interpolation
func (rcv *AxsCmdCamInDlParams) SoiSlaveOffsetVelDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of slave offset velocity constraint for second order interpolation
func (rcv *AxsCmdCamInDlParams) MutateSoiSlaveOffsetVelDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// data layer index of slave offset acceleration constraint for second order interpolation
func (rcv *AxsCmdCamInDlParams) SoiSlaveOffsetAccDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of slave offset acceleration constraint for second order interpolation
func (rcv *AxsCmdCamInDlParams) MutateSoiSlaveOffsetAccDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

/// data layer index of second master offset, first order filtered
func (rcv *AxsCmdCamInDlParams) FofMasterOffsetDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of second master offset, first order filtered
func (rcv *AxsCmdCamInDlParams) MutateFofMasterOffsetDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// data layer index of time constant for change rate of fofMasterOffset
func (rcv *AxsCmdCamInDlParams) FofMasterOffsetTimeConstantDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of time constant for change rate of fofMasterOffset
func (rcv *AxsCmdCamInDlParams) MutateFofMasterOffsetTimeConstantDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// data layer index of second slave offset, first order filtered
func (rcv *AxsCmdCamInDlParams) FofSlaveOffsetDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of second slave offset, first order filtered
func (rcv *AxsCmdCamInDlParams) MutateFofSlaveOffsetDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

/// data layer index of time constant for change rate of fofSlaveOffset
func (rcv *AxsCmdCamInDlParams) FofSlaveOffsetTimeConstantDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of time constant for change rate of fofSlaveOffset
func (rcv *AxsCmdCamInDlParams) MutateFofSlaveOffsetTimeConstantDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

/// data layer index of fine adjust percentage in addition to the commanded fine adjust
func (rcv *AxsCmdCamInDlParams) FineAdjustDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of fine adjust percentage in addition to the commanded fine adjust
func (rcv *AxsCmdCamInDlParams) MutateFineAdjustDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

/// data layer index of angle adjust value
func (rcv *AxsCmdCamInDlParams) SoiAngleAdjustDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of angle adjust value
func (rcv *AxsCmdCamInDlParams) MutateSoiAngleAdjustDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

/// data layer index of angle adjust velocity constraint for second order interpolation
func (rcv *AxsCmdCamInDlParams) SoiAngleAdjustVelDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of angle adjust velocity constraint for second order interpolation
func (rcv *AxsCmdCamInDlParams) MutateSoiAngleAdjustVelDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// data layer index of angle adjust acceleration constraint for second order interpolation
func (rcv *AxsCmdCamInDlParams) SoiAngleAdjustAccDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of angle adjust acceleration constraint for second order interpolation
func (rcv *AxsCmdCamInDlParams) MutateSoiAngleAdjustAccDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

/// data layer index of second angle adjust, first order filtered
func (rcv *AxsCmdCamInDlParams) FofAngleAdjustDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of second angle adjust, first order filtered
func (rcv *AxsCmdCamInDlParams) MutateFofAngleAdjustDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// data layer index of time constant for change rate of fofAngleAdjust
func (rcv *AxsCmdCamInDlParams) FofAngleAdjustTimeConstantDlIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// data layer index of time constant for change rate of fofAngleAdjust
func (rcv *AxsCmdCamInDlParams) MutateFofAngleAdjustTimeConstantDlIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

func AxsCmdCamInDlParamsStart(builder *flatbuffers.Builder) {
	builder.StartObject(16)
}
func AxsCmdCamInDlParamsAddSoiMasterOffsetDlIdx(builder *flatbuffers.Builder, soiMasterOffsetDlIdx int32) {
	builder.PrependInt32Slot(0, soiMasterOffsetDlIdx, -1)
}
func AxsCmdCamInDlParamsAddSoiMasterOffsetVelDlIdx(builder *flatbuffers.Builder, soiMasterOffsetVelDlIdx int32) {
	builder.PrependInt32Slot(1, soiMasterOffsetVelDlIdx, -1)
}
func AxsCmdCamInDlParamsAddSoiMasterOffsetAccDlIdx(builder *flatbuffers.Builder, soiMasterOffsetAccDlIdx int32) {
	builder.PrependInt32Slot(2, soiMasterOffsetAccDlIdx, -1)
}
func AxsCmdCamInDlParamsAddSoiSlaveOffsetDlIdx(builder *flatbuffers.Builder, soiSlaveOffsetDlIdx int32) {
	builder.PrependInt32Slot(3, soiSlaveOffsetDlIdx, -1)
}
func AxsCmdCamInDlParamsAddSoiSlaveOffsetVelDlIdx(builder *flatbuffers.Builder, soiSlaveOffsetVelDlIdx int32) {
	builder.PrependInt32Slot(4, soiSlaveOffsetVelDlIdx, -1)
}
func AxsCmdCamInDlParamsAddSoiSlaveOffsetAccDlIdx(builder *flatbuffers.Builder, soiSlaveOffsetAccDlIdx int32) {
	builder.PrependInt32Slot(5, soiSlaveOffsetAccDlIdx, -1)
}
func AxsCmdCamInDlParamsAddFofMasterOffsetDlIdx(builder *flatbuffers.Builder, fofMasterOffsetDlIdx int32) {
	builder.PrependInt32Slot(6, fofMasterOffsetDlIdx, -1)
}
func AxsCmdCamInDlParamsAddFofMasterOffsetTimeConstantDlIdx(builder *flatbuffers.Builder, fofMasterOffsetTimeConstantDlIdx int32) {
	builder.PrependInt32Slot(7, fofMasterOffsetTimeConstantDlIdx, -1)
}
func AxsCmdCamInDlParamsAddFofSlaveOffsetDlIdx(builder *flatbuffers.Builder, fofSlaveOffsetDlIdx int32) {
	builder.PrependInt32Slot(8, fofSlaveOffsetDlIdx, -1)
}
func AxsCmdCamInDlParamsAddFofSlaveOffsetTimeConstantDlIdx(builder *flatbuffers.Builder, fofSlaveOffsetTimeConstantDlIdx int32) {
	builder.PrependInt32Slot(9, fofSlaveOffsetTimeConstantDlIdx, -1)
}
func AxsCmdCamInDlParamsAddFineAdjustDlIdx(builder *flatbuffers.Builder, fineAdjustDlIdx int32) {
	builder.PrependInt32Slot(10, fineAdjustDlIdx, -1)
}
func AxsCmdCamInDlParamsAddSoiAngleAdjustDlIdx(builder *flatbuffers.Builder, soiAngleAdjustDlIdx int32) {
	builder.PrependInt32Slot(11, soiAngleAdjustDlIdx, -1)
}
func AxsCmdCamInDlParamsAddSoiAngleAdjustVelDlIdx(builder *flatbuffers.Builder, soiAngleAdjustVelDlIdx int32) {
	builder.PrependInt32Slot(12, soiAngleAdjustVelDlIdx, -1)
}
func AxsCmdCamInDlParamsAddSoiAngleAdjustAccDlIdx(builder *flatbuffers.Builder, soiAngleAdjustAccDlIdx int32) {
	builder.PrependInt32Slot(13, soiAngleAdjustAccDlIdx, -1)
}
func AxsCmdCamInDlParamsAddFofAngleAdjustDlIdx(builder *flatbuffers.Builder, fofAngleAdjustDlIdx int32) {
	builder.PrependInt32Slot(14, fofAngleAdjustDlIdx, -1)
}
func AxsCmdCamInDlParamsAddFofAngleAdjustTimeConstantDlIdx(builder *flatbuffers.Builder, fofAngleAdjustTimeConstantDlIdx int32) {
	builder.PrependInt32Slot(15, fofAngleAdjustTimeConstantDlIdx, -1)
}
func AxsCmdCamInDlParamsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
