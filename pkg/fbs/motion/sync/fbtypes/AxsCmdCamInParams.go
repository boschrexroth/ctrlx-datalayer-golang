// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// CamIn calculation pipeline parameters for the axis CamIn command
type AxsCmdCamInParamsT struct {
	MasterOffset float64 `json:"masterOffset"`
	SlaveOffset float64 `json:"slaveOffset"`
	RatioNumerator int32 `json:"ratioNumerator"`
	RatioDenominator int32 `json:"ratioDenominator"`
	FineAdjust float64 `json:"fineAdjust"`
	GainFactor float64 `json:"gainFactor"`
	AngleAdjust float64 `json:"angleAdjust"`
	ProfileEntry ProfileEntry `json:"profileEntry"`
	ProfileExecutionMode ProfileExecutionMode `json:"profileExecutionMode"`
	PointTable string `json:"pointTable"`
	SwitchPosition float64 `json:"switchPosition"`
	SwitchProfileOnPos bool `json:"switchProfileOnPos"`
	SwitchGearOnPos bool `json:"switchGearOnPos"`
	SwitchPositionGainFactor float64 `json:"switchPositionGainFactor"`
	SwitchGainFactorOnPos bool `json:"switchGainFactorOnPos"`
}

func (t *AxsCmdCamInParamsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	pointTableOffset := flatbuffers.UOffsetT(0)
	if t.PointTable != "" {
		pointTableOffset = builder.CreateString(t.PointTable)
	}
	AxsCmdCamInParamsStart(builder)
	AxsCmdCamInParamsAddMasterOffset(builder, t.MasterOffset)
	AxsCmdCamInParamsAddSlaveOffset(builder, t.SlaveOffset)
	AxsCmdCamInParamsAddRatioNumerator(builder, t.RatioNumerator)
	AxsCmdCamInParamsAddRatioDenominator(builder, t.RatioDenominator)
	AxsCmdCamInParamsAddFineAdjust(builder, t.FineAdjust)
	AxsCmdCamInParamsAddGainFactor(builder, t.GainFactor)
	AxsCmdCamInParamsAddAngleAdjust(builder, t.AngleAdjust)
	AxsCmdCamInParamsAddProfileEntry(builder, t.ProfileEntry)
	AxsCmdCamInParamsAddProfileExecutionMode(builder, t.ProfileExecutionMode)
	AxsCmdCamInParamsAddPointTable(builder, pointTableOffset)
	AxsCmdCamInParamsAddSwitchPosition(builder, t.SwitchPosition)
	AxsCmdCamInParamsAddSwitchProfileOnPos(builder, t.SwitchProfileOnPos)
	AxsCmdCamInParamsAddSwitchGearOnPos(builder, t.SwitchGearOnPos)
	AxsCmdCamInParamsAddSwitchPositionGainFactor(builder, t.SwitchPositionGainFactor)
	AxsCmdCamInParamsAddSwitchGainFactorOnPos(builder, t.SwitchGainFactorOnPos)
	return AxsCmdCamInParamsEnd(builder)
}

func (rcv *AxsCmdCamInParams) UnPackTo(t *AxsCmdCamInParamsT) {
	t.MasterOffset = rcv.MasterOffset()
	t.SlaveOffset = rcv.SlaveOffset()
	t.RatioNumerator = rcv.RatioNumerator()
	t.RatioDenominator = rcv.RatioDenominator()
	t.FineAdjust = rcv.FineAdjust()
	t.GainFactor = rcv.GainFactor()
	t.AngleAdjust = rcv.AngleAdjust()
	t.ProfileEntry = rcv.ProfileEntry()
	t.ProfileExecutionMode = rcv.ProfileExecutionMode()
	t.PointTable = string(rcv.PointTable())
	t.SwitchPosition = rcv.SwitchPosition()
	t.SwitchProfileOnPos = rcv.SwitchProfileOnPos()
	t.SwitchGearOnPos = rcv.SwitchGearOnPos()
	t.SwitchPositionGainFactor = rcv.SwitchPositionGainFactor()
	t.SwitchGainFactorOnPos = rcv.SwitchGainFactorOnPos()
}

func (rcv *AxsCmdCamInParams) UnPack() *AxsCmdCamInParamsT {
	if rcv == nil { return nil }
	t := &AxsCmdCamInParamsT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdCamInParams struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdCamInParams(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdCamInParams {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdCamInParams{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdCamInParams(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdCamInParams {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdCamInParams{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdCamInParams) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdCamInParams) Table() flatbuffers.Table {
	return rcv._tab
}

/// Constant master offset for the command instance.
func (rcv *AxsCmdCamInParams) MasterOffset() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Constant master offset for the command instance.
func (rcv *AxsCmdCamInParams) MutateMasterOffset(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// Constant slave offset for the command instance.
func (rcv *AxsCmdCamInParams) SlaveOffset() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Constant slave offset for the command instance.
func (rcv *AxsCmdCamInParams) MutateSlaveOffset(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// Numerator of gear ratio.
func (rcv *AxsCmdCamInParams) RatioNumerator() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

/// Numerator of gear ratio.
func (rcv *AxsCmdCamInParams) MutateRatioNumerator(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// Denominator of gear ratio.
func (rcv *AxsCmdCamInParams) RatioDenominator() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

/// Denominator of gear ratio.
func (rcv *AxsCmdCamInParams) MutateRatioDenominator(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Constant fine adjustment percentage for the gear ratio.
func (rcv *AxsCmdCamInParams) FineAdjust() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Constant fine adjustment percentage for the gear ratio.
func (rcv *AxsCmdCamInParams) MutateFineAdjust(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Scaling factor for the gain
func (rcv *AxsCmdCamInParams) GainFactor() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 1.0
}

/// Scaling factor for the gain
func (rcv *AxsCmdCamInParams) MutateGainFactor(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Constant angle adjust for the command instance
func (rcv *AxsCmdCamInParams) AngleAdjust() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Constant angle adjust for the command instance
func (rcv *AxsCmdCamInParams) MutateAngleAdjust(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Defines the start behaviour of the point table similar to a FlexProfile
func (rcv *AxsCmdCamInParams) ProfileEntry() ProfileEntry {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return ProfileEntry(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// Defines the start behaviour of the point table similar to a FlexProfile
func (rcv *AxsCmdCamInParams) MutateProfileEntry(n ProfileEntry) bool {
	return rcv._tab.MutateInt8Slot(18, int8(n))
}

/// Specifies how the point table is executed
func (rcv *AxsCmdCamInParams) ProfileExecutionMode() ProfileExecutionMode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return ProfileExecutionMode(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Specifies how the point table is executed
func (rcv *AxsCmdCamInParams) MutateProfileExecutionMode(n ProfileExecutionMode) bool {
	return rcv._tab.MutateInt8Slot(20, int8(n))
}

/// Name of the point table that should be executed.
func (rcv *AxsCmdCamInParams) PointTable() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the point table that should be executed.
/// Master position used to switch to the new point table and/or gear.
func (rcv *AxsCmdCamInParams) SwitchPosition() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Master position used to switch to the new point table and/or gear.
func (rcv *AxsCmdCamInParams) MutateSwitchPosition(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// If false, switch to the selected point table immediately. If true, switch to the selected point table not until the switchPosition is reached.
func (rcv *AxsCmdCamInParams) SwitchProfileOnPos() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// If false, switch to the selected point table immediately. If true, switch to the selected point table not until the switchPosition is reached.
func (rcv *AxsCmdCamInParams) MutateSwitchProfileOnPos(n bool) bool {
	return rcv._tab.MutateBoolSlot(26, n)
}

/// If false, switch to the selected gear immediately. If true, switch to the selected gear not until the switchPosition is reached.
func (rcv *AxsCmdCamInParams) SwitchGearOnPos() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// If false, switch to the selected gear immediately. If true, switch to the selected gear not until the switchPosition is reached.
func (rcv *AxsCmdCamInParams) MutateSwitchGearOnPos(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

/// Master position used to switch to the new gain factor.
func (rcv *AxsCmdCamInParams) SwitchPositionGainFactor() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Master position used to switch to the new gain factor.
func (rcv *AxsCmdCamInParams) MutateSwitchPositionGainFactor(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// If false, switch to the selected gain factor immediately. If true, switch to the selected gain factor not until the switchPositionGainFactor is reached.
func (rcv *AxsCmdCamInParams) SwitchGainFactorOnPos() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// If false, switch to the selected gain factor immediately. If true, switch to the selected gain factor not until the switchPositionGainFactor is reached.
func (rcv *AxsCmdCamInParams) MutateSwitchGainFactorOnPos(n bool) bool {
	return rcv._tab.MutateBoolSlot(32, n)
}

func AxsCmdCamInParamsStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func AxsCmdCamInParamsAddMasterOffset(builder *flatbuffers.Builder, masterOffset float64) {
	builder.PrependFloat64Slot(0, masterOffset, 0.0)
}
func AxsCmdCamInParamsAddSlaveOffset(builder *flatbuffers.Builder, slaveOffset float64) {
	builder.PrependFloat64Slot(1, slaveOffset, 0.0)
}
func AxsCmdCamInParamsAddRatioNumerator(builder *flatbuffers.Builder, ratioNumerator int32) {
	builder.PrependInt32Slot(2, ratioNumerator, 1)
}
func AxsCmdCamInParamsAddRatioDenominator(builder *flatbuffers.Builder, ratioDenominator int32) {
	builder.PrependInt32Slot(3, ratioDenominator, 1)
}
func AxsCmdCamInParamsAddFineAdjust(builder *flatbuffers.Builder, fineAdjust float64) {
	builder.PrependFloat64Slot(4, fineAdjust, 0.0)
}
func AxsCmdCamInParamsAddGainFactor(builder *flatbuffers.Builder, gainFactor float64) {
	builder.PrependFloat64Slot(5, gainFactor, 1.0)
}
func AxsCmdCamInParamsAddAngleAdjust(builder *flatbuffers.Builder, angleAdjust float64) {
	builder.PrependFloat64Slot(6, angleAdjust, 0.0)
}
func AxsCmdCamInParamsAddProfileEntry(builder *flatbuffers.Builder, profileEntry ProfileEntry) {
	builder.PrependInt8Slot(7, int8(profileEntry), 1)
}
func AxsCmdCamInParamsAddProfileExecutionMode(builder *flatbuffers.Builder, profileExecutionMode ProfileExecutionMode) {
	builder.PrependInt8Slot(8, int8(profileExecutionMode), 0)
}
func AxsCmdCamInParamsAddPointTable(builder *flatbuffers.Builder, pointTable flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(pointTable), 0)
}
func AxsCmdCamInParamsAddSwitchPosition(builder *flatbuffers.Builder, switchPosition float64) {
	builder.PrependFloat64Slot(10, switchPosition, 0.0)
}
func AxsCmdCamInParamsAddSwitchProfileOnPos(builder *flatbuffers.Builder, switchProfileOnPos bool) {
	builder.PrependBoolSlot(11, switchProfileOnPos, false)
}
func AxsCmdCamInParamsAddSwitchGearOnPos(builder *flatbuffers.Builder, switchGearOnPos bool) {
	builder.PrependBoolSlot(12, switchGearOnPos, false)
}
func AxsCmdCamInParamsAddSwitchPositionGainFactor(builder *flatbuffers.Builder, switchPositionGainFactor float64) {
	builder.PrependFloat64Slot(13, switchPositionGainFactor, 0.0)
}
func AxsCmdCamInParamsAddSwitchGainFactorOnPos(builder *flatbuffers.Builder, switchGainFactorOnPos bool) {
	builder.PrependBoolSlot(14, switchGainFactorOnPos, false)
}
func AxsCmdCamInParamsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
