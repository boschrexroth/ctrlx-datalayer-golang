// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Configuration of the dynamic synchronisation behavior of a single axis
type AxsCfgDynSynchronisationT struct {
	Limits *AxsCfgDynSynchronisationLimT `json:"limits"`
}

func (t *AxsCfgDynSynchronisationT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	limitsOffset := t.Limits.Pack(builder)
	AxsCfgDynSynchronisationStart(builder)
	AxsCfgDynSynchronisationAddLimits(builder, limitsOffset)
	return AxsCfgDynSynchronisationEnd(builder)
}

func (rcv *AxsCfgDynSynchronisation) UnPackTo(t *AxsCfgDynSynchronisationT) {
	t.Limits = rcv.Limits(nil).UnPack()
}

func (rcv *AxsCfgDynSynchronisation) UnPack() *AxsCfgDynSynchronisationT {
	if rcv == nil { return nil }
	t := &AxsCfgDynSynchronisationT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgDynSynchronisation struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgDynSynchronisation(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgDynSynchronisation {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgDynSynchronisation{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgDynSynchronisation(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgDynSynchronisation {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgDynSynchronisation{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgDynSynchronisation) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgDynSynchronisation) Table() flatbuffers.Table {
	return rcv._tab
}

/// Reference to configuration of the dynamic synchronisation limits of the axis
func (rcv *AxsCfgDynSynchronisation) Limits(obj *AxsCfgDynSynchronisationLim) *AxsCfgDynSynchronisationLim {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgDynSynchronisationLim)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Reference to configuration of the dynamic synchronisation limits of the axis
func AxsCfgDynSynchronisationStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AxsCfgDynSynchronisationAddLimits(builder *flatbuffers.Builder, limits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(limits), 0)
}
func AxsCfgDynSynchronisationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
