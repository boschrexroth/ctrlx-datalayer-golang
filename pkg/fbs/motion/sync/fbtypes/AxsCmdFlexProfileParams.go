// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// FlexProfile calculation pipeline parameters for the axis FlexProfile command
type AxsCmdFlexProfileParamsT struct {
	MasterOffset float64 `json:"masterOffset"`
	SlaveOffset float64 `json:"slaveOffset"`
	RatioNumerator int32 `json:"ratioNumerator"`
	RatioDenominator int32 `json:"ratioDenominator"`
	FineAdjust float64 `json:"fineAdjust"`
	ProfileEntry ProfileEntry `json:"profileEntry"`
	Profile string `json:"profile"`
	ProfileExecutionMode ProfileExecutionMode `json:"profileExecutionMode"`
	SwitchPosition float64 `json:"switchPosition"`
	SwitchProfileOnPos bool `json:"switchProfileOnPos"`
	SwitchGearOnPos bool `json:"switchGearOnPos"`
	AngleAdjust float64 `json:"angleAdjust"`
	SlaveAdjust float64 `json:"slaveAdjust"`
}

func (t *AxsCmdFlexProfileParamsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	profileOffset := flatbuffers.UOffsetT(0)
	if t.Profile != "" {
		profileOffset = builder.CreateString(t.Profile)
	}
	AxsCmdFlexProfileParamsStart(builder)
	AxsCmdFlexProfileParamsAddMasterOffset(builder, t.MasterOffset)
	AxsCmdFlexProfileParamsAddSlaveOffset(builder, t.SlaveOffset)
	AxsCmdFlexProfileParamsAddRatioNumerator(builder, t.RatioNumerator)
	AxsCmdFlexProfileParamsAddRatioDenominator(builder, t.RatioDenominator)
	AxsCmdFlexProfileParamsAddFineAdjust(builder, t.FineAdjust)
	AxsCmdFlexProfileParamsAddProfileEntry(builder, t.ProfileEntry)
	AxsCmdFlexProfileParamsAddProfile(builder, profileOffset)
	AxsCmdFlexProfileParamsAddProfileExecutionMode(builder, t.ProfileExecutionMode)
	AxsCmdFlexProfileParamsAddSwitchPosition(builder, t.SwitchPosition)
	AxsCmdFlexProfileParamsAddSwitchProfileOnPos(builder, t.SwitchProfileOnPos)
	AxsCmdFlexProfileParamsAddSwitchGearOnPos(builder, t.SwitchGearOnPos)
	AxsCmdFlexProfileParamsAddAngleAdjust(builder, t.AngleAdjust)
	AxsCmdFlexProfileParamsAddSlaveAdjust(builder, t.SlaveAdjust)
	return AxsCmdFlexProfileParamsEnd(builder)
}

func (rcv *AxsCmdFlexProfileParams) UnPackTo(t *AxsCmdFlexProfileParamsT) {
	t.MasterOffset = rcv.MasterOffset()
	t.SlaveOffset = rcv.SlaveOffset()
	t.RatioNumerator = rcv.RatioNumerator()
	t.RatioDenominator = rcv.RatioDenominator()
	t.FineAdjust = rcv.FineAdjust()
	t.ProfileEntry = rcv.ProfileEntry()
	t.Profile = string(rcv.Profile())
	t.ProfileExecutionMode = rcv.ProfileExecutionMode()
	t.SwitchPosition = rcv.SwitchPosition()
	t.SwitchProfileOnPos = rcv.SwitchProfileOnPos()
	t.SwitchGearOnPos = rcv.SwitchGearOnPos()
	t.AngleAdjust = rcv.AngleAdjust()
	t.SlaveAdjust = rcv.SlaveAdjust()
}

func (rcv *AxsCmdFlexProfileParams) UnPack() *AxsCmdFlexProfileParamsT {
	if rcv == nil { return nil }
	t := &AxsCmdFlexProfileParamsT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdFlexProfileParams struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdFlexProfileParams(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdFlexProfileParams {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdFlexProfileParams{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdFlexProfileParams(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdFlexProfileParams {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdFlexProfileParams{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdFlexProfileParams) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdFlexProfileParams) Table() flatbuffers.Table {
	return rcv._tab
}

/// master offset value
func (rcv *AxsCmdFlexProfileParams) MasterOffset() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// master offset value
func (rcv *AxsCmdFlexProfileParams) MutateMasterOffset(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// slave offset value
func (rcv *AxsCmdFlexProfileParams) SlaveOffset() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// slave offset value
func (rcv *AxsCmdFlexProfileParams) MutateSlaveOffset(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// ratio numerator value
func (rcv *AxsCmdFlexProfileParams) RatioNumerator() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

/// ratio numerator value
func (rcv *AxsCmdFlexProfileParams) MutateRatioNumerator(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// ratio denominator value
func (rcv *AxsCmdFlexProfileParams) RatioDenominator() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

/// ratio denominator value
func (rcv *AxsCmdFlexProfileParams) MutateRatioDenominator(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// fine adjust parameter
func (rcv *AxsCmdFlexProfileParams) FineAdjust() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// fine adjust parameter
func (rcv *AxsCmdFlexProfileParams) MutateFineAdjust(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// profileEntry parameter e.g. SLAVE_CURRENT_MASTER_CURRENT
func (rcv *AxsCmdFlexProfileParams) ProfileEntry() ProfileEntry {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return ProfileEntry(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// profileEntry parameter e.g. SLAVE_CURRENT_MASTER_CURRENT
func (rcv *AxsCmdFlexProfileParams) MutateProfileEntry(n ProfileEntry) bool {
	return rcv._tab.MutateInt8Slot(14, int8(n))
}

/// profile parameter e.g. "0", "1", "2", "3"
func (rcv *AxsCmdFlexProfileParams) Profile() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// profile parameter e.g. "0", "1", "2", "3"
/// profile execution mode e.g. CYCLIC or SINGLE
func (rcv *AxsCmdFlexProfileParams) ProfileExecutionMode() ProfileExecutionMode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return ProfileExecutionMode(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// profile execution mode e.g. CYCLIC or SINGLE
func (rcv *AxsCmdFlexProfileParams) MutateProfileExecutionMode(n ProfileExecutionMode) bool {
	return rcv._tab.MutateInt8Slot(18, int8(n))
}

/// position that switches a FlexProfile
func (rcv *AxsCmdFlexProfileParams) SwitchPosition() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// position that switches a FlexProfile
func (rcv *AxsCmdFlexProfileParams) MutateSwitchPosition(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// switch the profile on the switch position
func (rcv *AxsCmdFlexProfileParams) SwitchProfileOnPos() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// switch the profile on the switch position
func (rcv *AxsCmdFlexProfileParams) MutateSwitchProfileOnPos(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

/// switch the gear on the switch position
func (rcv *AxsCmdFlexProfileParams) SwitchGearOnPos() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// switch the gear on the switch position
func (rcv *AxsCmdFlexProfileParams) MutateSwitchGearOnPos(n bool) bool {
	return rcv._tab.MutateBoolSlot(24, n)
}

/// angle adjust
func (rcv *AxsCmdFlexProfileParams) AngleAdjust() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// angle adjust
func (rcv *AxsCmdFlexProfileParams) MutateAngleAdjust(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// slave adjust
func (rcv *AxsCmdFlexProfileParams) SlaveAdjust() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// slave adjust
func (rcv *AxsCmdFlexProfileParams) MutateSlaveAdjust(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

func AxsCmdFlexProfileParamsStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func AxsCmdFlexProfileParamsAddMasterOffset(builder *flatbuffers.Builder, masterOffset float64) {
	builder.PrependFloat64Slot(0, masterOffset, 0.0)
}
func AxsCmdFlexProfileParamsAddSlaveOffset(builder *flatbuffers.Builder, slaveOffset float64) {
	builder.PrependFloat64Slot(1, slaveOffset, 0.0)
}
func AxsCmdFlexProfileParamsAddRatioNumerator(builder *flatbuffers.Builder, ratioNumerator int32) {
	builder.PrependInt32Slot(2, ratioNumerator, 1)
}
func AxsCmdFlexProfileParamsAddRatioDenominator(builder *flatbuffers.Builder, ratioDenominator int32) {
	builder.PrependInt32Slot(3, ratioDenominator, 1)
}
func AxsCmdFlexProfileParamsAddFineAdjust(builder *flatbuffers.Builder, fineAdjust float64) {
	builder.PrependFloat64Slot(4, fineAdjust, 0.0)
}
func AxsCmdFlexProfileParamsAddProfileEntry(builder *flatbuffers.Builder, profileEntry ProfileEntry) {
	builder.PrependInt8Slot(5, int8(profileEntry), 1)
}
func AxsCmdFlexProfileParamsAddProfile(builder *flatbuffers.Builder, profile flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(profile), 0)
}
func AxsCmdFlexProfileParamsAddProfileExecutionMode(builder *flatbuffers.Builder, profileExecutionMode ProfileExecutionMode) {
	builder.PrependInt8Slot(7, int8(profileExecutionMode), 0)
}
func AxsCmdFlexProfileParamsAddSwitchPosition(builder *flatbuffers.Builder, switchPosition float64) {
	builder.PrependFloat64Slot(8, switchPosition, 0.0)
}
func AxsCmdFlexProfileParamsAddSwitchProfileOnPos(builder *flatbuffers.Builder, switchProfileOnPos bool) {
	builder.PrependBoolSlot(9, switchProfileOnPos, false)
}
func AxsCmdFlexProfileParamsAddSwitchGearOnPos(builder *flatbuffers.Builder, switchGearOnPos bool) {
	builder.PrependBoolSlot(10, switchGearOnPos, false)
}
func AxsCmdFlexProfileParamsAddAngleAdjust(builder *flatbuffers.Builder, angleAdjust float64) {
	builder.PrependFloat64Slot(11, angleAdjust, 0.0)
}
func AxsCmdFlexProfileParamsAddSlaveAdjust(builder *flatbuffers.Builder, slaveAdjust float64) {
	builder.PrependFloat64Slot(12, slaveAdjust, 0.0)
}
func AxsCmdFlexProfileParamsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
