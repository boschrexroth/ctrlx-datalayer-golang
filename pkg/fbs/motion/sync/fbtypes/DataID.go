// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import "strconv"

/// Data, that could be input/output of a single calculation step
type DataID int8

const (
	/// reference position
	DataIDREF_POS          DataID = 0
	/// reference velocity
	DataIDREF_VEL          DataID = 1
	/// reference acceleration
	DataIDREF_ACC          DataID = 2
	/// reference jerk
	DataIDREF_JRK          DataID = 3
	/// actual position
	DataIDACT_POS          DataID = 4
	/// actual velocity
	DataIDACT_VEL          DataID = 5
	/// synchronization position reached
	DataIDSYNC_POS_REACHED DataID = 6
	/// something else
	DataIDSOMETHING_ELSE   DataID = 7
)

var EnumNamesDataID = map[DataID]string{
	DataIDREF_POS:          "REF_POS",
	DataIDREF_VEL:          "REF_VEL",
	DataIDREF_ACC:          "REF_ACC",
	DataIDREF_JRK:          "REF_JRK",
	DataIDACT_POS:          "ACT_POS",
	DataIDACT_VEL:          "ACT_VEL",
	DataIDSYNC_POS_REACHED: "SYNC_POS_REACHED",
	DataIDSOMETHING_ELSE:   "SOMETHING_ELSE",
}

var EnumValuesDataID = map[string]DataID{
	"REF_POS":          DataIDREF_POS,
	"REF_VEL":          DataIDREF_VEL,
	"REF_ACC":          DataIDREF_ACC,
	"REF_JRK":          DataIDREF_JRK,
	"ACT_POS":          DataIDACT_POS,
	"ACT_VEL":          DataIDACT_VEL,
	"SYNC_POS_REACHED": DataIDSYNC_POS_REACHED,
	"SOMETHING_ELSE":   DataIDSOMETHING_ELSE,
}

func (v DataID) String() string {
	if s, ok := EnumNamesDataID[v]; ok {
		return s
	}
	return "DataID(" + strconv.FormatInt(int64(v), 10) + ")"
}
