// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters for the command wait for signal
type CmdOptionSetSignalT struct {
	PermType string
	SignalId uint32
}

func (t *CmdOptionSetSignalT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	permTypeOffset := builder.CreateString(t.PermType)
	CmdOptionSetSignalStart(builder)
	CmdOptionSetSignalAddPermType(builder, permTypeOffset)
	CmdOptionSetSignalAddSignalId(builder, t.SignalId)
	return CmdOptionSetSignalEnd(builder)
}

func (rcv *CmdOptionSetSignal) UnPackTo(t *CmdOptionSetSignalT) {
	t.PermType = string(rcv.PermType())
	t.SignalId = rcv.SignalId()
}

func (rcv *CmdOptionSetSignal) UnPack() *CmdOptionSetSignalT {
	if rcv == nil { return nil }
	t := &CmdOptionSetSignalT{}
	rcv.UnPackTo(t)
	return t
}

type CmdOptionSetSignal struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdOptionSetSignal(buf []byte, offset flatbuffers.UOffsetT) *CmdOptionSetSignal {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdOptionSetSignal{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCmdOptionSetSignal(buf []byte, offset flatbuffers.UOffsetT) *CmdOptionSetSignal {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdOptionSetSignal{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CmdOptionSetSignal) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdOptionSetSignal) Table() flatbuffers.Table {
	return rcv._tab
}

/// permanent type (e.g. "Once")
func (rcv *CmdOptionSetSignal) PermType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// permanent type (e.g. "Once")
/// signal Id
func (rcv *CmdOptionSetSignal) SignalId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// signal Id
func (rcv *CmdOptionSetSignal) MutateSignalId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func CmdOptionSetSignalStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CmdOptionSetSignalAddPermType(builder *flatbuffers.Builder, permType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(permType), 0)
}
func CmdOptionSetSignalAddSignalId(builder *flatbuffers.Builder, signalId uint32) {
	builder.PrependUint32Slot(1, signalId, 0)
}
func CmdOptionSetSignalEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
