// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters for the command join
type CmdJoinT struct {
	Group []string `json:"group"`
	SyncStartNextCmd bool `json:"syncStartNextCmd"`
}

func (t *CmdJoinT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	groupOffset := flatbuffers.UOffsetT(0)
	if t.Group != nil {
		groupLength := len(t.Group)
		groupOffsets := make([]flatbuffers.UOffsetT, groupLength)
		for j := 0; j < groupLength; j++ {
			groupOffsets[j] = builder.CreateString(t.Group[j])
		}
		CmdJoinStartGroupVector(builder, groupLength)
		for j := groupLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(groupOffsets[j])
		}
		groupOffset = builder.EndVector(groupLength)
	}
	CmdJoinStart(builder)
	CmdJoinAddGroup(builder, groupOffset)
	CmdJoinAddSyncStartNextCmd(builder, t.SyncStartNextCmd)
	return CmdJoinEnd(builder)
}

func (rcv *CmdJoin) UnPackTo(t *CmdJoinT) {
	groupLength := rcv.GroupLength()
	t.Group = make([]string, groupLength)
	for j := 0; j < groupLength; j++ {
		t.Group[j] = string(rcv.Group(j))
	}
	t.SyncStartNextCmd = rcv.SyncStartNextCmd()
}

func (rcv *CmdJoin) UnPack() *CmdJoinT {
	if rcv == nil { return nil }
	t := &CmdJoinT{}
	rcv.UnPackTo(t)
	return t
}

type CmdJoin struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdJoin(buf []byte, offset flatbuffers.UOffsetT) *CmdJoin {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdJoin{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCmdJoin(buf []byte, offset flatbuffers.UOffsetT) *CmdJoin {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdJoin{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CmdJoin) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdJoin) Table() flatbuffers.Table {
	return rcv._tab
}

/// list of names of the motion objects in the join group
func (rcv *CmdJoin) Group(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CmdJoin) GroupLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// list of names of the motion objects in the join group
/// should wait until there is a next command available to be executed?
func (rcv *CmdJoin) SyncStartNextCmd() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// should wait until there is a next command available to be executed?
func (rcv *CmdJoin) MutateSyncStartNextCmd(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func CmdJoinStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CmdJoinAddGroup(builder *flatbuffers.Builder, group flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(group), 0)
}
func CmdJoinStartGroupVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CmdJoinAddSyncStartNextCmd(builder *flatbuffers.Builder, syncStartNextCmd bool) {
	builder.PrependBoolSlot(1, syncStartNextCmd, false)
}
func CmdJoinEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
