// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters for the command wait for signal
type CmdWaitForSignalT struct {
	SignalId uint32
	AutoReset bool
}

func (t *CmdWaitForSignalT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	CmdWaitForSignalStart(builder)
	CmdWaitForSignalAddSignalId(builder, t.SignalId)
	CmdWaitForSignalAddAutoReset(builder, t.AutoReset)
	return CmdWaitForSignalEnd(builder)
}

func (rcv *CmdWaitForSignal) UnPackTo(t *CmdWaitForSignalT) {
	t.SignalId = rcv.SignalId()
	t.AutoReset = rcv.AutoReset()
}

func (rcv *CmdWaitForSignal) UnPack() *CmdWaitForSignalT {
	if rcv == nil { return nil }
	t := &CmdWaitForSignalT{}
	rcv.UnPackTo(t)
	return t
}

type CmdWaitForSignal struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdWaitForSignal(buf []byte, offset flatbuffers.UOffsetT) *CmdWaitForSignal {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdWaitForSignal{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCmdWaitForSignal(buf []byte, offset flatbuffers.UOffsetT) *CmdWaitForSignal {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdWaitForSignal{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CmdWaitForSignal) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdWaitForSignal) Table() flatbuffers.Table {
	return rcv._tab
}

/// signal Id
func (rcv *CmdWaitForSignal) SignalId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// signal Id
func (rcv *CmdWaitForSignal) MutateSignalId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// automatically reset the signal
func (rcv *CmdWaitForSignal) AutoReset() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// automatically reset the signal
func (rcv *CmdWaitForSignal) MutateAutoReset(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func CmdWaitForSignalStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CmdWaitForSignalAddSignalId(builder *flatbuffers.Builder, signalId uint32) {
	builder.PrependUint32Slot(0, signalId, 0)
}
func CmdWaitForSignalAddAutoReset(builder *flatbuffers.Builder, autoReset bool) {
	builder.PrependBoolSlot(1, autoReset, false)
}
func CmdWaitForSignalEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
