// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters for the command wait for signal reset
type CmdWaitForSignalResetT struct {
	SignalId uint32 `json:"signalId"`
}

func (t *CmdWaitForSignalResetT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	CmdWaitForSignalResetStart(builder)
	CmdWaitForSignalResetAddSignalId(builder, t.SignalId)
	return CmdWaitForSignalResetEnd(builder)
}

func (rcv *CmdWaitForSignalReset) UnPackTo(t *CmdWaitForSignalResetT) {
	t.SignalId = rcv.SignalId()
}

func (rcv *CmdWaitForSignalReset) UnPack() *CmdWaitForSignalResetT {
	if rcv == nil { return nil }
	t := &CmdWaitForSignalResetT{}
	rcv.UnPackTo(t)
	return t
}

type CmdWaitForSignalReset struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdWaitForSignalReset(buf []byte, offset flatbuffers.UOffsetT) *CmdWaitForSignalReset {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdWaitForSignalReset{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCmdWaitForSignalReset(buf []byte, offset flatbuffers.UOffsetT) *CmdWaitForSignalReset {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdWaitForSignalReset{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CmdWaitForSignalReset) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdWaitForSignalReset) Table() flatbuffers.Table {
	return rcv._tab
}

/// signal Id
func (rcv *CmdWaitForSignalReset) SignalId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// signal Id
func (rcv *CmdWaitForSignalReset) MutateSignalId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func CmdWaitForSignalResetStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func CmdWaitForSignalResetAddSignalId(builder *flatbuffers.Builder, signalId uint32) {
	builder.PrependUint32Slot(0, signalId, 0)
}
func CmdWaitForSignalResetEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
