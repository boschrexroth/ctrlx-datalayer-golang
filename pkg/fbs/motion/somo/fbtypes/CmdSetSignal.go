// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters for the command set signal
type CmdSetSignalT struct {
	SignalId uint32
}

func (t *CmdSetSignalT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	CmdSetSignalStart(builder)
	CmdSetSignalAddSignalId(builder, t.SignalId)
	return CmdSetSignalEnd(builder)
}

func (rcv *CmdSetSignal) UnPackTo(t *CmdSetSignalT) {
	t.SignalId = rcv.SignalId()
}

func (rcv *CmdSetSignal) UnPack() *CmdSetSignalT {
	if rcv == nil { return nil }
	t := &CmdSetSignalT{}
	rcv.UnPackTo(t)
	return t
}

type CmdSetSignal struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdSetSignal(buf []byte, offset flatbuffers.UOffsetT) *CmdSetSignal {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdSetSignal{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCmdSetSignal(buf []byte, offset flatbuffers.UOffsetT) *CmdSetSignal {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdSetSignal{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CmdSetSignal) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdSetSignal) Table() flatbuffers.Table {
	return rcv._tab
}

/// signal Id
func (rcv *CmdSetSignal) SignalId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// signal Id
func (rcv *CmdSetSignal) MutateSignalId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func CmdSetSignalStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func CmdSetSignalAddSignalId(builder *flatbuffers.Builder, signalId uint32) {
	builder.PrependUint32Slot(0, signalId, 0)
}
func CmdSetSignalEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
