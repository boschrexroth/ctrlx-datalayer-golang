// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of single probe data
type AxsCfgProbeEdgeDataT struct {
	PosEdge bool `json:"posEdge"`
	NegEdge bool `json:"negEdge"`
	DiffType DiffType `json:"diffType"`
}

func (t *AxsCfgProbeEdgeDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AxsCfgProbeEdgeDataStart(builder)
	AxsCfgProbeEdgeDataAddPosEdge(builder, t.PosEdge)
	AxsCfgProbeEdgeDataAddNegEdge(builder, t.NegEdge)
	AxsCfgProbeEdgeDataAddDiffType(builder, t.DiffType)
	return AxsCfgProbeEdgeDataEnd(builder)
}

func (rcv *AxsCfgProbeEdgeData) UnPackTo(t *AxsCfgProbeEdgeDataT) {
	t.PosEdge = rcv.PosEdge()
	t.NegEdge = rcv.NegEdge()
	t.DiffType = rcv.DiffType()
}

func (rcv *AxsCfgProbeEdgeData) UnPack() *AxsCfgProbeEdgeDataT {
	if rcv == nil { return nil }
	t := &AxsCfgProbeEdgeDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgProbeEdgeData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgProbeEdgeData(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgProbeEdgeData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgProbeEdgeData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgProbeEdgeData(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgProbeEdgeData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgProbeEdgeData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgProbeEdgeData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgProbeEdgeData) Table() flatbuffers.Table {
	return rcv._tab
}

/// enable positive edge evaluate if TRUE
func (rcv *AxsCfgProbeEdgeData) PosEdge() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// enable positive edge evaluate if TRUE
func (rcv *AxsCfgProbeEdgeData) MutatePosEdge(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// enable negative edge evaluate if TRUE
func (rcv *AxsCfgProbeEdgeData) NegEdge() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// enable negative edge evaluate if TRUE
func (rcv *AxsCfgProbeEdgeData) MutateNegEdge(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

/// differential type of edge, disable, standard, neg-to-neg, pos-to-neg, neg-to-pos, pos-to-pos
func (rcv *AxsCfgProbeEdgeData) DiffType() DiffType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return DiffType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// differential type of edge, disable, standard, neg-to-neg, pos-to-neg, neg-to-pos, pos-to-pos
func (rcv *AxsCfgProbeEdgeData) MutateDiffType(n DiffType) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func AxsCfgProbeEdgeDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AxsCfgProbeEdgeDataAddPosEdge(builder *flatbuffers.Builder, posEdge bool) {
	builder.PrependBoolSlot(0, posEdge, false)
}
func AxsCfgProbeEdgeDataAddNegEdge(builder *flatbuffers.Builder, negEdge bool) {
	builder.PrependBoolSlot(1, negEdge, false)
}
func AxsCfgProbeEdgeDataAddDiffType(builder *flatbuffers.Builder, diffType DiffType) {
	builder.PrependInt8Slot(2, int8(diffType), 1)
}
func AxsCfgProbeEdgeDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
