// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of control based homing
type AxsCmdCtrlBasedHomingDataT struct {
	HomingParam *HomingParamT `json:"homingParam"`
}

func (t *AxsCmdCtrlBasedHomingDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	homingParamOffset := t.HomingParam.Pack(builder)
	AxsCmdCtrlBasedHomingDataStart(builder)
	AxsCmdCtrlBasedHomingDataAddHomingParam(builder, homingParamOffset)
	return AxsCmdCtrlBasedHomingDataEnd(builder)
}

func (rcv *AxsCmdCtrlBasedHomingData) UnPackTo(t *AxsCmdCtrlBasedHomingDataT) {
	t.HomingParam = rcv.HomingParam(nil).UnPack()
}

func (rcv *AxsCmdCtrlBasedHomingData) UnPack() *AxsCmdCtrlBasedHomingDataT {
	if rcv == nil { return nil }
	t := &AxsCmdCtrlBasedHomingDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdCtrlBasedHomingData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdCtrlBasedHomingData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdCtrlBasedHomingData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdCtrlBasedHomingData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdCtrlBasedHomingData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdCtrlBasedHomingData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdCtrlBasedHomingData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdCtrlBasedHomingData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdCtrlBasedHomingData) Table() flatbuffers.Table {
	return rcv._tab
}

/// homing basic parameters
func (rcv *AxsCmdCtrlBasedHomingData) HomingParam(obj *HomingParam) *HomingParam {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(HomingParam)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// homing basic parameters
func AxsCmdCtrlBasedHomingDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AxsCmdCtrlBasedHomingDataAddHomingParam(builder *flatbuffers.Builder, homingParam flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(homingParam), 0)
}
func AxsCmdCtrlBasedHomingDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
