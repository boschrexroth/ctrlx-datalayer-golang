// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of single probe data
type AxsCfgProbeExpectWindowDataT struct {
	Enable bool `json:"enable"`
	Start float64 `json:"start"`
	End float64 `json:"end"`
}

func (t *AxsCfgProbeExpectWindowDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AxsCfgProbeExpectWindowDataStart(builder)
	AxsCfgProbeExpectWindowDataAddEnable(builder, t.Enable)
	AxsCfgProbeExpectWindowDataAddStart(builder, t.Start)
	AxsCfgProbeExpectWindowDataAddEnd(builder, t.End)
	return AxsCfgProbeExpectWindowDataEnd(builder)
}

func (rcv *AxsCfgProbeExpectWindowData) UnPackTo(t *AxsCfgProbeExpectWindowDataT) {
	t.Enable = rcv.Enable()
	t.Start = rcv.Start()
	t.End = rcv.End()
}

func (rcv *AxsCfgProbeExpectWindowData) UnPack() *AxsCfgProbeExpectWindowDataT {
	if rcv == nil { return nil }
	t := &AxsCfgProbeExpectWindowDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgProbeExpectWindowData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgProbeExpectWindowData(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgProbeExpectWindowData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgProbeExpectWindowData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgProbeExpectWindowData(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgProbeExpectWindowData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgProbeExpectWindowData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgProbeExpectWindowData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgProbeExpectWindowData) Table() flatbuffers.Table {
	return rcv._tab
}

/// enable expect window if TRUE
func (rcv *AxsCfgProbeExpectWindowData) Enable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// enable expect window if TRUE
func (rcv *AxsCfgProbeExpectWindowData) MutateEnable(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// expect window start position
func (rcv *AxsCfgProbeExpectWindowData) Start() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// expect window start position
func (rcv *AxsCfgProbeExpectWindowData) MutateStart(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// expect window end position
func (rcv *AxsCfgProbeExpectWindowData) End() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// expect window end position
func (rcv *AxsCfgProbeExpectWindowData) MutateEnd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func AxsCfgProbeExpectWindowDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AxsCfgProbeExpectWindowDataAddEnable(builder *flatbuffers.Builder, enable bool) {
	builder.PrependBoolSlot(0, enable, false)
}
func AxsCfgProbeExpectWindowDataAddStart(builder *flatbuffers.Builder, start float64) {
	builder.PrependFloat64Slot(1, start, 0.0)
}
func AxsCfgProbeExpectWindowDataAddEnd(builder *flatbuffers.Builder, end float64) {
	builder.PrependFloat64Slot(2, end, 0.0)
}
func AxsCfgProbeExpectWindowDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
