// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of control based gantry homing
type AxsCmdCtrlBasedHomingGantryDataT struct {
	HomingParam *HomingParamT `json:"homingParam"`
	HomingSlaveParam *HomingSlaveParamAllT `json:"homingSlaveParam"`
}

func (t *AxsCmdCtrlBasedHomingGantryDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	homingParamOffset := t.HomingParam.Pack(builder)
	homingSlaveParamOffset := t.HomingSlaveParam.Pack(builder)
	AxsCmdCtrlBasedHomingGantryDataStart(builder)
	AxsCmdCtrlBasedHomingGantryDataAddHomingParam(builder, homingParamOffset)
	AxsCmdCtrlBasedHomingGantryDataAddHomingSlaveParam(builder, homingSlaveParamOffset)
	return AxsCmdCtrlBasedHomingGantryDataEnd(builder)
}

func (rcv *AxsCmdCtrlBasedHomingGantryData) UnPackTo(t *AxsCmdCtrlBasedHomingGantryDataT) {
	t.HomingParam = rcv.HomingParam(nil).UnPack()
	t.HomingSlaveParam = rcv.HomingSlaveParam(nil).UnPack()
}

func (rcv *AxsCmdCtrlBasedHomingGantryData) UnPack() *AxsCmdCtrlBasedHomingGantryDataT {
	if rcv == nil { return nil }
	t := &AxsCmdCtrlBasedHomingGantryDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdCtrlBasedHomingGantryData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdCtrlBasedHomingGantryData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdCtrlBasedHomingGantryData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdCtrlBasedHomingGantryData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdCtrlBasedHomingGantryData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdCtrlBasedHomingGantryData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdCtrlBasedHomingGantryData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdCtrlBasedHomingGantryData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdCtrlBasedHomingGantryData) Table() flatbuffers.Table {
	return rcv._tab
}

/// homing basic parameters
func (rcv *AxsCmdCtrlBasedHomingGantryData) HomingParam(obj *HomingParam) *HomingParam {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(HomingParam)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// homing basic parameters
/// slave axes parameters
func (rcv *AxsCmdCtrlBasedHomingGantryData) HomingSlaveParam(obj *HomingSlaveParamAll) *HomingSlaveParamAll {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(HomingSlaveParamAll)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// slave axes parameters
func AxsCmdCtrlBasedHomingGantryDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AxsCmdCtrlBasedHomingGantryDataAddHomingParam(builder *flatbuffers.Builder, homingParam flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(homingParam), 0)
}
func AxsCmdCtrlBasedHomingGantryDataAddHomingSlaveParam(builder *flatbuffers.Builder, homingSlaveParam flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(homingSlaveParam), 0)
}
func AxsCmdCtrlBasedHomingGantryDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
