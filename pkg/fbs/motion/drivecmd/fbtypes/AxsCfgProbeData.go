// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of single probe data
type AxsCfgProbeDataT struct {
	Signal *AxsCfgProbeSignalDataT `json:"signal"`
	Edge *AxsCfgProbeEdgeDataT `json:"edge"`
	MkrFail *AxsCfgProbeMarkerFailureDataT `json:"mkrFail"`
	ExpWin *AxsCfgProbeExpectWindowDataT `json:"expWin"`
	DeadTime *AxsCfgProbeDeadTimeDataT `json:"deadTime"`
	InterpType InterpType `json:"interpType"`
	DeadTimeEx *AxsCfgProbeDeadTimeExDataT `json:"deadTimeEx"`
}

func (t *AxsCfgProbeDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	signalOffset := t.Signal.Pack(builder)
	edgeOffset := t.Edge.Pack(builder)
	mkrFailOffset := t.MkrFail.Pack(builder)
	expWinOffset := t.ExpWin.Pack(builder)
	deadTimeOffset := t.DeadTime.Pack(builder)
	deadTimeExOffset := t.DeadTimeEx.Pack(builder)
	AxsCfgProbeDataStart(builder)
	AxsCfgProbeDataAddSignal(builder, signalOffset)
	AxsCfgProbeDataAddEdge(builder, edgeOffset)
	AxsCfgProbeDataAddMkrFail(builder, mkrFailOffset)
	AxsCfgProbeDataAddExpWin(builder, expWinOffset)
	AxsCfgProbeDataAddDeadTime(builder, deadTimeOffset)
	AxsCfgProbeDataAddInterpType(builder, t.InterpType)
	AxsCfgProbeDataAddDeadTimeEx(builder, deadTimeExOffset)
	return AxsCfgProbeDataEnd(builder)
}

func (rcv *AxsCfgProbeData) UnPackTo(t *AxsCfgProbeDataT) {
	t.Signal = rcv.Signal(nil).UnPack()
	t.Edge = rcv.Edge(nil).UnPack()
	t.MkrFail = rcv.MkrFail(nil).UnPack()
	t.ExpWin = rcv.ExpWin(nil).UnPack()
	t.DeadTime = rcv.DeadTime(nil).UnPack()
	t.InterpType = rcv.InterpType()
	t.DeadTimeEx = rcv.DeadTimeEx(nil).UnPack()
}

func (rcv *AxsCfgProbeData) UnPack() *AxsCfgProbeDataT {
	if rcv == nil { return nil }
	t := &AxsCfgProbeDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgProbeData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgProbeData(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgProbeData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgProbeData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgProbeData(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgProbeData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgProbeData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgProbeData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgProbeData) Table() flatbuffers.Table {
	return rcv._tab
}

/// probe signal config
func (rcv *AxsCfgProbeData) Signal(obj *AxsCfgProbeSignalData) *AxsCfgProbeSignalData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgProbeSignalData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// probe signal config
/// edge config
func (rcv *AxsCfgProbeData) Edge(obj *AxsCfgProbeEdgeData) *AxsCfgProbeEdgeData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgProbeEdgeData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// edge config
/// marker failure config
func (rcv *AxsCfgProbeData) MkrFail(obj *AxsCfgProbeMarkerFailureData) *AxsCfgProbeMarkerFailureData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgProbeMarkerFailureData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// marker failure config
/// expect window data
func (rcv *AxsCfgProbeData) ExpWin(obj *AxsCfgProbeExpectWindowData) *AxsCfgProbeExpectWindowData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgProbeExpectWindowData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// expect window data
/// dead time compensation data to drive
func (rcv *AxsCfgProbeData) DeadTime(obj *AxsCfgProbeDeadTimeData) *AxsCfgProbeDeadTimeData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgProbeDeadTimeData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// dead time compensation data to drive
/// interpolation type, linear, polynomial
func (rcv *AxsCfgProbeData) InterpType() InterpType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return InterpType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// interpolation type, linear, polynomial
func (rcv *AxsCfgProbeData) MutateInterpType(n InterpType) bool {
	return rcv._tab.MutateInt8Slot(14, int8(n))
}

/// dead time compensation data extend to control
func (rcv *AxsCfgProbeData) DeadTimeEx(obj *AxsCfgProbeDeadTimeExData) *AxsCfgProbeDeadTimeExData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgProbeDeadTimeExData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// dead time compensation data extend to control
func AxsCfgProbeDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func AxsCfgProbeDataAddSignal(builder *flatbuffers.Builder, signal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(signal), 0)
}
func AxsCfgProbeDataAddEdge(builder *flatbuffers.Builder, edge flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(edge), 0)
}
func AxsCfgProbeDataAddMkrFail(builder *flatbuffers.Builder, mkrFail flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(mkrFail), 0)
}
func AxsCfgProbeDataAddExpWin(builder *flatbuffers.Builder, expWin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(expWin), 0)
}
func AxsCfgProbeDataAddDeadTime(builder *flatbuffers.Builder, deadTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(deadTime), 0)
}
func AxsCfgProbeDataAddInterpType(builder *flatbuffers.Builder, interpType InterpType) {
	builder.PrependInt8Slot(5, int8(interpType), 1)
}
func AxsCfgProbeDataAddDeadTimeEx(builder *flatbuffers.Builder, deadTimeEx flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(deadTimeEx), 0)
}
func AxsCfgProbeDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
