// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"

	motion__core__fbtypes "github.com/boschrexroth/ctrlx-datalayer-golang/v2/pkg/fbs/motion/core/fbtypes"
)

/// parameters of the axis position commands
type AxsCmdFixedstopDataT struct {
	Buffered bool `json:"buffered"`
	AxsPos float64 `json:"axsPos"`
	MaxTrq float64 `json:"maxTrq"`
	Lim *motion__core__fbtypes.DynamicLimitsT `json:"lim"`
}

func (t *AxsCmdFixedstopDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	limOffset := t.Lim.Pack(builder)
	AxsCmdFixedstopDataStart(builder)
	AxsCmdFixedstopDataAddBuffered(builder, t.Buffered)
	AxsCmdFixedstopDataAddAxsPos(builder, t.AxsPos)
	AxsCmdFixedstopDataAddMaxTrq(builder, t.MaxTrq)
	AxsCmdFixedstopDataAddLim(builder, limOffset)
	return AxsCmdFixedstopDataEnd(builder)
}

func (rcv *AxsCmdFixedstopData) UnPackTo(t *AxsCmdFixedstopDataT) {
	t.Buffered = rcv.Buffered()
	t.AxsPos = rcv.AxsPos()
	t.MaxTrq = rcv.MaxTrq()
	t.Lim = rcv.Lim(nil).UnPack()
}

func (rcv *AxsCmdFixedstopData) UnPack() *AxsCmdFixedstopDataT {
	if rcv == nil { return nil }
	t := &AxsCmdFixedstopDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdFixedstopData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdFixedstopData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdFixedstopData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdFixedstopData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdFixedstopData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdFixedstopData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdFixedstopData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdFixedstopData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdFixedstopData) Table() flatbuffers.Table {
	return rcv._tab
}

/// buffered type for generic command
func (rcv *AxsCmdFixedstopData) Buffered() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// buffered type for generic command
func (rcv *AxsCmdFixedstopData) MutateBuffered(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// commanded target position (or increment for relative position command)
func (rcv *AxsCmdFixedstopData) AxsPos() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// commanded target position (or increment for relative position command)
func (rcv *AxsCmdFixedstopData) MutateAxsPos(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// commanded force / torque limitation
func (rcv *AxsCmdFixedstopData) MaxTrq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// commanded force / torque limitation
func (rcv *AxsCmdFixedstopData) MutateMaxTrq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// dynamic limits for the motion of this command
func (rcv *AxsCmdFixedstopData) Lim(obj *motion__core__fbtypes.DynamicLimits) *motion__core__fbtypes.DynamicLimits {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(motion__core__fbtypes.DynamicLimits)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// dynamic limits for the motion of this command
func AxsCmdFixedstopDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func AxsCmdFixedstopDataAddBuffered(builder *flatbuffers.Builder, buffered bool) {
	builder.PrependBoolSlot(0, buffered, false)
}
func AxsCmdFixedstopDataAddAxsPos(builder *flatbuffers.Builder, axsPos float64) {
	builder.PrependFloat64Slot(1, axsPos, 0.0)
}
func AxsCmdFixedstopDataAddMaxTrq(builder *flatbuffers.Builder, maxTrq float64) {
	builder.PrependFloat64Slot(2, maxTrq, 0.0)
}
func AxsCmdFixedstopDataAddLim(builder *flatbuffers.Builder, lim flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(lim), 0)
}
func AxsCmdFixedstopDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
