// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///slave axes parameter of control based gantry homing 
type HomingSlaveParamSingleT struct {
	SlaveId uint16 `json:"slaveId"`
	NewRefPos float64 `json:"newRefPos"`
	MarkerSel RefMarkerSel `json:"markerSel"`
}

func (t *HomingSlaveParamSingleT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	HomingSlaveParamSingleStart(builder)
	HomingSlaveParamSingleAddSlaveId(builder, t.SlaveId)
	HomingSlaveParamSingleAddNewRefPos(builder, t.NewRefPos)
	HomingSlaveParamSingleAddMarkerSel(builder, t.MarkerSel)
	return HomingSlaveParamSingleEnd(builder)
}

func (rcv *HomingSlaveParamSingle) UnPackTo(t *HomingSlaveParamSingleT) {
	t.SlaveId = rcv.SlaveId()
	t.NewRefPos = rcv.NewRefPos()
	t.MarkerSel = rcv.MarkerSel()
}

func (rcv *HomingSlaveParamSingle) UnPack() *HomingSlaveParamSingleT {
	if rcv == nil { return nil }
	t := &HomingSlaveParamSingleT{}
	rcv.UnPackTo(t)
	return t
}

type HomingSlaveParamSingle struct {
	_tab flatbuffers.Table
}

func GetRootAsHomingSlaveParamSingle(buf []byte, offset flatbuffers.UOffsetT) *HomingSlaveParamSingle {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HomingSlaveParamSingle{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsHomingSlaveParamSingle(buf []byte, offset flatbuffers.UOffsetT) *HomingSlaveParamSingle {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &HomingSlaveParamSingle{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *HomingSlaveParamSingle) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HomingSlaveParamSingle) Table() flatbuffers.Table {
	return rcv._tab
}

///the id of slave axis
func (rcv *HomingSlaveParamSingle) SlaveId() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

///the id of slave axis
func (rcv *HomingSlaveParamSingle) MutateSlaveId(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

///commanded reference position of slave axis
func (rcv *HomingSlaveParamSingle) NewRefPos() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///commanded reference position of slave axis
func (rcv *HomingSlaveParamSingle) MutateNewRefPos(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

///select which reference mark to set the reference position
func (rcv *HomingSlaveParamSingle) MarkerSel() RefMarkerSel {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return RefMarkerSel(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

///select which reference mark to set the reference position
func (rcv *HomingSlaveParamSingle) MutateMarkerSel(n RefMarkerSel) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func HomingSlaveParamSingleStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func HomingSlaveParamSingleAddSlaveId(builder *flatbuffers.Builder, slaveId uint16) {
	builder.PrependUint16Slot(0, slaveId, 0)
}
func HomingSlaveParamSingleAddNewRefPos(builder *flatbuffers.Builder, newRefPos float64) {
	builder.PrependFloat64Slot(1, newRefPos, 0.0)
}
func HomingSlaveParamSingleAddMarkerSel(builder *flatbuffers.Builder, markerSel RefMarkerSel) {
	builder.PrependInt8Slot(2, int8(markerSel), 0)
}
func HomingSlaveParamSingleEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
