// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of the axis position commands
type AxsCmdSetAbsPosDataT struct {
	Buffered bool `json:"buffered"`
	AxsPos float64 `json:"axsPos"`
}

func (t *AxsCmdSetAbsPosDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AxsCmdSetAbsPosDataStart(builder)
	AxsCmdSetAbsPosDataAddBuffered(builder, t.Buffered)
	AxsCmdSetAbsPosDataAddAxsPos(builder, t.AxsPos)
	return AxsCmdSetAbsPosDataEnd(builder)
}

func (rcv *AxsCmdSetAbsPosData) UnPackTo(t *AxsCmdSetAbsPosDataT) {
	t.Buffered = rcv.Buffered()
	t.AxsPos = rcv.AxsPos()
}

func (rcv *AxsCmdSetAbsPosData) UnPack() *AxsCmdSetAbsPosDataT {
	if rcv == nil { return nil }
	t := &AxsCmdSetAbsPosDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdSetAbsPosData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdSetAbsPosData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdSetAbsPosData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdSetAbsPosData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdSetAbsPosData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdSetAbsPosData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdSetAbsPosData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdSetAbsPosData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdSetAbsPosData) Table() flatbuffers.Table {
	return rcv._tab
}

/// buffered type for generic command
func (rcv *AxsCmdSetAbsPosData) Buffered() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// buffered type for generic command
func (rcv *AxsCmdSetAbsPosData) MutateBuffered(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// commanded target position (or increment for relative position command)
func (rcv *AxsCmdSetAbsPosData) AxsPos() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// commanded target position (or increment for relative position command)
func (rcv *AxsCmdSetAbsPosData) MutateAxsPos(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func AxsCmdSetAbsPosDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AxsCmdSetAbsPosDataAddBuffered(builder *flatbuffers.Builder, buffered bool) {
	builder.PrependBoolSlot(0, buffered, false)
}
func AxsCmdSetAbsPosDataAddAxsPos(builder *flatbuffers.Builder, axsPos float64) {
	builder.PrependFloat64Slot(1, axsPos, 0.0)
}
func AxsCmdSetAbsPosDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
