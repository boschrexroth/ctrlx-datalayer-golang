// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of extended (control) dead time compensation 
type AxsCfgProbeDeadTimeExDataT struct {
	PosEdgeNs float64 `json:"posEdgeNS"`
	NegEdgeNs float64 `json:"negEdgeNS"`
}

func (t *AxsCfgProbeDeadTimeExDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AxsCfgProbeDeadTimeExDataStart(builder)
	AxsCfgProbeDeadTimeExDataAddPosEdgeNs(builder, t.PosEdgeNs)
	AxsCfgProbeDeadTimeExDataAddNegEdgeNs(builder, t.NegEdgeNs)
	return AxsCfgProbeDeadTimeExDataEnd(builder)
}

func (rcv *AxsCfgProbeDeadTimeExData) UnPackTo(t *AxsCfgProbeDeadTimeExDataT) {
	t.PosEdgeNs = rcv.PosEdgeNs()
	t.NegEdgeNs = rcv.NegEdgeNs()
}

func (rcv *AxsCfgProbeDeadTimeExData) UnPack() *AxsCfgProbeDeadTimeExDataT {
	if rcv == nil { return nil }
	t := &AxsCfgProbeDeadTimeExDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgProbeDeadTimeExData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgProbeDeadTimeExData(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgProbeDeadTimeExData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgProbeDeadTimeExData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgProbeDeadTimeExData(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgProbeDeadTimeExData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgProbeDeadTimeExData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgProbeDeadTimeExData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgProbeDeadTimeExData) Table() flatbuffers.Table {
	return rcv._tab
}

/// positive edge dead time compensation to control in Nano seconds
func (rcv *AxsCfgProbeDeadTimeExData) PosEdgeNs() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// positive edge dead time compensation to control in Nano seconds
func (rcv *AxsCfgProbeDeadTimeExData) MutatePosEdgeNs(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// negative edge dead time compensation to control in Nano seconds
func (rcv *AxsCfgProbeDeadTimeExData) NegEdgeNs() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// negative edge dead time compensation to control in Nano seconds
func (rcv *AxsCfgProbeDeadTimeExData) MutateNegEdgeNs(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func AxsCfgProbeDeadTimeExDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AxsCfgProbeDeadTimeExDataAddPosEdgeNs(builder *flatbuffers.Builder, posEdgeNs float64) {
	builder.PrependFloat64Slot(0, posEdgeNs, 0.0)
}
func AxsCfgProbeDeadTimeExDataAddNegEdgeNs(builder *flatbuffers.Builder, negEdgeNs float64) {
	builder.PrependFloat64Slot(1, negEdgeNs, 0.0)
}
func AxsCfgProbeDeadTimeExDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
