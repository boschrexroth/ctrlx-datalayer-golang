// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of single probe data
type AxsCfgProbeMarkerFailureDataT struct {
	Enable bool `json:"enable"`
	MaxNum int32 `json:"maxNum"`
}

func (t *AxsCfgProbeMarkerFailureDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AxsCfgProbeMarkerFailureDataStart(builder)
	AxsCfgProbeMarkerFailureDataAddEnable(builder, t.Enable)
	AxsCfgProbeMarkerFailureDataAddMaxNum(builder, t.MaxNum)
	return AxsCfgProbeMarkerFailureDataEnd(builder)
}

func (rcv *AxsCfgProbeMarkerFailureData) UnPackTo(t *AxsCfgProbeMarkerFailureDataT) {
	t.Enable = rcv.Enable()
	t.MaxNum = rcv.MaxNum()
}

func (rcv *AxsCfgProbeMarkerFailureData) UnPack() *AxsCfgProbeMarkerFailureDataT {
	if rcv == nil { return nil }
	t := &AxsCfgProbeMarkerFailureDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgProbeMarkerFailureData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgProbeMarkerFailureData(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgProbeMarkerFailureData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgProbeMarkerFailureData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgProbeMarkerFailureData(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgProbeMarkerFailureData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgProbeMarkerFailureData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgProbeMarkerFailureData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgProbeMarkerFailureData) Table() flatbuffers.Table {
	return rcv._tab
}

/// enable marker failure check
func (rcv *AxsCfgProbeMarkerFailureData) Enable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// enable marker failure check
func (rcv *AxsCfgProbeMarkerFailureData) MutateEnable(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// max marker failure number
func (rcv *AxsCfgProbeMarkerFailureData) MaxNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// max marker failure number
func (rcv *AxsCfgProbeMarkerFailureData) MutateMaxNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func AxsCfgProbeMarkerFailureDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AxsCfgProbeMarkerFailureDataAddEnable(builder *flatbuffers.Builder, enable bool) {
	builder.PrependBoolSlot(0, enable, false)
}
func AxsCfgProbeMarkerFailureDataAddMaxNum(builder *flatbuffers.Builder, maxNum int32) {
	builder.PrependInt32Slot(1, maxNum, 0)
}
func AxsCfgProbeMarkerFailureDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
