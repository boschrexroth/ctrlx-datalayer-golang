// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of all slave axes parameters 
type HomingSlaveParamAllT struct {
	HomingSlaveParamAll []*HomingSlaveParamSingleT `json:"homingSlaveParamAll"`
}

func (t *HomingSlaveParamAllT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	homingSlaveParamAllOffset := flatbuffers.UOffsetT(0)
	if t.HomingSlaveParamAll != nil {
		homingSlaveParamAllLength := len(t.HomingSlaveParamAll)
		homingSlaveParamAllOffsets := make([]flatbuffers.UOffsetT, homingSlaveParamAllLength)
		for j := 0; j < homingSlaveParamAllLength; j++ {
			homingSlaveParamAllOffsets[j] = t.HomingSlaveParamAll[j].Pack(builder)
		}
		HomingSlaveParamAllStartHomingSlaveParamAllVector(builder, homingSlaveParamAllLength)
		for j := homingSlaveParamAllLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(homingSlaveParamAllOffsets[j])
		}
		homingSlaveParamAllOffset = builder.EndVector(homingSlaveParamAllLength)
	}
	HomingSlaveParamAllStart(builder)
	HomingSlaveParamAllAddHomingSlaveParamAll(builder, homingSlaveParamAllOffset)
	return HomingSlaveParamAllEnd(builder)
}

func (rcv *HomingSlaveParamAll) UnPackTo(t *HomingSlaveParamAllT) {
	homingSlaveParamAllLength := rcv.HomingSlaveParamAllLength()
	t.HomingSlaveParamAll = make([]*HomingSlaveParamSingleT, homingSlaveParamAllLength)
	for j := 0; j < homingSlaveParamAllLength; j++ {
		x := HomingSlaveParamSingle{}
		rcv.HomingSlaveParamAll(&x, j)
		t.HomingSlaveParamAll[j] = x.UnPack()
	}
}

func (rcv *HomingSlaveParamAll) UnPack() *HomingSlaveParamAllT {
	if rcv == nil { return nil }
	t := &HomingSlaveParamAllT{}
	rcv.UnPackTo(t)
	return t
}

type HomingSlaveParamAll struct {
	_tab flatbuffers.Table
}

func GetRootAsHomingSlaveParamAll(buf []byte, offset flatbuffers.UOffsetT) *HomingSlaveParamAll {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HomingSlaveParamAll{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsHomingSlaveParamAll(buf []byte, offset flatbuffers.UOffsetT) *HomingSlaveParamAll {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &HomingSlaveParamAll{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *HomingSlaveParamAll) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HomingSlaveParamAll) Table() flatbuffers.Table {
	return rcv._tab
}

/// vector of all slave parameters
func (rcv *HomingSlaveParamAll) HomingSlaveParamAll(obj *HomingSlaveParamSingle, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *HomingSlaveParamAll) HomingSlaveParamAllLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of all slave parameters
func HomingSlaveParamAllStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func HomingSlaveParamAllAddHomingSlaveParamAll(builder *flatbuffers.Builder, homingSlaveParamAll flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(homingSlaveParamAll), 0)
}
func HomingSlaveParamAllStartHomingSlaveParamAllVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func HomingSlaveParamAllEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
