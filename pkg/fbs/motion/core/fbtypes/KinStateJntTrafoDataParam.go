// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// data of a single configuration parameter of a joint transformation when reading all data of an implemented joint transformation
type KinStateJntTrafoDataParamT struct {
	Name string `json:"name"`
	Description string `json:"description"`
	Image string `json:"image"`
	DocRef string `json:"docRef"`
	Group string `json:"group"`
	UnitValueType string `json:"unitValueType"`
	UnitObjType string `json:"unitObjType"`
	Values []string `json:"values"`
	Type VarType `json:"type"`
	Mandatory bool `json:"mandatory"`
	Subgroup string `json:"subgroup"`
}

func (t *KinStateJntTrafoDataParamT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	descriptionOffset := flatbuffers.UOffsetT(0)
	if t.Description != "" {
		descriptionOffset = builder.CreateString(t.Description)
	}
	imageOffset := flatbuffers.UOffsetT(0)
	if t.Image != "" {
		imageOffset = builder.CreateString(t.Image)
	}
	docRefOffset := flatbuffers.UOffsetT(0)
	if t.DocRef != "" {
		docRefOffset = builder.CreateString(t.DocRef)
	}
	groupOffset := flatbuffers.UOffsetT(0)
	if t.Group != "" {
		groupOffset = builder.CreateString(t.Group)
	}
	unitValueTypeOffset := flatbuffers.UOffsetT(0)
	if t.UnitValueType != "" {
		unitValueTypeOffset = builder.CreateString(t.UnitValueType)
	}
	unitObjTypeOffset := flatbuffers.UOffsetT(0)
	if t.UnitObjType != "" {
		unitObjTypeOffset = builder.CreateString(t.UnitObjType)
	}
	valuesOffset := flatbuffers.UOffsetT(0)
	if t.Values != nil {
		valuesLength := len(t.Values)
		valuesOffsets := make([]flatbuffers.UOffsetT, valuesLength)
		for j := 0; j < valuesLength; j++ {
			valuesOffsets[j] = builder.CreateString(t.Values[j])
		}
		KinStateJntTrafoDataParamStartValuesVector(builder, valuesLength)
		for j := valuesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(valuesOffsets[j])
		}
		valuesOffset = builder.EndVector(valuesLength)
	}
	subgroupOffset := flatbuffers.UOffsetT(0)
	if t.Subgroup != "" {
		subgroupOffset = builder.CreateString(t.Subgroup)
	}
	KinStateJntTrafoDataParamStart(builder)
	KinStateJntTrafoDataParamAddName(builder, nameOffset)
	KinStateJntTrafoDataParamAddDescription(builder, descriptionOffset)
	KinStateJntTrafoDataParamAddImage(builder, imageOffset)
	KinStateJntTrafoDataParamAddDocRef(builder, docRefOffset)
	KinStateJntTrafoDataParamAddGroup(builder, groupOffset)
	KinStateJntTrafoDataParamAddUnitValueType(builder, unitValueTypeOffset)
	KinStateJntTrafoDataParamAddUnitObjType(builder, unitObjTypeOffset)
	KinStateJntTrafoDataParamAddValues(builder, valuesOffset)
	KinStateJntTrafoDataParamAddType(builder, t.Type)
	KinStateJntTrafoDataParamAddMandatory(builder, t.Mandatory)
	KinStateJntTrafoDataParamAddSubgroup(builder, subgroupOffset)
	return KinStateJntTrafoDataParamEnd(builder)
}

func (rcv *KinStateJntTrafoDataParam) UnPackTo(t *KinStateJntTrafoDataParamT) {
	t.Name = string(rcv.Name())
	t.Description = string(rcv.Description())
	t.Image = string(rcv.Image())
	t.DocRef = string(rcv.DocRef())
	t.Group = string(rcv.Group())
	t.UnitValueType = string(rcv.UnitValueType())
	t.UnitObjType = string(rcv.UnitObjType())
	valuesLength := rcv.ValuesLength()
	t.Values = make([]string, valuesLength)
	for j := 0; j < valuesLength; j++ {
		t.Values[j] = string(rcv.Values(j))
	}
	t.Type = rcv.Type()
	t.Mandatory = rcv.Mandatory()
	t.Subgroup = string(rcv.Subgroup())
}

func (rcv *KinStateJntTrafoDataParam) UnPack() *KinStateJntTrafoDataParamT {
	if rcv == nil { return nil }
	t := &KinStateJntTrafoDataParamT{}
	rcv.UnPackTo(t)
	return t
}

type KinStateJntTrafoDataParam struct {
	_tab flatbuffers.Table
}

func GetRootAsKinStateJntTrafoDataParam(buf []byte, offset flatbuffers.UOffsetT) *KinStateJntTrafoDataParam {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinStateJntTrafoDataParam{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinStateJntTrafoDataParam(buf []byte, offset flatbuffers.UOffsetT) *KinStateJntTrafoDataParam {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinStateJntTrafoDataParam{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinStateJntTrafoDataParam) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinStateJntTrafoDataParam) Table() flatbuffers.Table {
	return rcv._tab
}

/// Name of the parameter
func (rcv *KinStateJntTrafoDataParam) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the parameter
/// Description of the parameter
func (rcv *KinStateJntTrafoDataParam) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the parameter
/// Image (link) of the parameter
func (rcv *KinStateJntTrafoDataParam) Image() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Image (link) of the parameter
/// Reference to the documentation of the parameter
func (rcv *KinStateJntTrafoDataParam) DocRef() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Reference to the documentation of the parameter
/// Group of the parameter (might be empty, when this parameter is not part of a group)
func (rcv *KinStateJntTrafoDataParam) Group() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Group of the parameter (might be empty, when this parameter is not part of a group)
/// Expected unit value type of the parameter (can be empty for unitless parameters)
func (rcv *KinStateJntTrafoDataParam) UnitValueType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Expected unit value type of the parameter (can be empty for unitless parameters)
/// Expected unit object type of the parameter (can be empty for unitless parameters; "linear" or "rotational" else)
func (rcv *KinStateJntTrafoDataParam) UnitObjType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Expected unit object type of the parameter (can be empty for unitless parameters; "linear" or "rotational" else)
/// Valid values for the parameter (when it's a string parameter and a kind of enumeration, else empty)
func (rcv *KinStateJntTrafoDataParam) Values(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *KinStateJntTrafoDataParam) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Valid values for the parameter (when it's a string parameter and a kind of enumeration, else empty)
/// Type of the variable
func (rcv *KinStateJntTrafoDataParam) Type() VarType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return VarType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// Type of the variable
func (rcv *KinStateJntTrafoDataParam) MutateType(n VarType) bool {
	return rcv._tab.MutateInt8Slot(20, int8(n))
}

/// Is this parameter mandatory?
func (rcv *KinStateJntTrafoDataParam) Mandatory() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// Is this parameter mandatory?
func (rcv *KinStateJntTrafoDataParam) MutateMandatory(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

/// SubGroup of the parameter (for advanced grouping in the HMI)
func (rcv *KinStateJntTrafoDataParam) Subgroup() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// SubGroup of the parameter (for advanced grouping in the HMI)
func KinStateJntTrafoDataParamStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func KinStateJntTrafoDataParamAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func KinStateJntTrafoDataParamAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(description), 0)
}
func KinStateJntTrafoDataParamAddImage(builder *flatbuffers.Builder, image flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(image), 0)
}
func KinStateJntTrafoDataParamAddDocRef(builder *flatbuffers.Builder, docRef flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(docRef), 0)
}
func KinStateJntTrafoDataParamAddGroup(builder *flatbuffers.Builder, group flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(group), 0)
}
func KinStateJntTrafoDataParamAddUnitValueType(builder *flatbuffers.Builder, unitValueType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(unitValueType), 0)
}
func KinStateJntTrafoDataParamAddUnitObjType(builder *flatbuffers.Builder, unitObjType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(unitObjType), 0)
}
func KinStateJntTrafoDataParamAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(values), 0)
}
func KinStateJntTrafoDataParamStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinStateJntTrafoDataParamAddType(builder *flatbuffers.Builder, type_ VarType) {
	builder.PrependInt8Slot(8, int8(type_), 1)
}
func KinStateJntTrafoDataParamAddMandatory(builder *flatbuffers.Builder, mandatory bool) {
	builder.PrependBoolSlot(9, mandatory, true)
}
func KinStateJntTrafoDataParamAddSubgroup(builder *flatbuffers.Builder, subgroup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(subgroup), 0)
}
func KinStateJntTrafoDataParamEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
