// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Table for just one single string (can be used for strings and enums)
type KVPCfgStringT struct {
	StringVal string `json:"stringVal"`
}

func (t *KVPCfgStringT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	stringValOffset := flatbuffers.UOffsetT(0)
	if t.StringVal != "" {
		stringValOffset = builder.CreateString(t.StringVal)
	}
	KVPCfgStringStart(builder)
	KVPCfgStringAddStringVal(builder, stringValOffset)
	return KVPCfgStringEnd(builder)
}

func (rcv *KVPCfgString) UnPackTo(t *KVPCfgStringT) {
	t.StringVal = string(rcv.StringVal())
}

func (rcv *KVPCfgString) UnPack() *KVPCfgStringT {
	if rcv == nil { return nil }
	t := &KVPCfgStringT{}
	rcv.UnPackTo(t)
	return t
}

type KVPCfgString struct {
	_tab flatbuffers.Table
}

func GetRootAsKVPCfgString(buf []byte, offset flatbuffers.UOffsetT) *KVPCfgString {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KVPCfgString{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKVPCfgString(buf []byte, offset flatbuffers.UOffsetT) *KVPCfgString {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KVPCfgString{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KVPCfgString) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KVPCfgString) Table() flatbuffers.Table {
	return rcv._tab
}

/// the value
func (rcv *KVPCfgString) StringVal() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// the value
func KVPCfgStringStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func KVPCfgStringAddStringVal(builder *flatbuffers.Builder, stringVal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(stringVal), 0)
}
func KVPCfgStringEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
