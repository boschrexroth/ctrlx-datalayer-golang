// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// data of a single registered axis transformation when reading all data of an implemented axis transformation
type KinCfgAxsTrafoDataSingleT struct {
	Name string
	Description string
	Image string
	DocRef string
	Version string
	Pow POWType
	Parameters *KinCfgAxsTrafoDataAllParamT
}

func (t *KinCfgAxsTrafoDataSingleT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	descriptionOffset := builder.CreateString(t.Description)
	imageOffset := builder.CreateString(t.Image)
	docRefOffset := builder.CreateString(t.DocRef)
	versionOffset := builder.CreateString(t.Version)
	parametersOffset := t.Parameters.Pack(builder)
	KinCfgAxsTrafoDataSingleStart(builder)
	KinCfgAxsTrafoDataSingleAddName(builder, nameOffset)
	KinCfgAxsTrafoDataSingleAddDescription(builder, descriptionOffset)
	KinCfgAxsTrafoDataSingleAddImage(builder, imageOffset)
	KinCfgAxsTrafoDataSingleAddDocRef(builder, docRefOffset)
	KinCfgAxsTrafoDataSingleAddVersion(builder, versionOffset)
	KinCfgAxsTrafoDataSingleAddPow(builder, t.Pow)
	KinCfgAxsTrafoDataSingleAddParameters(builder, parametersOffset)
	return KinCfgAxsTrafoDataSingleEnd(builder)
}

func (rcv *KinCfgAxsTrafoDataSingle) UnPackTo(t *KinCfgAxsTrafoDataSingleT) {
	t.Name = string(rcv.Name())
	t.Description = string(rcv.Description())
	t.Image = string(rcv.Image())
	t.DocRef = string(rcv.DocRef())
	t.Version = string(rcv.Version())
	t.Pow = rcv.Pow()
	t.Parameters = rcv.Parameters(nil).UnPack()
}

func (rcv *KinCfgAxsTrafoDataSingle) UnPack() *KinCfgAxsTrafoDataSingleT {
	if rcv == nil { return nil }
	t := &KinCfgAxsTrafoDataSingleT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgAxsTrafoDataSingle struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgAxsTrafoDataSingle(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxsTrafoDataSingle {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgAxsTrafoDataSingle{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgAxsTrafoDataSingle(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxsTrafoDataSingle {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgAxsTrafoDataSingle{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgAxsTrafoDataSingle) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgAxsTrafoDataSingle) Table() flatbuffers.Table {
	return rcv._tab
}

/// Name of the axis transformation
func (rcv *KinCfgAxsTrafoDataSingle) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the axis transformation
/// Description of the axis transformation
func (rcv *KinCfgAxsTrafoDataSingle) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the axis transformation
/// Image (link) of the axis transformation
func (rcv *KinCfgAxsTrafoDataSingle) Image() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Image (link) of the axis transformation
/// Reference to the documentation of the axis transformation
func (rcv *KinCfgAxsTrafoDataSingle) DocRef() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Reference to the documentation of the axis transformation
/// Version string of the axis transformation
func (rcv *KinCfgAxsTrafoDataSingle) Version() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Version string of the axis transformation
/// Point of work of the axis transformation
func (rcv *KinCfgAxsTrafoDataSingle) Pow() POWType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return POWType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// Point of work of the axis transformation
func (rcv *KinCfgAxsTrafoDataSingle) MutatePow(n POWType) bool {
	return rcv._tab.MutateInt8Slot(14, int8(n))
}

/// All configuration parameters of the axis transformation
func (rcv *KinCfgAxsTrafoDataSingle) Parameters(obj *KinCfgAxsTrafoDataAllParam) *KinCfgAxsTrafoDataAllParam {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(KinCfgAxsTrafoDataAllParam)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// All configuration parameters of the axis transformation
func KinCfgAxsTrafoDataSingleStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func KinCfgAxsTrafoDataSingleAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func KinCfgAxsTrafoDataSingleAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(description), 0)
}
func KinCfgAxsTrafoDataSingleAddImage(builder *flatbuffers.Builder, image flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(image), 0)
}
func KinCfgAxsTrafoDataSingleAddDocRef(builder *flatbuffers.Builder, docRef flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(docRef), 0)
}
func KinCfgAxsTrafoDataSingleAddVersion(builder *flatbuffers.Builder, version flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(version), 0)
}
func KinCfgAxsTrafoDataSingleAddPow(builder *flatbuffers.Builder, pow POWType) {
	builder.PrependInt8Slot(5, int8(pow), 1)
}
func KinCfgAxsTrafoDataSingleAddParameters(builder *flatbuffers.Builder, parameters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(parameters), 0)
}
func KinCfgAxsTrafoDataSingleEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
