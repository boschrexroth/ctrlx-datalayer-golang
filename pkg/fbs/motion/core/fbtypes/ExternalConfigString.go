// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Table for just one single string (can be used for strings and enums)
type ExternalConfigStringT struct {
	StringVal string `json:"stringVal"`
}

func (t *ExternalConfigStringT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	stringValOffset := flatbuffers.UOffsetT(0)
	if t.StringVal != "" {
		stringValOffset = builder.CreateString(t.StringVal)
	}
	ExternalConfigStringStart(builder)
	ExternalConfigStringAddStringVal(builder, stringValOffset)
	return ExternalConfigStringEnd(builder)
}

func (rcv *ExternalConfigString) UnPackTo(t *ExternalConfigStringT) {
	t.StringVal = string(rcv.StringVal())
}

func (rcv *ExternalConfigString) UnPack() *ExternalConfigStringT {
	if rcv == nil { return nil }
	t := &ExternalConfigStringT{}
	rcv.UnPackTo(t)
	return t
}

type ExternalConfigString struct {
	_tab flatbuffers.Table
}

func GetRootAsExternalConfigString(buf []byte, offset flatbuffers.UOffsetT) *ExternalConfigString {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ExternalConfigString{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsExternalConfigString(buf []byte, offset flatbuffers.UOffsetT) *ExternalConfigString {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ExternalConfigString{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ExternalConfigString) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ExternalConfigString) Table() flatbuffers.Table {
	return rcv._tab
}

/// the value
func (rcv *ExternalConfigString) StringVal() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// the value
func ExternalConfigStringStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ExternalConfigStringAddStringVal(builder *flatbuffers.Builder, stringVal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(stringVal), 0)
}
func ExternalConfigStringEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
