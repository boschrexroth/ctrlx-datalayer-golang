// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Table for just one single double value (can be used for any floating point numbers)
type ExternalConfigDoubleT struct {
	DoubleVal float64 `json:"doubleVal"`
}

func (t *ExternalConfigDoubleT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	ExternalConfigDoubleStart(builder)
	ExternalConfigDoubleAddDoubleVal(builder, t.DoubleVal)
	return ExternalConfigDoubleEnd(builder)
}

func (rcv *ExternalConfigDouble) UnPackTo(t *ExternalConfigDoubleT) {
	t.DoubleVal = rcv.DoubleVal()
}

func (rcv *ExternalConfigDouble) UnPack() *ExternalConfigDoubleT {
	if rcv == nil { return nil }
	t := &ExternalConfigDoubleT{}
	rcv.UnPackTo(t)
	return t
}

type ExternalConfigDouble struct {
	_tab flatbuffers.Table
}

func GetRootAsExternalConfigDouble(buf []byte, offset flatbuffers.UOffsetT) *ExternalConfigDouble {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ExternalConfigDouble{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsExternalConfigDouble(buf []byte, offset flatbuffers.UOffsetT) *ExternalConfigDouble {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ExternalConfigDouble{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ExternalConfigDouble) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ExternalConfigDouble) Table() flatbuffers.Table {
	return rcv._tab
}

/// the value
func (rcv *ExternalConfigDouble) DoubleVal() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// the value
func (rcv *ExternalConfigDouble) MutateDoubleVal(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

func ExternalConfigDoubleStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ExternalConfigDoubleAddDoubleVal(builder *flatbuffers.Builder, doubleVal float64) {
	builder.PrependFloat64Slot(0, doubleVal, 0.0)
}
func ExternalConfigDoubleEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
