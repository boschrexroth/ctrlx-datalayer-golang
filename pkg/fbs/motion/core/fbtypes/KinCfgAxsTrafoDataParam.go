// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// data of a single configuration parameter of an axis transformation when reading all data of an implemented axis transformation
type KinCfgAxsTrafoDataParamT struct {
	Name string
	Description string
	Image string
	DocRef string
	Group string
	Unit string
	Values []string
	Type VarType
}

func (t *KinCfgAxsTrafoDataParamT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	descriptionOffset := builder.CreateString(t.Description)
	imageOffset := builder.CreateString(t.Image)
	docRefOffset := builder.CreateString(t.DocRef)
	groupOffset := builder.CreateString(t.Group)
	unitOffset := builder.CreateString(t.Unit)
	valuesOffset := flatbuffers.UOffsetT(0)
	if t.Values != nil {
		valuesLength := len(t.Values)
		valuesOffsets := make([]flatbuffers.UOffsetT, valuesLength)
		for j := 0; j < valuesLength; j++ {
			valuesOffsets[j] = builder.CreateString(t.Values[j])
		}
		KinCfgAxsTrafoDataParamStartValuesVector(builder, valuesLength)
		for j := valuesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(valuesOffsets[j])
		}
		valuesOffset = builder.EndVector(valuesLength)
	}
	KinCfgAxsTrafoDataParamStart(builder)
	KinCfgAxsTrafoDataParamAddName(builder, nameOffset)
	KinCfgAxsTrafoDataParamAddDescription(builder, descriptionOffset)
	KinCfgAxsTrafoDataParamAddImage(builder, imageOffset)
	KinCfgAxsTrafoDataParamAddDocRef(builder, docRefOffset)
	KinCfgAxsTrafoDataParamAddGroup(builder, groupOffset)
	KinCfgAxsTrafoDataParamAddUnit(builder, unitOffset)
	KinCfgAxsTrafoDataParamAddValues(builder, valuesOffset)
	KinCfgAxsTrafoDataParamAddType(builder, t.Type)
	return KinCfgAxsTrafoDataParamEnd(builder)
}

func (rcv *KinCfgAxsTrafoDataParam) UnPackTo(t *KinCfgAxsTrafoDataParamT) {
	t.Name = string(rcv.Name())
	t.Description = string(rcv.Description())
	t.Image = string(rcv.Image())
	t.DocRef = string(rcv.DocRef())
	t.Group = string(rcv.Group())
	t.Unit = string(rcv.Unit())
	valuesLength := rcv.ValuesLength()
	t.Values = make([]string, valuesLength)
	for j := 0; j < valuesLength; j++ {
		t.Values[j] = string(rcv.Values(j))
	}
	t.Type = rcv.Type()
}

func (rcv *KinCfgAxsTrafoDataParam) UnPack() *KinCfgAxsTrafoDataParamT {
	if rcv == nil { return nil }
	t := &KinCfgAxsTrafoDataParamT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgAxsTrafoDataParam struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgAxsTrafoDataParam(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxsTrafoDataParam {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgAxsTrafoDataParam{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgAxsTrafoDataParam(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxsTrafoDataParam {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgAxsTrafoDataParam{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgAxsTrafoDataParam) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgAxsTrafoDataParam) Table() flatbuffers.Table {
	return rcv._tab
}

/// Name of the parameter
func (rcv *KinCfgAxsTrafoDataParam) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the parameter
/// Description of the parameter
func (rcv *KinCfgAxsTrafoDataParam) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the parameter
/// Image (link) of the parameter
func (rcv *KinCfgAxsTrafoDataParam) Image() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Image (link) of the parameter
/// Reference to the documentation of the parameter
func (rcv *KinCfgAxsTrafoDataParam) DocRef() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Reference to the documentation of the parameter
/// Group of the parameter (might be empty, when this parameter is not part of a group)
func (rcv *KinCfgAxsTrafoDataParam) Group() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Group of the parameter (might be empty, when this parameter is not part of a group)
/// Expected unit of the parameter (might be empty for unitless parameters
func (rcv *KinCfgAxsTrafoDataParam) Unit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Expected unit of the parameter (might be empty for unitless parameters
/// Valid values for the parameter (when it's a string parameter and a kind of enumeration, else empty)
func (rcv *KinCfgAxsTrafoDataParam) Values(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *KinCfgAxsTrafoDataParam) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Valid values for the parameter (when it's a string parameter and a kind of enumeration, else empty)
/// Type of the variable
func (rcv *KinCfgAxsTrafoDataParam) Type() VarType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return VarType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// Type of the variable
func (rcv *KinCfgAxsTrafoDataParam) MutateType(n VarType) bool {
	return rcv._tab.MutateInt8Slot(18, int8(n))
}

func KinCfgAxsTrafoDataParamStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func KinCfgAxsTrafoDataParamAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func KinCfgAxsTrafoDataParamAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(description), 0)
}
func KinCfgAxsTrafoDataParamAddImage(builder *flatbuffers.Builder, image flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(image), 0)
}
func KinCfgAxsTrafoDataParamAddDocRef(builder *flatbuffers.Builder, docRef flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(docRef), 0)
}
func KinCfgAxsTrafoDataParamAddGroup(builder *flatbuffers.Builder, group flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(group), 0)
}
func KinCfgAxsTrafoDataParamAddUnit(builder *flatbuffers.Builder, unit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(unit), 0)
}
func KinCfgAxsTrafoDataParamAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(values), 0)
}
func KinCfgAxsTrafoDataParamStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinCfgAxsTrafoDataParamAddType(builder *flatbuffers.Builder, type_ VarType) {
	builder.PrependInt8Slot(7, int8(type_), 1)
}
func KinCfgAxsTrafoDataParamEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
