// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of the axis torque command
type AxsCmdTorqueDataT struct {
	TargetTrq float64 `json:"targetTrq"`
	TrqRamp float64 `json:"trqRamp"`
	Lim *DynamicLimitsT `json:"lim"`
}

func (t *AxsCmdTorqueDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	limOffset := t.Lim.Pack(builder)
	AxsCmdTorqueDataStart(builder)
	AxsCmdTorqueDataAddTargetTrq(builder, t.TargetTrq)
	AxsCmdTorqueDataAddTrqRamp(builder, t.TrqRamp)
	AxsCmdTorqueDataAddLim(builder, limOffset)
	return AxsCmdTorqueDataEnd(builder)
}

func (rcv *AxsCmdTorqueData) UnPackTo(t *AxsCmdTorqueDataT) {
	t.TargetTrq = rcv.TargetTrq()
	t.TrqRamp = rcv.TrqRamp()
	t.Lim = rcv.Lim(nil).UnPack()
}

func (rcv *AxsCmdTorqueData) UnPack() *AxsCmdTorqueDataT {
	if rcv == nil { return nil }
	t := &AxsCmdTorqueDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdTorqueData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdTorqueData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdTorqueData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdTorqueData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdTorqueData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdTorqueData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdTorqueData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdTorqueData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdTorqueData) Table() flatbuffers.Table {
	return rcv._tab
}

/// commanded target torque (can be negative)
func (rcv *AxsCmdTorqueData) TargetTrq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 1.0
}

/// commanded target torque (can be negative)
func (rcv *AxsCmdTorqueData) MutateTargetTrq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// commanded target torque ramp (only positive)
func (rcv *AxsCmdTorqueData) TrqRamp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// commanded target torque ramp (only positive)
func (rcv *AxsCmdTorqueData) MutateTrqRamp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// dynamic limits for the motion of this command
func (rcv *AxsCmdTorqueData) Lim(obj *DynamicLimits) *DynamicLimits {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DynamicLimits)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// dynamic limits for the motion of this command
func AxsCmdTorqueDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AxsCmdTorqueDataAddTargetTrq(builder *flatbuffers.Builder, targetTrq float64) {
	builder.PrependFloat64Slot(0, targetTrq, 1.0)
}
func AxsCmdTorqueDataAddTrqRamp(builder *flatbuffers.Builder, trqRamp float64) {
	builder.PrependFloat64Slot(1, trqRamp, 0.0)
}
func AxsCmdTorqueDataAddLim(builder *flatbuffers.Builder, lim flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(lim), 0)
}
func AxsCmdTorqueDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
