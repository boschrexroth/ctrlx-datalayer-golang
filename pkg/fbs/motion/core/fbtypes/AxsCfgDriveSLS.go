// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Configuration of motion kernel monitoring and reaction of drive function 'safe limited speed'
type AxsCfgDriveSLST struct {
	Vel float64 `json:"vel"`
	VelUnit string `json:"velUnit"`
	EnableFlag bool `json:"enableFlag"`
}

func (t *AxsCfgDriveSLST) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	velUnitOffset := flatbuffers.UOffsetT(0)
	if t.VelUnit != "" {
		velUnitOffset = builder.CreateString(t.VelUnit)
	}
	AxsCfgDriveSLSStart(builder)
	AxsCfgDriveSLSAddVel(builder, t.Vel)
	AxsCfgDriveSLSAddVelUnit(builder, velUnitOffset)
	AxsCfgDriveSLSAddEnableFlag(builder, t.EnableFlag)
	return AxsCfgDriveSLSEnd(builder)
}

func (rcv *AxsCfgDriveSLS) UnPackTo(t *AxsCfgDriveSLST) {
	t.Vel = rcv.Vel()
	t.VelUnit = string(rcv.VelUnit())
	t.EnableFlag = rcv.EnableFlag()
}

func (rcv *AxsCfgDriveSLS) UnPack() *AxsCfgDriveSLST {
	if rcv == nil { return nil }
	t := &AxsCfgDriveSLST{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgDriveSLS struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgDriveSLS(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgDriveSLS {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgDriveSLS{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgDriveSLS(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgDriveSLS {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgDriveSLS{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgDriveSLS) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgDriveSLS) Table() flatbuffers.Table {
	return rcv._tab
}

/// velocity limit for the axis in the motion kernel, when drive function 'safe limited speed' is active
func (rcv *AxsCfgDriveSLS) Vel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// velocity limit for the axis in the motion kernel, when drive function 'safe limited speed' is active
func (rcv *AxsCfgDriveSLS) MutateVel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// unit of vel
func (rcv *AxsCfgDriveSLS) VelUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of vel
/// is safe operation mode monitoring in the motion kernel active or not
func (rcv *AxsCfgDriveSLS) EnableFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// is safe operation mode monitoring in the motion kernel active or not
func (rcv *AxsCfgDriveSLS) MutateEnableFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func AxsCfgDriveSLSStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AxsCfgDriveSLSAddVel(builder *flatbuffers.Builder, vel float64) {
	builder.PrependFloat64Slot(0, vel, 0.0)
}
func AxsCfgDriveSLSAddVelUnit(builder *flatbuffers.Builder, velUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(velUnit), 0)
}
func AxsCfgDriveSLSAddEnableFlag(builder *flatbuffers.Builder, enableFlag bool) {
	builder.PrependBoolSlot(2, enableFlag, false)
}
func AxsCfgDriveSLSEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
