// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of a single set for the product coordiate system of a kinematics
type SysCfgPcsSetT struct {
	SetName string
	OffsetXYZ []float64
	Orientation []float64
	OffsetAux []float64
	RelativeToPCS bool
	OffsetXYZUnits []string
	OrientationUnits []string
	OffsetAuxUnits []string
}

func (t *SysCfgPcsSetT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	setNameOffset := builder.CreateString(t.SetName)
	offsetXYZOffset := flatbuffers.UOffsetT(0)
	if t.OffsetXYZ != nil {
		offsetXYZLength := len(t.OffsetXYZ)
		SysCfgPcsSetStartOffsetXYZVector(builder, offsetXYZLength)
		for j := offsetXYZLength - 1; j >= 0; j-- {
			builder.PrependFloat64(t.OffsetXYZ[j])
		}
		offsetXYZOffset = builder.EndVector(offsetXYZLength)
	}
	orientationOffset := flatbuffers.UOffsetT(0)
	if t.Orientation != nil {
		orientationLength := len(t.Orientation)
		SysCfgPcsSetStartOrientationVector(builder, orientationLength)
		for j := orientationLength - 1; j >= 0; j-- {
			builder.PrependFloat64(t.Orientation[j])
		}
		orientationOffset = builder.EndVector(orientationLength)
	}
	offsetAuxOffset := flatbuffers.UOffsetT(0)
	if t.OffsetAux != nil {
		offsetAuxLength := len(t.OffsetAux)
		SysCfgPcsSetStartOffsetAuxVector(builder, offsetAuxLength)
		for j := offsetAuxLength - 1; j >= 0; j-- {
			builder.PrependFloat64(t.OffsetAux[j])
		}
		offsetAuxOffset = builder.EndVector(offsetAuxLength)
	}
	offsetXYZUnitsOffset := flatbuffers.UOffsetT(0)
	if t.OffsetXYZUnits != nil {
		offsetXYZUnitsLength := len(t.OffsetXYZUnits)
		offsetXYZUnitsOffsets := make([]flatbuffers.UOffsetT, offsetXYZUnitsLength)
		for j := 0; j < offsetXYZUnitsLength; j++ {
			offsetXYZUnitsOffsets[j] = builder.CreateString(t.OffsetXYZUnits[j])
		}
		SysCfgPcsSetStartOffsetXYZUnitsVector(builder, offsetXYZUnitsLength)
		for j := offsetXYZUnitsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(offsetXYZUnitsOffsets[j])
		}
		offsetXYZUnitsOffset = builder.EndVector(offsetXYZUnitsLength)
	}
	orientationUnitsOffset := flatbuffers.UOffsetT(0)
	if t.OrientationUnits != nil {
		orientationUnitsLength := len(t.OrientationUnits)
		orientationUnitsOffsets := make([]flatbuffers.UOffsetT, orientationUnitsLength)
		for j := 0; j < orientationUnitsLength; j++ {
			orientationUnitsOffsets[j] = builder.CreateString(t.OrientationUnits[j])
		}
		SysCfgPcsSetStartOrientationUnitsVector(builder, orientationUnitsLength)
		for j := orientationUnitsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(orientationUnitsOffsets[j])
		}
		orientationUnitsOffset = builder.EndVector(orientationUnitsLength)
	}
	offsetAuxUnitsOffset := flatbuffers.UOffsetT(0)
	if t.OffsetAuxUnits != nil {
		offsetAuxUnitsLength := len(t.OffsetAuxUnits)
		offsetAuxUnitsOffsets := make([]flatbuffers.UOffsetT, offsetAuxUnitsLength)
		for j := 0; j < offsetAuxUnitsLength; j++ {
			offsetAuxUnitsOffsets[j] = builder.CreateString(t.OffsetAuxUnits[j])
		}
		SysCfgPcsSetStartOffsetAuxUnitsVector(builder, offsetAuxUnitsLength)
		for j := offsetAuxUnitsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(offsetAuxUnitsOffsets[j])
		}
		offsetAuxUnitsOffset = builder.EndVector(offsetAuxUnitsLength)
	}
	SysCfgPcsSetStart(builder)
	SysCfgPcsSetAddSetName(builder, setNameOffset)
	SysCfgPcsSetAddOffsetXYZ(builder, offsetXYZOffset)
	SysCfgPcsSetAddOrientation(builder, orientationOffset)
	SysCfgPcsSetAddOffsetAux(builder, offsetAuxOffset)
	SysCfgPcsSetAddRelativeToPCS(builder, t.RelativeToPCS)
	SysCfgPcsSetAddOffsetXYZUnits(builder, offsetXYZUnitsOffset)
	SysCfgPcsSetAddOrientationUnits(builder, orientationUnitsOffset)
	SysCfgPcsSetAddOffsetAuxUnits(builder, offsetAuxUnitsOffset)
	return SysCfgPcsSetEnd(builder)
}

func (rcv *SysCfgPcsSet) UnPackTo(t *SysCfgPcsSetT) {
	t.SetName = string(rcv.SetName())
	offsetXYZLength := rcv.OffsetXYZLength()
	t.OffsetXYZ = make([]float64, offsetXYZLength)
	for j := 0; j < offsetXYZLength; j++ {
		t.OffsetXYZ[j] = rcv.OffsetXYZ(j)
	}
	orientationLength := rcv.OrientationLength()
	t.Orientation = make([]float64, orientationLength)
	for j := 0; j < orientationLength; j++ {
		t.Orientation[j] = rcv.Orientation(j)
	}
	offsetAuxLength := rcv.OffsetAuxLength()
	t.OffsetAux = make([]float64, offsetAuxLength)
	for j := 0; j < offsetAuxLength; j++ {
		t.OffsetAux[j] = rcv.OffsetAux(j)
	}
	t.RelativeToPCS = rcv.RelativeToPCS()
	offsetXYZUnitsLength := rcv.OffsetXYZUnitsLength()
	t.OffsetXYZUnits = make([]string, offsetXYZUnitsLength)
	for j := 0; j < offsetXYZUnitsLength; j++ {
		t.OffsetXYZUnits[j] = string(rcv.OffsetXYZUnits(j))
	}
	orientationUnitsLength := rcv.OrientationUnitsLength()
	t.OrientationUnits = make([]string, orientationUnitsLength)
	for j := 0; j < orientationUnitsLength; j++ {
		t.OrientationUnits[j] = string(rcv.OrientationUnits(j))
	}
	offsetAuxUnitsLength := rcv.OffsetAuxUnitsLength()
	t.OffsetAuxUnits = make([]string, offsetAuxUnitsLength)
	for j := 0; j < offsetAuxUnitsLength; j++ {
		t.OffsetAuxUnits[j] = string(rcv.OffsetAuxUnits(j))
	}
}

func (rcv *SysCfgPcsSet) UnPack() *SysCfgPcsSetT {
	if rcv == nil { return nil }
	t := &SysCfgPcsSetT{}
	rcv.UnPackTo(t)
	return t
}

type SysCfgPcsSet struct {
	_tab flatbuffers.Table
}

func GetRootAsSysCfgPcsSet(buf []byte, offset flatbuffers.UOffsetT) *SysCfgPcsSet {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SysCfgPcsSet{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSysCfgPcsSet(buf []byte, offset flatbuffers.UOffsetT) *SysCfgPcsSet {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SysCfgPcsSet{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SysCfgPcsSet) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SysCfgPcsSet) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the set (required for load/save)
func (rcv *SysCfgPcsSet) SetName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the set (required for load/save)
/// XYZ offsets (must be exactly three values)
func (rcv *SysCfgPcsSet) OffsetXYZ(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SysCfgPcsSet) OffsetXYZLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// XYZ offsets (must be exactly three values)
func (rcv *SysCfgPcsSet) MutateOffsetXYZ(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

/// rotation offsets as Euler angles ZY'Z'' (must be exactly three values)
func (rcv *SysCfgPcsSet) Orientation(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SysCfgPcsSet) OrientationLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// rotation offsets as Euler angles ZY'Z'' (must be exactly three values)
func (rcv *SysCfgPcsSet) MutateOrientation(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

/// offsets for auxilary axes (must be exactly 10 values)
func (rcv *SysCfgPcsSet) OffsetAux(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SysCfgPcsSet) OffsetAuxLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// offsets for auxilary axes (must be exactly 10 values)
func (rcv *SysCfgPcsSet) MutateOffsetAux(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

/// is this set relative to an other pcs set?
func (rcv *SysCfgPcsSet) RelativeToPCS() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// is this set relative to an other pcs set?
func (rcv *SysCfgPcsSet) MutateRelativeToPCS(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

/// Units for XYZ offsets (must be exactly three values)
func (rcv *SysCfgPcsSet) OffsetXYZUnits(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SysCfgPcsSet) OffsetXYZUnitsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Units for XYZ offsets (must be exactly three values)
/// Units for rotation offsets (must be exactly three values)
func (rcv *SysCfgPcsSet) OrientationUnits(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SysCfgPcsSet) OrientationUnitsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Units for rotation offsets (must be exactly three values)
/// Units for offsets for auxilary axes (must be exactly 10 values)
func (rcv *SysCfgPcsSet) OffsetAuxUnits(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SysCfgPcsSet) OffsetAuxUnitsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Units for offsets for auxilary axes (must be exactly 10 values)
func SysCfgPcsSetStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func SysCfgPcsSetAddSetName(builder *flatbuffers.Builder, setName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(setName), 0)
}
func SysCfgPcsSetAddOffsetXYZ(builder *flatbuffers.Builder, offsetXYZ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(offsetXYZ), 0)
}
func SysCfgPcsSetStartOffsetXYZVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SysCfgPcsSetAddOrientation(builder *flatbuffers.Builder, orientation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(orientation), 0)
}
func SysCfgPcsSetStartOrientationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SysCfgPcsSetAddOffsetAux(builder *flatbuffers.Builder, offsetAux flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(offsetAux), 0)
}
func SysCfgPcsSetStartOffsetAuxVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SysCfgPcsSetAddRelativeToPCS(builder *flatbuffers.Builder, relativeToPCS bool) {
	builder.PrependBoolSlot(4, relativeToPCS, false)
}
func SysCfgPcsSetAddOffsetXYZUnits(builder *flatbuffers.Builder, offsetXYZUnits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(offsetXYZUnits), 0)
}
func SysCfgPcsSetStartOffsetXYZUnitsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SysCfgPcsSetAddOrientationUnits(builder *flatbuffers.Builder, orientationUnits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(orientationUnits), 0)
}
func SysCfgPcsSetStartOrientationUnitsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SysCfgPcsSetAddOffsetAuxUnits(builder *flatbuffers.Builder, offsetAuxUnits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(offsetAuxUnits), 0)
}
func SysCfgPcsSetStartOffsetAuxUnitsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SysCfgPcsSetEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
