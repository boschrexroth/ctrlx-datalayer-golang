// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// all configured cyclic status data windows for an axis
type AxsCfgWindowsForStateDataT struct {
	Standstill float64 `json:"standstill"`
	InVel float64 `json:"inVel"`
	InPos float64 `json:"inPos"`
	InTrq float64 `json:"inTrq"`
	StandstillUnit string `json:"standstillUnit"`
	InVelUnit string `json:"inVelUnit"`
	InPosUnit string `json:"inPosUnit"`
	InTrqUnit string `json:"inTrqUnit"`
}

func (t *AxsCfgWindowsForStateDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	standstillUnitOffset := flatbuffers.UOffsetT(0)
	if t.StandstillUnit != "" {
		standstillUnitOffset = builder.CreateString(t.StandstillUnit)
	}
	inVelUnitOffset := flatbuffers.UOffsetT(0)
	if t.InVelUnit != "" {
		inVelUnitOffset = builder.CreateString(t.InVelUnit)
	}
	inPosUnitOffset := flatbuffers.UOffsetT(0)
	if t.InPosUnit != "" {
		inPosUnitOffset = builder.CreateString(t.InPosUnit)
	}
	inTrqUnitOffset := flatbuffers.UOffsetT(0)
	if t.InTrqUnit != "" {
		inTrqUnitOffset = builder.CreateString(t.InTrqUnit)
	}
	AxsCfgWindowsForStateDataStart(builder)
	AxsCfgWindowsForStateDataAddStandstill(builder, t.Standstill)
	AxsCfgWindowsForStateDataAddInVel(builder, t.InVel)
	AxsCfgWindowsForStateDataAddInPos(builder, t.InPos)
	AxsCfgWindowsForStateDataAddInTrq(builder, t.InTrq)
	AxsCfgWindowsForStateDataAddStandstillUnit(builder, standstillUnitOffset)
	AxsCfgWindowsForStateDataAddInVelUnit(builder, inVelUnitOffset)
	AxsCfgWindowsForStateDataAddInPosUnit(builder, inPosUnitOffset)
	AxsCfgWindowsForStateDataAddInTrqUnit(builder, inTrqUnitOffset)
	return AxsCfgWindowsForStateDataEnd(builder)
}

func (rcv *AxsCfgWindowsForStateData) UnPackTo(t *AxsCfgWindowsForStateDataT) {
	t.Standstill = rcv.Standstill()
	t.InVel = rcv.InVel()
	t.InPos = rcv.InPos()
	t.InTrq = rcv.InTrq()
	t.StandstillUnit = string(rcv.StandstillUnit())
	t.InVelUnit = string(rcv.InVelUnit())
	t.InPosUnit = string(rcv.InPosUnit())
	t.InTrqUnit = string(rcv.InTrqUnit())
}

func (rcv *AxsCfgWindowsForStateData) UnPack() *AxsCfgWindowsForStateDataT {
	if rcv == nil { return nil }
	t := &AxsCfgWindowsForStateDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgWindowsForStateData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgWindowsForStateData(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgWindowsForStateData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgWindowsForStateData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgWindowsForStateData(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgWindowsForStateData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgWindowsForStateData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgWindowsForStateData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgWindowsForStateData) Table() flatbuffers.Table {
	return rcv._tab
}

/// window for standstill
func (rcv *AxsCfgWindowsForStateData) Standstill() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// window for standstill
func (rcv *AxsCfgWindowsForStateData) MutateStandstill(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// window for inVel
func (rcv *AxsCfgWindowsForStateData) InVel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// window for inVel
func (rcv *AxsCfgWindowsForStateData) MutateInVel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// window for inPos
func (rcv *AxsCfgWindowsForStateData) InPos() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// window for inPos
func (rcv *AxsCfgWindowsForStateData) MutateInPos(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// window for inTrq
func (rcv *AxsCfgWindowsForStateData) InTrq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// window for inTrq
func (rcv *AxsCfgWindowsForStateData) MutateInTrq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// unit of standstill
func (rcv *AxsCfgWindowsForStateData) StandstillUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of standstill
/// unit of inVel
func (rcv *AxsCfgWindowsForStateData) InVelUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of inVel
/// unit of inPos
func (rcv *AxsCfgWindowsForStateData) InPosUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of inPos
/// unit of inTrq
func (rcv *AxsCfgWindowsForStateData) InTrqUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of inTrq
func AxsCfgWindowsForStateDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func AxsCfgWindowsForStateDataAddStandstill(builder *flatbuffers.Builder, standstill float64) {
	builder.PrependFloat64Slot(0, standstill, 0.0)
}
func AxsCfgWindowsForStateDataAddInVel(builder *flatbuffers.Builder, inVel float64) {
	builder.PrependFloat64Slot(1, inVel, 0.0)
}
func AxsCfgWindowsForStateDataAddInPos(builder *flatbuffers.Builder, inPos float64) {
	builder.PrependFloat64Slot(2, inPos, 0.0)
}
func AxsCfgWindowsForStateDataAddInTrq(builder *flatbuffers.Builder, inTrq float64) {
	builder.PrependFloat64Slot(3, inTrq, 0.0)
}
func AxsCfgWindowsForStateDataAddStandstillUnit(builder *flatbuffers.Builder, standstillUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(standstillUnit), 0)
}
func AxsCfgWindowsForStateDataAddInVelUnit(builder *flatbuffers.Builder, inVelUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(inVelUnit), 0)
}
func AxsCfgWindowsForStateDataAddInPosUnit(builder *flatbuffers.Builder, inPosUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(inPosUnit), 0)
}
func AxsCfgWindowsForStateDataAddInTrqUnit(builder *flatbuffers.Builder, inTrqUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(inTrqUnit), 0)
}
func AxsCfgWindowsForStateDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
