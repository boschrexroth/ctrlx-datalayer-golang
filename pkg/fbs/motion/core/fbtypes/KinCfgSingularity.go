// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration for singularity handling
type KinCfgSingularityT struct {
	Epsilon float64 `json:"epsilon"`
	EpsilonUnit string `json:"epsilonUnit"`
}

func (t *KinCfgSingularityT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	epsilonUnitOffset := flatbuffers.UOffsetT(0)
	if t.EpsilonUnit != "" {
		epsilonUnitOffset = builder.CreateString(t.EpsilonUnit)
	}
	KinCfgSingularityStart(builder)
	KinCfgSingularityAddEpsilon(builder, t.Epsilon)
	KinCfgSingularityAddEpsilonUnit(builder, epsilonUnitOffset)
	return KinCfgSingularityEnd(builder)
}

func (rcv *KinCfgSingularity) UnPackTo(t *KinCfgSingularityT) {
	t.Epsilon = rcv.Epsilon()
	t.EpsilonUnit = string(rcv.EpsilonUnit())
}

func (rcv *KinCfgSingularity) UnPack() *KinCfgSingularityT {
	if rcv == nil { return nil }
	t := &KinCfgSingularityT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgSingularity struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgSingularity(buf []byte, offset flatbuffers.UOffsetT) *KinCfgSingularity {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgSingularity{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgSingularity(buf []byte, offset flatbuffers.UOffsetT) *KinCfgSingularity {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgSingularity{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgSingularity) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgSingularity) Table() flatbuffers.Table {
	return rcv._tab
}

/// epsilon for singularity handling
func (rcv *KinCfgSingularity) Epsilon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 10.0
}

/// epsilon for singularity handling
func (rcv *KinCfgSingularity) MutateEpsilon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// unit of the epsilon for singularity handling
func (rcv *KinCfgSingularity) EpsilonUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of the epsilon for singularity handling
func KinCfgSingularityStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KinCfgSingularityAddEpsilon(builder *flatbuffers.Builder, epsilon float64) {
	builder.PrependFloat64Slot(0, epsilon, 10.0)
}
func KinCfgSingularityAddEpsilonUnit(builder *flatbuffers.Builder, epsilonUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(epsilonUnit), 0)
}
func KinCfgSingularityEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
