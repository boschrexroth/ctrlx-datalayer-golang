// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Data of all supported units
type UnitDataAllT struct {
	Supported []*UnitDataSingleT
}

func (t *UnitDataAllT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	supportedOffset := flatbuffers.UOffsetT(0)
	if t.Supported != nil {
		supportedLength := len(t.Supported)
		supportedOffsets := make([]flatbuffers.UOffsetT, supportedLength)
		for j := 0; j < supportedLength; j++ {
			supportedOffsets[j] = t.Supported[j].Pack(builder)
		}
		UnitDataAllStartSupportedVector(builder, supportedLength)
		for j := supportedLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(supportedOffsets[j])
		}
		supportedOffset = builder.EndVector(supportedLength)
	}
	UnitDataAllStart(builder)
	UnitDataAllAddSupported(builder, supportedOffset)
	return UnitDataAllEnd(builder)
}

func (rcv *UnitDataAll) UnPackTo(t *UnitDataAllT) {
	supportedLength := rcv.SupportedLength()
	t.Supported = make([]*UnitDataSingleT, supportedLength)
	for j := 0; j < supportedLength; j++ {
		x := UnitDataSingle{}
		rcv.Supported(&x, j)
		t.Supported[j] = x.UnPack()
	}
}

func (rcv *UnitDataAll) UnPack() *UnitDataAllT {
	if rcv == nil { return nil }
	t := &UnitDataAllT{}
	rcv.UnPackTo(t)
	return t
}

type UnitDataAll struct {
	_tab flatbuffers.Table
}

func GetRootAsUnitDataAll(buf []byte, offset flatbuffers.UOffsetT) *UnitDataAll {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UnitDataAll{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsUnitDataAll(buf []byte, offset flatbuffers.UOffsetT) *UnitDataAll {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UnitDataAll{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *UnitDataAll) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UnitDataAll) Table() flatbuffers.Table {
	return rcv._tab
}

/// vector of all supported units
func (rcv *UnitDataAll) Supported(obj *UnitDataSingle, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *UnitDataAll) SupportedLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of all supported units
func UnitDataAllStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func UnitDataAllAddSupported(builder *flatbuffers.Builder, supported flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(supported), 0)
}
func UnitDataAllStartSupportedVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func UnitDataAllEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
