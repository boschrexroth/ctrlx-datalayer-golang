// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Table for just one single boolean value
type KVPCfgBoolT struct {
	BoolVal bool `json:"boolVal"`
}

func (t *KVPCfgBoolT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	KVPCfgBoolStart(builder)
	KVPCfgBoolAddBoolVal(builder, t.BoolVal)
	return KVPCfgBoolEnd(builder)
}

func (rcv *KVPCfgBool) UnPackTo(t *KVPCfgBoolT) {
	t.BoolVal = rcv.BoolVal()
}

func (rcv *KVPCfgBool) UnPack() *KVPCfgBoolT {
	if rcv == nil { return nil }
	t := &KVPCfgBoolT{}
	rcv.UnPackTo(t)
	return t
}

type KVPCfgBool struct {
	_tab flatbuffers.Table
}

func GetRootAsKVPCfgBool(buf []byte, offset flatbuffers.UOffsetT) *KVPCfgBool {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KVPCfgBool{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKVPCfgBool(buf []byte, offset flatbuffers.UOffsetT) *KVPCfgBool {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KVPCfgBool{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KVPCfgBool) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KVPCfgBool) Table() flatbuffers.Table {
	return rcv._tab
}

/// the value
func (rcv *KVPCfgBool) BoolVal() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// the value
func (rcv *KVPCfgBool) MutateBoolVal(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func KVPCfgBoolStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func KVPCfgBoolAddBoolVal(builder *flatbuffers.Builder, boolVal bool) {
	builder.PrependBoolSlot(0, boolVal, false)
}
func KVPCfgBoolEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
