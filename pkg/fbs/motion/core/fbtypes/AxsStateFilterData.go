// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Filter related data
type AxsStateFilterDataT struct {
	FilterData []*AxsStateSingleFilterDataT `json:"filterData"`
}

func (t *AxsStateFilterDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	filterDataOffset := flatbuffers.UOffsetT(0)
	if t.FilterData != nil {
		filterDataLength := len(t.FilterData)
		filterDataOffsets := make([]flatbuffers.UOffsetT, filterDataLength)
		for j := 0; j < filterDataLength; j++ {
			filterDataOffsets[j] = t.FilterData[j].Pack(builder)
		}
		AxsStateFilterDataStartFilterDataVector(builder, filterDataLength)
		for j := filterDataLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(filterDataOffsets[j])
		}
		filterDataOffset = builder.EndVector(filterDataLength)
	}
	AxsStateFilterDataStart(builder)
	AxsStateFilterDataAddFilterData(builder, filterDataOffset)
	return AxsStateFilterDataEnd(builder)
}

func (rcv *AxsStateFilterData) UnPackTo(t *AxsStateFilterDataT) {
	filterDataLength := rcv.FilterDataLength()
	t.FilterData = make([]*AxsStateSingleFilterDataT, filterDataLength)
	for j := 0; j < filterDataLength; j++ {
		x := AxsStateSingleFilterData{}
		rcv.FilterData(&x, j)
		t.FilterData[j] = x.UnPack()
	}
}

func (rcv *AxsStateFilterData) UnPack() *AxsStateFilterDataT {
	if rcv == nil { return nil }
	t := &AxsStateFilterDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsStateFilterData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsStateFilterData(buf []byte, offset flatbuffers.UOffsetT) *AxsStateFilterData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsStateFilterData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsStateFilterData(buf []byte, offset flatbuffers.UOffsetT) *AxsStateFilterData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsStateFilterData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsStateFilterData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsStateFilterData) Table() flatbuffers.Table {
	return rcv._tab
}

/// data of all filters
func (rcv *AxsStateFilterData) FilterData(obj *AxsStateSingleFilterData, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AxsStateFilterData) FilterDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// data of all filters
func AxsStateFilterDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AxsStateFilterDataAddFilterData(builder *flatbuffers.Builder, filterData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(filterData), 0)
}
func AxsStateFilterDataStartFilterDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AxsStateFilterDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
