// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// complete configuration of a single kinematics
type KinCfg struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfg(buf []byte, offset flatbuffers.UOffsetT) *KinCfg {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfg{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfg(buf []byte, offset flatbuffers.UOffsetT) *KinCfg {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfg{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfg) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfg) Table() flatbuffers.Table {
	return rcv._tab
}

/// object type (must be "Kinematics"), required for save/load
func (rcv *KinCfg) ObjectType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// object type (must be "Kinematics"), required for save/load
/// all configured limits of this kinematics
func (rcv *KinCfg) Limits(obj *KinCfgLimits) *KinCfgLimits {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(KinCfgLimits)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// all configured limits of this kinematics
/// data of all axes, that can be added to this kinematics
func (rcv *KinCfg) AxsCfg(obj *KinCfgAxs, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *KinCfg) AxsCfgLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// data of all axes, that can be added to this kinematics
/// configuration of all axis transformations (ACS <--> MCS)
func (rcv *KinCfg) Mcs(obj *KinCfgAxsTrafoAllSets) *KinCfgAxsTrafoAllSets {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(KinCfgAxsTrafoAllSets)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// configuration of all axis transformations (ACS <--> MCS)
/// general unit configuration of this kinematics
func (rcv *KinCfg) Units(obj *UnitCfgKin) *UnitCfgKin {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(UnitCfgKin)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// general unit configuration of this kinematics
func KinCfgStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func KinCfgAddObjectType(builder *flatbuffers.Builder, objectType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(objectType), 0)
}
func KinCfgAddLimits(builder *flatbuffers.Builder, limits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(limits), 0)
}
func KinCfgAddAxsCfg(builder *flatbuffers.Builder, axsCfg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(axsCfg), 0)
}
func KinCfgStartAxsCfgVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinCfgAddMcs(builder *flatbuffers.Builder, mcs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(mcs), 0)
}
func KinCfgAddUnits(builder *flatbuffers.Builder, units flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(units), 0)
}
func KinCfgEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
