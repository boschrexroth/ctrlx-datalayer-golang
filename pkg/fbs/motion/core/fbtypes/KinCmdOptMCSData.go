// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters for the command option MCS (machine coordinate system a.k.a. axis transformation) for kinematics
type KinCmdOptMCSDataT struct {
	PermType string
	SetName string
}

func (t *KinCmdOptMCSDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	permTypeOffset := builder.CreateString(t.PermType)
	setNameOffset := builder.CreateString(t.SetName)
	KinCmdOptMCSDataStart(builder)
	KinCmdOptMCSDataAddPermType(builder, permTypeOffset)
	KinCmdOptMCSDataAddSetName(builder, setNameOffset)
	return KinCmdOptMCSDataEnd(builder)
}

func (rcv *KinCmdOptMCSData) UnPackTo(t *KinCmdOptMCSDataT) {
	t.PermType = string(rcv.PermType())
	t.SetName = string(rcv.SetName())
}

func (rcv *KinCmdOptMCSData) UnPack() *KinCmdOptMCSDataT {
	if rcv == nil { return nil }
	t := &KinCmdOptMCSDataT{}
	rcv.UnPackTo(t)
	return t
}

type KinCmdOptMCSData struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCmdOptMCSData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdOptMCSData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCmdOptMCSData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCmdOptMCSData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdOptMCSData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCmdOptMCSData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCmdOptMCSData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCmdOptMCSData) Table() flatbuffers.Table {
	return rcv._tab
}

/// permanent type (e.g. "PermOn")
func (rcv *KinCmdOptMCSData) PermType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// permanent type (e.g. "PermOn")
/// name of the axis transformation set that should become active
func (rcv *KinCmdOptMCSData) SetName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the axis transformation set that should become active
func KinCmdOptMCSDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KinCmdOptMCSDataAddPermType(builder *flatbuffers.Builder, permType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(permType), 0)
}
func KinCmdOptMCSDataAddSetName(builder *flatbuffers.Builder, setName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(setName), 0)
}
func KinCmdOptMCSDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
