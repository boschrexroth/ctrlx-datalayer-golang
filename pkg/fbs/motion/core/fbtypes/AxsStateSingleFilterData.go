// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// data of single filter
type AxsStateSingleFilterDataT struct {
	Name string `json:"name"`
	TypeId FilterType `json:"typeID"`
	SupportedCategory []*AxsCategoryT `json:"supportedCategory"`
	FilterDescribParam *DescribeParamT `json:"filterDescribParam"`
	Description string `json:"description"`
}

func (t *AxsStateSingleFilterDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	supportedCategoryOffset := flatbuffers.UOffsetT(0)
	if t.SupportedCategory != nil {
		supportedCategoryLength := len(t.SupportedCategory)
		supportedCategoryOffsets := make([]flatbuffers.UOffsetT, supportedCategoryLength)
		for j := 0; j < supportedCategoryLength; j++ {
			supportedCategoryOffsets[j] = t.SupportedCategory[j].Pack(builder)
		}
		AxsStateSingleFilterDataStartSupportedCategoryVector(builder, supportedCategoryLength)
		for j := supportedCategoryLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(supportedCategoryOffsets[j])
		}
		supportedCategoryOffset = builder.EndVector(supportedCategoryLength)
	}
	filterDescribParamOffset := t.FilterDescribParam.Pack(builder)
	descriptionOffset := flatbuffers.UOffsetT(0)
	if t.Description != "" {
		descriptionOffset = builder.CreateString(t.Description)
	}
	AxsStateSingleFilterDataStart(builder)
	AxsStateSingleFilterDataAddName(builder, nameOffset)
	AxsStateSingleFilterDataAddTypeId(builder, t.TypeId)
	AxsStateSingleFilterDataAddSupportedCategory(builder, supportedCategoryOffset)
	AxsStateSingleFilterDataAddFilterDescribParam(builder, filterDescribParamOffset)
	AxsStateSingleFilterDataAddDescription(builder, descriptionOffset)
	return AxsStateSingleFilterDataEnd(builder)
}

func (rcv *AxsStateSingleFilterData) UnPackTo(t *AxsStateSingleFilterDataT) {
	t.Name = string(rcv.Name())
	t.TypeId = rcv.TypeId()
	supportedCategoryLength := rcv.SupportedCategoryLength()
	t.SupportedCategory = make([]*AxsCategoryT, supportedCategoryLength)
	for j := 0; j < supportedCategoryLength; j++ {
		x := AxsCategory{}
		rcv.SupportedCategory(&x, j)
		t.SupportedCategory[j] = x.UnPack()
	}
	t.FilterDescribParam = rcv.FilterDescribParam(nil).UnPack()
	t.Description = string(rcv.Description())
}

func (rcv *AxsStateSingleFilterData) UnPack() *AxsStateSingleFilterDataT {
	if rcv == nil { return nil }
	t := &AxsStateSingleFilterDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsStateSingleFilterData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsStateSingleFilterData(buf []byte, offset flatbuffers.UOffsetT) *AxsStateSingleFilterData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsStateSingleFilterData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsStateSingleFilterData(buf []byte, offset flatbuffers.UOffsetT) *AxsStateSingleFilterData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsStateSingleFilterData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsStateSingleFilterData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsStateSingleFilterData) Table() flatbuffers.Table {
	return rcv._tab
}

/// Name of the filter
func (rcv *AxsStateSingleFilterData) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the filter
/// Type ID of the filter
func (rcv *AxsStateSingleFilterData) TypeId() FilterType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return FilterType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Type ID of the filter
func (rcv *AxsStateSingleFilterData) MutateTypeId(n FilterType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

/// Supported axes of current filter in vector
func (rcv *AxsStateSingleFilterData) SupportedCategory(obj *AxsCategory, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AxsStateSingleFilterData) SupportedCategoryLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Supported axes of current filter in vector
/// Parameters of filter
func (rcv *AxsStateSingleFilterData) FilterDescribParam(obj *DescribeParam) *DescribeParam {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DescribeParam)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Parameters of filter
/// Description of the filter
func (rcv *AxsStateSingleFilterData) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the filter
func AxsStateSingleFilterDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AxsStateSingleFilterDataAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func AxsStateSingleFilterDataAddTypeId(builder *flatbuffers.Builder, typeId FilterType) {
	builder.PrependInt8Slot(1, int8(typeId), 0)
}
func AxsStateSingleFilterDataAddSupportedCategory(builder *flatbuffers.Builder, supportedCategory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(supportedCategory), 0)
}
func AxsStateSingleFilterDataStartSupportedCategoryVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AxsStateSingleFilterDataAddFilterDescribParam(builder *flatbuffers.Builder, filterDescribParam flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(filterDescribParam), 0)
}
func AxsStateSingleFilterDataAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(description), 0)
}
func AxsStateSingleFilterDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
