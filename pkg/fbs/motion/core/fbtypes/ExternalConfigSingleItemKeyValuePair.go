// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Data of a single value/set of an external (MExA) configuration item as key-value pair
/// Either use "value" OR "sub" for clean structuring.
type ExternalConfigSingleItemKeyValuePairT struct {
	Key string `json:"key"`
	Value *ExternalConfigSingleItemValueT `json:"value"`
	Sub []*ExternalConfigSingleItemKeyValuePairT `json:"sub"`
}

func (t *ExternalConfigSingleItemKeyValuePairT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	keyOffset := flatbuffers.UOffsetT(0)
	if t.Key != "" {
		keyOffset = builder.CreateString(t.Key)
	}
	valueOffset := t.Value.Pack(builder)
	
	subOffset := flatbuffers.UOffsetT(0)
	if t.Sub != nil {
		subLength := len(t.Sub)
		subOffsets := make([]flatbuffers.UOffsetT, subLength)
		for j := 0; j < subLength; j++ {
			subOffsets[j] = t.Sub[j].Pack(builder)
		}
		ExternalConfigSingleItemKeyValuePairStartSubVector(builder, subLength)
		for j := subLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(subOffsets[j])
		}
		subOffset = builder.EndVector(subLength)
	}
	ExternalConfigSingleItemKeyValuePairStart(builder)
	ExternalConfigSingleItemKeyValuePairAddKey(builder, keyOffset)
	if t.Value != nil {
		ExternalConfigSingleItemKeyValuePairAddValueType(builder, t.Value.Type)
	}
	ExternalConfigSingleItemKeyValuePairAddValue(builder, valueOffset)
	ExternalConfigSingleItemKeyValuePairAddSub(builder, subOffset)
	return ExternalConfigSingleItemKeyValuePairEnd(builder)
}

func (rcv *ExternalConfigSingleItemKeyValuePair) UnPackTo(t *ExternalConfigSingleItemKeyValuePairT) {
	t.Key = string(rcv.Key())
	valueTable := flatbuffers.Table{}
	if rcv.Value(&valueTable) {
		t.Value = rcv.ValueType().UnPack(valueTable)
	}
	subLength := rcv.SubLength()
	t.Sub = make([]*ExternalConfigSingleItemKeyValuePairT, subLength)
	for j := 0; j < subLength; j++ {
		x := ExternalConfigSingleItemKeyValuePair{}
		rcv.Sub(&x, j)
		t.Sub[j] = x.UnPack()
	}
}

func (rcv *ExternalConfigSingleItemKeyValuePair) UnPack() *ExternalConfigSingleItemKeyValuePairT {
	if rcv == nil { return nil }
	t := &ExternalConfigSingleItemKeyValuePairT{}
	rcv.UnPackTo(t)
	return t
}

type ExternalConfigSingleItemKeyValuePair struct {
	_tab flatbuffers.Table
}

func GetRootAsExternalConfigSingleItemKeyValuePair(buf []byte, offset flatbuffers.UOffsetT) *ExternalConfigSingleItemKeyValuePair {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ExternalConfigSingleItemKeyValuePair{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsExternalConfigSingleItemKeyValuePair(buf []byte, offset flatbuffers.UOffsetT) *ExternalConfigSingleItemKeyValuePair {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ExternalConfigSingleItemKeyValuePair{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ExternalConfigSingleItemKeyValuePair) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ExternalConfigSingleItemKeyValuePair) Table() flatbuffers.Table {
	return rcv._tab
}

/// key of the item
func (rcv *ExternalConfigSingleItemKeyValuePair) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// key of the item
func (rcv *ExternalConfigSingleItemKeyValuePair) ValueType() ExternalConfigSingleItemValue {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ExternalConfigSingleItemValue(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ExternalConfigSingleItemKeyValuePair) MutateValueType(n ExternalConfigSingleItemValue) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

/// entry contains a single value (might be nullptr, when this entry refers to structure -> then "sub" is used)
func (rcv *ExternalConfigSingleItemKeyValuePair) Value(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

/// entry contains a single value (might be nullptr, when this entry refers to structure -> then "sub" is used)
/// entry contains a sub structure, which is just a vector of key-value-pairs (might be nullptr, when this entry refers to single value -> then "value" is used)
func (rcv *ExternalConfigSingleItemKeyValuePair) Sub(obj *ExternalConfigSingleItemKeyValuePair, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ExternalConfigSingleItemKeyValuePair) SubLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// entry contains a sub structure, which is just a vector of key-value-pairs (might be nullptr, when this entry refers to single value -> then "value" is used)
func ExternalConfigSingleItemKeyValuePairStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ExternalConfigSingleItemKeyValuePairAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func ExternalConfigSingleItemKeyValuePairAddValueType(builder *flatbuffers.Builder, valueType ExternalConfigSingleItemValue) {
	builder.PrependByteSlot(1, byte(valueType), 0)
}
func ExternalConfigSingleItemKeyValuePairAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(value), 0)
}
func ExternalConfigSingleItemKeyValuePairAddSub(builder *flatbuffers.Builder, sub flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(sub), 0)
}
func ExternalConfigSingleItemKeyValuePairStartSubVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ExternalConfigSingleItemKeyValuePairEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
