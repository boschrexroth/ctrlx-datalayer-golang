// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// extrapolation parameters for a single axis
type AxsCfgExtrapolationT struct {
	ExtrapolateActual bool `json:"extrapolateActual"`
	ExtrapolationTime float64 `json:"extrapolationTime"`
	ExtrapolationTimeUnit string `json:"extrapolationTimeUnit"`
}

func (t *AxsCfgExtrapolationT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	extrapolationTimeUnitOffset := flatbuffers.UOffsetT(0)
	if t.ExtrapolationTimeUnit != "" {
		extrapolationTimeUnitOffset = builder.CreateString(t.ExtrapolationTimeUnit)
	}
	AxsCfgExtrapolationStart(builder)
	AxsCfgExtrapolationAddExtrapolateActual(builder, t.ExtrapolateActual)
	AxsCfgExtrapolationAddExtrapolationTime(builder, t.ExtrapolationTime)
	AxsCfgExtrapolationAddExtrapolationTimeUnit(builder, extrapolationTimeUnitOffset)
	return AxsCfgExtrapolationEnd(builder)
}

func (rcv *AxsCfgExtrapolation) UnPackTo(t *AxsCfgExtrapolationT) {
	t.ExtrapolateActual = rcv.ExtrapolateActual()
	t.ExtrapolationTime = rcv.ExtrapolationTime()
	t.ExtrapolationTimeUnit = string(rcv.ExtrapolationTimeUnit())
}

func (rcv *AxsCfgExtrapolation) UnPack() *AxsCfgExtrapolationT {
	if rcv == nil { return nil }
	t := &AxsCfgExtrapolationT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgExtrapolation struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgExtrapolation(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgExtrapolation {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgExtrapolation{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgExtrapolation(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgExtrapolation {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgExtrapolation{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgExtrapolation) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgExtrapolation) Table() flatbuffers.Table {
	return rcv._tab
}

/// is extrapolation of actual values activated for this axis?
func (rcv *AxsCfgExtrapolation) ExtrapolateActual() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// is extrapolation of actual values activated for this axis?
func (rcv *AxsCfgExtrapolation) MutateExtrapolateActual(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// the additive extrapolation time (can also be negative)
func (rcv *AxsCfgExtrapolation) ExtrapolationTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// the additive extrapolation time (can also be negative)
func (rcv *AxsCfgExtrapolation) MutateExtrapolationTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// unit of extrapolationTime
func (rcv *AxsCfgExtrapolation) ExtrapolationTimeUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of extrapolationTime
func AxsCfgExtrapolationStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AxsCfgExtrapolationAddExtrapolateActual(builder *flatbuffers.Builder, extrapolateActual bool) {
	builder.PrependBoolSlot(0, extrapolateActual, false)
}
func AxsCfgExtrapolationAddExtrapolationTime(builder *flatbuffers.Builder, extrapolationTime float64) {
	builder.PrependFloat64Slot(1, extrapolationTime, 0.0)
}
func AxsCfgExtrapolationAddExtrapolationTimeUnit(builder *flatbuffers.Builder, extrapolationTimeUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(extrapolationTimeUnit), 0)
}
func AxsCfgExtrapolationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
