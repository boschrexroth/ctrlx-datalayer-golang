// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of the axis abort command
type AxsCmdStopDataT struct {
	DoStop bool `json:"doStop"`
	Dec float64 `json:"dec"`
	JrkDec float64 `json:"jrkDec"`
}

func (t *AxsCmdStopDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AxsCmdStopDataStart(builder)
	AxsCmdStopDataAddDoStop(builder, t.DoStop)
	AxsCmdStopDataAddDec(builder, t.Dec)
	AxsCmdStopDataAddJrkDec(builder, t.JrkDec)
	return AxsCmdStopDataEnd(builder)
}

func (rcv *AxsCmdStopData) UnPackTo(t *AxsCmdStopDataT) {
	t.DoStop = rcv.DoStop()
	t.Dec = rcv.Dec()
	t.JrkDec = rcv.JrkDec()
}

func (rcv *AxsCmdStopData) UnPack() *AxsCmdStopDataT {
	if rcv == nil { return nil }
	t := &AxsCmdStopDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdStopData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdStopData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdStopData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdStopData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdStopData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdStopData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdStopData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdStopData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdStopData) Table() flatbuffers.Table {
	return rcv._tab
}

/// execute the stopAxsCommand? doStop=True -> stop command; doStop=False -> unstop command
func (rcv *AxsCmdStopData) DoStop() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// execute the stopAxsCommand? doStop=True -> stop command; doStop=False -> unstop command
func (rcv *AxsCmdStopData) MutateDoStop(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// commanded deceleration limit (must be a positive value)
func (rcv *AxsCmdStopData) Dec() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 1.0
}

/// commanded deceleration limit (must be a positive value)
func (rcv *AxsCmdStopData) MutateDec(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// commanded deceleration jerk limit (must be a positive value OR zero), zero means "not jerk limited"
func (rcv *AxsCmdStopData) JrkDec() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// commanded deceleration jerk limit (must be a positive value OR zero), zero means "not jerk limited"
func (rcv *AxsCmdStopData) MutateJrkDec(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func AxsCmdStopDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AxsCmdStopDataAddDoStop(builder *flatbuffers.Builder, doStop bool) {
	builder.PrependBoolSlot(0, doStop, true)
}
func AxsCmdStopDataAddDec(builder *flatbuffers.Builder, dec float64) {
	builder.PrependFloat64Slot(1, dec, 1.0)
}
func AxsCmdStopDataAddJrkDec(builder *flatbuffers.Builder, jrkDec float64) {
	builder.PrependFloat64Slot(2, jrkDec, 0.0)
}
func AxsCmdStopDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
