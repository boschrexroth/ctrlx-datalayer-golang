// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of a single belt for kinematics belt synchronization 
type KinCfgBeltSyncT struct {
	Name string `json:"name"`
	KinBeltSyncCfgData *KinCfgBeltSyncDataT `json:"kinBeltSyncCfgData"`
}

func (t *KinCfgBeltSyncT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	kinBeltSyncCfgDataOffset := t.KinBeltSyncCfgData.Pack(builder)
	KinCfgBeltSyncStart(builder)
	KinCfgBeltSyncAddName(builder, nameOffset)
	KinCfgBeltSyncAddKinBeltSyncCfgData(builder, kinBeltSyncCfgDataOffset)
	return KinCfgBeltSyncEnd(builder)
}

func (rcv *KinCfgBeltSync) UnPackTo(t *KinCfgBeltSyncT) {
	t.Name = string(rcv.Name())
	t.KinBeltSyncCfgData = rcv.KinBeltSyncCfgData(nil).UnPack()
}

func (rcv *KinCfgBeltSync) UnPack() *KinCfgBeltSyncT {
	if rcv == nil { return nil }
	t := &KinCfgBeltSyncT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgBeltSync struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgBeltSync(buf []byte, offset flatbuffers.UOffsetT) *KinCfgBeltSync {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgBeltSync{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgBeltSync(buf []byte, offset flatbuffers.UOffsetT) *KinCfgBeltSync {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgBeltSync{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgBeltSync) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgBeltSync) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the belt (filled when reading; only used for writing with KinCfgBeltSyncAll. Otherwise the content is ignored)
func (rcv *KinCfgBeltSync) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the belt (filled when reading; only used for writing with KinCfgBeltSyncAll. Otherwise the content is ignored)
/// kinematics belt synchronization data, that defines the configuration for a single belt
func (rcv *KinCfgBeltSync) KinBeltSyncCfgData(obj *KinCfgBeltSyncData) *KinCfgBeltSyncData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(KinCfgBeltSyncData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// kinematics belt synchronization data, that defines the configuration for a single belt
func KinCfgBeltSyncStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KinCfgBeltSyncAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func KinCfgBeltSyncAddKinBeltSyncCfgData(builder *flatbuffers.Builder, kinBeltSyncCfgData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(kinBeltSyncCfgData), 0)
}
func KinCfgBeltSyncEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
