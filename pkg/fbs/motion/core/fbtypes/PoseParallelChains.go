// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// array of parallel kinematic chains
type PoseParallelChainsT struct {
	JointPosesAllPointOfWork []*PoseChainT `json:"jointPosesAllPointOfWork"`
}

func (t *PoseParallelChainsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	jointPosesAllPointOfWorkOffset := flatbuffers.UOffsetT(0)
	if t.JointPosesAllPointOfWork != nil {
		jointPosesAllPointOfWorkLength := len(t.JointPosesAllPointOfWork)
		jointPosesAllPointOfWorkOffsets := make([]flatbuffers.UOffsetT, jointPosesAllPointOfWorkLength)
		for j := 0; j < jointPosesAllPointOfWorkLength; j++ {
			jointPosesAllPointOfWorkOffsets[j] = t.JointPosesAllPointOfWork[j].Pack(builder)
		}
		PoseParallelChainsStartJointPosesAllPointOfWorkVector(builder, jointPosesAllPointOfWorkLength)
		for j := jointPosesAllPointOfWorkLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(jointPosesAllPointOfWorkOffsets[j])
		}
		jointPosesAllPointOfWorkOffset = builder.EndVector(jointPosesAllPointOfWorkLength)
	}
	PoseParallelChainsStart(builder)
	PoseParallelChainsAddJointPosesAllPointOfWork(builder, jointPosesAllPointOfWorkOffset)
	return PoseParallelChainsEnd(builder)
}

func (rcv *PoseParallelChains) UnPackTo(t *PoseParallelChainsT) {
	jointPosesAllPointOfWorkLength := rcv.JointPosesAllPointOfWorkLength()
	t.JointPosesAllPointOfWork = make([]*PoseChainT, jointPosesAllPointOfWorkLength)
	for j := 0; j < jointPosesAllPointOfWorkLength; j++ {
		x := PoseChain{}
		rcv.JointPosesAllPointOfWork(&x, j)
		t.JointPosesAllPointOfWork[j] = x.UnPack()
	}
}

func (rcv *PoseParallelChains) UnPack() *PoseParallelChainsT {
	if rcv == nil { return nil }
	t := &PoseParallelChainsT{}
	rcv.UnPackTo(t)
	return t
}

type PoseParallelChains struct {
	_tab flatbuffers.Table
}

func GetRootAsPoseParallelChains(buf []byte, offset flatbuffers.UOffsetT) *PoseParallelChains {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PoseParallelChains{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPoseParallelChains(buf []byte, offset flatbuffers.UOffsetT) *PoseParallelChains {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PoseParallelChains{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PoseParallelChains) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PoseParallelChains) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PoseParallelChains) JointPosesAllPointOfWork(obj *PoseChain, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *PoseParallelChains) JointPosesAllPointOfWorkLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func PoseParallelChainsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func PoseParallelChainsAddJointPosesAllPointOfWork(builder *flatbuffers.Builder, jointPosesAllPointOfWork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(jointPosesAllPointOfWork), 0)
}
func PoseParallelChainsStartJointPosesAllPointOfWorkVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PoseParallelChainsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
