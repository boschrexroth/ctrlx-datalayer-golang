// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of the retract motion direction (single access) in the motion kernel kinematics function 'belt synchronization'
type KinCfgBeltRetractDirectionTypeT struct {
	Value KinBeltRetractDirectionType `json:"value"`
}

func (t *KinCfgBeltRetractDirectionTypeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	KinCfgBeltRetractDirectionTypeStart(builder)
	KinCfgBeltRetractDirectionTypeAddValue(builder, t.Value)
	return KinCfgBeltRetractDirectionTypeEnd(builder)
}

func (rcv *KinCfgBeltRetractDirectionType) UnPackTo(t *KinCfgBeltRetractDirectionTypeT) {
	t.Value = rcv.Value()
}

func (rcv *KinCfgBeltRetractDirectionType) UnPack() *KinCfgBeltRetractDirectionTypeT {
	if rcv == nil { return nil }
	t := &KinCfgBeltRetractDirectionTypeT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgBeltRetractDirectionType struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgBeltRetractDirectionType(buf []byte, offset flatbuffers.UOffsetT) *KinCfgBeltRetractDirectionType {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgBeltRetractDirectionType{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgBeltRetractDirectionType(buf []byte, offset flatbuffers.UOffsetT) *KinCfgBeltRetractDirectionType {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgBeltRetractDirectionType{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgBeltRetractDirectionType) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgBeltRetractDirectionType) Table() flatbuffers.Table {
	return rcv._tab
}

/// direction of the retract motion in case of an error in the kinematics function 'belt synchronization'
func (rcv *KinCfgBeltRetractDirectionType) Value() KinBeltRetractDirectionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return KinBeltRetractDirectionType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 4
}

/// direction of the retract motion in case of an error in the kinematics function 'belt synchronization'
func (rcv *KinCfgBeltRetractDirectionType) MutateValue(n KinBeltRetractDirectionType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func KinCfgBeltRetractDirectionTypeStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func KinCfgBeltRetractDirectionTypeAddValue(builder *flatbuffers.Builder, value KinBeltRetractDirectionType) {
	builder.PrependInt8Slot(0, int8(value), 4)
}
func KinCfgBeltRetractDirectionTypeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
