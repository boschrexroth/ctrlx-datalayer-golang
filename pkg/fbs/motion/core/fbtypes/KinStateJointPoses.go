// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// all joint poses of a kinematic
type KinStateJointPosesT struct {
	InPosAcs *KinPosValuesT `json:"inPosACS"`
	InputType AcsInputType `json:"inputType"`
	OutJointPoses []*PoseParallelChainsT `json:"outJointPoses"`
	UnitsJointsPoses []string `json:"unitsJointsPoses"`
}

func (t *KinStateJointPosesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	inPosAcsOffset := t.InPosAcs.Pack(builder)
	outJointPosesOffset := flatbuffers.UOffsetT(0)
	if t.OutJointPoses != nil {
		outJointPosesLength := len(t.OutJointPoses)
		outJointPosesOffsets := make([]flatbuffers.UOffsetT, outJointPosesLength)
		for j := 0; j < outJointPosesLength; j++ {
			outJointPosesOffsets[j] = t.OutJointPoses[j].Pack(builder)
		}
		KinStateJointPosesStartOutJointPosesVector(builder, outJointPosesLength)
		for j := outJointPosesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(outJointPosesOffsets[j])
		}
		outJointPosesOffset = builder.EndVector(outJointPosesLength)
	}
	unitsJointsPosesOffset := flatbuffers.UOffsetT(0)
	if t.UnitsJointsPoses != nil {
		unitsJointsPosesLength := len(t.UnitsJointsPoses)
		unitsJointsPosesOffsets := make([]flatbuffers.UOffsetT, unitsJointsPosesLength)
		for j := 0; j < unitsJointsPosesLength; j++ {
			unitsJointsPosesOffsets[j] = builder.CreateString(t.UnitsJointsPoses[j])
		}
		KinStateJointPosesStartUnitsJointsPosesVector(builder, unitsJointsPosesLength)
		for j := unitsJointsPosesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(unitsJointsPosesOffsets[j])
		}
		unitsJointsPosesOffset = builder.EndVector(unitsJointsPosesLength)
	}
	KinStateJointPosesStart(builder)
	KinStateJointPosesAddInPosAcs(builder, inPosAcsOffset)
	KinStateJointPosesAddInputType(builder, t.InputType)
	KinStateJointPosesAddOutJointPoses(builder, outJointPosesOffset)
	KinStateJointPosesAddUnitsJointsPoses(builder, unitsJointsPosesOffset)
	return KinStateJointPosesEnd(builder)
}

func (rcv *KinStateJointPoses) UnPackTo(t *KinStateJointPosesT) {
	t.InPosAcs = rcv.InPosAcs(nil).UnPack()
	t.InputType = rcv.InputType()
	outJointPosesLength := rcv.OutJointPosesLength()
	t.OutJointPoses = make([]*PoseParallelChainsT, outJointPosesLength)
	for j := 0; j < outJointPosesLength; j++ {
		x := PoseParallelChains{}
		rcv.OutJointPoses(&x, j)
		t.OutJointPoses[j] = x.UnPack()
	}
	unitsJointsPosesLength := rcv.UnitsJointsPosesLength()
	t.UnitsJointsPoses = make([]string, unitsJointsPosesLength)
	for j := 0; j < unitsJointsPosesLength; j++ {
		t.UnitsJointsPoses[j] = string(rcv.UnitsJointsPoses(j))
	}
}

func (rcv *KinStateJointPoses) UnPack() *KinStateJointPosesT {
	if rcv == nil { return nil }
	t := &KinStateJointPosesT{}
	rcv.UnPackTo(t)
	return t
}

type KinStateJointPoses struct {
	_tab flatbuffers.Table
}

func GetRootAsKinStateJointPoses(buf []byte, offset flatbuffers.UOffsetT) *KinStateJointPoses {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinStateJointPoses{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinStateJointPoses(buf []byte, offset flatbuffers.UOffsetT) *KinStateJointPoses {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinStateJointPoses{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinStateJointPoses) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinStateJointPoses) Table() flatbuffers.Table {
	return rcv._tab
}

/// array of 16 input axis positions and units, this input is optional and must only be written if the inputType==GIVEN_AXIS_POS 
func (rcv *KinStateJointPoses) InPosAcs(obj *KinPosValues) *KinPosValues {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(KinPosValues)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// array of 16 input axis positions and units, this input is optional and must only be written if the inputType==GIVEN_AXIS_POS 
/// Use of the axis positions input. Possible types: "INTERPOLATED_AXIS_POS", "ACTUAL_AXIS_POS", "GIVEN_AXIS_POS".
func (rcv *KinStateJointPoses) InputType() AcsInputType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return AcsInputType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Use of the axis positions input. Possible types: "INTERPOLATED_AXIS_POS", "ACTUAL_AXIS_POS", "GIVEN_AXIS_POS".
func (rcv *KinStateJointPoses) MutateInputType(n AcsInputType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

/// output joint positions, should be left out in the request
func (rcv *KinStateJointPoses) OutJointPoses(obj *PoseParallelChains, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *KinStateJointPoses) OutJointPosesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// output joint positions, should be left out in the request
/// units of all joint poses (6 units)
func (rcv *KinStateJointPoses) UnitsJointsPoses(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *KinStateJointPoses) UnitsJointsPosesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// units of all joint poses (6 units)
func KinStateJointPosesStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func KinStateJointPosesAddInPosAcs(builder *flatbuffers.Builder, inPosAcs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(inPosAcs), 0)
}
func KinStateJointPosesAddInputType(builder *flatbuffers.Builder, inputType AcsInputType) {
	builder.PrependInt8Slot(1, int8(inputType), 0)
}
func KinStateJointPosesAddOutJointPoses(builder *flatbuffers.Builder, outJointPoses flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(outJointPoses), 0)
}
func KinStateJointPosesStartOutJointPosesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinStateJointPosesAddUnitsJointsPoses(builder *flatbuffers.Builder, unitsJointsPoses flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(unitsJointsPoses), 0)
}
func KinStateJointPosesStartUnitsJointsPosesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinStateJointPosesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
