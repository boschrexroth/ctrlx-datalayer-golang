// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of the tool data system
type SysCfgToolDataAllT struct {
	Sets []*SysCfgToolDataSetT `json:"sets"`
	Groups []*SysCfgToolDataGroupT `json:"groups"`
}

func (t *SysCfgToolDataAllT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	setsOffset := flatbuffers.UOffsetT(0)
	if t.Sets != nil {
		setsLength := len(t.Sets)
		setsOffsets := make([]flatbuffers.UOffsetT, setsLength)
		for j := 0; j < setsLength; j++ {
			setsOffsets[j] = t.Sets[j].Pack(builder)
		}
		SysCfgToolDataAllStartSetsVector(builder, setsLength)
		for j := setsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(setsOffsets[j])
		}
		setsOffset = builder.EndVector(setsLength)
	}
	groupsOffset := flatbuffers.UOffsetT(0)
	if t.Groups != nil {
		groupsLength := len(t.Groups)
		groupsOffsets := make([]flatbuffers.UOffsetT, groupsLength)
		for j := 0; j < groupsLength; j++ {
			groupsOffsets[j] = t.Groups[j].Pack(builder)
		}
		SysCfgToolDataAllStartGroupsVector(builder, groupsLength)
		for j := groupsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(groupsOffsets[j])
		}
		groupsOffset = builder.EndVector(groupsLength)
	}
	SysCfgToolDataAllStart(builder)
	SysCfgToolDataAllAddSets(builder, setsOffset)
	SysCfgToolDataAllAddGroups(builder, groupsOffset)
	return SysCfgToolDataAllEnd(builder)
}

func (rcv *SysCfgToolDataAll) UnPackTo(t *SysCfgToolDataAllT) {
	setsLength := rcv.SetsLength()
	t.Sets = make([]*SysCfgToolDataSetT, setsLength)
	for j := 0; j < setsLength; j++ {
		x := SysCfgToolDataSet{}
		rcv.Sets(&x, j)
		t.Sets[j] = x.UnPack()
	}
	groupsLength := rcv.GroupsLength()
	t.Groups = make([]*SysCfgToolDataGroupT, groupsLength)
	for j := 0; j < groupsLength; j++ {
		x := SysCfgToolDataGroup{}
		rcv.Groups(&x, j)
		t.Groups[j] = x.UnPack()
	}
}

func (rcv *SysCfgToolDataAll) UnPack() *SysCfgToolDataAllT {
	if rcv == nil { return nil }
	t := &SysCfgToolDataAllT{}
	rcv.UnPackTo(t)
	return t
}

type SysCfgToolDataAll struct {
	_tab flatbuffers.Table
}

func GetRootAsSysCfgToolDataAll(buf []byte, offset flatbuffers.UOffsetT) *SysCfgToolDataAll {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SysCfgToolDataAll{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSysCfgToolDataAll(buf []byte, offset flatbuffers.UOffsetT) *SysCfgToolDataAll {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SysCfgToolDataAll{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SysCfgToolDataAll) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SysCfgToolDataAll) Table() flatbuffers.Table {
	return rcv._tab
}

/// vector of all configured tool data sets
func (rcv *SysCfgToolDataAll) Sets(obj *SysCfgToolDataSet, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SysCfgToolDataAll) SetsByKey(obj *SysCfgToolDataSet, key string) bool{
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *SysCfgToolDataAll) SetsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of all configured tool data sets
/// vector of all configured tool data groups
func (rcv *SysCfgToolDataAll) Groups(obj *SysCfgToolDataGroup, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SysCfgToolDataAll) GroupsByKey(obj *SysCfgToolDataGroup, key string) bool{
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *SysCfgToolDataAll) GroupsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of all configured tool data groups
func SysCfgToolDataAllStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SysCfgToolDataAllAddSets(builder *flatbuffers.Builder, sets flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(sets), 0)
}
func SysCfgToolDataAllStartSetsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SysCfgToolDataAllAddGroups(builder *flatbuffers.Builder, groups flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(groups), 0)
}
func SysCfgToolDataAllStartGroupsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SysCfgToolDataAllEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
