// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Data of a single value/set of a key-value-pair
type KVPCfgSingleItemT struct {
	Key string `json:"key"`
	Value *KVPCfgSingleItemValueT `json:"value"`
}

func (t *KVPCfgSingleItemT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	keyOffset := flatbuffers.UOffsetT(0)
	if t.Key != "" {
		keyOffset = builder.CreateString(t.Key)
	}
	valueOffset := t.Value.Pack(builder)
	
	KVPCfgSingleItemStart(builder)
	KVPCfgSingleItemAddKey(builder, keyOffset)
	if t.Value != nil {
		KVPCfgSingleItemAddValueType(builder, t.Value.Type)
	}
	KVPCfgSingleItemAddValue(builder, valueOffset)
	return KVPCfgSingleItemEnd(builder)
}

func (rcv *KVPCfgSingleItem) UnPackTo(t *KVPCfgSingleItemT) {
	t.Key = string(rcv.Key())
	valueTable := flatbuffers.Table{}
	if rcv.Value(&valueTable) {
		t.Value = rcv.ValueType().UnPack(valueTable)
	}
}

func (rcv *KVPCfgSingleItem) UnPack() *KVPCfgSingleItemT {
	if rcv == nil { return nil }
	t := &KVPCfgSingleItemT{}
	rcv.UnPackTo(t)
	return t
}

type KVPCfgSingleItem struct {
	_tab flatbuffers.Table
}

func GetRootAsKVPCfgSingleItem(buf []byte, offset flatbuffers.UOffsetT) *KVPCfgSingleItem {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KVPCfgSingleItem{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKVPCfgSingleItem(buf []byte, offset flatbuffers.UOffsetT) *KVPCfgSingleItem {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KVPCfgSingleItem{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KVPCfgSingleItem) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KVPCfgSingleItem) Table() flatbuffers.Table {
	return rcv._tab
}

/// key of the item
func (rcv *KVPCfgSingleItem) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// key of the item
func (rcv *KVPCfgSingleItem) ValueType() KVPCfgSingleItemValue {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return KVPCfgSingleItemValue(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *KVPCfgSingleItem) MutateValueType(n KVPCfgSingleItemValue) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

/// entry contains a single value
func (rcv *KVPCfgSingleItem) Value(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

/// entry contains a single value
func KVPCfgSingleItemStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func KVPCfgSingleItemAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func KVPCfgSingleItemAddValueType(builder *flatbuffers.Builder, valueType KVPCfgSingleItemValue) {
	builder.PrependByteSlot(1, byte(valueType), 0)
}
func KVPCfgSingleItemAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(value), 0)
}
func KVPCfgSingleItemEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
