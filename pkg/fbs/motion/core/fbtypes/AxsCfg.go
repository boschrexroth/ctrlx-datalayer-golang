// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// complete configuration of a single axis
type AxsCfg struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfg(buf []byte, offset flatbuffers.UOffsetT) *AxsCfg {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfg{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfg(buf []byte, offset flatbuffers.UOffsetT) *AxsCfg {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfg{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfg) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfg) Table() flatbuffers.Table {
	return rcv._tab
}

/// object type (must be "Axis"), required for save/load
func (rcv *AxsCfg) ObjectType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// object type (must be "Axis"), required for save/load
/// name of the assigned axis profile or empty for virtual drives
func (rcv *AxsCfg) AxisProfileName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the assigned axis profile or empty for virtual drives
/// all configured limits of this axis
func (rcv *AxsCfg) Limits(obj *AxsCfgLimits) *AxsCfgLimits {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgLimits)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// all configured limits of this axis
/// configuration for specific functions of this axis
func (rcv *AxsCfg) Functions(obj *AxsCfgFunctions) *AxsCfgFunctions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgFunctions)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// configuration for specific functions of this axis
/// common axis properties of this axis
func (rcv *AxsCfg) Properties(obj *AxsCfgProperties) *AxsCfgProperties {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgProperties)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// common axis properties of this axis
/// general unit configuration of this axis
func (rcv *AxsCfg) Units(obj *UnitCfgObj) *UnitCfgObj {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(UnitCfgObj)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// general unit configuration of this axis
/// kinematic properties for axes
func (rcv *AxsCfg) KinProperties(obj *AxsCfgKinProperties) *AxsCfgKinProperties {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgKinProperties)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// kinematic properties for axes
func AxsCfgStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func AxsCfgAddObjectType(builder *flatbuffers.Builder, objectType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(objectType), 0)
}
func AxsCfgAddAxisProfileName(builder *flatbuffers.Builder, axisProfileName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(axisProfileName), 0)
}
func AxsCfgAddLimits(builder *flatbuffers.Builder, limits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(limits), 0)
}
func AxsCfgAddFunctions(builder *flatbuffers.Builder, functions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(functions), 0)
}
func AxsCfgAddProperties(builder *flatbuffers.Builder, properties flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(properties), 0)
}
func AxsCfgAddUnits(builder *flatbuffers.Builder, units flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(units), 0)
}
func AxsCfgAddKinProperties(builder *flatbuffers.Builder, kinProperties flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(kinProperties), 0)
}
func AxsCfgEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
