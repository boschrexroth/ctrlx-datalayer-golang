// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters for the command PathSmooth (rounding of corner between successively move commands) for kinematics
type KinCmdPathSmoothDataT struct {
	IsStart bool `json:"isStart"`
	Eps float64 `json:"eps"`
	PrepCmds uint32 `json:"prepCmds"`
	RoundingType RoundingType `json:"roundingType"`
}

func (t *KinCmdPathSmoothDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	KinCmdPathSmoothDataStart(builder)
	KinCmdPathSmoothDataAddIsStart(builder, t.IsStart)
	KinCmdPathSmoothDataAddEps(builder, t.Eps)
	KinCmdPathSmoothDataAddPrepCmds(builder, t.PrepCmds)
	KinCmdPathSmoothDataAddRoundingType(builder, t.RoundingType)
	return KinCmdPathSmoothDataEnd(builder)
}

func (rcv *KinCmdPathSmoothData) UnPackTo(t *KinCmdPathSmoothDataT) {
	t.IsStart = rcv.IsStart()
	t.Eps = rcv.Eps()
	t.PrepCmds = rcv.PrepCmds()
	t.RoundingType = rcv.RoundingType()
}

func (rcv *KinCmdPathSmoothData) UnPack() *KinCmdPathSmoothDataT {
	if rcv == nil { return nil }
	t := &KinCmdPathSmoothDataT{}
	rcv.UnPackTo(t)
	return t
}

type KinCmdPathSmoothData struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCmdPathSmoothData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdPathSmoothData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCmdPathSmoothData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCmdPathSmoothData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdPathSmoothData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCmdPathSmoothData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCmdPathSmoothData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCmdPathSmoothData) Table() flatbuffers.Table {
	return rcv._tab
}

/// start or end of path
func (rcv *KinCmdPathSmoothData) IsStart() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// start or end of path
func (rcv *KinCmdPathSmoothData) MutateIsStart(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// optional distance EPS (maximum permissible tolerance eps, must be greater than zero)
func (rcv *KinCmdPathSmoothData) Eps() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// optional distance EPS (maximum permissible tolerance eps, must be greater than zero)
func (rcv *KinCmdPathSmoothData) MutateEps(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// set the number of commands that should be prepared completely (only relevant when isStart=true)
func (rcv *KinCmdPathSmoothData) PrepCmds() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// set the number of commands that should be prepared completely (only relevant when isStart=true)
func (rcv *KinCmdPathSmoothData) MutatePrepCmds(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

/// rounding type (default type POLY_TRANS)
func (rcv *KinCmdPathSmoothData) RoundingType() RoundingType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return RoundingType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// rounding type (default type POLY_TRANS)
func (rcv *KinCmdPathSmoothData) MutateRoundingType(n RoundingType) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func KinCmdPathSmoothDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func KinCmdPathSmoothDataAddIsStart(builder *flatbuffers.Builder, isStart bool) {
	builder.PrependBoolSlot(0, isStart, true)
}
func KinCmdPathSmoothDataAddEps(builder *flatbuffers.Builder, eps float64) {
	builder.PrependFloat64Slot(1, eps, 0.0)
}
func KinCmdPathSmoothDataAddPrepCmds(builder *flatbuffers.Builder, prepCmds uint32) {
	builder.PrependUint32Slot(2, prepCmds, 0)
}
func KinCmdPathSmoothDataAddRoundingType(builder *flatbuffers.Builder, roundingType RoundingType) {
	builder.PrependInt8Slot(3, int8(roundingType), 0)
}
func KinCmdPathSmoothDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
