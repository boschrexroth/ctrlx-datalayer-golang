// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters for the command option FeedGroup (modify the resulting path parameter based on a given feedGroup) for kinematics
type KinCmdOptFeedGroupDataT struct {
	PermType string
	Type FeedGroup
}

func (t *KinCmdOptFeedGroupDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	permTypeOffset := builder.CreateString(t.PermType)
	KinCmdOptFeedGroupDataStart(builder)
	KinCmdOptFeedGroupDataAddPermType(builder, permTypeOffset)
	KinCmdOptFeedGroupDataAddType(builder, t.Type)
	return KinCmdOptFeedGroupDataEnd(builder)
}

func (rcv *KinCmdOptFeedGroupData) UnPackTo(t *KinCmdOptFeedGroupDataT) {
	t.PermType = string(rcv.PermType())
	t.Type = rcv.Type()
}

func (rcv *KinCmdOptFeedGroupData) UnPack() *KinCmdOptFeedGroupDataT {
	if rcv == nil { return nil }
	t := &KinCmdOptFeedGroupDataT{}
	rcv.UnPackTo(t)
	return t
}

type KinCmdOptFeedGroupData struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCmdOptFeedGroupData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdOptFeedGroupData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCmdOptFeedGroupData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCmdOptFeedGroupData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdOptFeedGroupData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCmdOptFeedGroupData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCmdOptFeedGroupData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCmdOptFeedGroupData) Table() flatbuffers.Table {
	return rcv._tab
}

/// permanent type (e.g. "PermOn")
func (rcv *KinCmdOptFeedGroupData) PermType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// permanent type (e.g. "PermOn")
/// name of the feedGroup that should be used to define the path parameter (default FG_XYZ)
/// possible feedGroups are: "FG_XYZ", "FG_XYZ_O", "FG_XYZ_A", "FG_XYZ_O_A"
func (rcv *KinCmdOptFeedGroupData) Type() FeedGroup {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return FeedGroup(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// name of the feedGroup that should be used to define the path parameter (default FG_XYZ)
/// possible feedGroups are: "FG_XYZ", "FG_XYZ_O", "FG_XYZ_A", "FG_XYZ_O_A"
func (rcv *KinCmdOptFeedGroupData) MutateType(n FeedGroup) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func KinCmdOptFeedGroupDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KinCmdOptFeedGroupDataAddPermType(builder *flatbuffers.Builder, permType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(permType), 0)
}
func KinCmdOptFeedGroupDataAddType(builder *flatbuffers.Builder, type_ FeedGroup) {
	builder.PrependInt8Slot(1, int8(type_), 0)
}
func KinCmdOptFeedGroupDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
