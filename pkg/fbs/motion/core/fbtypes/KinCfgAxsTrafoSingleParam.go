// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of a single parameter of an axis transformation
type KinCfgAxsTrafoSingleParamT struct {
	Name string
	ValueDouble float64
	ValueInt int64
	ValueString string
}

func (t *KinCfgAxsTrafoSingleParamT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	valueStringOffset := builder.CreateString(t.ValueString)
	KinCfgAxsTrafoSingleParamStart(builder)
	KinCfgAxsTrafoSingleParamAddName(builder, nameOffset)
	KinCfgAxsTrafoSingleParamAddValueDouble(builder, t.ValueDouble)
	KinCfgAxsTrafoSingleParamAddValueInt(builder, t.ValueInt)
	KinCfgAxsTrafoSingleParamAddValueString(builder, valueStringOffset)
	return KinCfgAxsTrafoSingleParamEnd(builder)
}

func (rcv *KinCfgAxsTrafoSingleParam) UnPackTo(t *KinCfgAxsTrafoSingleParamT) {
	t.Name = string(rcv.Name())
	t.ValueDouble = rcv.ValueDouble()
	t.ValueInt = rcv.ValueInt()
	t.ValueString = string(rcv.ValueString())
}

func (rcv *KinCfgAxsTrafoSingleParam) UnPack() *KinCfgAxsTrafoSingleParamT {
	if rcv == nil { return nil }
	t := &KinCfgAxsTrafoSingleParamT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgAxsTrafoSingleParam struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgAxsTrafoSingleParam(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxsTrafoSingleParam {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgAxsTrafoSingleParam{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgAxsTrafoSingleParam(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxsTrafoSingleParam {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgAxsTrafoSingleParam{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgAxsTrafoSingleParam) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgAxsTrafoSingleParam) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the parameter
func (rcv *KinCfgAxsTrafoSingleParam) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the parameter
/// value of the parameter (when it's a double value)
func (rcv *KinCfgAxsTrafoSingleParam) ValueDouble() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// value of the parameter (when it's a double value)
func (rcv *KinCfgAxsTrafoSingleParam) MutateValueDouble(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// value of the parameter (when it's a integer value)
func (rcv *KinCfgAxsTrafoSingleParam) ValueInt() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// value of the parameter (when it's a integer value)
func (rcv *KinCfgAxsTrafoSingleParam) MutateValueInt(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

/// value of the parameter (when it's a string value)
func (rcv *KinCfgAxsTrafoSingleParam) ValueString() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// value of the parameter (when it's a string value)
func KinCfgAxsTrafoSingleParamStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func KinCfgAxsTrafoSingleParamAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func KinCfgAxsTrafoSingleParamAddValueDouble(builder *flatbuffers.Builder, valueDouble float64) {
	builder.PrependFloat64Slot(1, valueDouble, 0.0)
}
func KinCfgAxsTrafoSingleParamAddValueInt(builder *flatbuffers.Builder, valueInt int64) {
	builder.PrependInt64Slot(2, valueInt, 0)
}
func KinCfgAxsTrafoSingleParamAddValueString(builder *flatbuffers.Builder, valueString flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(valueString), 0)
}
func KinCfgAxsTrafoSingleParamEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
