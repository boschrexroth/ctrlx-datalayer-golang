// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration for E-Stop dynamic limitation
type AxsCfgEstopDynamicLimitsT struct {
	Dec float64 `json:"dec"`
	JrkDec float64 `json:"jrkDec"`
	DecUnit string `json:"decUnit"`
	JrkDecUnit string `json:"jrkDecUnit"`
}

func (t *AxsCfgEstopDynamicLimitsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	decUnitOffset := flatbuffers.UOffsetT(0)
	if t.DecUnit != "" {
		decUnitOffset = builder.CreateString(t.DecUnit)
	}
	jrkDecUnitOffset := flatbuffers.UOffsetT(0)
	if t.JrkDecUnit != "" {
		jrkDecUnitOffset = builder.CreateString(t.JrkDecUnit)
	}
	AxsCfgEstopDynamicLimitsStart(builder)
	AxsCfgEstopDynamicLimitsAddDec(builder, t.Dec)
	AxsCfgEstopDynamicLimitsAddJrkDec(builder, t.JrkDec)
	AxsCfgEstopDynamicLimitsAddDecUnit(builder, decUnitOffset)
	AxsCfgEstopDynamicLimitsAddJrkDecUnit(builder, jrkDecUnitOffset)
	return AxsCfgEstopDynamicLimitsEnd(builder)
}

func (rcv *AxsCfgEstopDynamicLimits) UnPackTo(t *AxsCfgEstopDynamicLimitsT) {
	t.Dec = rcv.Dec()
	t.JrkDec = rcv.JrkDec()
	t.DecUnit = string(rcv.DecUnit())
	t.JrkDecUnit = string(rcv.JrkDecUnit())
}

func (rcv *AxsCfgEstopDynamicLimits) UnPack() *AxsCfgEstopDynamicLimitsT {
	if rcv == nil { return nil }
	t := &AxsCfgEstopDynamicLimitsT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgEstopDynamicLimits struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgEstopDynamicLimits(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgEstopDynamicLimits {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgEstopDynamicLimits{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgEstopDynamicLimits(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgEstopDynamicLimits {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgEstopDynamicLimits{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgEstopDynamicLimits) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgEstopDynamicLimits) Table() flatbuffers.Table {
	return rcv._tab
}

/// deceleration limit (must be greater than zero)
func (rcv *AxsCfgEstopDynamicLimits) Dec() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// deceleration limit (must be greater than zero)
func (rcv *AxsCfgEstopDynamicLimits) MutateDec(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// deceleration jerk limit (must be greater than zero OR zero for not jerk limited motion)
func (rcv *AxsCfgEstopDynamicLimits) JrkDec() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// deceleration jerk limit (must be greater than zero OR zero for not jerk limited motion)
func (rcv *AxsCfgEstopDynamicLimits) MutateJrkDec(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// unit of dec
func (rcv *AxsCfgEstopDynamicLimits) DecUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of dec
/// unit of jrkDec
func (rcv *AxsCfgEstopDynamicLimits) JrkDecUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of jrkDec
func AxsCfgEstopDynamicLimitsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func AxsCfgEstopDynamicLimitsAddDec(builder *flatbuffers.Builder, dec float64) {
	builder.PrependFloat64Slot(0, dec, 0.0)
}
func AxsCfgEstopDynamicLimitsAddJrkDec(builder *flatbuffers.Builder, jrkDec float64) {
	builder.PrependFloat64Slot(1, jrkDec, 0.0)
}
func AxsCfgEstopDynamicLimitsAddDecUnit(builder *flatbuffers.Builder, decUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(decUnit), 0)
}
func AxsCfgEstopDynamicLimitsAddJrkDecUnit(builder *flatbuffers.Builder, jrkDecUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(jrkDecUnit), 0)
}
func AxsCfgEstopDynamicLimitsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
