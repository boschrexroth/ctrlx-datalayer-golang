// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// data of a single configuration parameter of an axis transformation
type KinCfgAxsTrafoParam struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgAxsTrafoParam(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxsTrafoParam {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgAxsTrafoParam{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgAxsTrafoParam(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxsTrafoParam {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgAxsTrafoParam{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgAxsTrafoParam) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgAxsTrafoParam) Table() flatbuffers.Table {
	return rcv._tab
}

/// Name of the parameter
func (rcv *KinCfgAxsTrafoParam) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the parameter
/// Description of the parameter
func (rcv *KinCfgAxsTrafoParam) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the parameter
/// Image (link) of the parameter
func (rcv *KinCfgAxsTrafoParam) Image() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Image (link) of the parameter
/// Reference to the documentation of the parameter
func (rcv *KinCfgAxsTrafoParam) DocRef() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Reference to the documentation of the parameter
/// Group of the parameter (might be empty, when this parameter is not part of a group)
func (rcv *KinCfgAxsTrafoParam) Group() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Group of the parameter (might be empty, when this parameter is not part of a group)
/// Expected unit of the parameter (might be empty for unitless parameters
func (rcv *KinCfgAxsTrafoParam) Unit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Expected unit of the parameter (might be empty for unitless parameters
/// Valid values for the parameter (when it's a string parameter and a kind of enumeration, else empty)
func (rcv *KinCfgAxsTrafoParam) Values(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *KinCfgAxsTrafoParam) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Valid values for the parameter (when it's a string parameter and a kind of enumeration, else empty)
/// Type of the variable
func (rcv *KinCfgAxsTrafoParam) Type() VarType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return VarType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// Type of the variable
func (rcv *KinCfgAxsTrafoParam) MutateType(n VarType) bool {
	return rcv._tab.MutateInt8Slot(18, int8(n))
}

func KinCfgAxsTrafoParamStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func KinCfgAxsTrafoParamAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func KinCfgAxsTrafoParamAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(description), 0)
}
func KinCfgAxsTrafoParamAddImage(builder *flatbuffers.Builder, image flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(image), 0)
}
func KinCfgAxsTrafoParamAddDocRef(builder *flatbuffers.Builder, docRef flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(docRef), 0)
}
func KinCfgAxsTrafoParamAddGroup(builder *flatbuffers.Builder, group flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(group), 0)
}
func KinCfgAxsTrafoParamAddUnit(builder *flatbuffers.Builder, unit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(unit), 0)
}
func KinCfgAxsTrafoParamAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(values), 0)
}
func KinCfgAxsTrafoParamStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinCfgAxsTrafoParamAddType(builder *flatbuffers.Builder, type_ VarType) {
	builder.PrependInt8Slot(7, int8(type_), 1)
}
func KinCfgAxsTrafoParamEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
