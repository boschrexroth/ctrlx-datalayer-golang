// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// data of a single configuration parameter of an axis transformation
type KinCfgAxsTrafoAllParam struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgAxsTrafoAllParam(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxsTrafoAllParam {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgAxsTrafoAllParam{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgAxsTrafoAllParam(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxsTrafoAllParam {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgAxsTrafoAllParam{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgAxsTrafoAllParam) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgAxsTrafoAllParam) Table() flatbuffers.Table {
	return rcv._tab
}

/// Names of all axes, that are required for this axis transformation and that require an axis assignment
func (rcv *KinCfgAxsTrafoAllParam) AxsAssignment(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *KinCfgAxsTrafoAllParam) AxsAssignmentLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Names of all axes, that are required for this axis transformation and that require an axis assignment
/// Vector of all configuration parameters of the axis transformation
func (rcv *KinCfgAxsTrafoAllParam) Parameter(obj *KinCfgAxsTrafoParam, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *KinCfgAxsTrafoAllParam) ParameterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Vector of all configuration parameters of the axis transformation
func KinCfgAxsTrafoAllParamStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KinCfgAxsTrafoAllParamAddAxsAssignment(builder *flatbuffers.Builder, axsAssignment flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(axsAssignment), 0)
}
func KinCfgAxsTrafoAllParamStartAxsAssignmentVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinCfgAxsTrafoAllParamAddParameter(builder *flatbuffers.Builder, parameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(parameter), 0)
}
func KinCfgAxsTrafoAllParamStartParameterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinCfgAxsTrafoAllParamEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
