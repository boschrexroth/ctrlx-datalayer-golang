// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Table for a vector of boolean values
type KVPCfgBoolVectorT struct {
	BoolVector []bool `json:"boolVector"`
}

func (t *KVPCfgBoolVectorT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	boolVectorOffset := flatbuffers.UOffsetT(0)
	if t.BoolVector != nil {
		boolVectorLength := len(t.BoolVector)
		KVPCfgBoolVectorStartBoolVectorVector(builder, boolVectorLength)
		for j := boolVectorLength - 1; j >= 0; j-- {
			builder.PrependBool(t.BoolVector[j])
		}
		boolVectorOffset = builder.EndVector(boolVectorLength)
	}
	KVPCfgBoolVectorStart(builder)
	KVPCfgBoolVectorAddBoolVector(builder, boolVectorOffset)
	return KVPCfgBoolVectorEnd(builder)
}

func (rcv *KVPCfgBoolVector) UnPackTo(t *KVPCfgBoolVectorT) {
	boolVectorLength := rcv.BoolVectorLength()
	t.BoolVector = make([]bool, boolVectorLength)
	for j := 0; j < boolVectorLength; j++ {
		t.BoolVector[j] = rcv.BoolVector(j)
	}
}

func (rcv *KVPCfgBoolVector) UnPack() *KVPCfgBoolVectorT {
	if rcv == nil { return nil }
	t := &KVPCfgBoolVectorT{}
	rcv.UnPackTo(t)
	return t
}

type KVPCfgBoolVector struct {
	_tab flatbuffers.Table
}

func GetRootAsKVPCfgBoolVector(buf []byte, offset flatbuffers.UOffsetT) *KVPCfgBoolVector {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KVPCfgBoolVector{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKVPCfgBoolVector(buf []byte, offset flatbuffers.UOffsetT) *KVPCfgBoolVector {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KVPCfgBoolVector{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KVPCfgBoolVector) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KVPCfgBoolVector) Table() flatbuffers.Table {
	return rcv._tab
}

/// vector of boolean numbers
func (rcv *KVPCfgBoolVector) BoolVector(j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetBool(a + flatbuffers.UOffsetT(j*1))
	}
	return false
}

func (rcv *KVPCfgBoolVector) BoolVectorLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of boolean numbers
func (rcv *KVPCfgBoolVector) MutateBoolVector(j int, n bool) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateBool(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func KVPCfgBoolVectorStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func KVPCfgBoolVectorAddBoolVector(builder *flatbuffers.Builder, boolVector flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(boolVector), 0)
}
func KVPCfgBoolVectorStartBoolVectorVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func KVPCfgBoolVectorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
