// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of the axis position commands
type AxsCmdPosDataT struct {
	AxsPos float64 `json:"axsPos"`
	Buffered bool `json:"buffered"`
	Lim *DynamicLimitsT `json:"lim"`
	Direction CmdPosAbsDir `json:"direction"`
}

func (t *AxsCmdPosDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	limOffset := t.Lim.Pack(builder)
	AxsCmdPosDataStart(builder)
	AxsCmdPosDataAddAxsPos(builder, t.AxsPos)
	AxsCmdPosDataAddBuffered(builder, t.Buffered)
	AxsCmdPosDataAddLim(builder, limOffset)
	AxsCmdPosDataAddDirection(builder, t.Direction)
	return AxsCmdPosDataEnd(builder)
}

func (rcv *AxsCmdPosData) UnPackTo(t *AxsCmdPosDataT) {
	t.AxsPos = rcv.AxsPos()
	t.Buffered = rcv.Buffered()
	t.Lim = rcv.Lim(nil).UnPack()
	t.Direction = rcv.Direction()
}

func (rcv *AxsCmdPosData) UnPack() *AxsCmdPosDataT {
	if rcv == nil { return nil }
	t := &AxsCmdPosDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdPosData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdPosData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdPosData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdPosData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdPosData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdPosData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdPosData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdPosData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdPosData) Table() flatbuffers.Table {
	return rcv._tab
}

/// commanded target position (or increment for relative position command)
func (rcv *AxsCmdPosData) AxsPos() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// commanded target position (or increment for relative position command)
func (rcv *AxsCmdPosData) MutateAxsPos(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// should this be a buffered command?
func (rcv *AxsCmdPosData) Buffered() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// should this be a buffered command?
func (rcv *AxsCmdPosData) MutateBuffered(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

/// dynamic limits for the motion of this command
func (rcv *AxsCmdPosData) Lim(obj *DynamicLimits) *DynamicLimits {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DynamicLimits)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// dynamic limits for the motion of this command
/// Selected direction for PosAbs with modulo axis (ignored in all other cases)
func (rcv *AxsCmdPosData) Direction() CmdPosAbsDir {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return CmdPosAbsDir(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Selected direction for PosAbs with modulo axis (ignored in all other cases)
func (rcv *AxsCmdPosData) MutateDirection(n CmdPosAbsDir) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func AxsCmdPosDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func AxsCmdPosDataAddAxsPos(builder *flatbuffers.Builder, axsPos float64) {
	builder.PrependFloat64Slot(0, axsPos, 0.0)
}
func AxsCmdPosDataAddBuffered(builder *flatbuffers.Builder, buffered bool) {
	builder.PrependBoolSlot(1, buffered, true)
}
func AxsCmdPosDataAddLim(builder *flatbuffers.Builder, lim flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(lim), 0)
}
func AxsCmdPosDataAddDirection(builder *flatbuffers.Builder, direction CmdPosAbsDir) {
	builder.PrependInt8Slot(3, int8(direction), 0)
}
func AxsCmdPosDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
