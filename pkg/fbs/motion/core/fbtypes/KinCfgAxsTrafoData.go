// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// data of all registered axis transformations when reading all data of implemented axis transformations
type KinCfgAxsTrafoDataT struct {
	AxsTrafoData []*KinCfgAxsTrafoDataSingleT
}

func (t *KinCfgAxsTrafoDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	axsTrafoDataOffset := flatbuffers.UOffsetT(0)
	if t.AxsTrafoData != nil {
		axsTrafoDataLength := len(t.AxsTrafoData)
		axsTrafoDataOffsets := make([]flatbuffers.UOffsetT, axsTrafoDataLength)
		for j := 0; j < axsTrafoDataLength; j++ {
			axsTrafoDataOffsets[j] = t.AxsTrafoData[j].Pack(builder)
		}
		KinCfgAxsTrafoDataStartAxsTrafoDataVector(builder, axsTrafoDataLength)
		for j := axsTrafoDataLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(axsTrafoDataOffsets[j])
		}
		axsTrafoDataOffset = builder.EndVector(axsTrafoDataLength)
	}
	KinCfgAxsTrafoDataStart(builder)
	KinCfgAxsTrafoDataAddAxsTrafoData(builder, axsTrafoDataOffset)
	return KinCfgAxsTrafoDataEnd(builder)
}

func (rcv *KinCfgAxsTrafoData) UnPackTo(t *KinCfgAxsTrafoDataT) {
	axsTrafoDataLength := rcv.AxsTrafoDataLength()
	t.AxsTrafoData = make([]*KinCfgAxsTrafoDataSingleT, axsTrafoDataLength)
	for j := 0; j < axsTrafoDataLength; j++ {
		x := KinCfgAxsTrafoDataSingle{}
		rcv.AxsTrafoData(&x, j)
		t.AxsTrafoData[j] = x.UnPack()
	}
}

func (rcv *KinCfgAxsTrafoData) UnPack() *KinCfgAxsTrafoDataT {
	if rcv == nil { return nil }
	t := &KinCfgAxsTrafoDataT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgAxsTrafoData struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgAxsTrafoData(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxsTrafoData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgAxsTrafoData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgAxsTrafoData(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxsTrafoData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgAxsTrafoData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgAxsTrafoData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgAxsTrafoData) Table() flatbuffers.Table {
	return rcv._tab
}

/// data of all registered axis transformations
func (rcv *KinCfgAxsTrafoData) AxsTrafoData(obj *KinCfgAxsTrafoDataSingle, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *KinCfgAxsTrafoData) AxsTrafoDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// data of all registered axis transformations
func KinCfgAxsTrafoDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func KinCfgAxsTrafoDataAddAxsTrafoData(builder *flatbuffers.Builder, axsTrafoData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(axsTrafoData), 0)
}
func KinCfgAxsTrafoDataStartAxsTrafoDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinCfgAxsTrafoDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
