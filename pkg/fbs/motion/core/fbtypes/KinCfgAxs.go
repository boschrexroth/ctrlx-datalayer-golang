// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of an axis that can be added to a kinematics
type KinCfgAxsT struct {
	AxsName string `json:"axsName"`
	AxsMeaning string `json:"axsMeaning"`
	AxsDir string `json:"axsDir"`
	AcsIndex byte `json:"acsIndex"`
}

func (t *KinCfgAxsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	axsNameOffset := flatbuffers.UOffsetT(0)
	if t.AxsName != "" {
		axsNameOffset = builder.CreateString(t.AxsName)
	}
	axsMeaningOffset := flatbuffers.UOffsetT(0)
	if t.AxsMeaning != "" {
		axsMeaningOffset = builder.CreateString(t.AxsMeaning)
	}
	axsDirOffset := flatbuffers.UOffsetT(0)
	if t.AxsDir != "" {
		axsDirOffset = builder.CreateString(t.AxsDir)
	}
	KinCfgAxsStart(builder)
	KinCfgAxsAddAxsName(builder, axsNameOffset)
	KinCfgAxsAddAxsMeaning(builder, axsMeaningOffset)
	KinCfgAxsAddAxsDir(builder, axsDirOffset)
	KinCfgAxsAddAcsIndex(builder, t.AcsIndex)
	return KinCfgAxsEnd(builder)
}

func (rcv *KinCfgAxs) UnPackTo(t *KinCfgAxsT) {
	t.AxsName = string(rcv.AxsName())
	t.AxsMeaning = string(rcv.AxsMeaning())
	t.AxsDir = string(rcv.AxsDir())
	t.AcsIndex = rcv.AcsIndex()
}

func (rcv *KinCfgAxs) UnPack() *KinCfgAxsT {
	if rcv == nil { return nil }
	t := &KinCfgAxsT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgAxs struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgAxs(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxs {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgAxs{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgAxs(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxs {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgAxs{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgAxs) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgAxs) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the axis
func (rcv *KinCfgAxs) AxsName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the axis
/// DEPRECATED; (geometric) meaning of the axis in the kinematics when added (only useful for simple Cartesian kinematics); use "acsIndex" for all other cases and leave this out
func (rcv *KinCfgAxs) AxsMeaning() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// DEPRECATED; (geometric) meaning of the axis in the kinematics when added (only useful for simple Cartesian kinematics); use "acsIndex" for all other cases and leave this out
/// direction ("+" or "-") of the axis referring to the kinematics coordinate system
func (rcv *KinCfgAxs) AxsDir() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// direction ("+" or "-") of the axis referring to the kinematics coordinate system
/// index of the axis in the ACS (axis coordinate system) array of the kinematics (value 255 means "use the axsMeaning")
func (rcv *KinCfgAxs) AcsIndex() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 255
}

/// index of the axis in the ACS (axis coordinate system) array of the kinematics (value 255 means "use the axsMeaning")
func (rcv *KinCfgAxs) MutateAcsIndex(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func KinCfgAxsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func KinCfgAxsAddAxsName(builder *flatbuffers.Builder, axsName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(axsName), 0)
}
func KinCfgAxsAddAxsMeaning(builder *flatbuffers.Builder, axsMeaning flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(axsMeaning), 0)
}
func KinCfgAxsAddAxsDir(builder *flatbuffers.Builder, axsDir flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(axsDir), 0)
}
func KinCfgAxsAddAcsIndex(builder *flatbuffers.Builder, acsIndex byte) {
	builder.PrependByteSlot(3, acsIndex, 255)
}
func KinCfgAxsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
