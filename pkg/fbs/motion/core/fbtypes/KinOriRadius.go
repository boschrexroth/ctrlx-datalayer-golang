// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// common configuration of orientation. Effective radius as factor for the relation between position to orientation.
type KinOriRadiusT struct {
	Radius float64
	UnitLin string
	UnitRot string
}

func (t *KinOriRadiusT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	unitLinOffset := builder.CreateString(t.UnitLin)
	unitRotOffset := builder.CreateString(t.UnitRot)
	KinOriRadiusStart(builder)
	KinOriRadiusAddRadius(builder, t.Radius)
	KinOriRadiusAddUnitLin(builder, unitLinOffset)
	KinOriRadiusAddUnitRot(builder, unitRotOffset)
	return KinOriRadiusEnd(builder)
}

func (rcv *KinOriRadius) UnPackTo(t *KinOriRadiusT) {
	t.Radius = rcv.Radius()
	t.UnitLin = string(rcv.UnitLin())
	t.UnitRot = string(rcv.UnitRot())
}

func (rcv *KinOriRadius) UnPack() *KinOriRadiusT {
	if rcv == nil { return nil }
	t := &KinOriRadiusT{}
	rcv.UnPackTo(t)
	return t
}

type KinOriRadius struct {
	_tab flatbuffers.Table
}

func GetRootAsKinOriRadius(buf []byte, offset flatbuffers.UOffsetT) *KinOriRadius {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinOriRadius{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinOriRadius(buf []byte, offset flatbuffers.UOffsetT) *KinOriRadius {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinOriRadius{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinOriRadius) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinOriRadius) Table() flatbuffers.Table {
	return rcv._tab
}

/// radius = (linear value)/(rotational value)
func (rcv *KinOriRadius) Radius() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// radius = (linear value)/(rotational value)
func (rcv *KinOriRadius) MutateRadius(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// unit for linear
func (rcv *KinOriRadius) UnitLin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit for linear
/// unit for rotation
func (rcv *KinOriRadius) UnitRot() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit for rotation
func KinOriRadiusStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func KinOriRadiusAddRadius(builder *flatbuffers.Builder, radius float64) {
	builder.PrependFloat64Slot(0, radius, 0.0)
}
func KinOriRadiusAddUnitLin(builder *flatbuffers.Builder, unitLin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(unitLin), 0)
}
func KinOriRadiusAddUnitRot(builder *flatbuffers.Builder, unitRot flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(unitRot), 0)
}
func KinOriRadiusEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
