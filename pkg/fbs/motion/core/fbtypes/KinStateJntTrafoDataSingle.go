// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// data of a single registered joint transformation when reading all data of an implemented joint transformation
type KinStateJntTrafoDataSingleT struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Description string `json:"description"`
	Image string `json:"image"`
	DocRef string `json:"docRef"`
	Version string `json:"version"`
	Pow POWType `json:"pow"`
	Parameters *KinStateJntTrafoDataAllParamT `json:"parameters"`
	License string `json:"license"`
	Icon string `json:"icon"`
	LicenseInstalled bool `json:"licenseInstalled"`
	PosCapability string `json:"posCapability"`
	OriCapability string `json:"oriCapability"`
}

func (t *KinStateJntTrafoDataSingleT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	idOffset := flatbuffers.UOffsetT(0)
	if t.Id != "" {
		idOffset = builder.CreateString(t.Id)
	}
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	descriptionOffset := flatbuffers.UOffsetT(0)
	if t.Description != "" {
		descriptionOffset = builder.CreateString(t.Description)
	}
	imageOffset := flatbuffers.UOffsetT(0)
	if t.Image != "" {
		imageOffset = builder.CreateString(t.Image)
	}
	docRefOffset := flatbuffers.UOffsetT(0)
	if t.DocRef != "" {
		docRefOffset = builder.CreateString(t.DocRef)
	}
	versionOffset := flatbuffers.UOffsetT(0)
	if t.Version != "" {
		versionOffset = builder.CreateString(t.Version)
	}
	parametersOffset := t.Parameters.Pack(builder)
	licenseOffset := flatbuffers.UOffsetT(0)
	if t.License != "" {
		licenseOffset = builder.CreateString(t.License)
	}
	iconOffset := flatbuffers.UOffsetT(0)
	if t.Icon != "" {
		iconOffset = builder.CreateString(t.Icon)
	}
	posCapabilityOffset := flatbuffers.UOffsetT(0)
	if t.PosCapability != "" {
		posCapabilityOffset = builder.CreateString(t.PosCapability)
	}
	oriCapabilityOffset := flatbuffers.UOffsetT(0)
	if t.OriCapability != "" {
		oriCapabilityOffset = builder.CreateString(t.OriCapability)
	}
	KinStateJntTrafoDataSingleStart(builder)
	KinStateJntTrafoDataSingleAddId(builder, idOffset)
	KinStateJntTrafoDataSingleAddName(builder, nameOffset)
	KinStateJntTrafoDataSingleAddDescription(builder, descriptionOffset)
	KinStateJntTrafoDataSingleAddImage(builder, imageOffset)
	KinStateJntTrafoDataSingleAddDocRef(builder, docRefOffset)
	KinStateJntTrafoDataSingleAddVersion(builder, versionOffset)
	KinStateJntTrafoDataSingleAddPow(builder, t.Pow)
	KinStateJntTrafoDataSingleAddParameters(builder, parametersOffset)
	KinStateJntTrafoDataSingleAddLicense(builder, licenseOffset)
	KinStateJntTrafoDataSingleAddIcon(builder, iconOffset)
	KinStateJntTrafoDataSingleAddLicenseInstalled(builder, t.LicenseInstalled)
	KinStateJntTrafoDataSingleAddPosCapability(builder, posCapabilityOffset)
	KinStateJntTrafoDataSingleAddOriCapability(builder, oriCapabilityOffset)
	return KinStateJntTrafoDataSingleEnd(builder)
}

func (rcv *KinStateJntTrafoDataSingle) UnPackTo(t *KinStateJntTrafoDataSingleT) {
	t.Id = string(rcv.Id())
	t.Name = string(rcv.Name())
	t.Description = string(rcv.Description())
	t.Image = string(rcv.Image())
	t.DocRef = string(rcv.DocRef())
	t.Version = string(rcv.Version())
	t.Pow = rcv.Pow()
	t.Parameters = rcv.Parameters(nil).UnPack()
	t.License = string(rcv.License())
	t.Icon = string(rcv.Icon())
	t.LicenseInstalled = rcv.LicenseInstalled()
	t.PosCapability = string(rcv.PosCapability())
	t.OriCapability = string(rcv.OriCapability())
}

func (rcv *KinStateJntTrafoDataSingle) UnPack() *KinStateJntTrafoDataSingleT {
	if rcv == nil { return nil }
	t := &KinStateJntTrafoDataSingleT{}
	rcv.UnPackTo(t)
	return t
}

type KinStateJntTrafoDataSingle struct {
	_tab flatbuffers.Table
}

func GetRootAsKinStateJntTrafoDataSingle(buf []byte, offset flatbuffers.UOffsetT) *KinStateJntTrafoDataSingle {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinStateJntTrafoDataSingle{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinStateJntTrafoDataSingle(buf []byte, offset flatbuffers.UOffsetT) *KinStateJntTrafoDataSingle {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinStateJntTrafoDataSingle{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinStateJntTrafoDataSingle) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinStateJntTrafoDataSingle) Table() flatbuffers.Table {
	return rcv._tab
}

/// ID of the joint transformation (to be used in the MCS set)
func (rcv *KinStateJntTrafoDataSingle) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the joint transformation (to be used in the MCS set)
/// Name of the joint transformation
func (rcv *KinStateJntTrafoDataSingle) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the joint transformation
/// Description of the joint transformation
func (rcv *KinStateJntTrafoDataSingle) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the joint transformation
/// Image (link) of the joint transformation
func (rcv *KinStateJntTrafoDataSingle) Image() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Image (link) of the joint transformation
/// Reference to the documentation of the joint transformation
func (rcv *KinStateJntTrafoDataSingle) DocRef() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Reference to the documentation of the joint transformation
/// Version string of the joint transformation
func (rcv *KinStateJntTrafoDataSingle) Version() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Version string of the joint transformation
/// Point of work of the joint transformation
func (rcv *KinStateJntTrafoDataSingle) Pow() POWType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return POWType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// Point of work of the joint transformation
func (rcv *KinStateJntTrafoDataSingle) MutatePow(n POWType) bool {
	return rcv._tab.MutateInt8Slot(16, int8(n))
}

/// All configuration parameters of the joint transformation
func (rcv *KinStateJntTrafoDataSingle) Parameters(obj *KinStateJntTrafoDataAllParam) *KinStateJntTrafoDataAllParam {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(KinStateJntTrafoDataAllParam)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// All configuration parameters of the joint transformation
/// Licence information of the joint transformation
func (rcv *KinStateJntTrafoDataSingle) License() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Licence information of the joint transformation
/// Icon image (link) of the joint transformation
func (rcv *KinStateJntTrafoDataSingle) Icon() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Icon image (link) of the joint transformation
/// is the require license installed on the system?
func (rcv *KinStateJntTrafoDataSingle) LicenseInstalled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// is the require license installed on the system?
func (rcv *KinStateJntTrafoDataSingle) MutateLicenseInstalled(n bool) bool {
	return rcv._tab.MutateBoolSlot(24, n)
}

/// Position capability of this joint transformation (NO_POS, POS_3D, POS_XY, POS_ZX, POS_YZ, POS_X, POS_Y, POS_Z)
func (rcv *KinStateJntTrafoDataSingle) PosCapability() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Position capability of this joint transformation (NO_POS, POS_3D, POS_XY, POS_ZX, POS_YZ, POS_X, POS_Y, POS_Z)
/// Orientation capability of this joint transformation (NO_ORI, ORI_3D, ORI_2D, ORI_1D_X, ORI_1D_Y, ORI_1D_Z)
func (rcv *KinStateJntTrafoDataSingle) OriCapability() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Orientation capability of this joint transformation (NO_ORI, ORI_3D, ORI_2D, ORI_1D_X, ORI_1D_Y, ORI_1D_Z)
func KinStateJntTrafoDataSingleStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func KinStateJntTrafoDataSingleAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func KinStateJntTrafoDataSingleAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func KinStateJntTrafoDataSingleAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(description), 0)
}
func KinStateJntTrafoDataSingleAddImage(builder *flatbuffers.Builder, image flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(image), 0)
}
func KinStateJntTrafoDataSingleAddDocRef(builder *flatbuffers.Builder, docRef flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(docRef), 0)
}
func KinStateJntTrafoDataSingleAddVersion(builder *flatbuffers.Builder, version flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(version), 0)
}
func KinStateJntTrafoDataSingleAddPow(builder *flatbuffers.Builder, pow POWType) {
	builder.PrependInt8Slot(6, int8(pow), 1)
}
func KinStateJntTrafoDataSingleAddParameters(builder *flatbuffers.Builder, parameters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(parameters), 0)
}
func KinStateJntTrafoDataSingleAddLicense(builder *flatbuffers.Builder, license flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(license), 0)
}
func KinStateJntTrafoDataSingleAddIcon(builder *flatbuffers.Builder, icon flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(icon), 0)
}
func KinStateJntTrafoDataSingleAddLicenseInstalled(builder *flatbuffers.Builder, licenseInstalled bool) {
	builder.PrependBoolSlot(10, licenseInstalled, false)
}
func KinStateJntTrafoDataSingleAddPosCapability(builder *flatbuffers.Builder, posCapability flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(posCapability), 0)
}
func KinStateJntTrafoDataSingleAddOriCapability(builder *flatbuffers.Builder, oriCapability flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(oriCapability), 0)
}
func KinStateJntTrafoDataSingleEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
