// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// data of a single configuration parameter of an axis transformation when reading all data of an implemented axis transformation
type KinCfgAxsTrafoDataAllParamT struct {
	AxsAssignment []string
	Parameter []*KinCfgAxsTrafoDataParamT
}

func (t *KinCfgAxsTrafoDataAllParamT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	axsAssignmentOffset := flatbuffers.UOffsetT(0)
	if t.AxsAssignment != nil {
		axsAssignmentLength := len(t.AxsAssignment)
		axsAssignmentOffsets := make([]flatbuffers.UOffsetT, axsAssignmentLength)
		for j := 0; j < axsAssignmentLength; j++ {
			axsAssignmentOffsets[j] = builder.CreateString(t.AxsAssignment[j])
		}
		KinCfgAxsTrafoDataAllParamStartAxsAssignmentVector(builder, axsAssignmentLength)
		for j := axsAssignmentLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(axsAssignmentOffsets[j])
		}
		axsAssignmentOffset = builder.EndVector(axsAssignmentLength)
	}
	parameterOffset := flatbuffers.UOffsetT(0)
	if t.Parameter != nil {
		parameterLength := len(t.Parameter)
		parameterOffsets := make([]flatbuffers.UOffsetT, parameterLength)
		for j := 0; j < parameterLength; j++ {
			parameterOffsets[j] = t.Parameter[j].Pack(builder)
		}
		KinCfgAxsTrafoDataAllParamStartParameterVector(builder, parameterLength)
		for j := parameterLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(parameterOffsets[j])
		}
		parameterOffset = builder.EndVector(parameterLength)
	}
	KinCfgAxsTrafoDataAllParamStart(builder)
	KinCfgAxsTrafoDataAllParamAddAxsAssignment(builder, axsAssignmentOffset)
	KinCfgAxsTrafoDataAllParamAddParameter(builder, parameterOffset)
	return KinCfgAxsTrafoDataAllParamEnd(builder)
}

func (rcv *KinCfgAxsTrafoDataAllParam) UnPackTo(t *KinCfgAxsTrafoDataAllParamT) {
	axsAssignmentLength := rcv.AxsAssignmentLength()
	t.AxsAssignment = make([]string, axsAssignmentLength)
	for j := 0; j < axsAssignmentLength; j++ {
		t.AxsAssignment[j] = string(rcv.AxsAssignment(j))
	}
	parameterLength := rcv.ParameterLength()
	t.Parameter = make([]*KinCfgAxsTrafoDataParamT, parameterLength)
	for j := 0; j < parameterLength; j++ {
		x := KinCfgAxsTrafoDataParam{}
		rcv.Parameter(&x, j)
		t.Parameter[j] = x.UnPack()
	}
}

func (rcv *KinCfgAxsTrafoDataAllParam) UnPack() *KinCfgAxsTrafoDataAllParamT {
	if rcv == nil { return nil }
	t := &KinCfgAxsTrafoDataAllParamT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgAxsTrafoDataAllParam struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgAxsTrafoDataAllParam(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxsTrafoDataAllParam {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgAxsTrafoDataAllParam{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgAxsTrafoDataAllParam(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxsTrafoDataAllParam {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgAxsTrafoDataAllParam{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgAxsTrafoDataAllParam) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgAxsTrafoDataAllParam) Table() flatbuffers.Table {
	return rcv._tab
}

/// Names of all axes, that are required for this axis transformation and that require an axis assignment
func (rcv *KinCfgAxsTrafoDataAllParam) AxsAssignment(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *KinCfgAxsTrafoDataAllParam) AxsAssignmentLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Names of all axes, that are required for this axis transformation and that require an axis assignment
/// Vector of all configuration parameters of the axis transformation
func (rcv *KinCfgAxsTrafoDataAllParam) Parameter(obj *KinCfgAxsTrafoDataParam, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *KinCfgAxsTrafoDataAllParam) ParameterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Vector of all configuration parameters of the axis transformation
func KinCfgAxsTrafoDataAllParamStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KinCfgAxsTrafoDataAllParamAddAxsAssignment(builder *flatbuffers.Builder, axsAssignment flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(axsAssignment), 0)
}
func KinCfgAxsTrafoDataAllParamStartAxsAssignmentVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinCfgAxsTrafoDataAllParamAddParameter(builder *flatbuffers.Builder, parameter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(parameter), 0)
}
func KinCfgAxsTrafoDataAllParamStartParameterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinCfgAxsTrafoDataAllParamEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
