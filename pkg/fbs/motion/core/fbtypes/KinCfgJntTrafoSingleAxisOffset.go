// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// data of a single axis zero point offset for a joint transformation
type KinCfgJntTrafoSingleAxisOffsetT struct {
	AxisName string `json:"axisName"`
	ZeroOffset float64 `json:"zeroOffset"`
	ZeroOffsetUnit string `json:"zeroOffsetUnit"`
	Valid bool `json:"valid"`
}

func (t *KinCfgJntTrafoSingleAxisOffsetT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	axisNameOffset := flatbuffers.UOffsetT(0)
	if t.AxisName != "" {
		axisNameOffset = builder.CreateString(t.AxisName)
	}
	zeroOffsetUnitOffset := flatbuffers.UOffsetT(0)
	if t.ZeroOffsetUnit != "" {
		zeroOffsetUnitOffset = builder.CreateString(t.ZeroOffsetUnit)
	}
	KinCfgJntTrafoSingleAxisOffsetStart(builder)
	KinCfgJntTrafoSingleAxisOffsetAddAxisName(builder, axisNameOffset)
	KinCfgJntTrafoSingleAxisOffsetAddZeroOffset(builder, t.ZeroOffset)
	KinCfgJntTrafoSingleAxisOffsetAddZeroOffsetUnit(builder, zeroOffsetUnitOffset)
	KinCfgJntTrafoSingleAxisOffsetAddValid(builder, t.Valid)
	return KinCfgJntTrafoSingleAxisOffsetEnd(builder)
}

func (rcv *KinCfgJntTrafoSingleAxisOffset) UnPackTo(t *KinCfgJntTrafoSingleAxisOffsetT) {
	t.AxisName = string(rcv.AxisName())
	t.ZeroOffset = rcv.ZeroOffset()
	t.ZeroOffsetUnit = string(rcv.ZeroOffsetUnit())
	t.Valid = rcv.Valid()
}

func (rcv *KinCfgJntTrafoSingleAxisOffset) UnPack() *KinCfgJntTrafoSingleAxisOffsetT {
	if rcv == nil { return nil }
	t := &KinCfgJntTrafoSingleAxisOffsetT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgJntTrafoSingleAxisOffset struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgJntTrafoSingleAxisOffset(buf []byte, offset flatbuffers.UOffsetT) *KinCfgJntTrafoSingleAxisOffset {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgJntTrafoSingleAxisOffset{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgJntTrafoSingleAxisOffset(buf []byte, offset flatbuffers.UOffsetT) *KinCfgJntTrafoSingleAxisOffset {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgJntTrafoSingleAxisOffset{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgJntTrafoSingleAxisOffset) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgJntTrafoSingleAxisOffset) Table() flatbuffers.Table {
	return rcv._tab
}

/// axis object name as configured in the ctrlX MOTION
func (rcv *KinCfgJntTrafoSingleAxisOffset) AxisName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// axis object name as configured in the ctrlX MOTION
/// zero point offset of the axis (is used, when the axis is grouped in the kinematics and used as trafo axis in the joint transformation)
/// offset is subtracted from the axis position in the forward transformation before it is given to the joint transformation
func (rcv *KinCfgJntTrafoSingleAxisOffset) ZeroOffset() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// zero point offset of the axis (is used, when the axis is grouped in the kinematics and used as trafo axis in the joint transformation)
/// offset is subtracted from the axis position in the forward transformation before it is given to the joint transformation
func (rcv *KinCfgJntTrafoSingleAxisOffset) MutateZeroOffset(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// unit of zero point offset
func (rcv *KinCfgJntTrafoSingleAxisOffset) ZeroOffsetUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of zero point offset
/// READ ONLY: indicates, if the information is valid; it can be invalid, when the axis with axisName does not exists;
/// then, the informations here can not be used (especially unit scaling relies on axis configuration)
func (rcv *KinCfgJntTrafoSingleAxisOffset) Valid() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// READ ONLY: indicates, if the information is valid; it can be invalid, when the axis with axisName does not exists;
/// then, the informations here can not be used (especially unit scaling relies on axis configuration)
func (rcv *KinCfgJntTrafoSingleAxisOffset) MutateValid(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func KinCfgJntTrafoSingleAxisOffsetStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func KinCfgJntTrafoSingleAxisOffsetAddAxisName(builder *flatbuffers.Builder, axisName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(axisName), 0)
}
func KinCfgJntTrafoSingleAxisOffsetAddZeroOffset(builder *flatbuffers.Builder, zeroOffset float64) {
	builder.PrependFloat64Slot(1, zeroOffset, 0.0)
}
func KinCfgJntTrafoSingleAxisOffsetAddZeroOffsetUnit(builder *flatbuffers.Builder, zeroOffsetUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(zeroOffsetUnit), 0)
}
func KinCfgJntTrafoSingleAxisOffsetAddValid(builder *flatbuffers.Builder, valid bool) {
	builder.PrependBoolSlot(3, valid, false)
}
func KinCfgJntTrafoSingleAxisOffsetEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
