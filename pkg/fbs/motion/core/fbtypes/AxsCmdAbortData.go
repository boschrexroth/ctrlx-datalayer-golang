// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of the axis abort command
type AxsCmdAbortDataT struct {
	Dec float64
	JrkDec float64
}

func (t *AxsCmdAbortDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AxsCmdAbortDataStart(builder)
	AxsCmdAbortDataAddDec(builder, t.Dec)
	AxsCmdAbortDataAddJrkDec(builder, t.JrkDec)
	return AxsCmdAbortDataEnd(builder)
}

func (rcv *AxsCmdAbortData) UnPackTo(t *AxsCmdAbortDataT) {
	t.Dec = rcv.Dec()
	t.JrkDec = rcv.JrkDec()
}

func (rcv *AxsCmdAbortData) UnPack() *AxsCmdAbortDataT {
	if rcv == nil { return nil }
	t := &AxsCmdAbortDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdAbortData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdAbortData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdAbortData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdAbortData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdAbortData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdAbortData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdAbortData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdAbortData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdAbortData) Table() flatbuffers.Table {
	return rcv._tab
}

/// commanded deceleration limit (must be a positive value)
func (rcv *AxsCmdAbortData) Dec() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// commanded deceleration limit (must be a positive value)
func (rcv *AxsCmdAbortData) MutateDec(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// commanded deceleration jerk limit (must be a positive value OR zero), zero means "not jerk limited"
func (rcv *AxsCmdAbortData) JrkDec() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// commanded deceleration jerk limit (must be a positive value OR zero), zero means "not jerk limited"
func (rcv *AxsCmdAbortData) MutateJrkDec(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func AxsCmdAbortDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AxsCmdAbortDataAddDec(builder *flatbuffers.Builder, dec float64) {
	builder.PrependFloat64Slot(0, dec, 0.0)
}
func AxsCmdAbortDataAddJrkDec(builder *flatbuffers.Builder, jrkDec float64) {
	builder.PrependFloat64Slot(1, jrkDec, 0.0)
}
func AxsCmdAbortDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
