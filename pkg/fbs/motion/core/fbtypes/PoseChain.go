// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// array of joints of a single kinematic chain
type PoseChainT struct {
	JointPosesChain []*PoseExternT `json:"jointPosesChain"`
}

func (t *PoseChainT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	jointPosesChainOffset := flatbuffers.UOffsetT(0)
	if t.JointPosesChain != nil {
		jointPosesChainLength := len(t.JointPosesChain)
		jointPosesChainOffsets := make([]flatbuffers.UOffsetT, jointPosesChainLength)
		for j := 0; j < jointPosesChainLength; j++ {
			jointPosesChainOffsets[j] = t.JointPosesChain[j].Pack(builder)
		}
		PoseChainStartJointPosesChainVector(builder, jointPosesChainLength)
		for j := jointPosesChainLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(jointPosesChainOffsets[j])
		}
		jointPosesChainOffset = builder.EndVector(jointPosesChainLength)
	}
	PoseChainStart(builder)
	PoseChainAddJointPosesChain(builder, jointPosesChainOffset)
	return PoseChainEnd(builder)
}

func (rcv *PoseChain) UnPackTo(t *PoseChainT) {
	jointPosesChainLength := rcv.JointPosesChainLength()
	t.JointPosesChain = make([]*PoseExternT, jointPosesChainLength)
	for j := 0; j < jointPosesChainLength; j++ {
		x := PoseExtern{}
		rcv.JointPosesChain(&x, j)
		t.JointPosesChain[j] = x.UnPack()
	}
}

func (rcv *PoseChain) UnPack() *PoseChainT {
	if rcv == nil { return nil }
	t := &PoseChainT{}
	rcv.UnPackTo(t)
	return t
}

type PoseChain struct {
	_tab flatbuffers.Table
}

func GetRootAsPoseChain(buf []byte, offset flatbuffers.UOffsetT) *PoseChain {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PoseChain{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPoseChain(buf []byte, offset flatbuffers.UOffsetT) *PoseChain {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PoseChain{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PoseChain) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PoseChain) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PoseChain) JointPosesChain(obj *PoseExtern, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *PoseChain) JointPosesChainLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func PoseChainStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func PoseChainAddJointPosesChain(builder *flatbuffers.Builder, jointPosesChain flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(jointPosesChain), 0)
}
func PoseChainStartJointPosesChainVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PoseChainEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
