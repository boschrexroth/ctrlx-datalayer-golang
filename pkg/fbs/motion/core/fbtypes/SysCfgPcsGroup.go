// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of a single group of sets for a product coordinate system
type SysCfgPcsGroup struct {
	_tab flatbuffers.Table
}

func GetRootAsSysCfgPcsGroup(buf []byte, offset flatbuffers.UOffsetT) *SysCfgPcsGroup {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SysCfgPcsGroup{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSysCfgPcsGroup(buf []byte, offset flatbuffers.UOffsetT) *SysCfgPcsGroup {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SysCfgPcsGroup{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SysCfgPcsGroup) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SysCfgPcsGroup) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the group (required for load/save)
func (rcv *SysCfgPcsGroup) GroupName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the group (required for load/save)
/// vector of PCS sets in this group (sequence matters!)
func (rcv *SysCfgPcsGroup) Sets(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SysCfgPcsGroup) SetsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of PCS sets in this group (sequence matters!)
func SysCfgPcsGroupStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SysCfgPcsGroupAddGroupName(builder *flatbuffers.Builder, groupName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(groupName), 0)
}
func SysCfgPcsGroupAddSets(builder *flatbuffers.Builder, sets flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(sets), 0)
}
func SysCfgPcsGroupStartSetsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SysCfgPcsGroupEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
