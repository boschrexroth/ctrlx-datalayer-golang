// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// internal system configuration items
type SysCfgInternal struct {
	_tab flatbuffers.Table
}

func GetRootAsSysCfgInternal(buf []byte, offset flatbuffers.UOffsetT) *SysCfgInternal {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SysCfgInternal{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSysCfgInternal(buf []byte, offset flatbuffers.UOffsetT) *SysCfgInternal {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SysCfgInternal{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SysCfgInternal) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SysCfgInternal) Table() flatbuffers.Table {
	return rcv._tab
}

/// save the internal system configuration items also, when saving the system config to file?
func (rcv *SysCfgInternal) Save() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// save the internal system configuration items also, when saving the system config to file?
func (rcv *SysCfgInternal) MutateSave(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// use the new ipo IVAJ?
func (rcv *SysCfgInternal) UseIpoIVAJ() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// use the new ipo IVAJ?
func (rcv *SysCfgInternal) MutateUseIpoIVAJ(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func SysCfgInternalStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SysCfgInternalAddSave(builder *flatbuffers.Builder, save bool) {
	builder.PrependBoolSlot(0, save, false)
}
func SysCfgInternalAddUseIpoIVAJ(builder *flatbuffers.Builder, useIpoIVAJ bool) {
	builder.PrependBoolSlot(1, useIpoIVAJ, false)
}
func SysCfgInternalEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
