// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of the axis jog commands
type AxsCmdJogDataT struct {
	JogDir string
	JogIncrement float64
	Lim *DynamicLimitsT
}

func (t *AxsCmdJogDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	jogDirOffset := builder.CreateString(t.JogDir)
	limOffset := t.Lim.Pack(builder)
	AxsCmdJogDataStart(builder)
	AxsCmdJogDataAddJogDir(builder, jogDirOffset)
	AxsCmdJogDataAddJogIncrement(builder, t.JogIncrement)
	AxsCmdJogDataAddLim(builder, limOffset)
	return AxsCmdJogDataEnd(builder)
}

func (rcv *AxsCmdJogData) UnPackTo(t *AxsCmdJogDataT) {
	t.JogDir = string(rcv.JogDir())
	t.JogIncrement = rcv.JogIncrement()
	t.Lim = rcv.Lim(nil).UnPack()
}

func (rcv *AxsCmdJogData) UnPack() *AxsCmdJogDataT {
	if rcv == nil { return nil }
	t := &AxsCmdJogDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdJogData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdJogData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdJogData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdJogData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdJogData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdJogData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdJogData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdJogData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdJogData) Table() flatbuffers.Table {
	return rcv._tab
}

/// jog direction ("+" or "-")
func (rcv *AxsCmdJogData) JogDir() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// jog direction ("+" or "-")
/// jog increment (must be zero for continuous jogging, must be a positive value for incremantal jogging)
func (rcv *AxsCmdJogData) JogIncrement() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// jog increment (must be zero for continuous jogging, must be a positive value for incremantal jogging)
func (rcv *AxsCmdJogData) MutateJogIncrement(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// dynamic limits for the motion of this command
func (rcv *AxsCmdJogData) Lim(obj *DynamicLimits) *DynamicLimits {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DynamicLimits)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// dynamic limits for the motion of this command
func AxsCmdJogDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AxsCmdJogDataAddJogDir(builder *flatbuffers.Builder, jogDir flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(jogDir), 0)
}
func AxsCmdJogDataAddJogIncrement(builder *flatbuffers.Builder, jogIncrement float64) {
	builder.PrependFloat64Slot(1, jogIncrement, 0.0)
}
func AxsCmdJogDataAddLim(builder *flatbuffers.Builder, lim flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(lim), 0)
}
func AxsCmdJogDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
