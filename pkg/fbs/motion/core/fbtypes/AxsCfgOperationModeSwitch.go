// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// operation mode switch parameters for a single axis
type AxsCfgOperationModeSwitchT struct {
	ExtrapolationTime float64 `json:"extrapolationTime"`
	ExtrapolationTimeUnit string `json:"extrapolationTimeUnit"`
}

func (t *AxsCfgOperationModeSwitchT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	extrapolationTimeUnitOffset := flatbuffers.UOffsetT(0)
	if t.ExtrapolationTimeUnit != "" {
		extrapolationTimeUnitOffset = builder.CreateString(t.ExtrapolationTimeUnit)
	}
	AxsCfgOperationModeSwitchStart(builder)
	AxsCfgOperationModeSwitchAddExtrapolationTime(builder, t.ExtrapolationTime)
	AxsCfgOperationModeSwitchAddExtrapolationTimeUnit(builder, extrapolationTimeUnitOffset)
	return AxsCfgOperationModeSwitchEnd(builder)
}

func (rcv *AxsCfgOperationModeSwitch) UnPackTo(t *AxsCfgOperationModeSwitchT) {
	t.ExtrapolationTime = rcv.ExtrapolationTime()
	t.ExtrapolationTimeUnit = string(rcv.ExtrapolationTimeUnit())
}

func (rcv *AxsCfgOperationModeSwitch) UnPack() *AxsCfgOperationModeSwitchT {
	if rcv == nil { return nil }
	t := &AxsCfgOperationModeSwitchT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgOperationModeSwitch struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgOperationModeSwitch(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgOperationModeSwitch {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgOperationModeSwitch{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgOperationModeSwitch(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgOperationModeSwitch {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgOperationModeSwitch{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgOperationModeSwitch) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgOperationModeSwitch) Table() flatbuffers.Table {
	return rcv._tab
}

/// the additive extrapolation time (can also be negative) active only during an operation mode switch
func (rcv *AxsCfgOperationModeSwitch) ExtrapolationTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// the additive extrapolation time (can also be negative) active only during an operation mode switch
func (rcv *AxsCfgOperationModeSwitch) MutateExtrapolationTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// unit of extrapolationTime
func (rcv *AxsCfgOperationModeSwitch) ExtrapolationTimeUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of extrapolationTime
func AxsCfgOperationModeSwitchStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AxsCfgOperationModeSwitchAddExtrapolationTime(builder *flatbuffers.Builder, extrapolationTime float64) {
	builder.PrependFloat64Slot(0, extrapolationTime, 0.0)
}
func AxsCfgOperationModeSwitchAddExtrapolationTimeUnit(builder *flatbuffers.Builder, extrapolationTimeUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(extrapolationTimeUnit), 0)
}
func AxsCfgOperationModeSwitchEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
