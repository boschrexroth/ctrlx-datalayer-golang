// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters for the command option ActivePlane for kinematics
type KinCmdOptActivePlaneDataT struct {
	PermType string `json:"permType"`
	Plane ActivePlaneType `json:"plane"`
}

func (t *KinCmdOptActivePlaneDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	permTypeOffset := flatbuffers.UOffsetT(0)
	if t.PermType != "" {
		permTypeOffset = builder.CreateString(t.PermType)
	}
	KinCmdOptActivePlaneDataStart(builder)
	KinCmdOptActivePlaneDataAddPermType(builder, permTypeOffset)
	KinCmdOptActivePlaneDataAddPlane(builder, t.Plane)
	return KinCmdOptActivePlaneDataEnd(builder)
}

func (rcv *KinCmdOptActivePlaneData) UnPackTo(t *KinCmdOptActivePlaneDataT) {
	t.PermType = string(rcv.PermType())
	t.Plane = rcv.Plane()
}

func (rcv *KinCmdOptActivePlaneData) UnPack() *KinCmdOptActivePlaneDataT {
	if rcv == nil { return nil }
	t := &KinCmdOptActivePlaneDataT{}
	rcv.UnPackTo(t)
	return t
}

type KinCmdOptActivePlaneData struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCmdOptActivePlaneData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdOptActivePlaneData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCmdOptActivePlaneData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCmdOptActivePlaneData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdOptActivePlaneData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCmdOptActivePlaneData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCmdOptActivePlaneData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCmdOptActivePlaneData) Table() flatbuffers.Table {
	return rcv._tab
}

/// permanent type (e.g. "PermOn")
func (rcv *KinCmdOptActivePlaneData) PermType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// permanent type (e.g. "PermOn")
/// type of the new active plane
func (rcv *KinCmdOptActivePlaneData) Plane() ActivePlaneType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ActivePlaneType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// type of the new active plane
func (rcv *KinCmdOptActivePlaneData) MutatePlane(n ActivePlaneType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func KinCmdOptActivePlaneDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KinCmdOptActivePlaneDataAddPermType(builder *flatbuffers.Builder, permType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(permType), 0)
}
func KinCmdOptActivePlaneDataAddPlane(builder *flatbuffers.Builder, plane ActivePlaneType) {
	builder.PrependInt8Slot(1, int8(plane), 0)
}
func KinCmdOptActivePlaneDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
