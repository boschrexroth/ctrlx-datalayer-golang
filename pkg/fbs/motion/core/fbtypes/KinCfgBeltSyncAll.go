// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// belt synchronization configuration of all belts in the kinematics
type KinCfgBeltSyncAllT struct {
	Belts []*KinCfgBeltSyncT `json:"belts"`
	ErrorCfg *KinCfgBeltSyncErrorT `json:"errorCfg"`
}

func (t *KinCfgBeltSyncAllT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	beltsOffset := flatbuffers.UOffsetT(0)
	if t.Belts != nil {
		beltsLength := len(t.Belts)
		beltsOffsets := make([]flatbuffers.UOffsetT, beltsLength)
		for j := 0; j < beltsLength; j++ {
			beltsOffsets[j] = t.Belts[j].Pack(builder)
		}
		KinCfgBeltSyncAllStartBeltsVector(builder, beltsLength)
		for j := beltsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(beltsOffsets[j])
		}
		beltsOffset = builder.EndVector(beltsLength)
	}
	errorCfgOffset := t.ErrorCfg.Pack(builder)
	KinCfgBeltSyncAllStart(builder)
	KinCfgBeltSyncAllAddBelts(builder, beltsOffset)
	KinCfgBeltSyncAllAddErrorCfg(builder, errorCfgOffset)
	return KinCfgBeltSyncAllEnd(builder)
}

func (rcv *KinCfgBeltSyncAll) UnPackTo(t *KinCfgBeltSyncAllT) {
	beltsLength := rcv.BeltsLength()
	t.Belts = make([]*KinCfgBeltSyncT, beltsLength)
	for j := 0; j < beltsLength; j++ {
		x := KinCfgBeltSync{}
		rcv.Belts(&x, j)
		t.Belts[j] = x.UnPack()
	}
	t.ErrorCfg = rcv.ErrorCfg(nil).UnPack()
}

func (rcv *KinCfgBeltSyncAll) UnPack() *KinCfgBeltSyncAllT {
	if rcv == nil { return nil }
	t := &KinCfgBeltSyncAllT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgBeltSyncAll struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgBeltSyncAll(buf []byte, offset flatbuffers.UOffsetT) *KinCfgBeltSyncAll {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgBeltSyncAll{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgBeltSyncAll(buf []byte, offset flatbuffers.UOffsetT) *KinCfgBeltSyncAll {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgBeltSyncAll{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgBeltSyncAll) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgBeltSyncAll) Table() flatbuffers.Table {
	return rcv._tab
}

/// vector of all configured belt axis synchronizations in the kinematics
func (rcv *KinCfgBeltSyncAll) Belts(obj *KinCfgBeltSync, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *KinCfgBeltSyncAll) BeltsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of all configured belt axis synchronizations in the kinematics
/// configuration of the error reaction in the function 'belt synchronization'
func (rcv *KinCfgBeltSyncAll) ErrorCfg(obj *KinCfgBeltSyncError) *KinCfgBeltSyncError {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(KinCfgBeltSyncError)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// configuration of the error reaction in the function 'belt synchronization'
func KinCfgBeltSyncAllStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KinCfgBeltSyncAllAddBelts(builder *flatbuffers.Builder, belts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(belts), 0)
}
func KinCfgBeltSyncAllStartBeltsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinCfgBeltSyncAllAddErrorCfg(builder *flatbuffers.Builder, errorCfg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(errorCfg), 0)
}
func KinCfgBeltSyncAllEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
