// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// set of dynamic limits (for reading them in states)
type DynamicLimitsStateT struct {
	Vel float64
	Acc float64
	Dec float64
	JrkAcc float64
	JrkDec float64
	VelUnit string
	AccUnit string
	DecUnit string
	JrkAccUnit string
	JrkDecUnit string
}

func (t *DynamicLimitsStateT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	velUnitOffset := builder.CreateString(t.VelUnit)
	accUnitOffset := builder.CreateString(t.AccUnit)
	decUnitOffset := builder.CreateString(t.DecUnit)
	jrkAccUnitOffset := builder.CreateString(t.JrkAccUnit)
	jrkDecUnitOffset := builder.CreateString(t.JrkDecUnit)
	DynamicLimitsStateStart(builder)
	DynamicLimitsStateAddVel(builder, t.Vel)
	DynamicLimitsStateAddAcc(builder, t.Acc)
	DynamicLimitsStateAddDec(builder, t.Dec)
	DynamicLimitsStateAddJrkAcc(builder, t.JrkAcc)
	DynamicLimitsStateAddJrkDec(builder, t.JrkDec)
	DynamicLimitsStateAddVelUnit(builder, velUnitOffset)
	DynamicLimitsStateAddAccUnit(builder, accUnitOffset)
	DynamicLimitsStateAddDecUnit(builder, decUnitOffset)
	DynamicLimitsStateAddJrkAccUnit(builder, jrkAccUnitOffset)
	DynamicLimitsStateAddJrkDecUnit(builder, jrkDecUnitOffset)
	return DynamicLimitsStateEnd(builder)
}

func (rcv *DynamicLimitsState) UnPackTo(t *DynamicLimitsStateT) {
	t.Vel = rcv.Vel()
	t.Acc = rcv.Acc()
	t.Dec = rcv.Dec()
	t.JrkAcc = rcv.JrkAcc()
	t.JrkDec = rcv.JrkDec()
	t.VelUnit = string(rcv.VelUnit())
	t.AccUnit = string(rcv.AccUnit())
	t.DecUnit = string(rcv.DecUnit())
	t.JrkAccUnit = string(rcv.JrkAccUnit())
	t.JrkDecUnit = string(rcv.JrkDecUnit())
}

func (rcv *DynamicLimitsState) UnPack() *DynamicLimitsStateT {
	if rcv == nil { return nil }
	t := &DynamicLimitsStateT{}
	rcv.UnPackTo(t)
	return t
}

type DynamicLimitsState struct {
	_tab flatbuffers.Table
}

func GetRootAsDynamicLimitsState(buf []byte, offset flatbuffers.UOffsetT) *DynamicLimitsState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DynamicLimitsState{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDynamicLimitsState(buf []byte, offset flatbuffers.UOffsetT) *DynamicLimitsState {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DynamicLimitsState{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DynamicLimitsState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DynamicLimitsState) Table() flatbuffers.Table {
	return rcv._tab
}

/// velocity limit (must be greater than zero)
func (rcv *DynamicLimitsState) Vel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// velocity limit (must be greater than zero)
func (rcv *DynamicLimitsState) MutateVel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// acceleration limit (must be greater than zero)
func (rcv *DynamicLimitsState) Acc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// acceleration limit (must be greater than zero)
func (rcv *DynamicLimitsState) MutateAcc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// deceleration limit (must be greater than zero)
func (rcv *DynamicLimitsState) Dec() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// deceleration limit (must be greater than zero)
func (rcv *DynamicLimitsState) MutateDec(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// acceleration jerk limit (must be greater than zero OR zero for not jerk limited motion)
func (rcv *DynamicLimitsState) JrkAcc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// acceleration jerk limit (must be greater than zero OR zero for not jerk limited motion)
func (rcv *DynamicLimitsState) MutateJrkAcc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// deceleration jerk limit (must be greater than zero OR zero for not jerk limited motion)
func (rcv *DynamicLimitsState) JrkDec() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// deceleration jerk limit (must be greater than zero OR zero for not jerk limited motion)
func (rcv *DynamicLimitsState) MutateJrkDec(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// unit of the velocity limit
func (rcv *DynamicLimitsState) VelUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of the velocity limit
/// unit of the acceleration limit
func (rcv *DynamicLimitsState) AccUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of the acceleration limit
/// unit of the deceleration limit
func (rcv *DynamicLimitsState) DecUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of the deceleration limit
/// unit of the acceleration jerk limit
func (rcv *DynamicLimitsState) JrkAccUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of the acceleration jerk limit
/// unit of the deceleration jerk limit
func (rcv *DynamicLimitsState) JrkDecUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of the deceleration jerk limit
func DynamicLimitsStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func DynamicLimitsStateAddVel(builder *flatbuffers.Builder, vel float64) {
	builder.PrependFloat64Slot(0, vel, 0.0)
}
func DynamicLimitsStateAddAcc(builder *flatbuffers.Builder, acc float64) {
	builder.PrependFloat64Slot(1, acc, 0.0)
}
func DynamicLimitsStateAddDec(builder *flatbuffers.Builder, dec float64) {
	builder.PrependFloat64Slot(2, dec, 0.0)
}
func DynamicLimitsStateAddJrkAcc(builder *flatbuffers.Builder, jrkAcc float64) {
	builder.PrependFloat64Slot(3, jrkAcc, 0.0)
}
func DynamicLimitsStateAddJrkDec(builder *flatbuffers.Builder, jrkDec float64) {
	builder.PrependFloat64Slot(4, jrkDec, 0.0)
}
func DynamicLimitsStateAddVelUnit(builder *flatbuffers.Builder, velUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(velUnit), 0)
}
func DynamicLimitsStateAddAccUnit(builder *flatbuffers.Builder, accUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(accUnit), 0)
}
func DynamicLimitsStateAddDecUnit(builder *flatbuffers.Builder, decUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(decUnit), 0)
}
func DynamicLimitsStateAddJrkAccUnit(builder *flatbuffers.Builder, jrkAccUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(jrkAccUnit), 0)
}
func DynamicLimitsStateAddJrkDecUnit(builder *flatbuffers.Builder, jrkDecUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(jrkDecUnit), 0)
}
func DynamicLimitsStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
