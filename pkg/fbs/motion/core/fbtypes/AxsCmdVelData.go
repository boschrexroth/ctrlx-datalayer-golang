// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of the axis velocity command
type AxsCmdVelDataT struct {
	AxsVel float64
	DriveVelMode bool
	Buffered bool
	Lim *DynamicLimitsT
}

func (t *AxsCmdVelDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	limOffset := t.Lim.Pack(builder)
	AxsCmdVelDataStart(builder)
	AxsCmdVelDataAddAxsVel(builder, t.AxsVel)
	AxsCmdVelDataAddDriveVelMode(builder, t.DriveVelMode)
	AxsCmdVelDataAddBuffered(builder, t.Buffered)
	AxsCmdVelDataAddLim(builder, limOffset)
	return AxsCmdVelDataEnd(builder)
}

func (rcv *AxsCmdVelData) UnPackTo(t *AxsCmdVelDataT) {
	t.AxsVel = rcv.AxsVel()
	t.DriveVelMode = rcv.DriveVelMode()
	t.Buffered = rcv.Buffered()
	t.Lim = rcv.Lim(nil).UnPack()
}

func (rcv *AxsCmdVelData) UnPack() *AxsCmdVelDataT {
	if rcv == nil { return nil }
	t := &AxsCmdVelDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdVelData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdVelData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdVelData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdVelData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdVelData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdVelData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdVelData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdVelData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdVelData) Table() flatbuffers.Table {
	return rcv._tab
}

/// commanded target velocity (can be negative)
func (rcv *AxsCmdVelData) AxsVel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// commanded target velocity (can be negative)
func (rcv *AxsCmdVelData) MutateAxsVel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// should this command switch/stay the drive to velocity mode (or switch/stay to position mode)?
func (rcv *AxsCmdVelData) DriveVelMode() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// should this command switch/stay the drive to velocity mode (or switch/stay to position mode)?
func (rcv *AxsCmdVelData) MutateDriveVelMode(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

/// should this be a buffered command?
func (rcv *AxsCmdVelData) Buffered() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// should this be a buffered command?
func (rcv *AxsCmdVelData) MutateBuffered(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

/// dynamic limits for the motion of this command
func (rcv *AxsCmdVelData) Lim(obj *DynamicLimits) *DynamicLimits {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DynamicLimits)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// dynamic limits for the motion of this command
func AxsCmdVelDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func AxsCmdVelDataAddAxsVel(builder *flatbuffers.Builder, axsVel float64) {
	builder.PrependFloat64Slot(0, axsVel, 0.0)
}
func AxsCmdVelDataAddDriveVelMode(builder *flatbuffers.Builder, driveVelMode bool) {
	builder.PrependBoolSlot(1, driveVelMode, false)
}
func AxsCmdVelDataAddBuffered(builder *flatbuffers.Builder, buffered bool) {
	builder.PrependBoolSlot(2, buffered, false)
}
func AxsCmdVelDataAddLim(builder *flatbuffers.Builder, lim flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(lim), 0)
}
func AxsCmdVelDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
