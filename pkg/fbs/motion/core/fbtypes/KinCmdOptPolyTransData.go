// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters for the command option PolyTrans (inserting polynomial commands between successively move commands) for kinematics
type KinCmdOptPolyTransDataT struct {
	PermType string `json:"permType"`
	Dist1 float64 `json:"dist1"`
	Dist2 float64 `json:"dist2"`
	Eps float64 `json:"eps"`
}

func (t *KinCmdOptPolyTransDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	permTypeOffset := flatbuffers.UOffsetT(0)
	if t.PermType != "" {
		permTypeOffset = builder.CreateString(t.PermType)
	}
	KinCmdOptPolyTransDataStart(builder)
	KinCmdOptPolyTransDataAddPermType(builder, permTypeOffset)
	KinCmdOptPolyTransDataAddDist1(builder, t.Dist1)
	KinCmdOptPolyTransDataAddDist2(builder, t.Dist2)
	KinCmdOptPolyTransDataAddEps(builder, t.Eps)
	return KinCmdOptPolyTransDataEnd(builder)
}

func (rcv *KinCmdOptPolyTransData) UnPackTo(t *KinCmdOptPolyTransDataT) {
	t.PermType = string(rcv.PermType())
	t.Dist1 = rcv.Dist1()
	t.Dist2 = rcv.Dist2()
	t.Eps = rcv.Eps()
}

func (rcv *KinCmdOptPolyTransData) UnPack() *KinCmdOptPolyTransDataT {
	if rcv == nil { return nil }
	t := &KinCmdOptPolyTransDataT{}
	rcv.UnPackTo(t)
	return t
}

type KinCmdOptPolyTransData struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCmdOptPolyTransData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdOptPolyTransData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCmdOptPolyTransData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCmdOptPolyTransData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdOptPolyTransData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCmdOptPolyTransData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCmdOptPolyTransData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCmdOptPolyTransData) Table() flatbuffers.Table {
	return rcv._tab
}

/// permanent type (either "PermOn" or any other string to switch off)
func (rcv *KinCmdOptPolyTransData) PermType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// permanent type (either "PermOn" or any other string to switch off)
/// optional distance D1 (distance to shorten the start of the precorner, must be greater than zero)
/// when dist1 is greater then zero, also dist2 must be greater than zero; eps must not be set in this case (or equal zero)
func (rcv *KinCmdOptPolyTransData) Dist1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 1.0
}

/// optional distance D1 (distance to shorten the start of the precorner, must be greater than zero)
/// when dist1 is greater then zero, also dist2 must be greater than zero; eps must not be set in this case (or equal zero)
func (rcv *KinCmdOptPolyTransData) MutateDist1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// optional distance D2 (distance to shorten the start of the postcorner, must be greater than zero)
/// when dist2 is greater then zero, also dist1 must be greater than zero; eps must not be set in this case (or equal zero)
func (rcv *KinCmdOptPolyTransData) Dist2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 1.0
}

/// optional distance D2 (distance to shorten the start of the postcorner, must be greater than zero)
/// when dist2 is greater then zero, also dist1 must be greater than zero; eps must not be set in this case (or equal zero)
func (rcv *KinCmdOptPolyTransData) MutateDist2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// optional distance EPS (maximum permissible tolerance eps, must be greater than zero)
/// when eps is greater then zero, than dist1 and dist2 should not be set (or equal zero)
func (rcv *KinCmdOptPolyTransData) Eps() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// optional distance EPS (maximum permissible tolerance eps, must be greater than zero)
/// when eps is greater then zero, than dist1 and dist2 should not be set (or equal zero)
func (rcv *KinCmdOptPolyTransData) MutateEps(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func KinCmdOptPolyTransDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func KinCmdOptPolyTransDataAddPermType(builder *flatbuffers.Builder, permType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(permType), 0)
}
func KinCmdOptPolyTransDataAddDist1(builder *flatbuffers.Builder, dist1 float64) {
	builder.PrependFloat64Slot(1, dist1, 1.0)
}
func KinCmdOptPolyTransDataAddDist2(builder *flatbuffers.Builder, dist2 float64) {
	builder.PrependFloat64Slot(2, dist2, 1.0)
}
func KinCmdOptPolyTransDataAddEps(builder *flatbuffers.Builder, eps float64) {
	builder.PrependFloat64Slot(3, eps, 0.0)
}
func KinCmdOptPolyTransDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
