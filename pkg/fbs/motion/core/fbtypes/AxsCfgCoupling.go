// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"

	motion__sync__fbtypes "github.com/boschrexroth/ctrlx-datalayer-golang/v2/pkg/fbs/motion/sync/fbtypes"
)

/// configuration for coupling functions for a single axis
type AxsCfgCouplingT struct {
	Gantry *AxsCfgGantryT `json:"gantry"`
	Syncmotion *motion__sync__fbtypes.AxsCfgSyncMotionT `json:"syncmotion"`
}

func (t *AxsCfgCouplingT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	gantryOffset := t.Gantry.Pack(builder)
	syncmotionOffset := t.Syncmotion.Pack(builder)
	AxsCfgCouplingStart(builder)
	AxsCfgCouplingAddGantry(builder, gantryOffset)
	AxsCfgCouplingAddSyncmotion(builder, syncmotionOffset)
	return AxsCfgCouplingEnd(builder)
}

func (rcv *AxsCfgCoupling) UnPackTo(t *AxsCfgCouplingT) {
	t.Gantry = rcv.Gantry(nil).UnPack()
	t.Syncmotion = rcv.Syncmotion(nil).UnPack()
}

func (rcv *AxsCfgCoupling) UnPack() *AxsCfgCouplingT {
	if rcv == nil { return nil }
	t := &AxsCfgCouplingT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgCoupling struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgCoupling(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgCoupling {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgCoupling{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgCoupling(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgCoupling {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgCoupling{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgCoupling) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgCoupling) Table() flatbuffers.Table {
	return rcv._tab
}

/// configuration for gantry coupling function of a single axis
func (rcv *AxsCfgCoupling) Gantry(obj *AxsCfgGantry) *AxsCfgGantry {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgGantry)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// configuration for gantry coupling function of a single axis
/// configuration for sync motion functionality for a single axis
func (rcv *AxsCfgCoupling) Syncmotion(obj *motion__sync__fbtypes.AxsCfgSyncMotion) *motion__sync__fbtypes.AxsCfgSyncMotion {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(motion__sync__fbtypes.AxsCfgSyncMotion)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// configuration for sync motion functionality for a single axis
func AxsCfgCouplingStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AxsCfgCouplingAddGantry(builder *flatbuffers.Builder, gantry flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(gantry), 0)
}
func AxsCfgCouplingAddSyncmotion(builder *flatbuffers.Builder, syncmotion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(syncmotion), 0)
}
func AxsCfgCouplingEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
