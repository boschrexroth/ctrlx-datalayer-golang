// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration values of all joint transformation sets
type KinCfgJntTrafoAllSetsT struct {
	AxsTrafoSets []*KinCfgJntTrafoSetT
}

func (t *KinCfgJntTrafoAllSetsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	axsTrafoSetsOffset := flatbuffers.UOffsetT(0)
	if t.AxsTrafoSets != nil {
		axsTrafoSetsLength := len(t.AxsTrafoSets)
		axsTrafoSetsOffsets := make([]flatbuffers.UOffsetT, axsTrafoSetsLength)
		for j := 0; j < axsTrafoSetsLength; j++ {
			axsTrafoSetsOffsets[j] = t.AxsTrafoSets[j].Pack(builder)
		}
		KinCfgJntTrafoAllSetsStartAxsTrafoSetsVector(builder, axsTrafoSetsLength)
		for j := axsTrafoSetsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(axsTrafoSetsOffsets[j])
		}
		axsTrafoSetsOffset = builder.EndVector(axsTrafoSetsLength)
	}
	KinCfgJntTrafoAllSetsStart(builder)
	KinCfgJntTrafoAllSetsAddAxsTrafoSets(builder, axsTrafoSetsOffset)
	return KinCfgJntTrafoAllSetsEnd(builder)
}

func (rcv *KinCfgJntTrafoAllSets) UnPackTo(t *KinCfgJntTrafoAllSetsT) {
	axsTrafoSetsLength := rcv.AxsTrafoSetsLength()
	t.AxsTrafoSets = make([]*KinCfgJntTrafoSetT, axsTrafoSetsLength)
	for j := 0; j < axsTrafoSetsLength; j++ {
		x := KinCfgJntTrafoSet{}
		rcv.AxsTrafoSets(&x, j)
		t.AxsTrafoSets[j] = x.UnPack()
	}
}

func (rcv *KinCfgJntTrafoAllSets) UnPack() *KinCfgJntTrafoAllSetsT {
	if rcv == nil { return nil }
	t := &KinCfgJntTrafoAllSetsT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgJntTrafoAllSets struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgJntTrafoAllSets(buf []byte, offset flatbuffers.UOffsetT) *KinCfgJntTrafoAllSets {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgJntTrafoAllSets{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgJntTrafoAllSets(buf []byte, offset flatbuffers.UOffsetT) *KinCfgJntTrafoAllSets {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgJntTrafoAllSets{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgJntTrafoAllSets) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgJntTrafoAllSets) Table() flatbuffers.Table {
	return rcv._tab
}

/// configuration values of all joint transformation sets
func (rcv *KinCfgJntTrafoAllSets) AxsTrafoSets(obj *KinCfgJntTrafoSet, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *KinCfgJntTrafoAllSets) AxsTrafoSetsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// configuration values of all joint transformation sets
func KinCfgJntTrafoAllSetsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func KinCfgJntTrafoAllSetsAddAxsTrafoSets(builder *flatbuffers.Builder, axsTrafoSets flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(axsTrafoSets), 0)
}
func KinCfgJntTrafoAllSetsStartAxsTrafoSetsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinCfgJntTrafoAllSetsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
