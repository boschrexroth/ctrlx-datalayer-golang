// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	"bytes"
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of a single set for the belt coordinate system
type SysCfgBeltCsSetT struct {
	SetName string `json:"setName"`
	OffsetXyz []float64 `json:"offsetXYZ"`
	Orientation []float64 `json:"orientation"`
	OffsetAux []float64 `json:"offsetAux"`
	OffsetXyzunits []string `json:"offsetXYZUnits"`
	OrientationUnits []string `json:"orientationUnits"`
	OffsetAuxUnits []string `json:"offsetAuxUnits"`
}

func (t *SysCfgBeltCsSetT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	setNameOffset := flatbuffers.UOffsetT(0)
	if t.SetName != "" {
		setNameOffset = builder.CreateString(t.SetName)
	}
	offsetXyzOffset := flatbuffers.UOffsetT(0)
	if t.OffsetXyz != nil {
		offsetXyzLength := len(t.OffsetXyz)
		SysCfgBeltCsSetStartOffsetXyzVector(builder, offsetXyzLength)
		for j := offsetXyzLength - 1; j >= 0; j-- {
			builder.PrependFloat64(t.OffsetXyz[j])
		}
		offsetXyzOffset = builder.EndVector(offsetXyzLength)
	}
	orientationOffset := flatbuffers.UOffsetT(0)
	if t.Orientation != nil {
		orientationLength := len(t.Orientation)
		SysCfgBeltCsSetStartOrientationVector(builder, orientationLength)
		for j := orientationLength - 1; j >= 0; j-- {
			builder.PrependFloat64(t.Orientation[j])
		}
		orientationOffset = builder.EndVector(orientationLength)
	}
	offsetAuxOffset := flatbuffers.UOffsetT(0)
	if t.OffsetAux != nil {
		offsetAuxLength := len(t.OffsetAux)
		SysCfgBeltCsSetStartOffsetAuxVector(builder, offsetAuxLength)
		for j := offsetAuxLength - 1; j >= 0; j-- {
			builder.PrependFloat64(t.OffsetAux[j])
		}
		offsetAuxOffset = builder.EndVector(offsetAuxLength)
	}
	offsetXyzunitsOffset := flatbuffers.UOffsetT(0)
	if t.OffsetXyzunits != nil {
		offsetXyzunitsLength := len(t.OffsetXyzunits)
		offsetXyzunitsOffsets := make([]flatbuffers.UOffsetT, offsetXyzunitsLength)
		for j := 0; j < offsetXyzunitsLength; j++ {
			offsetXyzunitsOffsets[j] = builder.CreateString(t.OffsetXyzunits[j])
		}
		SysCfgBeltCsSetStartOffsetXyzunitsVector(builder, offsetXyzunitsLength)
		for j := offsetXyzunitsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(offsetXyzunitsOffsets[j])
		}
		offsetXyzunitsOffset = builder.EndVector(offsetXyzunitsLength)
	}
	orientationUnitsOffset := flatbuffers.UOffsetT(0)
	if t.OrientationUnits != nil {
		orientationUnitsLength := len(t.OrientationUnits)
		orientationUnitsOffsets := make([]flatbuffers.UOffsetT, orientationUnitsLength)
		for j := 0; j < orientationUnitsLength; j++ {
			orientationUnitsOffsets[j] = builder.CreateString(t.OrientationUnits[j])
		}
		SysCfgBeltCsSetStartOrientationUnitsVector(builder, orientationUnitsLength)
		for j := orientationUnitsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(orientationUnitsOffsets[j])
		}
		orientationUnitsOffset = builder.EndVector(orientationUnitsLength)
	}
	offsetAuxUnitsOffset := flatbuffers.UOffsetT(0)
	if t.OffsetAuxUnits != nil {
		offsetAuxUnitsLength := len(t.OffsetAuxUnits)
		offsetAuxUnitsOffsets := make([]flatbuffers.UOffsetT, offsetAuxUnitsLength)
		for j := 0; j < offsetAuxUnitsLength; j++ {
			offsetAuxUnitsOffsets[j] = builder.CreateString(t.OffsetAuxUnits[j])
		}
		SysCfgBeltCsSetStartOffsetAuxUnitsVector(builder, offsetAuxUnitsLength)
		for j := offsetAuxUnitsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(offsetAuxUnitsOffsets[j])
		}
		offsetAuxUnitsOffset = builder.EndVector(offsetAuxUnitsLength)
	}
	SysCfgBeltCsSetStart(builder)
	SysCfgBeltCsSetAddSetName(builder, setNameOffset)
	SysCfgBeltCsSetAddOffsetXyz(builder, offsetXyzOffset)
	SysCfgBeltCsSetAddOrientation(builder, orientationOffset)
	SysCfgBeltCsSetAddOffsetAux(builder, offsetAuxOffset)
	SysCfgBeltCsSetAddOffsetXyzunits(builder, offsetXyzunitsOffset)
	SysCfgBeltCsSetAddOrientationUnits(builder, orientationUnitsOffset)
	SysCfgBeltCsSetAddOffsetAuxUnits(builder, offsetAuxUnitsOffset)
	return SysCfgBeltCsSetEnd(builder)
}

func (rcv *SysCfgBeltCsSet) UnPackTo(t *SysCfgBeltCsSetT) {
	t.SetName = string(rcv.SetName())
	offsetXyzLength := rcv.OffsetXyzLength()
	t.OffsetXyz = make([]float64, offsetXyzLength)
	for j := 0; j < offsetXyzLength; j++ {
		t.OffsetXyz[j] = rcv.OffsetXyz(j)
	}
	orientationLength := rcv.OrientationLength()
	t.Orientation = make([]float64, orientationLength)
	for j := 0; j < orientationLength; j++ {
		t.Orientation[j] = rcv.Orientation(j)
	}
	offsetAuxLength := rcv.OffsetAuxLength()
	t.OffsetAux = make([]float64, offsetAuxLength)
	for j := 0; j < offsetAuxLength; j++ {
		t.OffsetAux[j] = rcv.OffsetAux(j)
	}
	offsetXyzunitsLength := rcv.OffsetXyzunitsLength()
	t.OffsetXyzunits = make([]string, offsetXyzunitsLength)
	for j := 0; j < offsetXyzunitsLength; j++ {
		t.OffsetXyzunits[j] = string(rcv.OffsetXyzunits(j))
	}
	orientationUnitsLength := rcv.OrientationUnitsLength()
	t.OrientationUnits = make([]string, orientationUnitsLength)
	for j := 0; j < orientationUnitsLength; j++ {
		t.OrientationUnits[j] = string(rcv.OrientationUnits(j))
	}
	offsetAuxUnitsLength := rcv.OffsetAuxUnitsLength()
	t.OffsetAuxUnits = make([]string, offsetAuxUnitsLength)
	for j := 0; j < offsetAuxUnitsLength; j++ {
		t.OffsetAuxUnits[j] = string(rcv.OffsetAuxUnits(j))
	}
}

func (rcv *SysCfgBeltCsSet) UnPack() *SysCfgBeltCsSetT {
	if rcv == nil { return nil }
	t := &SysCfgBeltCsSetT{}
	rcv.UnPackTo(t)
	return t
}

type SysCfgBeltCsSet struct {
	_tab flatbuffers.Table
}

func GetRootAsSysCfgBeltCsSet(buf []byte, offset flatbuffers.UOffsetT) *SysCfgBeltCsSet {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SysCfgBeltCsSet{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSysCfgBeltCsSet(buf []byte, offset flatbuffers.UOffsetT) *SysCfgBeltCsSet {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SysCfgBeltCsSet{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SysCfgBeltCsSet) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SysCfgBeltCsSet) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the set (required for load/save)
func (rcv *SysCfgBeltCsSet) SetName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the set (required for load/save)
func SysCfgBeltCsSetKeyCompare(o1, o2 flatbuffers.UOffsetT, buf []byte) bool {
	obj1 := &SysCfgBeltCsSet{}
	obj2 := &SysCfgBeltCsSet{}
	obj1.Init(buf, flatbuffers.UOffsetT(len(buf)) - o1)
	obj2.Init(buf, flatbuffers.UOffsetT(len(buf)) - o2)
	return string(obj1.SetName()) < string(obj2.SetName())
}

func (rcv *SysCfgBeltCsSet) LookupByKey(key string, vectorLocation flatbuffers.UOffsetT, buf []byte) bool {
	span := flatbuffers.GetUOffsetT(buf[vectorLocation - 4:])
	start := flatbuffers.UOffsetT(0)
	bKey := []byte(key)
	for span != 0 {
		middle := span / 2
		tableOffset := flatbuffers.GetIndirectOffset(buf, vectorLocation+ 4 * (start + middle))
		obj := &SysCfgBeltCsSet{}
		obj.Init(buf, tableOffset)
		comp := bytes.Compare(obj.SetName(), bKey)
		if comp > 0 {
			span = middle
		} else if comp < 0 {
			middle += 1
			start += middle
			span -= middle
		} else {
			rcv.Init(buf, tableOffset)
			return true
		}
	}
	return false
}

/// XYZ offsets (must be exactly three values)
func (rcv *SysCfgBeltCsSet) OffsetXyz(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SysCfgBeltCsSet) OffsetXyzLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// XYZ offsets (must be exactly three values)
func (rcv *SysCfgBeltCsSet) MutateOffsetXyz(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

/// rotation offsets as Euler angles ZY'Z'' (must be exactly three values)
func (rcv *SysCfgBeltCsSet) Orientation(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SysCfgBeltCsSet) OrientationLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// rotation offsets as Euler angles ZY'Z'' (must be exactly three values)
func (rcv *SysCfgBeltCsSet) MutateOrientation(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

/// offsets for auxilary axes (must be exactly 10 values)
func (rcv *SysCfgBeltCsSet) OffsetAux(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SysCfgBeltCsSet) OffsetAuxLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// offsets for auxilary axes (must be exactly 10 values)
func (rcv *SysCfgBeltCsSet) MutateOffsetAux(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

/// Units for XYZ offsets (must be exactly three values)
func (rcv *SysCfgBeltCsSet) OffsetXyzunits(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SysCfgBeltCsSet) OffsetXyzunitsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Units for XYZ offsets (must be exactly three values)
/// Units for rotation offsets (must be exactly three values)
func (rcv *SysCfgBeltCsSet) OrientationUnits(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SysCfgBeltCsSet) OrientationUnitsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Units for rotation offsets (must be exactly three values)
/// Units for offsets for auxilary axes (must be exactly 10 values)
func (rcv *SysCfgBeltCsSet) OffsetAuxUnits(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SysCfgBeltCsSet) OffsetAuxUnitsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Units for offsets for auxilary axes (must be exactly 10 values)
func SysCfgBeltCsSetStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func SysCfgBeltCsSetAddSetName(builder *flatbuffers.Builder, setName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(setName), 0)
}
func SysCfgBeltCsSetAddOffsetXyz(builder *flatbuffers.Builder, offsetXyz flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(offsetXyz), 0)
}
func SysCfgBeltCsSetStartOffsetXyzVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SysCfgBeltCsSetAddOrientation(builder *flatbuffers.Builder, orientation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(orientation), 0)
}
func SysCfgBeltCsSetStartOrientationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SysCfgBeltCsSetAddOffsetAux(builder *flatbuffers.Builder, offsetAux flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(offsetAux), 0)
}
func SysCfgBeltCsSetStartOffsetAuxVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SysCfgBeltCsSetAddOffsetXyzunits(builder *flatbuffers.Builder, offsetXyzunits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(offsetXyzunits), 0)
}
func SysCfgBeltCsSetStartOffsetXyzunitsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SysCfgBeltCsSetAddOrientationUnits(builder *flatbuffers.Builder, orientationUnits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(orientationUnits), 0)
}
func SysCfgBeltCsSetStartOrientationUnitsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SysCfgBeltCsSetAddOffsetAuxUnits(builder *flatbuffers.Builder, offsetAuxUnits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(offsetAuxUnits), 0)
}
func SysCfgBeltCsSetStartOffsetAuxUnitsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SysCfgBeltCsSetEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
