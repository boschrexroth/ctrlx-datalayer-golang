// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// command source (by which interface was this command inserted into the system (e.g. "PLC"))
type CmdSourceT struct {
	Type string
	Name string
	Line uint64
}

func (t *CmdSourceT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	typeOffset := builder.CreateString(t.Type)
	nameOffset := builder.CreateString(t.Name)
	CmdSourceStart(builder)
	CmdSourceAddType(builder, typeOffset)
	CmdSourceAddName(builder, nameOffset)
	CmdSourceAddLine(builder, t.Line)
	return CmdSourceEnd(builder)
}

func (rcv *CmdSource) UnPackTo(t *CmdSourceT) {
	t.Type = string(rcv.Type())
	t.Name = string(rcv.Name())
	t.Line = rcv.Line()
}

func (rcv *CmdSource) UnPack() *CmdSourceT {
	if rcv == nil { return nil }
	t := &CmdSourceT{}
	rcv.UnPackTo(t)
	return t
}

type CmdSource struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdSource(buf []byte, offset flatbuffers.UOffsetT) *CmdSource {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdSource{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCmdSource(buf []byte, offset flatbuffers.UOffsetT) *CmdSource {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdSource{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CmdSource) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdSource) Table() flatbuffers.Table {
	return rcv._tab
}

/// interface type (e.g. "PLC" or "SCRIPT")
func (rcv *CmdSource) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// interface type (e.g. "PLC" or "SCRIPT")
/// name identifier (depends on interface type, e.g. this is the file name of a script when interface type is "SCRIPT")
func (rcv *CmdSource) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name identifier (depends on interface type, e.g. this is the file name of a script when interface type is "SCRIPT")
/// line identifier (depends on interface type, e.g. this is the line where the command is in the script when interface type is "SCRIPT")
func (rcv *CmdSource) Line() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// line identifier (depends on interface type, e.g. this is the line where the command is in the script when interface type is "SCRIPT")
func (rcv *CmdSource) MutateLine(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func CmdSourceStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func CmdSourceAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(type_), 0)
}
func CmdSourceAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func CmdSourceAddLine(builder *flatbuffers.Builder, line uint64) {
	builder.PrependUint64Slot(2, line, 0)
}
func CmdSourceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
