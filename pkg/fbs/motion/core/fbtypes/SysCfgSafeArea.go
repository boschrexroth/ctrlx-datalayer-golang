// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of a single safe area or work area
type SysCfgSafeAreaT struct {
	Name string
	CoordSystem string
	Type SafeAreaType
	Box []*SysCfgSafeAreaBoxT
}

func (t *SysCfgSafeAreaT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	coordSystemOffset := builder.CreateString(t.CoordSystem)
	boxOffset := flatbuffers.UOffsetT(0)
	if t.Box != nil {
		boxLength := len(t.Box)
		boxOffsets := make([]flatbuffers.UOffsetT, boxLength)
		for j := 0; j < boxLength; j++ {
			boxOffsets[j] = t.Box[j].Pack(builder)
		}
		SysCfgSafeAreaStartBoxVector(builder, boxLength)
		for j := boxLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(boxOffsets[j])
		}
		boxOffset = builder.EndVector(boxLength)
	}
	SysCfgSafeAreaStart(builder)
	SysCfgSafeAreaAddName(builder, nameOffset)
	SysCfgSafeAreaAddCoordSystem(builder, coordSystemOffset)
	SysCfgSafeAreaAddType(builder, t.Type)
	SysCfgSafeAreaAddBox(builder, boxOffset)
	return SysCfgSafeAreaEnd(builder)
}

func (rcv *SysCfgSafeArea) UnPackTo(t *SysCfgSafeAreaT) {
	t.Name = string(rcv.Name())
	t.CoordSystem = string(rcv.CoordSystem())
	t.Type = rcv.Type()
	boxLength := rcv.BoxLength()
	t.Box = make([]*SysCfgSafeAreaBoxT, boxLength)
	for j := 0; j < boxLength; j++ {
		x := SysCfgSafeAreaBox{}
		rcv.Box(&x, j)
		t.Box[j] = x.UnPack()
	}
}

func (rcv *SysCfgSafeArea) UnPack() *SysCfgSafeAreaT {
	if rcv == nil { return nil }
	t := &SysCfgSafeAreaT{}
	rcv.UnPackTo(t)
	return t
}

type SysCfgSafeArea struct {
	_tab flatbuffers.Table
}

func GetRootAsSysCfgSafeArea(buf []byte, offset flatbuffers.UOffsetT) *SysCfgSafeArea {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SysCfgSafeArea{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSysCfgSafeArea(buf []byte, offset flatbuffers.UOffsetT) *SysCfgSafeArea {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SysCfgSafeArea{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SysCfgSafeArea) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SysCfgSafeArea) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the safe area (filled when reading; optional for writing [content is always ignored])
func (rcv *SysCfgSafeArea) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the safe area (filled when reading; optional for writing [content is always ignored])
/// coordinate system of the safe area (default is "MCS")
func (rcv *SysCfgSafeArea) CoordSystem() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// coordinate system of the safe area (default is "MCS")
/// type of the safe area (default is "safe area")
func (rcv *SysCfgSafeArea) Type() SafeAreaType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return SafeAreaType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// type of the safe area (default is "safe area")
func (rcv *SysCfgSafeArea) MutateType(n SafeAreaType) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

/// box data, that defines the borders of the safe area; should be exactly 16 (for ACS) or 3 for (MCS, WCS and PCS)
func (rcv *SysCfgSafeArea) Box(obj *SysCfgSafeAreaBox, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SysCfgSafeArea) BoxLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// box data, that defines the borders of the safe area; should be exactly 16 (for ACS) or 3 for (MCS, WCS and PCS)
func SysCfgSafeAreaStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SysCfgSafeAreaAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func SysCfgSafeAreaAddCoordSystem(builder *flatbuffers.Builder, coordSystem flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(coordSystem), 0)
}
func SysCfgSafeAreaAddType(builder *flatbuffers.Builder, type_ SafeAreaType) {
	builder.PrependInt8Slot(2, int8(type_), 0)
}
func SysCfgSafeAreaAddBox(builder *flatbuffers.Builder, box flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(box), 0)
}
func SysCfgSafeAreaStartBoxVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SysCfgSafeAreaEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
