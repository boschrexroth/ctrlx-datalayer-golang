// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// informations on a single diagnosis message
type JointTrafoCheckDiagT struct {
	MainDiagCode uint32 `json:"mainDiagCode"`
	DetailedDiagCode uint32 `json:"detailedDiagCode"`
	ObjUri string `json:"objURI"`
	AddInfo string `json:"addInfo"`
}

func (t *JointTrafoCheckDiagT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	objUriOffset := flatbuffers.UOffsetT(0)
	if t.ObjUri != "" {
		objUriOffset = builder.CreateString(t.ObjUri)
	}
	addInfoOffset := flatbuffers.UOffsetT(0)
	if t.AddInfo != "" {
		addInfoOffset = builder.CreateString(t.AddInfo)
	}
	JointTrafoCheckDiagStart(builder)
	JointTrafoCheckDiagAddMainDiagCode(builder, t.MainDiagCode)
	JointTrafoCheckDiagAddDetailedDiagCode(builder, t.DetailedDiagCode)
	JointTrafoCheckDiagAddObjUri(builder, objUriOffset)
	JointTrafoCheckDiagAddAddInfo(builder, addInfoOffset)
	return JointTrafoCheckDiagEnd(builder)
}

func (rcv *JointTrafoCheckDiag) UnPackTo(t *JointTrafoCheckDiagT) {
	t.MainDiagCode = rcv.MainDiagCode()
	t.DetailedDiagCode = rcv.DetailedDiagCode()
	t.ObjUri = string(rcv.ObjUri())
	t.AddInfo = string(rcv.AddInfo())
}

func (rcv *JointTrafoCheckDiag) UnPack() *JointTrafoCheckDiagT {
	if rcv == nil { return nil }
	t := &JointTrafoCheckDiagT{}
	rcv.UnPackTo(t)
	return t
}

type JointTrafoCheckDiag struct {
	_tab flatbuffers.Table
}

func GetRootAsJointTrafoCheckDiag(buf []byte, offset flatbuffers.UOffsetT) *JointTrafoCheckDiag {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &JointTrafoCheckDiag{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsJointTrafoCheckDiag(buf []byte, offset flatbuffers.UOffsetT) *JointTrafoCheckDiag {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &JointTrafoCheckDiag{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *JointTrafoCheckDiag) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *JointTrafoCheckDiag) Table() flatbuffers.Table {
	return rcv._tab
}

/// main diagnosis code (refer to the diagnosis data base)
func (rcv *JointTrafoCheckDiag) MainDiagCode() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// main diagnosis code (refer to the diagnosis data base)
func (rcv *JointTrafoCheckDiag) MutateMainDiagCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// detailed diagnosis code (refer to the diagnosis data base)
func (rcv *JointTrafoCheckDiag) DetailedDiagCode() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// detailed diagnosis code (refer to the diagnosis data base)
func (rcv *JointTrafoCheckDiag) MutateDetailedDiagCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

/// URI of the invalid entry
func (rcv *JointTrafoCheckDiag) ObjUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// URI of the invalid entry
/// additional information on the error cause to help the user
func (rcv *JointTrafoCheckDiag) AddInfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// additional information on the error cause to help the user
func JointTrafoCheckDiagStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func JointTrafoCheckDiagAddMainDiagCode(builder *flatbuffers.Builder, mainDiagCode uint32) {
	builder.PrependUint32Slot(0, mainDiagCode, 0)
}
func JointTrafoCheckDiagAddDetailedDiagCode(builder *flatbuffers.Builder, detailedDiagCode uint32) {
	builder.PrependUint32Slot(1, detailedDiagCode, 0)
}
func JointTrafoCheckDiagAddObjUri(builder *flatbuffers.Builder, objUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(objUri), 0)
}
func JointTrafoCheckDiagAddAddInfo(builder *flatbuffers.Builder, addInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(addInfo), 0)
}
func JointTrafoCheckDiagEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
