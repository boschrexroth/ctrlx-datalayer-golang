// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Configuration of motion kernel monitoring and reaction of drive function 'safe limited speed'
type KinCfgDriveSLST struct {
	Vel float64 `json:"vel"`
	VelUnit string `json:"velUnit"`
}

func (t *KinCfgDriveSLST) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	velUnitOffset := flatbuffers.UOffsetT(0)
	if t.VelUnit != "" {
		velUnitOffset = builder.CreateString(t.VelUnit)
	}
	KinCfgDriveSLSStart(builder)
	KinCfgDriveSLSAddVel(builder, t.Vel)
	KinCfgDriveSLSAddVelUnit(builder, velUnitOffset)
	return KinCfgDriveSLSEnd(builder)
}

func (rcv *KinCfgDriveSLS) UnPackTo(t *KinCfgDriveSLST) {
	t.Vel = rcv.Vel()
	t.VelUnit = string(rcv.VelUnit())
}

func (rcv *KinCfgDriveSLS) UnPack() *KinCfgDriveSLST {
	if rcv == nil { return nil }
	t := &KinCfgDriveSLST{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgDriveSLS struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgDriveSLS(buf []byte, offset flatbuffers.UOffsetT) *KinCfgDriveSLS {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgDriveSLS{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgDriveSLS(buf []byte, offset flatbuffers.UOffsetT) *KinCfgDriveSLS {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgDriveSLS{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgDriveSLS) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgDriveSLS) Table() flatbuffers.Table {
	return rcv._tab
}

/// velocity limit for the kinematic in the motion kernel, when drive function 'safe limited speed' of an axis is active
func (rcv *KinCfgDriveSLS) Vel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// velocity limit for the kinematic in the motion kernel, when drive function 'safe limited speed' of an axis is active
func (rcv *KinCfgDriveSLS) MutateVel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// unit of vel
func (rcv *KinCfgDriveSLS) VelUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of vel
func KinCfgDriveSLSStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KinCfgDriveSLSAddVel(builder *flatbuffers.Builder, vel float64) {
	builder.PrependFloat64Slot(0, vel, 0.0)
}
func KinCfgDriveSLSAddVelUnit(builder *flatbuffers.Builder, velUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(velUnit), 0)
}
func KinCfgDriveSLSEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
