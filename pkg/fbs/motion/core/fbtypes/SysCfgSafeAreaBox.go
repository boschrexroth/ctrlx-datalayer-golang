// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of the limits in a single dimension of the box of a single safe area
type SysCfgSafeAreaBoxT struct {
	Min float64
	Max float64
	Unit string
	Active bool
}

func (t *SysCfgSafeAreaBoxT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	unitOffset := builder.CreateString(t.Unit)
	SysCfgSafeAreaBoxStart(builder)
	SysCfgSafeAreaBoxAddMin(builder, t.Min)
	SysCfgSafeAreaBoxAddMax(builder, t.Max)
	SysCfgSafeAreaBoxAddUnit(builder, unitOffset)
	SysCfgSafeAreaBoxAddActive(builder, t.Active)
	return SysCfgSafeAreaBoxEnd(builder)
}

func (rcv *SysCfgSafeAreaBox) UnPackTo(t *SysCfgSafeAreaBoxT) {
	t.Min = rcv.Min()
	t.Max = rcv.Max()
	t.Unit = string(rcv.Unit())
	t.Active = rcv.Active()
}

func (rcv *SysCfgSafeAreaBox) UnPack() *SysCfgSafeAreaBoxT {
	if rcv == nil { return nil }
	t := &SysCfgSafeAreaBoxT{}
	rcv.UnPackTo(t)
	return t
}

type SysCfgSafeAreaBox struct {
	_tab flatbuffers.Table
}

func GetRootAsSysCfgSafeAreaBox(buf []byte, offset flatbuffers.UOffsetT) *SysCfgSafeAreaBox {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SysCfgSafeAreaBox{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSysCfgSafeAreaBox(buf []byte, offset flatbuffers.UOffsetT) *SysCfgSafeAreaBox {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SysCfgSafeAreaBox{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SysCfgSafeAreaBox) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SysCfgSafeAreaBox) Table() flatbuffers.Table {
	return rcv._tab
}

/// minimum limit in this dimension of the box
func (rcv *SysCfgSafeAreaBox) Min() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// minimum limit in this dimension of the box
func (rcv *SysCfgSafeAreaBox) MutateMin(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// maximum limit in this dimension of the box
func (rcv *SysCfgSafeAreaBox) Max() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// maximum limit in this dimension of the box
func (rcv *SysCfgSafeAreaBox) MutateMax(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// unit of min and max as configured
func (rcv *SysCfgSafeAreaBox) Unit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of min and max as configured
/// should this dimension being checked?
func (rcv *SysCfgSafeAreaBox) Active() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// should this dimension being checked?
func (rcv *SysCfgSafeAreaBox) MutateActive(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func SysCfgSafeAreaBoxStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SysCfgSafeAreaBoxAddMin(builder *flatbuffers.Builder, min float64) {
	builder.PrependFloat64Slot(0, min, 0.0)
}
func SysCfgSafeAreaBoxAddMax(builder *flatbuffers.Builder, max float64) {
	builder.PrependFloat64Slot(1, max, 0.0)
}
func SysCfgSafeAreaBoxAddUnit(builder *flatbuffers.Builder, unit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(unit), 0)
}
func SysCfgSafeAreaBoxAddActive(builder *flatbuffers.Builder, active bool) {
	builder.PrependBoolSlot(3, active, false)
}
func SysCfgSafeAreaBoxEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
