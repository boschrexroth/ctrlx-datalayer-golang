// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	"strconv"
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Use a union for a single value (which might have one of the supported types)
type ExternalConfigSingleItemValue byte

const (
	ExternalConfigSingleItemValueNONE                           ExternalConfigSingleItemValue = 0
	ExternalConfigSingleItemValueExternalConfigInt64            ExternalConfigSingleItemValue = 1
	ExternalConfigSingleItemValueExternalConfigDouble           ExternalConfigSingleItemValue = 2
	ExternalConfigSingleItemValueExternalConfigDoubleUnit       ExternalConfigSingleItemValue = 3
	ExternalConfigSingleItemValueExternalConfigString           ExternalConfigSingleItemValue = 4
	ExternalConfigSingleItemValueExternalConfigInt64Vector      ExternalConfigSingleItemValue = 5
	ExternalConfigSingleItemValueExternalConfigDoubleVector     ExternalConfigSingleItemValue = 6
	ExternalConfigSingleItemValueExternalConfigDoubleUnitVector ExternalConfigSingleItemValue = 7
	ExternalConfigSingleItemValueExternalConfigStringVector     ExternalConfigSingleItemValue = 8
)

var EnumNamesExternalConfigSingleItemValue = map[ExternalConfigSingleItemValue]string{
	ExternalConfigSingleItemValueNONE:                           "NONE",
	ExternalConfigSingleItemValueExternalConfigInt64:            "ExternalConfigInt64",
	ExternalConfigSingleItemValueExternalConfigDouble:           "ExternalConfigDouble",
	ExternalConfigSingleItemValueExternalConfigDoubleUnit:       "ExternalConfigDoubleUnit",
	ExternalConfigSingleItemValueExternalConfigString:           "ExternalConfigString",
	ExternalConfigSingleItemValueExternalConfigInt64Vector:      "ExternalConfigInt64Vector",
	ExternalConfigSingleItemValueExternalConfigDoubleVector:     "ExternalConfigDoubleVector",
	ExternalConfigSingleItemValueExternalConfigDoubleUnitVector: "ExternalConfigDoubleUnitVector",
	ExternalConfigSingleItemValueExternalConfigStringVector:     "ExternalConfigStringVector",
}

var EnumValuesExternalConfigSingleItemValue = map[string]ExternalConfigSingleItemValue{
	"NONE":                           ExternalConfigSingleItemValueNONE,
	"ExternalConfigInt64":            ExternalConfigSingleItemValueExternalConfigInt64,
	"ExternalConfigDouble":           ExternalConfigSingleItemValueExternalConfigDouble,
	"ExternalConfigDoubleUnit":       ExternalConfigSingleItemValueExternalConfigDoubleUnit,
	"ExternalConfigString":           ExternalConfigSingleItemValueExternalConfigString,
	"ExternalConfigInt64Vector":      ExternalConfigSingleItemValueExternalConfigInt64Vector,
	"ExternalConfigDoubleVector":     ExternalConfigSingleItemValueExternalConfigDoubleVector,
	"ExternalConfigDoubleUnitVector": ExternalConfigSingleItemValueExternalConfigDoubleUnitVector,
	"ExternalConfigStringVector":     ExternalConfigSingleItemValueExternalConfigStringVector,
}

func (v ExternalConfigSingleItemValue) String() string {
	if s, ok := EnumNamesExternalConfigSingleItemValue[v]; ok {
		return s
	}
	return "ExternalConfigSingleItemValue(" + strconv.FormatInt(int64(v), 10) + ")"
}

type ExternalConfigSingleItemValueT struct {
	Type ExternalConfigSingleItemValue
	Value interface{}
}

func (t *ExternalConfigSingleItemValueT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case ExternalConfigSingleItemValueExternalConfigInt64:
		return t.Value.(*ExternalConfigInt64T).Pack(builder)
	case ExternalConfigSingleItemValueExternalConfigDouble:
		return t.Value.(*ExternalConfigDoubleT).Pack(builder)
	case ExternalConfigSingleItemValueExternalConfigDoubleUnit:
		return t.Value.(*ExternalConfigDoubleUnitT).Pack(builder)
	case ExternalConfigSingleItemValueExternalConfigString:
		return t.Value.(*ExternalConfigStringT).Pack(builder)
	case ExternalConfigSingleItemValueExternalConfigInt64Vector:
		return t.Value.(*ExternalConfigInt64VectorT).Pack(builder)
	case ExternalConfigSingleItemValueExternalConfigDoubleVector:
		return t.Value.(*ExternalConfigDoubleVectorT).Pack(builder)
	case ExternalConfigSingleItemValueExternalConfigDoubleUnitVector:
		return t.Value.(*ExternalConfigDoubleUnitVectorT).Pack(builder)
	case ExternalConfigSingleItemValueExternalConfigStringVector:
		return t.Value.(*ExternalConfigStringVectorT).Pack(builder)
	}
	return 0
}

func (rcv ExternalConfigSingleItemValue) UnPack(table flatbuffers.Table) *ExternalConfigSingleItemValueT {
	switch rcv {
	case ExternalConfigSingleItemValueExternalConfigInt64:
		var x ExternalConfigInt64
		x.Init(table.Bytes, table.Pos)
		return &ExternalConfigSingleItemValueT{ Type: ExternalConfigSingleItemValueExternalConfigInt64, Value: x.UnPack() }
	case ExternalConfigSingleItemValueExternalConfigDouble:
		var x ExternalConfigDouble
		x.Init(table.Bytes, table.Pos)
		return &ExternalConfigSingleItemValueT{ Type: ExternalConfigSingleItemValueExternalConfigDouble, Value: x.UnPack() }
	case ExternalConfigSingleItemValueExternalConfigDoubleUnit:
		var x ExternalConfigDoubleUnit
		x.Init(table.Bytes, table.Pos)
		return &ExternalConfigSingleItemValueT{ Type: ExternalConfigSingleItemValueExternalConfigDoubleUnit, Value: x.UnPack() }
	case ExternalConfigSingleItemValueExternalConfigString:
		var x ExternalConfigString
		x.Init(table.Bytes, table.Pos)
		return &ExternalConfigSingleItemValueT{ Type: ExternalConfigSingleItemValueExternalConfigString, Value: x.UnPack() }
	case ExternalConfigSingleItemValueExternalConfigInt64Vector:
		var x ExternalConfigInt64Vector
		x.Init(table.Bytes, table.Pos)
		return &ExternalConfigSingleItemValueT{ Type: ExternalConfigSingleItemValueExternalConfigInt64Vector, Value: x.UnPack() }
	case ExternalConfigSingleItemValueExternalConfigDoubleVector:
		var x ExternalConfigDoubleVector
		x.Init(table.Bytes, table.Pos)
		return &ExternalConfigSingleItemValueT{ Type: ExternalConfigSingleItemValueExternalConfigDoubleVector, Value: x.UnPack() }
	case ExternalConfigSingleItemValueExternalConfigDoubleUnitVector:
		var x ExternalConfigDoubleUnitVector
		x.Init(table.Bytes, table.Pos)
		return &ExternalConfigSingleItemValueT{ Type: ExternalConfigSingleItemValueExternalConfigDoubleUnitVector, Value: x.UnPack() }
	case ExternalConfigSingleItemValueExternalConfigStringVector:
		var x ExternalConfigStringVector
		x.Init(table.Bytes, table.Pos)
		return &ExternalConfigSingleItemValueT{ Type: ExternalConfigSingleItemValueExternalConfigStringVector, Value: x.UnPack() }
	}
	return nil
}
