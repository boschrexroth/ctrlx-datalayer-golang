// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// necessary parameters of filter
type AxsCfgFilterT struct {
	FilterType FilterType `json:"filterType"`
	CutoffFrq float64 `json:"cutoffFrq"`
	CutoffFrqUnit string `json:"cutoffFrqUnit"`
}

func (t *AxsCfgFilterT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	cutoffFrqUnitOffset := flatbuffers.UOffsetT(0)
	if t.CutoffFrqUnit != "" {
		cutoffFrqUnitOffset = builder.CreateString(t.CutoffFrqUnit)
	}
	AxsCfgFilterStart(builder)
	AxsCfgFilterAddFilterType(builder, t.FilterType)
	AxsCfgFilterAddCutoffFrq(builder, t.CutoffFrq)
	AxsCfgFilterAddCutoffFrqUnit(builder, cutoffFrqUnitOffset)
	return AxsCfgFilterEnd(builder)
}

func (rcv *AxsCfgFilter) UnPackTo(t *AxsCfgFilterT) {
	t.FilterType = rcv.FilterType()
	t.CutoffFrq = rcv.CutoffFrq()
	t.CutoffFrqUnit = string(rcv.CutoffFrqUnit())
}

func (rcv *AxsCfgFilter) UnPack() *AxsCfgFilterT {
	if rcv == nil { return nil }
	t := &AxsCfgFilterT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgFilter struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgFilter(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgFilter {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgFilter{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgFilter(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgFilter {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgFilter{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgFilter) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgFilter) Table() flatbuffers.Table {
	return rcv._tab
}

/// filter type
func (rcv *AxsCfgFilter) FilterType() FilterType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return FilterType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// filter type
func (rcv *AxsCfgFilter) MutateFilterType(n FilterType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

/// parameters
func (rcv *AxsCfgFilter) CutoffFrq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// parameters
func (rcv *AxsCfgFilter) MutateCutoffFrq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// unit of cutoff frequency
func (rcv *AxsCfgFilter) CutoffFrqUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of cutoff frequency
func AxsCfgFilterStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AxsCfgFilterAddFilterType(builder *flatbuffers.Builder, filterType FilterType) {
	builder.PrependInt8Slot(0, int8(filterType), 0)
}
func AxsCfgFilterAddCutoffFrq(builder *flatbuffers.Builder, cutoffFrq float64) {
	builder.PrependFloat64Slot(1, cutoffFrq, 0.0)
}
func AxsCfgFilterAddCutoffFrqUnit(builder *flatbuffers.Builder, cutoffFrqUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(cutoffFrqUnit), 0)
}
func AxsCfgFilterEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
