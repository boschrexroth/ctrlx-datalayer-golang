// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// General unit configuration for a motion object
type UnitCfgObjT struct {
	Default []*UnitCfgObjSingleT
}

func (t *UnitCfgObjT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	defaultOffset := flatbuffers.UOffsetT(0)
	if t.Default != nil {
		defaultLength := len(t.Default)
		defaultOffsets := make([]flatbuffers.UOffsetT, defaultLength)
		for j := 0; j < defaultLength; j++ {
			defaultOffsets[j] = t.Default[j].Pack(builder)
		}
		UnitCfgObjStartDefaultVector(builder, defaultLength)
		for j := defaultLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(defaultOffsets[j])
		}
		defaultOffset = builder.EndVector(defaultLength)
	}
	UnitCfgObjStart(builder)
	UnitCfgObjAddDefault(builder, defaultOffset)
	return UnitCfgObjEnd(builder)
}

func (rcv *UnitCfgObj) UnPackTo(t *UnitCfgObjT) {
	defaultLength := rcv.DefaultLength()
	t.Default = make([]*UnitCfgObjSingleT, defaultLength)
	for j := 0; j < defaultLength; j++ {
		x := UnitCfgObjSingle{}
		rcv.Default(&x, j)
		t.Default[j] = x.UnPack()
	}
}

func (rcv *UnitCfgObj) UnPack() *UnitCfgObjT {
	if rcv == nil { return nil }
	t := &UnitCfgObjT{}
	rcv.UnPackTo(t)
	return t
}

type UnitCfgObj struct {
	_tab flatbuffers.Table
}

func GetRootAsUnitCfgObj(buf []byte, offset flatbuffers.UOffsetT) *UnitCfgObj {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UnitCfgObj{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsUnitCfgObj(buf []byte, offset flatbuffers.UOffsetT) *UnitCfgObj {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UnitCfgObj{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *UnitCfgObj) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UnitCfgObj) Table() flatbuffers.Table {
	return rcv._tab
}

/// default units
func (rcv *UnitCfgObj) Default(obj *UnitCfgObjSingle, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *UnitCfgObj) DefaultLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// default units
func UnitCfgObjStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func UnitCfgObjAddDefault(builder *flatbuffers.Builder, default_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(default_), 0)
}
func UnitCfgObjStartDefaultVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func UnitCfgObjEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
