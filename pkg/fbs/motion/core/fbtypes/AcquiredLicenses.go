// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// all currently acquired licenses (motion must be in state RUNNING)
type AcquiredLicensesT struct {
	Licenses []*SingleLicenseT `json:"licenses"`
}

func (t *AcquiredLicensesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	licensesOffset := flatbuffers.UOffsetT(0)
	if t.Licenses != nil {
		licensesLength := len(t.Licenses)
		licensesOffsets := make([]flatbuffers.UOffsetT, licensesLength)
		for j := 0; j < licensesLength; j++ {
			licensesOffsets[j] = t.Licenses[j].Pack(builder)
		}
		AcquiredLicensesStartLicensesVector(builder, licensesLength)
		for j := licensesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(licensesOffsets[j])
		}
		licensesOffset = builder.EndVector(licensesLength)
	}
	AcquiredLicensesStart(builder)
	AcquiredLicensesAddLicenses(builder, licensesOffset)
	return AcquiredLicensesEnd(builder)
}

func (rcv *AcquiredLicenses) UnPackTo(t *AcquiredLicensesT) {
	licensesLength := rcv.LicensesLength()
	t.Licenses = make([]*SingleLicenseT, licensesLength)
	for j := 0; j < licensesLength; j++ {
		x := SingleLicense{}
		rcv.Licenses(&x, j)
		t.Licenses[j] = x.UnPack()
	}
}

func (rcv *AcquiredLicenses) UnPack() *AcquiredLicensesT {
	if rcv == nil { return nil }
	t := &AcquiredLicensesT{}
	rcv.UnPackTo(t)
	return t
}

type AcquiredLicenses struct {
	_tab flatbuffers.Table
}

func GetRootAsAcquiredLicenses(buf []byte, offset flatbuffers.UOffsetT) *AcquiredLicenses {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AcquiredLicenses{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAcquiredLicenses(buf []byte, offset flatbuffers.UOffsetT) *AcquiredLicenses {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AcquiredLicenses{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AcquiredLicenses) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AcquiredLicenses) Table() flatbuffers.Table {
	return rcv._tab
}

/// array of all licenses
func (rcv *AcquiredLicenses) Licenses(obj *SingleLicense, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AcquiredLicenses) LicensesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// array of all licenses
func AcquiredLicensesStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AcquiredLicensesAddLicenses(builder *flatbuffers.Builder, licenses flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(licenses), 0)
}
func AcquiredLicensesStartLicensesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AcquiredLicensesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
