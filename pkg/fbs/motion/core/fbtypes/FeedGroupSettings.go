// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FeedGroupSettingsT struct {
	Type FeedGroup
}

func (t *FeedGroupSettingsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	FeedGroupSettingsStart(builder)
	FeedGroupSettingsAddType(builder, t.Type)
	return FeedGroupSettingsEnd(builder)
}

func (rcv *FeedGroupSettings) UnPackTo(t *FeedGroupSettingsT) {
	t.Type = rcv.Type()
}

func (rcv *FeedGroupSettings) UnPack() *FeedGroupSettingsT {
	if rcv == nil { return nil }
	t := &FeedGroupSettingsT{}
	rcv.UnPackTo(t)
	return t
}

type FeedGroupSettings struct {
	_tab flatbuffers.Table
}

func GetRootAsFeedGroupSettings(buf []byte, offset flatbuffers.UOffsetT) *FeedGroupSettings {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FeedGroupSettings{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFeedGroupSettings(buf []byte, offset flatbuffers.UOffsetT) *FeedGroupSettings {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FeedGroupSettings{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *FeedGroupSettings) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FeedGroupSettings) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FeedGroupSettings) Type() FeedGroup {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return FeedGroup(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FeedGroupSettings) MutateType(n FeedGroup) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func FeedGroupSettingsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func FeedGroupSettingsAddType(builder *flatbuffers.Builder, type_ FeedGroup) {
	builder.PrependInt8Slot(0, int8(type_), 0)
}
func FeedGroupSettingsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
