// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of all safe areas and work areas for the whole motion system
type SysCfgSafeAreaAllT struct {
	SafeAreas []*SysCfgSafeAreaT
}

func (t *SysCfgSafeAreaAllT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	safeAreasOffset := flatbuffers.UOffsetT(0)
	if t.SafeAreas != nil {
		safeAreasLength := len(t.SafeAreas)
		safeAreasOffsets := make([]flatbuffers.UOffsetT, safeAreasLength)
		for j := 0; j < safeAreasLength; j++ {
			safeAreasOffsets[j] = t.SafeAreas[j].Pack(builder)
		}
		SysCfgSafeAreaAllStartSafeAreasVector(builder, safeAreasLength)
		for j := safeAreasLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(safeAreasOffsets[j])
		}
		safeAreasOffset = builder.EndVector(safeAreasLength)
	}
	SysCfgSafeAreaAllStart(builder)
	SysCfgSafeAreaAllAddSafeAreas(builder, safeAreasOffset)
	return SysCfgSafeAreaAllEnd(builder)
}

func (rcv *SysCfgSafeAreaAll) UnPackTo(t *SysCfgSafeAreaAllT) {
	safeAreasLength := rcv.SafeAreasLength()
	t.SafeAreas = make([]*SysCfgSafeAreaT, safeAreasLength)
	for j := 0; j < safeAreasLength; j++ {
		x := SysCfgSafeArea{}
		rcv.SafeAreas(&x, j)
		t.SafeAreas[j] = x.UnPack()
	}
}

func (rcv *SysCfgSafeAreaAll) UnPack() *SysCfgSafeAreaAllT {
	if rcv == nil { return nil }
	t := &SysCfgSafeAreaAllT{}
	rcv.UnPackTo(t)
	return t
}

type SysCfgSafeAreaAll struct {
	_tab flatbuffers.Table
}

func GetRootAsSysCfgSafeAreaAll(buf []byte, offset flatbuffers.UOffsetT) *SysCfgSafeAreaAll {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SysCfgSafeAreaAll{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSysCfgSafeAreaAll(buf []byte, offset flatbuffers.UOffsetT) *SysCfgSafeAreaAll {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SysCfgSafeAreaAll{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SysCfgSafeAreaAll) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SysCfgSafeAreaAll) Table() flatbuffers.Table {
	return rcv._tab
}

/// vector of all configured safe areas
func (rcv *SysCfgSafeAreaAll) SafeAreas(obj *SysCfgSafeArea, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SysCfgSafeAreaAll) SafeAreasLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of all configured safe areas
func SysCfgSafeAreaAllStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func SysCfgSafeAreaAllAddSafeAreas(builder *flatbuffers.Builder, safeAreas flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(safeAreas), 0)
}
func SysCfgSafeAreaAllStartSafeAreasVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SysCfgSafeAreaAllEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
