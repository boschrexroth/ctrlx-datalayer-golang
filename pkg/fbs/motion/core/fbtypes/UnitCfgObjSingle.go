// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	"bytes"
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Single entry of the general unit configuration for a motion object
type UnitCfgObjSingleT struct {
	ValueType string `json:"valueType"`
	Abbreviation string `json:"abbreviation"`
}

func (t *UnitCfgObjSingleT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	valueTypeOffset := flatbuffers.UOffsetT(0)
	if t.ValueType != "" {
		valueTypeOffset = builder.CreateString(t.ValueType)
	}
	abbreviationOffset := flatbuffers.UOffsetT(0)
	if t.Abbreviation != "" {
		abbreviationOffset = builder.CreateString(t.Abbreviation)
	}
	UnitCfgObjSingleStart(builder)
	UnitCfgObjSingleAddValueType(builder, valueTypeOffset)
	UnitCfgObjSingleAddAbbreviation(builder, abbreviationOffset)
	return UnitCfgObjSingleEnd(builder)
}

func (rcv *UnitCfgObjSingle) UnPackTo(t *UnitCfgObjSingleT) {
	t.ValueType = string(rcv.ValueType())
	t.Abbreviation = string(rcv.Abbreviation())
}

func (rcv *UnitCfgObjSingle) UnPack() *UnitCfgObjSingleT {
	if rcv == nil { return nil }
	t := &UnitCfgObjSingleT{}
	rcv.UnPackTo(t)
	return t
}

type UnitCfgObjSingle struct {
	_tab flatbuffers.Table
}

func GetRootAsUnitCfgObjSingle(buf []byte, offset flatbuffers.UOffsetT) *UnitCfgObjSingle {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UnitCfgObjSingle{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsUnitCfgObjSingle(buf []byte, offset flatbuffers.UOffsetT) *UnitCfgObjSingle {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UnitCfgObjSingle{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *UnitCfgObjSingle) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UnitCfgObjSingle) Table() flatbuffers.Table {
	return rcv._tab
}

/// the unit value type of the entry (position, velocity, jerk, ...)
func (rcv *UnitCfgObjSingle) ValueType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// the unit value type of the entry (position, velocity, jerk, ...)
func UnitCfgObjSingleKeyCompare(o1, o2 flatbuffers.UOffsetT, buf []byte) bool {
	obj1 := &UnitCfgObjSingle{}
	obj2 := &UnitCfgObjSingle{}
	obj1.Init(buf, flatbuffers.UOffsetT(len(buf)) - o1)
	obj2.Init(buf, flatbuffers.UOffsetT(len(buf)) - o2)
	return string(obj1.ValueType()) < string(obj2.ValueType())
}

func (rcv *UnitCfgObjSingle) LookupByKey(key string, vectorLocation flatbuffers.UOffsetT, buf []byte) bool {
	span := flatbuffers.GetUOffsetT(buf[vectorLocation - 4:])
	start := flatbuffers.UOffsetT(0)
	bKey := []byte(key)
	for span != 0 {
		middle := span / 2
		tableOffset := flatbuffers.GetIndirectOffset(buf, vectorLocation+ 4 * (start + middle))
		obj := &UnitCfgObjSingle{}
		obj.Init(buf, tableOffset)
		comp := bytes.Compare(obj.ValueType(), bKey)
		if comp > 0 {
			span = middle
		} else if comp < 0 {
			middle += 1
			start += middle
			span -= middle
		} else {
			rcv.Init(buf, tableOffset)
			return true
		}
	}
	return false
}

/// abbreviation of the unit (as it will being used in flatbuffers and files)
func (rcv *UnitCfgObjSingle) Abbreviation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// abbreviation of the unit (as it will being used in flatbuffers and files)
func UnitCfgObjSingleStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func UnitCfgObjSingleAddValueType(builder *flatbuffers.Builder, valueType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(valueType), 0)
}
func UnitCfgObjSingleAddAbbreviation(builder *flatbuffers.Builder, abbreviation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(abbreviation), 0)
}
func UnitCfgObjSingleEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
