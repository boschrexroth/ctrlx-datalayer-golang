// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Single entry of the general unit configuration for a motion object
type UnitCfgObjSingle struct {
	_tab flatbuffers.Table
}

func GetRootAsUnitCfgObjSingle(buf []byte, offset flatbuffers.UOffsetT) *UnitCfgObjSingle {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UnitCfgObjSingle{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsUnitCfgObjSingle(buf []byte, offset flatbuffers.UOffsetT) *UnitCfgObjSingle {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UnitCfgObjSingle{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *UnitCfgObjSingle) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UnitCfgObjSingle) Table() flatbuffers.Table {
	return rcv._tab
}

/// the unit value type of the entry (position, velocity, jerk, ...)
func (rcv *UnitCfgObjSingle) ValueType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// the unit value type of the entry (position, velocity, jerk, ...)
/// abbreviation of the unit (as it will being used in flatbuffers and files)
func (rcv *UnitCfgObjSingle) Abbreviation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// abbreviation of the unit (as it will being used in flatbuffers and files)
func UnitCfgObjSingleStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func UnitCfgObjSingleAddValueType(builder *flatbuffers.Builder, valueType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(valueType), 0)
}
func UnitCfgObjSingleAddAbbreviation(builder *flatbuffers.Builder, abbreviation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(abbreviation), 0)
}
func UnitCfgObjSingleEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
