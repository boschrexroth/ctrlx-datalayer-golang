// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters for the move linear commands for a kinematics
type KinCmdMoveDataT struct {
	KinPos []float64
	CoordSys string
	Lim *DynamicLimitsT
	Buffered bool
}

func (t *KinCmdMoveDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	kinPosOffset := flatbuffers.UOffsetT(0)
	if t.KinPos != nil {
		kinPosLength := len(t.KinPos)
		KinCmdMoveDataStartKinPosVector(builder, kinPosLength)
		for j := kinPosLength - 1; j >= 0; j-- {
			builder.PrependFloat64(t.KinPos[j])
		}
		kinPosOffset = builder.EndVector(kinPosLength)
	}
	coordSysOffset := builder.CreateString(t.CoordSys)
	limOffset := t.Lim.Pack(builder)
	KinCmdMoveDataStart(builder)
	KinCmdMoveDataAddKinPos(builder, kinPosOffset)
	KinCmdMoveDataAddCoordSys(builder, coordSysOffset)
	KinCmdMoveDataAddLim(builder, limOffset)
	KinCmdMoveDataAddBuffered(builder, t.Buffered)
	return KinCmdMoveDataEnd(builder)
}

func (rcv *KinCmdMoveData) UnPackTo(t *KinCmdMoveDataT) {
	kinPosLength := rcv.KinPosLength()
	t.KinPos = make([]float64, kinPosLength)
	for j := 0; j < kinPosLength; j++ {
		t.KinPos[j] = rcv.KinPos(j)
	}
	t.CoordSys = string(rcv.CoordSys())
	t.Lim = rcv.Lim(nil).UnPack()
	t.Buffered = rcv.Buffered()
}

func (rcv *KinCmdMoveData) UnPack() *KinCmdMoveDataT {
	if rcv == nil { return nil }
	t := &KinCmdMoveDataT{}
	rcv.UnPackTo(t)
	return t
}

type KinCmdMoveData struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCmdMoveData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdMoveData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCmdMoveData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCmdMoveData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdMoveData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCmdMoveData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCmdMoveData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCmdMoveData) Table() flatbuffers.Table {
	return rcv._tab
}

/// commanded target position (or increment for relative position command)
func (rcv *KinCmdMoveData) KinPos(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *KinCmdMoveData) KinPosLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// commanded target position (or increment for relative position command)
func (rcv *KinCmdMoveData) MutateKinPos(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

/// coordSys for commanded target position
func (rcv *KinCmdMoveData) CoordSys() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// coordSys for commanded target position
/// dynamic limits for the motion of this command
func (rcv *KinCmdMoveData) Lim(obj *DynamicLimits) *DynamicLimits {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DynamicLimits)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// dynamic limits for the motion of this command
/// should this be a buffered command?
func (rcv *KinCmdMoveData) Buffered() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// should this be a buffered command?
func (rcv *KinCmdMoveData) MutateBuffered(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func KinCmdMoveDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func KinCmdMoveDataAddKinPos(builder *flatbuffers.Builder, kinPos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(kinPos), 0)
}
func KinCmdMoveDataStartKinPosVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func KinCmdMoveDataAddCoordSys(builder *flatbuffers.Builder, coordSys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(coordSys), 0)
}
func KinCmdMoveDataAddLim(builder *flatbuffers.Builder, lim flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(lim), 0)
}
func KinCmdMoveDataAddBuffered(builder *flatbuffers.Builder, buffered bool) {
	builder.PrependBoolSlot(3, buffered, true)
}
func KinCmdMoveDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
