// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// array of all (registered) motion components
type CompVersionInfosT struct {
	Versions []*ComponentVersionInfoT `json:"versions"`
}

func (t *CompVersionInfosT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	versionsOffset := flatbuffers.UOffsetT(0)
	if t.Versions != nil {
		versionsLength := len(t.Versions)
		versionsOffsets := make([]flatbuffers.UOffsetT, versionsLength)
		for j := 0; j < versionsLength; j++ {
			versionsOffsets[j] = t.Versions[j].Pack(builder)
		}
		CompVersionInfosStartVersionsVector(builder, versionsLength)
		for j := versionsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(versionsOffsets[j])
		}
		versionsOffset = builder.EndVector(versionsLength)
	}
	CompVersionInfosStart(builder)
	CompVersionInfosAddVersions(builder, versionsOffset)
	return CompVersionInfosEnd(builder)
}

func (rcv *CompVersionInfos) UnPackTo(t *CompVersionInfosT) {
	versionsLength := rcv.VersionsLength()
	t.Versions = make([]*ComponentVersionInfoT, versionsLength)
	for j := 0; j < versionsLength; j++ {
		x := ComponentVersionInfo{}
		rcv.Versions(&x, j)
		t.Versions[j] = x.UnPack()
	}
}

func (rcv *CompVersionInfos) UnPack() *CompVersionInfosT {
	if rcv == nil { return nil }
	t := &CompVersionInfosT{}
	rcv.UnPackTo(t)
	return t
}

type CompVersionInfos struct {
	_tab flatbuffers.Table
}

func GetRootAsCompVersionInfos(buf []byte, offset flatbuffers.UOffsetT) *CompVersionInfos {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CompVersionInfos{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCompVersionInfos(buf []byte, offset flatbuffers.UOffsetT) *CompVersionInfos {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CompVersionInfos{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CompVersionInfos) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CompVersionInfos) Table() flatbuffers.Table {
	return rcv._tab
}

/// array of all (registered) motion components
func (rcv *CompVersionInfos) Versions(obj *ComponentVersionInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *CompVersionInfos) VersionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// array of all (registered) motion components
func CompVersionInfosStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func CompVersionInfosAddVersions(builder *flatbuffers.Builder, versions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(versions), 0)
}
func CompVersionInfosStartVersionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CompVersionInfosEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
