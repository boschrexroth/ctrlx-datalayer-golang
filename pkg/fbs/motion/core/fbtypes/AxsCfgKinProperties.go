// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// kinematic properties for axes
type AxsCfgKinPropertiesT struct {
	AccReserve float64 `json:"accReserve"`
	JrkReserve float64 `json:"jrkReserve"`
}

func (t *AxsCfgKinPropertiesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AxsCfgKinPropertiesStart(builder)
	AxsCfgKinPropertiesAddAccReserve(builder, t.AccReserve)
	AxsCfgKinPropertiesAddJrkReserve(builder, t.JrkReserve)
	return AxsCfgKinPropertiesEnd(builder)
}

func (rcv *AxsCfgKinProperties) UnPackTo(t *AxsCfgKinPropertiesT) {
	t.AccReserve = rcv.AccReserve()
	t.JrkReserve = rcv.JrkReserve()
}

func (rcv *AxsCfgKinProperties) UnPack() *AxsCfgKinPropertiesT {
	if rcv == nil { return nil }
	t := &AxsCfgKinPropertiesT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgKinProperties struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgKinProperties(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgKinProperties {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgKinProperties{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgKinProperties(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgKinProperties {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgKinProperties{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgKinProperties) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgKinProperties) Table() flatbuffers.Table {
	return rcv._tab
}

/// acceleration reserve as factor of acceleration
func (rcv *AxsCfgKinProperties) AccReserve() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// acceleration reserve as factor of acceleration
func (rcv *AxsCfgKinProperties) MutateAccReserve(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// jerk reserve as factor of jerk
func (rcv *AxsCfgKinProperties) JrkReserve() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// jerk reserve as factor of jerk
func (rcv *AxsCfgKinProperties) MutateJrkReserve(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func AxsCfgKinPropertiesStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AxsCfgKinPropertiesAddAccReserve(builder *flatbuffers.Builder, accReserve float64) {
	builder.PrependFloat64Slot(0, accReserve, 0.0)
}
func AxsCfgKinPropertiesAddJrkReserve(builder *flatbuffers.Builder, jrkReserve float64) {
	builder.PrependFloat64Slot(1, jrkReserve, 0.0)
}
func AxsCfgKinPropertiesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
