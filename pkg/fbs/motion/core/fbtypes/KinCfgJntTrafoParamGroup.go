// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of a single parameter group of a joint transformation
type KinCfgJntTrafoParamGroupT struct {
	Name string
	Param []*KinCfgJntTrafoSingleParamT
}

func (t *KinCfgJntTrafoParamGroupT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	paramOffset := flatbuffers.UOffsetT(0)
	if t.Param != nil {
		paramLength := len(t.Param)
		paramOffsets := make([]flatbuffers.UOffsetT, paramLength)
		for j := 0; j < paramLength; j++ {
			paramOffsets[j] = t.Param[j].Pack(builder)
		}
		KinCfgJntTrafoParamGroupStartParamVector(builder, paramLength)
		for j := paramLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(paramOffsets[j])
		}
		paramOffset = builder.EndVector(paramLength)
	}
	KinCfgJntTrafoParamGroupStart(builder)
	KinCfgJntTrafoParamGroupAddName(builder, nameOffset)
	KinCfgJntTrafoParamGroupAddParam(builder, paramOffset)
	return KinCfgJntTrafoParamGroupEnd(builder)
}

func (rcv *KinCfgJntTrafoParamGroup) UnPackTo(t *KinCfgJntTrafoParamGroupT) {
	t.Name = string(rcv.Name())
	paramLength := rcv.ParamLength()
	t.Param = make([]*KinCfgJntTrafoSingleParamT, paramLength)
	for j := 0; j < paramLength; j++ {
		x := KinCfgJntTrafoSingleParam{}
		rcv.Param(&x, j)
		t.Param[j] = x.UnPack()
	}
}

func (rcv *KinCfgJntTrafoParamGroup) UnPack() *KinCfgJntTrafoParamGroupT {
	if rcv == nil { return nil }
	t := &KinCfgJntTrafoParamGroupT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgJntTrafoParamGroup struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgJntTrafoParamGroup(buf []byte, offset flatbuffers.UOffsetT) *KinCfgJntTrafoParamGroup {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgJntTrafoParamGroup{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgJntTrafoParamGroup(buf []byte, offset flatbuffers.UOffsetT) *KinCfgJntTrafoParamGroup {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgJntTrafoParamGroup{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgJntTrafoParamGroup) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgJntTrafoParamGroup) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the parameter group
func (rcv *KinCfgJntTrafoParamGroup) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the parameter group
/// all configuration parameter of this group
func (rcv *KinCfgJntTrafoParamGroup) Param(obj *KinCfgJntTrafoSingleParam, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *KinCfgJntTrafoParamGroup) ParamLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// all configuration parameter of this group
func KinCfgJntTrafoParamGroupStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KinCfgJntTrafoParamGroupAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func KinCfgJntTrafoParamGroupAddParam(builder *flatbuffers.Builder, param flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(param), 0)
}
func KinCfgJntTrafoParamGroupStartParamVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinCfgJntTrafoParamGroupEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
