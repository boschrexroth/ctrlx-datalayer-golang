// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"

	motion__sync__fbtypes "github.com/boschrexroth/ctrlx-datalayer-golang/v2/pkg/fbs/motion/sync/fbtypes"
)

/// configuration for specific functions of this axis
type AxsCfgFunctionsT struct {
	Coupling *AxsCfgCouplingT `json:"coupling"`
	CalculationPipelines []*motion__sync__fbtypes.CalcPipelineCfgT `json:"calculationPipelines"`
	PosMode *AxsCfgPosModeT `json:"posMode"`
	Extrapolation *AxsCfgExtrapolationT `json:"extrapolation"`
	AxsEncoder *AxsCfgEncoderT `json:"axsEncoder"`
	AxsCfgDriveSls *AxsCfgDriveSLST `json:"axsCfgDriveSLS"`
	AxsCfgCyclicStatusData *AxsCfgCyclicStatusDataT `json:"axsCfgCyclicStatusData"`
	OperationModeSwitch *AxsCfgOperationModeSwitchT `json:"operationModeSwitch"`
}

func (t *AxsCfgFunctionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	couplingOffset := t.Coupling.Pack(builder)
	calculationPipelinesOffset := flatbuffers.UOffsetT(0)
	if t.CalculationPipelines != nil {
		calculationPipelinesLength := len(t.CalculationPipelines)
		calculationPipelinesOffsets := make([]flatbuffers.UOffsetT, calculationPipelinesLength)
		for j := 0; j < calculationPipelinesLength; j++ {
			calculationPipelinesOffsets[j] = t.CalculationPipelines[j].Pack(builder)
		}
		AxsCfgFunctionsStartCalculationPipelinesVector(builder, calculationPipelinesLength)
		for j := calculationPipelinesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(calculationPipelinesOffsets[j])
		}
		calculationPipelinesOffset = builder.EndVector(calculationPipelinesLength)
	}
	posModeOffset := t.PosMode.Pack(builder)
	extrapolationOffset := t.Extrapolation.Pack(builder)
	axsEncoderOffset := t.AxsEncoder.Pack(builder)
	axsCfgDriveSlsOffset := t.AxsCfgDriveSls.Pack(builder)
	axsCfgCyclicStatusDataOffset := t.AxsCfgCyclicStatusData.Pack(builder)
	operationModeSwitchOffset := t.OperationModeSwitch.Pack(builder)
	AxsCfgFunctionsStart(builder)
	AxsCfgFunctionsAddCoupling(builder, couplingOffset)
	AxsCfgFunctionsAddCalculationPipelines(builder, calculationPipelinesOffset)
	AxsCfgFunctionsAddPosMode(builder, posModeOffset)
	AxsCfgFunctionsAddExtrapolation(builder, extrapolationOffset)
	AxsCfgFunctionsAddAxsEncoder(builder, axsEncoderOffset)
	AxsCfgFunctionsAddAxsCfgDriveSls(builder, axsCfgDriveSlsOffset)
	AxsCfgFunctionsAddAxsCfgCyclicStatusData(builder, axsCfgCyclicStatusDataOffset)
	AxsCfgFunctionsAddOperationModeSwitch(builder, operationModeSwitchOffset)
	return AxsCfgFunctionsEnd(builder)
}

func (rcv *AxsCfgFunctions) UnPackTo(t *AxsCfgFunctionsT) {
	t.Coupling = rcv.Coupling(nil).UnPack()
	calculationPipelinesLength := rcv.CalculationPipelinesLength()
	t.CalculationPipelines = make([]*motion__sync__fbtypes.CalcPipelineCfgT, calculationPipelinesLength)
	for j := 0; j < calculationPipelinesLength; j++ {
		x := motion__sync__fbtypes.CalcPipelineCfg{}
		rcv.CalculationPipelines(&x, j)
		t.CalculationPipelines[j] = x.UnPack()
	}
	t.PosMode = rcv.PosMode(nil).UnPack()
	t.Extrapolation = rcv.Extrapolation(nil).UnPack()
	t.AxsEncoder = rcv.AxsEncoder(nil).UnPack()
	t.AxsCfgDriveSls = rcv.AxsCfgDriveSls(nil).UnPack()
	t.AxsCfgCyclicStatusData = rcv.AxsCfgCyclicStatusData(nil).UnPack()
	t.OperationModeSwitch = rcv.OperationModeSwitch(nil).UnPack()
}

func (rcv *AxsCfgFunctions) UnPack() *AxsCfgFunctionsT {
	if rcv == nil { return nil }
	t := &AxsCfgFunctionsT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgFunctions struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgFunctions(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgFunctions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgFunctions{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgFunctions(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgFunctions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgFunctions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgFunctions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgFunctions) Table() flatbuffers.Table {
	return rcv._tab
}

/// configuration for coupling functions for a single axis
func (rcv *AxsCfgFunctions) Coupling(obj *AxsCfgCoupling) *AxsCfgCoupling {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgCoupling)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// configuration for coupling functions for a single axis
/// configuration for calculation pipelines for a single axis
func (rcv *AxsCfgFunctions) CalculationPipelines(obj *motion__sync__fbtypes.CalcPipelineCfg, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AxsCfgFunctions) CalculationPipelinesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// configuration for calculation pipelines for a single axis
/// configuration for position mode function parameters for a single axis
func (rcv *AxsCfgFunctions) PosMode(obj *AxsCfgPosMode) *AxsCfgPosMode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgPosMode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// configuration for position mode function parameters for a single axis
/// extrapolation parameters for a single axis
func (rcv *AxsCfgFunctions) Extrapolation(obj *AxsCfgExtrapolation) *AxsCfgExtrapolation {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgExtrapolation)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// extrapolation parameters for a single axis
/// configuration for encoder axis
func (rcv *AxsCfgFunctions) AxsEncoder(obj *AxsCfgEncoder) *AxsCfgEncoder {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgEncoder)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// configuration for encoder axis
/// configuration of monitoring of the safe limited speed in the drive by the motion kernel
func (rcv *AxsCfgFunctions) AxsCfgDriveSls(obj *AxsCfgDriveSLS) *AxsCfgDriveSLS {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgDriveSLS)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// configuration of monitoring of the safe limited speed in the drive by the motion kernel
/// configuration of cyclic status data for an axis
func (rcv *AxsCfgFunctions) AxsCfgCyclicStatusData(obj *AxsCfgCyclicStatusData) *AxsCfgCyclicStatusData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgCyclicStatusData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// configuration of cyclic status data for an axis
/// options during an operation mode switch for a single axis
func (rcv *AxsCfgFunctions) OperationModeSwitch(obj *AxsCfgOperationModeSwitch) *AxsCfgOperationModeSwitch {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgOperationModeSwitch)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// options during an operation mode switch for a single axis
func AxsCfgFunctionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func AxsCfgFunctionsAddCoupling(builder *flatbuffers.Builder, coupling flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(coupling), 0)
}
func AxsCfgFunctionsAddCalculationPipelines(builder *flatbuffers.Builder, calculationPipelines flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(calculationPipelines), 0)
}
func AxsCfgFunctionsStartCalculationPipelinesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AxsCfgFunctionsAddPosMode(builder *flatbuffers.Builder, posMode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(posMode), 0)
}
func AxsCfgFunctionsAddExtrapolation(builder *flatbuffers.Builder, extrapolation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(extrapolation), 0)
}
func AxsCfgFunctionsAddAxsEncoder(builder *flatbuffers.Builder, axsEncoder flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(axsEncoder), 0)
}
func AxsCfgFunctionsAddAxsCfgDriveSls(builder *flatbuffers.Builder, axsCfgDriveSls flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(axsCfgDriveSls), 0)
}
func AxsCfgFunctionsAddAxsCfgCyclicStatusData(builder *flatbuffers.Builder, axsCfgCyclicStatusData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(axsCfgCyclicStatusData), 0)
}
func AxsCfgFunctionsAddOperationModeSwitch(builder *flatbuffers.Builder, operationModeSwitch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(operationModeSwitch), 0)
}
func AxsCfgFunctionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
