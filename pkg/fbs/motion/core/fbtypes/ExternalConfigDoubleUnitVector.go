// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Table for a vector of double+unit values
type ExternalConfigDoubleUnitVectorT struct {
	DoubleVector []*ExternalConfigDoubleUnitT `json:"doubleVector"`
}

func (t *ExternalConfigDoubleUnitVectorT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	doubleVectorOffset := flatbuffers.UOffsetT(0)
	if t.DoubleVector != nil {
		doubleVectorLength := len(t.DoubleVector)
		doubleVectorOffsets := make([]flatbuffers.UOffsetT, doubleVectorLength)
		for j := 0; j < doubleVectorLength; j++ {
			doubleVectorOffsets[j] = t.DoubleVector[j].Pack(builder)
		}
		ExternalConfigDoubleUnitVectorStartDoubleVectorVector(builder, doubleVectorLength)
		for j := doubleVectorLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(doubleVectorOffsets[j])
		}
		doubleVectorOffset = builder.EndVector(doubleVectorLength)
	}
	ExternalConfigDoubleUnitVectorStart(builder)
	ExternalConfigDoubleUnitVectorAddDoubleVector(builder, doubleVectorOffset)
	return ExternalConfigDoubleUnitVectorEnd(builder)
}

func (rcv *ExternalConfigDoubleUnitVector) UnPackTo(t *ExternalConfigDoubleUnitVectorT) {
	doubleVectorLength := rcv.DoubleVectorLength()
	t.DoubleVector = make([]*ExternalConfigDoubleUnitT, doubleVectorLength)
	for j := 0; j < doubleVectorLength; j++ {
		x := ExternalConfigDoubleUnit{}
		rcv.DoubleVector(&x, j)
		t.DoubleVector[j] = x.UnPack()
	}
}

func (rcv *ExternalConfigDoubleUnitVector) UnPack() *ExternalConfigDoubleUnitVectorT {
	if rcv == nil { return nil }
	t := &ExternalConfigDoubleUnitVectorT{}
	rcv.UnPackTo(t)
	return t
}

type ExternalConfigDoubleUnitVector struct {
	_tab flatbuffers.Table
}

func GetRootAsExternalConfigDoubleUnitVector(buf []byte, offset flatbuffers.UOffsetT) *ExternalConfigDoubleUnitVector {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ExternalConfigDoubleUnitVector{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsExternalConfigDoubleUnitVector(buf []byte, offset flatbuffers.UOffsetT) *ExternalConfigDoubleUnitVector {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ExternalConfigDoubleUnitVector{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ExternalConfigDoubleUnitVector) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ExternalConfigDoubleUnitVector) Table() flatbuffers.Table {
	return rcv._tab
}

/// vector of double numbers with units
func (rcv *ExternalConfigDoubleUnitVector) DoubleVector(obj *ExternalConfigDoubleUnit, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ExternalConfigDoubleUnitVector) DoubleVectorLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of double numbers with units
func ExternalConfigDoubleUnitVectorStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ExternalConfigDoubleUnitVectorAddDoubleVector(builder *flatbuffers.Builder, doubleVector flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(doubleVector), 0)
}
func ExternalConfigDoubleUnitVectorStartDoubleVectorVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ExternalConfigDoubleUnitVectorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
