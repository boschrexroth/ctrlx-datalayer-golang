// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// informations of a single unit, that is supported by the system
type UnitDataSingleT struct {
	Name string `json:"name"`
	UnitObjType string `json:"unitObjType"`
	UnitValueType string `json:"unitValueType"`
	Abbreviation string `json:"abbreviation"`
	AbbreviationUri string `json:"abbreviationURI"`
	IsDefault bool `json:"isDefault"`
}

func (t *UnitDataSingleT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	unitObjTypeOffset := flatbuffers.UOffsetT(0)
	if t.UnitObjType != "" {
		unitObjTypeOffset = builder.CreateString(t.UnitObjType)
	}
	unitValueTypeOffset := flatbuffers.UOffsetT(0)
	if t.UnitValueType != "" {
		unitValueTypeOffset = builder.CreateString(t.UnitValueType)
	}
	abbreviationOffset := flatbuffers.UOffsetT(0)
	if t.Abbreviation != "" {
		abbreviationOffset = builder.CreateString(t.Abbreviation)
	}
	abbreviationUriOffset := flatbuffers.UOffsetT(0)
	if t.AbbreviationUri != "" {
		abbreviationUriOffset = builder.CreateString(t.AbbreviationUri)
	}
	UnitDataSingleStart(builder)
	UnitDataSingleAddName(builder, nameOffset)
	UnitDataSingleAddUnitObjType(builder, unitObjTypeOffset)
	UnitDataSingleAddUnitValueType(builder, unitValueTypeOffset)
	UnitDataSingleAddAbbreviation(builder, abbreviationOffset)
	UnitDataSingleAddAbbreviationUri(builder, abbreviationUriOffset)
	UnitDataSingleAddIsDefault(builder, t.IsDefault)
	return UnitDataSingleEnd(builder)
}

func (rcv *UnitDataSingle) UnPackTo(t *UnitDataSingleT) {
	t.Name = string(rcv.Name())
	t.UnitObjType = string(rcv.UnitObjType())
	t.UnitValueType = string(rcv.UnitValueType())
	t.Abbreviation = string(rcv.Abbreviation())
	t.AbbreviationUri = string(rcv.AbbreviationUri())
	t.IsDefault = rcv.IsDefault()
}

func (rcv *UnitDataSingle) UnPack() *UnitDataSingleT {
	if rcv == nil { return nil }
	t := &UnitDataSingleT{}
	rcv.UnPackTo(t)
	return t
}

type UnitDataSingle struct {
	_tab flatbuffers.Table
}

func GetRootAsUnitDataSingle(buf []byte, offset flatbuffers.UOffsetT) *UnitDataSingle {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UnitDataSingle{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsUnitDataSingle(buf []byte, offset flatbuffers.UOffsetT) *UnitDataSingle {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UnitDataSingle{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *UnitDataSingle) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UnitDataSingle) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the unit
func (rcv *UnitDataSingle) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the unit
/// unit object type (linear/rotational/any)
func (rcv *UnitDataSingle) UnitObjType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit object type (linear/rotational/any)
/// unit value type (position, velocity, force, time, ...)
func (rcv *UnitDataSingle) UnitValueType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit value type (position, velocity, force, time, ...)
/// abbreviation of the unit (as it will being used in flatbuffers and files)
func (rcv *UnitDataSingle) Abbreviation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// abbreviation of the unit (as it will being used in flatbuffers and files)
/// URI abbreviation of the unit (as it will being used in datalayer paths)
func (rcv *UnitDataSingle) AbbreviationUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// URI abbreviation of the unit (as it will being used in datalayer paths)
/// is this a default value, that will be set, when the axis/kinematics is created?
func (rcv *UnitDataSingle) IsDefault() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// is this a default value, that will be set, when the axis/kinematics is created?
func (rcv *UnitDataSingle) MutateIsDefault(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func UnitDataSingleStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func UnitDataSingleAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func UnitDataSingleAddUnitObjType(builder *flatbuffers.Builder, unitObjType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(unitObjType), 0)
}
func UnitDataSingleAddUnitValueType(builder *flatbuffers.Builder, unitValueType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(unitValueType), 0)
}
func UnitDataSingleAddAbbreviation(builder *flatbuffers.Builder, abbreviation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(abbreviation), 0)
}
func UnitDataSingleAddAbbreviationUri(builder *flatbuffers.Builder, abbreviationUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(abbreviationUri), 0)
}
func UnitDataSingleAddIsDefault(builder *flatbuffers.Builder, isDefault bool) {
	builder.PrependBoolSlot(5, isDefault, false)
}
func UnitDataSingleEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
