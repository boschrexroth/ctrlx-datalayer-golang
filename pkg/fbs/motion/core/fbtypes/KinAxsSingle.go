// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// informations of an axis that is part of a kinematics
type KinAxsSingleT struct {
	Meaning string
	Name string
	Dir string
	AcsIndex byte
}

func (t *KinAxsSingleT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	meaningOffset := builder.CreateString(t.Meaning)
	nameOffset := builder.CreateString(t.Name)
	dirOffset := builder.CreateString(t.Dir)
	KinAxsSingleStart(builder)
	KinAxsSingleAddMeaning(builder, meaningOffset)
	KinAxsSingleAddName(builder, nameOffset)
	KinAxsSingleAddDir(builder, dirOffset)
	KinAxsSingleAddAcsIndex(builder, t.AcsIndex)
	return KinAxsSingleEnd(builder)
}

func (rcv *KinAxsSingle) UnPackTo(t *KinAxsSingleT) {
	t.Meaning = string(rcv.Meaning())
	t.Name = string(rcv.Name())
	t.Dir = string(rcv.Dir())
	t.AcsIndex = rcv.AcsIndex()
}

func (rcv *KinAxsSingle) UnPack() *KinAxsSingleT {
	if rcv == nil { return nil }
	t := &KinAxsSingleT{}
	rcv.UnPackTo(t)
	return t
}

type KinAxsSingle struct {
	_tab flatbuffers.Table
}

func GetRootAsKinAxsSingle(buf []byte, offset flatbuffers.UOffsetT) *KinAxsSingle {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinAxsSingle{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinAxsSingle(buf []byte, offset flatbuffers.UOffsetT) *KinAxsSingle {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinAxsSingle{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinAxsSingle) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinAxsSingle) Table() flatbuffers.Table {
	return rcv._tab
}

/// DEPRECATED; (geometric) meaning of the axis in the kinematics (only useful for simple Cartesian kinematics); use "acsIndex" for all other cases
func (rcv *KinAxsSingle) Meaning() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// DEPRECATED; (geometric) meaning of the axis in the kinematics (only useful for simple Cartesian kinematics); use "acsIndex" for all other cases
/// name of the axis
func (rcv *KinAxsSingle) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the axis
/// direction ("+" or "-") of the axis referring to the kinematics coordinate system
func (rcv *KinAxsSingle) Dir() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// direction ("+" or "-") of the axis referring to the kinematics coordinate system
/// index of the axis in the ACS (axis coordinate system) array of the kinematics
func (rcv *KinAxsSingle) AcsIndex() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

/// index of the axis in the ACS (axis coordinate system) array of the kinematics
func (rcv *KinAxsSingle) MutateAcsIndex(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func KinAxsSingleStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func KinAxsSingleAddMeaning(builder *flatbuffers.Builder, meaning flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(meaning), 0)
}
func KinAxsSingleAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func KinAxsSingleAddDir(builder *flatbuffers.Builder, dir flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(dir), 0)
}
func KinAxsSingleAddAcsIndex(builder *flatbuffers.Builder, acsIndex byte) {
	builder.PrependByteSlot(3, acsIndex, 0)
}
func KinAxsSingleEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
