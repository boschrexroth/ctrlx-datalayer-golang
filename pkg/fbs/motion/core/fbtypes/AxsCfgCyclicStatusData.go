// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Configuration of motion kernel axis function cyclic status data
type AxsCfgCyclicStatusDataT struct {
	Windows *AxsCfgWindowsForStateDataT `json:"windows"`
	Remanent bool `json:"remanent"`
}

func (t *AxsCfgCyclicStatusDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	windowsOffset := t.Windows.Pack(builder)
	AxsCfgCyclicStatusDataStart(builder)
	AxsCfgCyclicStatusDataAddWindows(builder, windowsOffset)
	AxsCfgCyclicStatusDataAddRemanent(builder, t.Remanent)
	return AxsCfgCyclicStatusDataEnd(builder)
}

func (rcv *AxsCfgCyclicStatusData) UnPackTo(t *AxsCfgCyclicStatusDataT) {
	t.Windows = rcv.Windows(nil).UnPack()
	t.Remanent = rcv.Remanent()
}

func (rcv *AxsCfgCyclicStatusData) UnPack() *AxsCfgCyclicStatusDataT {
	if rcv == nil { return nil }
	t := &AxsCfgCyclicStatusDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCfgCyclicStatusData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgCyclicStatusData(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgCyclicStatusData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgCyclicStatusData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgCyclicStatusData(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgCyclicStatusData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgCyclicStatusData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgCyclicStatusData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgCyclicStatusData) Table() flatbuffers.Table {
	return rcv._tab
}

/// windows for cyclic status data
func (rcv *AxsCfgCyclicStatusData) Windows(obj *AxsCfgWindowsForStateData) *AxsCfgWindowsForStateData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCfgWindowsForStateData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// windows for cyclic status data
/// flag in the motion kernel to enable axis function cyclic status data. 
func (rcv *AxsCfgCyclicStatusData) Remanent() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// flag in the motion kernel to enable axis function cyclic status data. 
func (rcv *AxsCfgCyclicStatusData) MutateRemanent(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func AxsCfgCyclicStatusDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AxsCfgCyclicStatusDataAddWindows(builder *flatbuffers.Builder, windows flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(windows), 0)
}
func AxsCfgCyclicStatusDataAddRemanent(builder *flatbuffers.Builder, remanent bool) {
	builder.PrependBoolSlot(1, remanent, false)
}
func AxsCfgCyclicStatusDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
