// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration for gantry coupling function of a single axis
type AxsCfgGantry struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCfgGantry(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgGantry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCfgGantry{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCfgGantry(buf []byte, offset flatbuffers.UOffsetT) *AxsCfgGantry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCfgGantry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCfgGantry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCfgGantry) Table() flatbuffers.Table {
	return rcv._tab
}

/// is this axis a gantry member?
func (rcv *AxsCfgGantry) IsMember() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// is this axis a gantry member?
func (rcv *AxsCfgGantry) MutateIsMember(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// is moving of this axis allowed, even when it's a gantry member and the gantry connection is not closed?
func (rcv *AxsCfgGantry) MoveAllowed() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// is moving of this axis allowed, even when it's a gantry member and the gantry connection is not closed?
func (rcv *AxsCfgGantry) MutateMoveAllowed(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func AxsCfgGantryStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AxsCfgGantryAddIsMember(builder *flatbuffers.Builder, isMember bool) {
	builder.PrependBoolSlot(0, isMember, false)
}
func AxsCfgGantryAddMoveAllowed(builder *flatbuffers.Builder, moveAllowed bool) {
	builder.PrependBoolSlot(1, moveAllowed, false)
}
func AxsCfgGantryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
