// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// common configuration of real-time inputs
type RTInputsCfgT struct {
	DoubleArraySize uint32
	Int64ArraySize uint32
}

func (t *RTInputsCfgT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	RTInputsCfgStart(builder)
	RTInputsCfgAddDoubleArraySize(builder, t.DoubleArraySize)
	RTInputsCfgAddInt64ArraySize(builder, t.Int64ArraySize)
	return RTInputsCfgEnd(builder)
}

func (rcv *RTInputsCfg) UnPackTo(t *RTInputsCfgT) {
	t.DoubleArraySize = rcv.DoubleArraySize()
	t.Int64ArraySize = rcv.Int64ArraySize()
}

func (rcv *RTInputsCfg) UnPack() *RTInputsCfgT {
	if rcv == nil { return nil }
	t := &RTInputsCfgT{}
	rcv.UnPackTo(t)
	return t
}

type RTInputsCfg struct {
	_tab flatbuffers.Table
}

func GetRootAsRTInputsCfg(buf []byte, offset flatbuffers.UOffsetT) *RTInputsCfg {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RTInputsCfg{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRTInputsCfg(buf []byte, offset flatbuffers.UOffsetT) *RTInputsCfg {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RTInputsCfg{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RTInputsCfg) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RTInputsCfg) Table() flatbuffers.Table {
	return rcv._tab
}

/// size of the double array
func (rcv *RTInputsCfg) DoubleArraySize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// size of the double array
func (rcv *RTInputsCfg) MutateDoubleArraySize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// size of the int64 array
func (rcv *RTInputsCfg) Int64ArraySize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// size of the int64 array
func (rcv *RTInputsCfg) MutateInt64ArraySize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func RTInputsCfgStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RTInputsCfgAddDoubleArraySize(builder *flatbuffers.Builder, doubleArraySize uint32) {
	builder.PrependUint32Slot(0, doubleArraySize, 0)
}
func RTInputsCfgAddInt64ArraySize(builder *flatbuffers.Builder, int64ArraySize uint32) {
	builder.PrependUint32Slot(1, int64ArraySize, 0)
}
func RTInputsCfgEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
