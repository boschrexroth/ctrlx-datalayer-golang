// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of the axis probe command
type AxsCmdProbeDataT struct {
	BaseData *AxsCmdProbeBaseDataT `json:"baseData"`
	CfgData *ProbeCfgDataT `json:"cfgData"`
}

func (t *AxsCmdProbeDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	baseDataOffset := t.BaseData.Pack(builder)
	cfgDataOffset := t.CfgData.Pack(builder)
	AxsCmdProbeDataStart(builder)
	AxsCmdProbeDataAddBaseData(builder, baseDataOffset)
	AxsCmdProbeDataAddCfgData(builder, cfgDataOffset)
	return AxsCmdProbeDataEnd(builder)
}

func (rcv *AxsCmdProbeData) UnPackTo(t *AxsCmdProbeDataT) {
	t.BaseData = rcv.BaseData(nil).UnPack()
	t.CfgData = rcv.CfgData(nil).UnPack()
}

func (rcv *AxsCmdProbeData) UnPack() *AxsCmdProbeDataT {
	if rcv == nil { return nil }
	t := &AxsCmdProbeDataT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCmdProbeData struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCmdProbeData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdProbeData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCmdProbeData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCmdProbeData(buf []byte, offset flatbuffers.UOffsetT) *AxsCmdProbeData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCmdProbeData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCmdProbeData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCmdProbeData) Table() flatbuffers.Table {
	return rcv._tab
}

/// base param of trigger src and probe index
func (rcv *AxsCmdProbeData) BaseData(obj *AxsCmdProbeBaseData) *AxsCmdProbeBaseData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AxsCmdProbeBaseData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// base param of trigger src and probe index
/// probe parameter for data 
func (rcv *AxsCmdProbeData) CfgData(obj *ProbeCfgData) *ProbeCfgData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ProbeCfgData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// probe parameter for data 
func AxsCmdProbeDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AxsCmdProbeDataAddBaseData(builder *flatbuffers.Builder, baseData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(baseData), 0)
}
func AxsCmdProbeDataAddCfgData(builder *flatbuffers.Builder, cfgData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(cfgData), 0)
}
func AxsCmdProbeDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
