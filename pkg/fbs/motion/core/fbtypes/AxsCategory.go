// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AxsCategoryT struct {
	AxsCategory CategoryOfAxis `json:"axsCategory"`
}

func (t *AxsCategoryT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AxsCategoryStart(builder)
	AxsCategoryAddAxsCategory(builder, t.AxsCategory)
	return AxsCategoryEnd(builder)
}

func (rcv *AxsCategory) UnPackTo(t *AxsCategoryT) {
	t.AxsCategory = rcv.AxsCategory()
}

func (rcv *AxsCategory) UnPack() *AxsCategoryT {
	if rcv == nil { return nil }
	t := &AxsCategoryT{}
	rcv.UnPackTo(t)
	return t
}

type AxsCategory struct {
	_tab flatbuffers.Table
}

func GetRootAsAxsCategory(buf []byte, offset flatbuffers.UOffsetT) *AxsCategory {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AxsCategory{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAxsCategory(buf []byte, offset flatbuffers.UOffsetT) *AxsCategory {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AxsCategory{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AxsCategory) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AxsCategory) Table() flatbuffers.Table {
	return rcv._tab
}

/// the axis 
func (rcv *AxsCategory) AxsCategory() CategoryOfAxis {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return CategoryOfAxis(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// the axis 
func (rcv *AxsCategory) MutateAxsCategory(n CategoryOfAxis) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func AxsCategoryStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AxsCategoryAddAxsCategory(builder *flatbuffers.Builder, axsCategory CategoryOfAxis) {
	builder.PrependInt8Slot(0, int8(axsCategory), 0)
}
func AxsCategoryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
