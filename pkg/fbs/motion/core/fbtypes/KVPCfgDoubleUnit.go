// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Table for just one single double value, which has a unit (can be used for any floating point numbers, that are not unit-less)
type KVPCfgDoubleUnitT struct {
	DoubleVal float64 `json:"doubleVal"`
	Unit string `json:"unit"`
}

func (t *KVPCfgDoubleUnitT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	unitOffset := flatbuffers.UOffsetT(0)
	if t.Unit != "" {
		unitOffset = builder.CreateString(t.Unit)
	}
	KVPCfgDoubleUnitStart(builder)
	KVPCfgDoubleUnitAddDoubleVal(builder, t.DoubleVal)
	KVPCfgDoubleUnitAddUnit(builder, unitOffset)
	return KVPCfgDoubleUnitEnd(builder)
}

func (rcv *KVPCfgDoubleUnit) UnPackTo(t *KVPCfgDoubleUnitT) {
	t.DoubleVal = rcv.DoubleVal()
	t.Unit = string(rcv.Unit())
}

func (rcv *KVPCfgDoubleUnit) UnPack() *KVPCfgDoubleUnitT {
	if rcv == nil { return nil }
	t := &KVPCfgDoubleUnitT{}
	rcv.UnPackTo(t)
	return t
}

type KVPCfgDoubleUnit struct {
	_tab flatbuffers.Table
}

func GetRootAsKVPCfgDoubleUnit(buf []byte, offset flatbuffers.UOffsetT) *KVPCfgDoubleUnit {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KVPCfgDoubleUnit{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKVPCfgDoubleUnit(buf []byte, offset flatbuffers.UOffsetT) *KVPCfgDoubleUnit {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KVPCfgDoubleUnit{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KVPCfgDoubleUnit) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KVPCfgDoubleUnit) Table() flatbuffers.Table {
	return rcv._tab
}

/// the value
func (rcv *KVPCfgDoubleUnit) DoubleVal() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// the value
func (rcv *KVPCfgDoubleUnit) MutateDoubleVal(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// the unit of the value as string
func (rcv *KVPCfgDoubleUnit) Unit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// the unit of the value as string
func KVPCfgDoubleUnitStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KVPCfgDoubleUnitAddDoubleVal(builder *flatbuffers.Builder, doubleVal float64) {
	builder.PrependFloat64Slot(0, doubleVal, 0.0)
}
func KVPCfgDoubleUnitAddUnit(builder *flatbuffers.Builder, unit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(unit), 0)
}
func KVPCfgDoubleUnitEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
