// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// data of a single axis assignment for an axis transformation
type KinCfgAxsTrafoSingleAxisAssignment struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgAxsTrafoSingleAxisAssignment(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxsTrafoSingleAxisAssignment {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgAxsTrafoSingleAxisAssignment{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgAxsTrafoSingleAxisAssignment(buf []byte, offset flatbuffers.UOffsetT) *KinCfgAxsTrafoSingleAxisAssignment {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgAxsTrafoSingleAxisAssignment{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgAxsTrafoSingleAxisAssignment) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgAxsTrafoSingleAxisAssignment) Table() flatbuffers.Table {
	return rcv._tab
}

/// axis name referring to the axis transformation
func (rcv *KinCfgAxsTrafoSingleAxisAssignment) AxisName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// axis name referring to the axis transformation
/// index of the ACS array
func (rcv *KinCfgAxsTrafoSingleAxisAssignment) IndexACS() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

/// index of the ACS array
func (rcv *KinCfgAxsTrafoSingleAxisAssignment) MutateIndexACS(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func KinCfgAxsTrafoSingleAxisAssignmentStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KinCfgAxsTrafoSingleAxisAssignmentAddAxisName(builder *flatbuffers.Builder, axisName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(axisName), 0)
}
func KinCfgAxsTrafoSingleAxisAssignmentAddIndexACS(builder *flatbuffers.Builder, indexACS byte) {
	builder.PrependByteSlot(1, indexACS, 0)
}
func KinCfgAxsTrafoSingleAxisAssignmentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
