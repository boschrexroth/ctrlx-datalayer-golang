// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Table for just one single double value, which has a unit (can be used for any floating point numbers, that are not unit-less)
type ExternalConfigDoubleUnitT struct {
	DoubleVal float64 `json:"doubleVal"`
	Unit string `json:"unit"`
}

func (t *ExternalConfigDoubleUnitT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	unitOffset := flatbuffers.UOffsetT(0)
	if t.Unit != "" {
		unitOffset = builder.CreateString(t.Unit)
	}
	ExternalConfigDoubleUnitStart(builder)
	ExternalConfigDoubleUnitAddDoubleVal(builder, t.DoubleVal)
	ExternalConfigDoubleUnitAddUnit(builder, unitOffset)
	return ExternalConfigDoubleUnitEnd(builder)
}

func (rcv *ExternalConfigDoubleUnit) UnPackTo(t *ExternalConfigDoubleUnitT) {
	t.DoubleVal = rcv.DoubleVal()
	t.Unit = string(rcv.Unit())
}

func (rcv *ExternalConfigDoubleUnit) UnPack() *ExternalConfigDoubleUnitT {
	if rcv == nil { return nil }
	t := &ExternalConfigDoubleUnitT{}
	rcv.UnPackTo(t)
	return t
}

type ExternalConfigDoubleUnit struct {
	_tab flatbuffers.Table
}

func GetRootAsExternalConfigDoubleUnit(buf []byte, offset flatbuffers.UOffsetT) *ExternalConfigDoubleUnit {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ExternalConfigDoubleUnit{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsExternalConfigDoubleUnit(buf []byte, offset flatbuffers.UOffsetT) *ExternalConfigDoubleUnit {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ExternalConfigDoubleUnit{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ExternalConfigDoubleUnit) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ExternalConfigDoubleUnit) Table() flatbuffers.Table {
	return rcv._tab
}

/// the value
func (rcv *ExternalConfigDoubleUnit) DoubleVal() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// the value
func (rcv *ExternalConfigDoubleUnit) MutateDoubleVal(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// the unit of the value as string
func (rcv *ExternalConfigDoubleUnit) Unit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// the unit of the value as string
func ExternalConfigDoubleUnitStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ExternalConfigDoubleUnitAddDoubleVal(builder *flatbuffers.Builder, doubleVal float64) {
	builder.PrependFloat64Slot(0, doubleVal, 0.0)
}
func ExternalConfigDoubleUnitAddUnit(builder *flatbuffers.Builder, unit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(unit), 0)
}
func ExternalConfigDoubleUnitEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
