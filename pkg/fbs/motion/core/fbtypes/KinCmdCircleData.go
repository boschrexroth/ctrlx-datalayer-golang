// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters for the move 3D circular commands for a kinematics
type KinCmdCircleDataT struct {
	CmdKinPose []*KinCmdPosePairT `json:"cmdKinPose"`
	CmdCircleData []*KinCmdCircleDataPairT `json:"cmdCircleData"`
	CoordSys CoordSys `json:"coordSys"`
	Lim *DynamicLimitsT `json:"lim"`
}

func (t *KinCmdCircleDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	cmdKinPoseOffset := flatbuffers.UOffsetT(0)
	if t.CmdKinPose != nil {
		cmdKinPoseLength := len(t.CmdKinPose)
		cmdKinPoseOffsets := make([]flatbuffers.UOffsetT, cmdKinPoseLength)
		for j := 0; j < cmdKinPoseLength; j++ {
			cmdKinPoseOffsets[j] = t.CmdKinPose[j].Pack(builder)
		}
		KinCmdCircleDataStartCmdKinPoseVector(builder, cmdKinPoseLength)
		for j := cmdKinPoseLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(cmdKinPoseOffsets[j])
		}
		cmdKinPoseOffset = builder.EndVector(cmdKinPoseLength)
	}
	cmdCircleDataOffset := flatbuffers.UOffsetT(0)
	if t.CmdCircleData != nil {
		cmdCircleDataLength := len(t.CmdCircleData)
		cmdCircleDataOffsets := make([]flatbuffers.UOffsetT, cmdCircleDataLength)
		for j := 0; j < cmdCircleDataLength; j++ {
			cmdCircleDataOffsets[j] = t.CmdCircleData[j].Pack(builder)
		}
		KinCmdCircleDataStartCmdCircleDataVector(builder, cmdCircleDataLength)
		for j := cmdCircleDataLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(cmdCircleDataOffsets[j])
		}
		cmdCircleDataOffset = builder.EndVector(cmdCircleDataLength)
	}
	limOffset := t.Lim.Pack(builder)
	KinCmdCircleDataStart(builder)
	KinCmdCircleDataAddCmdKinPose(builder, cmdKinPoseOffset)
	KinCmdCircleDataAddCmdCircleData(builder, cmdCircleDataOffset)
	KinCmdCircleDataAddCoordSys(builder, t.CoordSys)
	KinCmdCircleDataAddLim(builder, limOffset)
	return KinCmdCircleDataEnd(builder)
}

func (rcv *KinCmdCircleData) UnPackTo(t *KinCmdCircleDataT) {
	cmdKinPoseLength := rcv.CmdKinPoseLength()
	t.CmdKinPose = make([]*KinCmdPosePairT, cmdKinPoseLength)
	for j := 0; j < cmdKinPoseLength; j++ {
		x := KinCmdPosePair{}
		rcv.CmdKinPose(&x, j)
		t.CmdKinPose[j] = x.UnPack()
	}
	cmdCircleDataLength := rcv.CmdCircleDataLength()
	t.CmdCircleData = make([]*KinCmdCircleDataPairT, cmdCircleDataLength)
	for j := 0; j < cmdCircleDataLength; j++ {
		x := KinCmdCircleDataPair{}
		rcv.CmdCircleData(&x, j)
		t.CmdCircleData[j] = x.UnPack()
	}
	t.CoordSys = rcv.CoordSys()
	t.Lim = rcv.Lim(nil).UnPack()
}

func (rcv *KinCmdCircleData) UnPack() *KinCmdCircleDataT {
	if rcv == nil { return nil }
	t := &KinCmdCircleDataT{}
	rcv.UnPackTo(t)
	return t
}

type KinCmdCircleData struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCmdCircleData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdCircleData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCmdCircleData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCmdCircleData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdCircleData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCmdCircleData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCmdCircleData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCmdCircleData) Table() flatbuffers.Table {
	return rcv._tab
}

/// commanded target position with meanings
func (rcv *KinCmdCircleData) CmdKinPose(obj *KinCmdPosePair, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *KinCmdCircleData) CmdKinPoseLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// commanded target position with meanings
/// commanded circle data with circle meanings
func (rcv *KinCmdCircleData) CmdCircleData(obj *KinCmdCircleDataPair, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *KinCmdCircleData) CmdCircleDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// commanded circle data with circle meanings
/// coordSys for commanded target position
func (rcv *KinCmdCircleData) CoordSys() CoordSys {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return CoordSys(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// coordSys for commanded target position
func (rcv *KinCmdCircleData) MutateCoordSys(n CoordSys) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

/// dynamic limits for the motion of this command
func (rcv *KinCmdCircleData) Lim(obj *DynamicLimits) *DynamicLimits {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DynamicLimits)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// dynamic limits for the motion of this command
func KinCmdCircleDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func KinCmdCircleDataAddCmdKinPose(builder *flatbuffers.Builder, cmdKinPose flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(cmdKinPose), 0)
}
func KinCmdCircleDataStartCmdKinPoseVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinCmdCircleDataAddCmdCircleData(builder *flatbuffers.Builder, cmdCircleData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(cmdCircleData), 0)
}
func KinCmdCircleDataStartCmdCircleDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinCmdCircleDataAddCoordSys(builder *flatbuffers.Builder, coordSys CoordSys) {
	builder.PrependInt8Slot(2, int8(coordSys), 0)
}
func KinCmdCircleDataAddLim(builder *flatbuffers.Builder, lim flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(lim), 0)
}
func KinCmdCircleDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
