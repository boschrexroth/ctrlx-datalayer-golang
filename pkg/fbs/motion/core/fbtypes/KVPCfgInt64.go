// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Table for just one single int64 value (can be used for enums, bitfields, integer numbers)
type KVPCfgInt64T struct {
	IntVal int64 `json:"intVal"`
}

func (t *KVPCfgInt64T) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	KVPCfgInt64Start(builder)
	KVPCfgInt64AddIntVal(builder, t.IntVal)
	return KVPCfgInt64End(builder)
}

func (rcv *KVPCfgInt64) UnPackTo(t *KVPCfgInt64T) {
	t.IntVal = rcv.IntVal()
}

func (rcv *KVPCfgInt64) UnPack() *KVPCfgInt64T {
	if rcv == nil { return nil }
	t := &KVPCfgInt64T{}
	rcv.UnPackTo(t)
	return t
}

type KVPCfgInt64 struct {
	_tab flatbuffers.Table
}

func GetRootAsKVPCfgInt64(buf []byte, offset flatbuffers.UOffsetT) *KVPCfgInt64 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KVPCfgInt64{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKVPCfgInt64(buf []byte, offset flatbuffers.UOffsetT) *KVPCfgInt64 {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KVPCfgInt64{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KVPCfgInt64) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KVPCfgInt64) Table() flatbuffers.Table {
	return rcv._tab
}

/// the value
func (rcv *KVPCfgInt64) IntVal() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// the value
func (rcv *KVPCfgInt64) MutateIntVal(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func KVPCfgInt64Start(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func KVPCfgInt64AddIntVal(builder *flatbuffers.Builder, intVal int64) {
	builder.PrependInt64Slot(0, intVal, 0)
}
func KVPCfgInt64End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
