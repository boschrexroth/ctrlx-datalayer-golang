// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of the error reaction in the motion kernel kinematics function 'belt synchronization'
type KinCfgBeltSyncErrorT struct {
	ErrorReactionType KinBeltErrorReactionType `json:"errorReactionType"`
	KinBeltRetractDirectionType KinBeltRetractDirectionType `json:"kinBeltRetractDirectionType"`
	RetractPlaneValue float64 `json:"retractPlaneValue"`
	RetractPlaneValueUnit string `json:"retractPlaneValueUnit"`
	RetractMotionLimits *KinCfgLimitsT `json:"retractMotionLimits"`
}

func (t *KinCfgBeltSyncErrorT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	retractPlaneValueUnitOffset := flatbuffers.UOffsetT(0)
	if t.RetractPlaneValueUnit != "" {
		retractPlaneValueUnitOffset = builder.CreateString(t.RetractPlaneValueUnit)
	}
	retractMotionLimitsOffset := t.RetractMotionLimits.Pack(builder)
	KinCfgBeltSyncErrorStart(builder)
	KinCfgBeltSyncErrorAddErrorReactionType(builder, t.ErrorReactionType)
	KinCfgBeltSyncErrorAddKinBeltRetractDirectionType(builder, t.KinBeltRetractDirectionType)
	KinCfgBeltSyncErrorAddRetractPlaneValue(builder, t.RetractPlaneValue)
	KinCfgBeltSyncErrorAddRetractPlaneValueUnit(builder, retractPlaneValueUnitOffset)
	KinCfgBeltSyncErrorAddRetractMotionLimits(builder, retractMotionLimitsOffset)
	return KinCfgBeltSyncErrorEnd(builder)
}

func (rcv *KinCfgBeltSyncError) UnPackTo(t *KinCfgBeltSyncErrorT) {
	t.ErrorReactionType = rcv.ErrorReactionType()
	t.KinBeltRetractDirectionType = rcv.KinBeltRetractDirectionType()
	t.RetractPlaneValue = rcv.RetractPlaneValue()
	t.RetractPlaneValueUnit = string(rcv.RetractPlaneValueUnit())
	t.RetractMotionLimits = rcv.RetractMotionLimits(nil).UnPack()
}

func (rcv *KinCfgBeltSyncError) UnPack() *KinCfgBeltSyncErrorT {
	if rcv == nil { return nil }
	t := &KinCfgBeltSyncErrorT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgBeltSyncError struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgBeltSyncError(buf []byte, offset flatbuffers.UOffsetT) *KinCfgBeltSyncError {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgBeltSyncError{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgBeltSyncError(buf []byte, offset flatbuffers.UOffsetT) *KinCfgBeltSyncError {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgBeltSyncError{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgBeltSyncError) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgBeltSyncError) Table() flatbuffers.Table {
	return rcv._tab
}

/// type of the error reaction in the kinematics function 'belt synchronization'
func (rcv *KinCfgBeltSyncError) ErrorReactionType() KinBeltErrorReactionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return KinBeltErrorReactionType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 2
}

/// type of the error reaction in the kinematics function 'belt synchronization'
func (rcv *KinCfgBeltSyncError) MutateErrorReactionType(n KinBeltErrorReactionType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

/// direction of the retract motion in case of an error in the kinematics function 'belt synchronization'
func (rcv *KinCfgBeltSyncError) KinBeltRetractDirectionType() KinBeltRetractDirectionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return KinBeltRetractDirectionType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 4
}

/// direction of the retract motion in case of an error in the kinematics function 'belt synchronization'
func (rcv *KinCfgBeltSyncError) MutateKinBeltRetractDirectionType(n KinBeltRetractDirectionType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

/// Value of the retract plane
func (rcv *KinCfgBeltSyncError) RetractPlaneValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Value of the retract plane
func (rcv *KinCfgBeltSyncError) MutateRetractPlaneValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// unit of retractPlaneValue
func (rcv *KinCfgBeltSyncError) RetractPlaneValueUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of retractPlaneValue
/// dynamic limits of the retract motion (absolute values)
func (rcv *KinCfgBeltSyncError) RetractMotionLimits(obj *KinCfgLimits) *KinCfgLimits {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(KinCfgLimits)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// dynamic limits of the retract motion (absolute values)
func KinCfgBeltSyncErrorStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func KinCfgBeltSyncErrorAddErrorReactionType(builder *flatbuffers.Builder, errorReactionType KinBeltErrorReactionType) {
	builder.PrependInt8Slot(0, int8(errorReactionType), 2)
}
func KinCfgBeltSyncErrorAddKinBeltRetractDirectionType(builder *flatbuffers.Builder, kinBeltRetractDirectionType KinBeltRetractDirectionType) {
	builder.PrependInt8Slot(1, int8(kinBeltRetractDirectionType), 4)
}
func KinCfgBeltSyncErrorAddRetractPlaneValue(builder *flatbuffers.Builder, retractPlaneValue float64) {
	builder.PrependFloat64Slot(2, retractPlaneValue, 0.0)
}
func KinCfgBeltSyncErrorAddRetractPlaneValueUnit(builder *flatbuffers.Builder, retractPlaneValueUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(retractPlaneValueUnit), 0)
}
func KinCfgBeltSyncErrorAddRetractMotionLimits(builder *flatbuffers.Builder, retractMotionLimits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(retractMotionLimits), 0)
}
func KinCfgBeltSyncErrorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
