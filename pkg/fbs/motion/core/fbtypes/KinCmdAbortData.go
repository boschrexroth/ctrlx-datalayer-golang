// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Command data for kinAbort command and kinInterrupt command
type KinCmdAbortDataT struct {
	Type BrakeLimit
}

func (t *KinCmdAbortDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	KinCmdAbortDataStart(builder)
	KinCmdAbortDataAddType(builder, t.Type)
	return KinCmdAbortDataEnd(builder)
}

func (rcv *KinCmdAbortData) UnPackTo(t *KinCmdAbortDataT) {
	t.Type = rcv.Type()
}

func (rcv *KinCmdAbortData) UnPack() *KinCmdAbortDataT {
	if rcv == nil { return nil }
	t := &KinCmdAbortDataT{}
	rcv.UnPackTo(t)
	return t
}

type KinCmdAbortData struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCmdAbortData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdAbortData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCmdAbortData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCmdAbortData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdAbortData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCmdAbortData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCmdAbortData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCmdAbortData) Table() flatbuffers.Table {
	return rcv._tab
}

/// dynamic limits of the deceleration ramp (default is "soft stop")
func (rcv *KinCmdAbortData) Type() BrakeLimit {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return BrakeLimit(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// dynamic limits of the deceleration ramp (default is "soft stop")
func (rcv *KinCmdAbortData) MutateType(n BrakeLimit) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func KinCmdAbortDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func KinCmdAbortDataAddType(builder *flatbuffers.Builder, type_ BrakeLimit) {
	builder.PrependInt8Slot(0, int8(type_), 0)
}
func KinCmdAbortDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
