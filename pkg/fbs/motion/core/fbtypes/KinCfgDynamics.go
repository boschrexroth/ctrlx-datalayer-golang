// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// preparation limits for kinematics
type KinCfgDynamicsT struct {
	FeedGroup *FeedGroupSettingsT
}

func (t *KinCfgDynamicsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	feedGroupOffset := t.FeedGroup.Pack(builder)
	KinCfgDynamicsStart(builder)
	KinCfgDynamicsAddFeedGroup(builder, feedGroupOffset)
	return KinCfgDynamicsEnd(builder)
}

func (rcv *KinCfgDynamics) UnPackTo(t *KinCfgDynamicsT) {
	t.FeedGroup = rcv.FeedGroup(nil).UnPack()
}

func (rcv *KinCfgDynamics) UnPack() *KinCfgDynamicsT {
	if rcv == nil { return nil }
	t := &KinCfgDynamicsT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgDynamics struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgDynamics(buf []byte, offset flatbuffers.UOffsetT) *KinCfgDynamics {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgDynamics{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgDynamics(buf []byte, offset flatbuffers.UOffsetT) *KinCfgDynamics {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgDynamics{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgDynamics) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgDynamics) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the default feedGroup that should be used to define the path parameter (default FG_XYZ)
/// possible feedGroups are: "FG_XYZ", "FG_XYZ_O", "FG_XYZ_A", "FG_XYZ_O_A"
func (rcv *KinCfgDynamics) FeedGroup(obj *FeedGroupSettings) *FeedGroupSettings {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FeedGroupSettings)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// name of the default feedGroup that should be used to define the path parameter (default FG_XYZ)
/// possible feedGroups are: "FG_XYZ", "FG_XYZ_O", "FG_XYZ_A", "FG_XYZ_O_A"
func KinCfgDynamicsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func KinCfgDynamicsAddFeedGroup(builder *flatbuffers.Builder, feedGroup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(feedGroup), 0)
}
func KinCfgDynamicsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
