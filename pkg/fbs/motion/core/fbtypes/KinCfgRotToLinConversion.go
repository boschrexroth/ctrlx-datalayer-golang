// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// common configuration of orientation. Conversion factor for the relation between linear values and rotation values.
type KinCfgRotToLinConversionT struct {
	Factor float64 `json:"factor"`
	UnitLin string `json:"unit_lin"`
	UnitRot string `json:"unit_rot"`
}

func (t *KinCfgRotToLinConversionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	unitLinOffset := flatbuffers.UOffsetT(0)
	if t.UnitLin != "" {
		unitLinOffset = builder.CreateString(t.UnitLin)
	}
	unitRotOffset := flatbuffers.UOffsetT(0)
	if t.UnitRot != "" {
		unitRotOffset = builder.CreateString(t.UnitRot)
	}
	KinCfgRotToLinConversionStart(builder)
	KinCfgRotToLinConversionAddFactor(builder, t.Factor)
	KinCfgRotToLinConversionAddUnitLin(builder, unitLinOffset)
	KinCfgRotToLinConversionAddUnitRot(builder, unitRotOffset)
	return KinCfgRotToLinConversionEnd(builder)
}

func (rcv *KinCfgRotToLinConversion) UnPackTo(t *KinCfgRotToLinConversionT) {
	t.Factor = rcv.Factor()
	t.UnitLin = string(rcv.UnitLin())
	t.UnitRot = string(rcv.UnitRot())
}

func (rcv *KinCfgRotToLinConversion) UnPack() *KinCfgRotToLinConversionT {
	if rcv == nil { return nil }
	t := &KinCfgRotToLinConversionT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgRotToLinConversion struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgRotToLinConversion(buf []byte, offset flatbuffers.UOffsetT) *KinCfgRotToLinConversion {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgRotToLinConversion{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgRotToLinConversion(buf []byte, offset flatbuffers.UOffsetT) *KinCfgRotToLinConversion {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgRotToLinConversion{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgRotToLinConversion) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgRotToLinConversion) Table() flatbuffers.Table {
	return rcv._tab
}

/// factor = (linear value)/(rotational value)
func (rcv *KinCfgRotToLinConversion) Factor() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// factor = (linear value)/(rotational value)
func (rcv *KinCfgRotToLinConversion) MutateFactor(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// unit for linear
func (rcv *KinCfgRotToLinConversion) UnitLin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit for linear
/// unit for rotation
func (rcv *KinCfgRotToLinConversion) UnitRot() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit for rotation
func KinCfgRotToLinConversionStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func KinCfgRotToLinConversionAddFactor(builder *flatbuffers.Builder, factor float64) {
	builder.PrependFloat64Slot(0, factor, 0.0)
}
func KinCfgRotToLinConversionAddUnitLin(builder *flatbuffers.Builder, unitLin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(unitLin), 0)
}
func KinCfgRotToLinConversionAddUnitRot(builder *flatbuffers.Builder, unitRot flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(unitRot), 0)
}
func KinCfgRotToLinConversionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
