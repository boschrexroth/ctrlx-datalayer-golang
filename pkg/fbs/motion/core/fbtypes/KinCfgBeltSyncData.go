// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration of motion kernel kinematics function 'belt synchronization'
type KinCfgBeltSyncDataT struct {
	DistToStartPlane float64 `json:"distToStartPlane"`
	DistToEndPlane float64 `json:"distToEndPlane"`
	SyncLength float64 `json:"syncLength"`
	DynLimFactor float64 `json:"dynLimFactor"`
	CameraCoordSysNameDefault string `json:"cameraCoordSysNameDefault"`
	DistToStartPlaneUnit string `json:"distToStartPlaneUnit"`
	DistToEndPlaneUnit string `json:"distToEndPlaneUnit"`
	SyncLengthUnit string `json:"syncLengthUnit"`
}

func (t *KinCfgBeltSyncDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	cameraCoordSysNameDefaultOffset := flatbuffers.UOffsetT(0)
	if t.CameraCoordSysNameDefault != "" {
		cameraCoordSysNameDefaultOffset = builder.CreateString(t.CameraCoordSysNameDefault)
	}
	distToStartPlaneUnitOffset := flatbuffers.UOffsetT(0)
	if t.DistToStartPlaneUnit != "" {
		distToStartPlaneUnitOffset = builder.CreateString(t.DistToStartPlaneUnit)
	}
	distToEndPlaneUnitOffset := flatbuffers.UOffsetT(0)
	if t.DistToEndPlaneUnit != "" {
		distToEndPlaneUnitOffset = builder.CreateString(t.DistToEndPlaneUnit)
	}
	syncLengthUnitOffset := flatbuffers.UOffsetT(0)
	if t.SyncLengthUnit != "" {
		syncLengthUnitOffset = builder.CreateString(t.SyncLengthUnit)
	}
	KinCfgBeltSyncDataStart(builder)
	KinCfgBeltSyncDataAddDistToStartPlane(builder, t.DistToStartPlane)
	KinCfgBeltSyncDataAddDistToEndPlane(builder, t.DistToEndPlane)
	KinCfgBeltSyncDataAddSyncLength(builder, t.SyncLength)
	KinCfgBeltSyncDataAddDynLimFactor(builder, t.DynLimFactor)
	KinCfgBeltSyncDataAddCameraCoordSysNameDefault(builder, cameraCoordSysNameDefaultOffset)
	KinCfgBeltSyncDataAddDistToStartPlaneUnit(builder, distToStartPlaneUnitOffset)
	KinCfgBeltSyncDataAddDistToEndPlaneUnit(builder, distToEndPlaneUnitOffset)
	KinCfgBeltSyncDataAddSyncLengthUnit(builder, syncLengthUnitOffset)
	return KinCfgBeltSyncDataEnd(builder)
}

func (rcv *KinCfgBeltSyncData) UnPackTo(t *KinCfgBeltSyncDataT) {
	t.DistToStartPlane = rcv.DistToStartPlane()
	t.DistToEndPlane = rcv.DistToEndPlane()
	t.SyncLength = rcv.SyncLength()
	t.DynLimFactor = rcv.DynLimFactor()
	t.CameraCoordSysNameDefault = string(rcv.CameraCoordSysNameDefault())
	t.DistToStartPlaneUnit = string(rcv.DistToStartPlaneUnit())
	t.DistToEndPlaneUnit = string(rcv.DistToEndPlaneUnit())
	t.SyncLengthUnit = string(rcv.SyncLengthUnit())
}

func (rcv *KinCfgBeltSyncData) UnPack() *KinCfgBeltSyncDataT {
	if rcv == nil { return nil }
	t := &KinCfgBeltSyncDataT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgBeltSyncData struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgBeltSyncData(buf []byte, offset flatbuffers.UOffsetT) *KinCfgBeltSyncData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgBeltSyncData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgBeltSyncData(buf []byte, offset flatbuffers.UOffsetT) *KinCfgBeltSyncData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgBeltSyncData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgBeltSyncData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgBeltSyncData) Table() flatbuffers.Table {
	return rcv._tab
}

/// distance from the coordinate system of the belt to start plane
func (rcv *KinCfgBeltSyncData) DistToStartPlane() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// distance from the coordinate system of the belt to start plane
func (rcv *KinCfgBeltSyncData) MutateDistToStartPlane(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// distance to the end plane, starting at start plane
func (rcv *KinCfgBeltSyncData) DistToEndPlane() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// distance to the end plane, starting at start plane
func (rcv *KinCfgBeltSyncData) MutateDistToEndPlane(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// way where synchronization has to be finished, starting at start plane
func (rcv *KinCfgBeltSyncData) SyncLength() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// way where synchronization has to be finished, starting at start plane
func (rcv *KinCfgBeltSyncData) MutateSyncLength(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// factor for the dynamic limits of (de)synchronization compensation movements
func (rcv *KinCfgBeltSyncData) DynLimFactor() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// factor for the dynamic limits of (de)synchronization compensation movements
func (rcv *KinCfgBeltSyncData) MutateDynLimFactor(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// name of the coordinate system of the default camera
func (rcv *KinCfgBeltSyncData) CameraCoordSysNameDefault() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the coordinate system of the default camera
/// unit of distToStartPlane
func (rcv *KinCfgBeltSyncData) DistToStartPlaneUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of distToStartPlane
/// unit of distToEndPlane
func (rcv *KinCfgBeltSyncData) DistToEndPlaneUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of distToEndPlane
/// unit of syncLength
func (rcv *KinCfgBeltSyncData) SyncLengthUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of syncLength
func KinCfgBeltSyncDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func KinCfgBeltSyncDataAddDistToStartPlane(builder *flatbuffers.Builder, distToStartPlane float64) {
	builder.PrependFloat64Slot(0, distToStartPlane, 0.0)
}
func KinCfgBeltSyncDataAddDistToEndPlane(builder *flatbuffers.Builder, distToEndPlane float64) {
	builder.PrependFloat64Slot(1, distToEndPlane, 0.0)
}
func KinCfgBeltSyncDataAddSyncLength(builder *flatbuffers.Builder, syncLength float64) {
	builder.PrependFloat64Slot(2, syncLength, 0.0)
}
func KinCfgBeltSyncDataAddDynLimFactor(builder *flatbuffers.Builder, dynLimFactor float64) {
	builder.PrependFloat64Slot(3, dynLimFactor, 0.0)
}
func KinCfgBeltSyncDataAddCameraCoordSysNameDefault(builder *flatbuffers.Builder, cameraCoordSysNameDefault flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(cameraCoordSysNameDefault), 0)
}
func KinCfgBeltSyncDataAddDistToStartPlaneUnit(builder *flatbuffers.Builder, distToStartPlaneUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(distToStartPlaneUnit), 0)
}
func KinCfgBeltSyncDataAddDistToEndPlaneUnit(builder *flatbuffers.Builder, distToEndPlaneUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(distToEndPlaneUnit), 0)
}
func KinCfgBeltSyncDataAddSyncLengthUnit(builder *flatbuffers.Builder, syncLengthUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(syncLengthUnit), 0)
}
func KinCfgBeltSyncDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
