// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Packed pair of target position meaning and attribute
type Ext2dCircleMeaningT struct {
	Meaning CircleMeaning2d `json:"meaning"`
	AddAttributes AddAttributes `json:"addAttributes"`
}

func (t *Ext2dCircleMeaningT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	Ext2dCircleMeaningStart(builder)
	Ext2dCircleMeaningAddMeaning(builder, t.Meaning)
	Ext2dCircleMeaningAddAddAttributes(builder, t.AddAttributes)
	return Ext2dCircleMeaningEnd(builder)
}

func (rcv *Ext2dCircleMeaning) UnPackTo(t *Ext2dCircleMeaningT) {
	t.Meaning = rcv.Meaning()
	t.AddAttributes = rcv.AddAttributes()
}

func (rcv *Ext2dCircleMeaning) UnPack() *Ext2dCircleMeaningT {
	if rcv == nil { return nil }
	t := &Ext2dCircleMeaningT{}
	rcv.UnPackTo(t)
	return t
}

type Ext2dCircleMeaning struct {
	_tab flatbuffers.Table
}

func GetRootAsExt2dCircleMeaning(buf []byte, offset flatbuffers.UOffsetT) *Ext2dCircleMeaning {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Ext2dCircleMeaning{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsExt2dCircleMeaning(buf []byte, offset flatbuffers.UOffsetT) *Ext2dCircleMeaning {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Ext2dCircleMeaning{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Ext2dCircleMeaning) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Ext2dCircleMeaning) Table() flatbuffers.Table {
	return rcv._tab
}

/// related meaning of the value
/// possible meanings are: "RADIUS", "CP_X", "CP_Y", "CP_Z", "REV"
func (rcv *Ext2dCircleMeaning) Meaning() CircleMeaning2d {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return CircleMeaning2d(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// related meaning of the value
/// possible meanings are: "RADIUS", "CP_X", "CP_Y", "CP_Z", "REV"
func (rcv *Ext2dCircleMeaning) MutateMeaning(n CircleMeaning2d) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

/// attributes for the target position meaning
/// possible meanings are: "UNDEF", "INCR_VALUE", "ABS_VALUE", "SHORT_WAY", "POS_ROT_DIR", "NEG_ROT_DIR"
func (rcv *Ext2dCircleMeaning) AddAttributes() AddAttributes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return AddAttributes(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// attributes for the target position meaning
/// possible meanings are: "UNDEF", "INCR_VALUE", "ABS_VALUE", "SHORT_WAY", "POS_ROT_DIR", "NEG_ROT_DIR"
func (rcv *Ext2dCircleMeaning) MutateAddAttributes(n AddAttributes) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func Ext2dCircleMeaningStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func Ext2dCircleMeaningAddMeaning(builder *flatbuffers.Builder, meaning CircleMeaning2d) {
	builder.PrependInt8Slot(0, int8(meaning), 0)
}
func Ext2dCircleMeaningAddAddAttributes(builder *flatbuffers.Builder, addAttributes AddAttributes) {
	builder.PrependInt8Slot(1, int8(addAttributes), 0)
}
func Ext2dCircleMeaningEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
