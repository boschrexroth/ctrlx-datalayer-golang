// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// currently the actual values of the probe
type ProbeActualValuesT struct {
	Valid bool
	PosEdgeValue float64
	NegEdgeValue float64
	DifferValue float64
	DiffCount uint32
	PosEdgeCount uint32
	NegEdgeCount uint32
	MarksEdgeCount uint32
	Status string
	PosEdgeValueUnit string
	NegEdgeValueUnit string
	DifferValueUnit string
}

func (t *ProbeActualValuesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	statusOffset := builder.CreateString(t.Status)
	posEdgeValueUnitOffset := builder.CreateString(t.PosEdgeValueUnit)
	negEdgeValueUnitOffset := builder.CreateString(t.NegEdgeValueUnit)
	differValueUnitOffset := builder.CreateString(t.DifferValueUnit)
	ProbeActualValuesStart(builder)
	ProbeActualValuesAddValid(builder, t.Valid)
	ProbeActualValuesAddPosEdgeValue(builder, t.PosEdgeValue)
	ProbeActualValuesAddNegEdgeValue(builder, t.NegEdgeValue)
	ProbeActualValuesAddDifferValue(builder, t.DifferValue)
	ProbeActualValuesAddDiffCount(builder, t.DiffCount)
	ProbeActualValuesAddPosEdgeCount(builder, t.PosEdgeCount)
	ProbeActualValuesAddNegEdgeCount(builder, t.NegEdgeCount)
	ProbeActualValuesAddMarksEdgeCount(builder, t.MarksEdgeCount)
	ProbeActualValuesAddStatus(builder, statusOffset)
	ProbeActualValuesAddPosEdgeValueUnit(builder, posEdgeValueUnitOffset)
	ProbeActualValuesAddNegEdgeValueUnit(builder, negEdgeValueUnitOffset)
	ProbeActualValuesAddDifferValueUnit(builder, differValueUnitOffset)
	return ProbeActualValuesEnd(builder)
}

func (rcv *ProbeActualValues) UnPackTo(t *ProbeActualValuesT) {
	t.Valid = rcv.Valid()
	t.PosEdgeValue = rcv.PosEdgeValue()
	t.NegEdgeValue = rcv.NegEdgeValue()
	t.DifferValue = rcv.DifferValue()
	t.DiffCount = rcv.DiffCount()
	t.PosEdgeCount = rcv.PosEdgeCount()
	t.NegEdgeCount = rcv.NegEdgeCount()
	t.MarksEdgeCount = rcv.MarksEdgeCount()
	t.Status = string(rcv.Status())
	t.PosEdgeValueUnit = string(rcv.PosEdgeValueUnit())
	t.NegEdgeValueUnit = string(rcv.NegEdgeValueUnit())
	t.DifferValueUnit = string(rcv.DifferValueUnit())
}

func (rcv *ProbeActualValues) UnPack() *ProbeActualValuesT {
	if rcv == nil { return nil }
	t := &ProbeActualValuesT{}
	rcv.UnPackTo(t)
	return t
}

type ProbeActualValues struct {
	_tab flatbuffers.Table
}

func GetRootAsProbeActualValues(buf []byte, offset flatbuffers.UOffsetT) *ProbeActualValues {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ProbeActualValues{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsProbeActualValues(buf []byte, offset flatbuffers.UOffsetT) *ProbeActualValues {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ProbeActualValues{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ProbeActualValues) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProbeActualValues) Table() flatbuffers.Table {
	return rcv._tab
}

/// currently the data of vaild 
func (rcv *ProbeActualValues) Valid() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// currently the data of vaild 
func (rcv *ProbeActualValues) MutateValid(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// currently positive edge value
func (rcv *ProbeActualValues) PosEdgeValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// currently positive edge value
func (rcv *ProbeActualValues) MutatePosEdgeValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// currently negative edge value
func (rcv *ProbeActualValues) NegEdgeValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// currently negative edge value
func (rcv *ProbeActualValues) MutateNegEdgeValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// currently difference of probe values
func (rcv *ProbeActualValues) DifferValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// currently difference of probe values
func (rcv *ProbeActualValues) MutateDifferValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// currently difference count
func (rcv *ProbeActualValues) DiffCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// currently difference count
func (rcv *ProbeActualValues) MutateDiffCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

/// currently positive edge count
func (rcv *ProbeActualValues) PosEdgeCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// currently positive edge count
func (rcv *ProbeActualValues) MutatePosEdgeCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

/// currently negative edge count
func (rcv *ProbeActualValues) NegEdgeCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// currently negative edge count
func (rcv *ProbeActualValues) MutateNegEdgeCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

/// currently marks edge count
func (rcv *ProbeActualValues) MarksEdgeCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// currently marks edge count
func (rcv *ProbeActualValues) MutateMarksEdgeCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

/// currently probe status
func (rcv *ProbeActualValues) Status() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// currently probe status
/// unit of the actual positive edge value
func (rcv *ProbeActualValues) PosEdgeValueUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of the actual positive edge value
/// unit of the actual negative edge value
func (rcv *ProbeActualValues) NegEdgeValueUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of the actual negative edge value
/// unit of the actual difference values
func (rcv *ProbeActualValues) DifferValueUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of the actual difference values
func ProbeActualValuesStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func ProbeActualValuesAddValid(builder *flatbuffers.Builder, valid bool) {
	builder.PrependBoolSlot(0, valid, false)
}
func ProbeActualValuesAddPosEdgeValue(builder *flatbuffers.Builder, posEdgeValue float64) {
	builder.PrependFloat64Slot(1, posEdgeValue, 0.0)
}
func ProbeActualValuesAddNegEdgeValue(builder *flatbuffers.Builder, negEdgeValue float64) {
	builder.PrependFloat64Slot(2, negEdgeValue, 0.0)
}
func ProbeActualValuesAddDifferValue(builder *flatbuffers.Builder, differValue float64) {
	builder.PrependFloat64Slot(3, differValue, 0.0)
}
func ProbeActualValuesAddDiffCount(builder *flatbuffers.Builder, diffCount uint32) {
	builder.PrependUint32Slot(4, diffCount, 0)
}
func ProbeActualValuesAddPosEdgeCount(builder *flatbuffers.Builder, posEdgeCount uint32) {
	builder.PrependUint32Slot(5, posEdgeCount, 0)
}
func ProbeActualValuesAddNegEdgeCount(builder *flatbuffers.Builder, negEdgeCount uint32) {
	builder.PrependUint32Slot(6, negEdgeCount, 0)
}
func ProbeActualValuesAddMarksEdgeCount(builder *flatbuffers.Builder, marksEdgeCount uint32) {
	builder.PrependUint32Slot(7, marksEdgeCount, 0)
}
func ProbeActualValuesAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(status), 0)
}
func ProbeActualValuesAddPosEdgeValueUnit(builder *flatbuffers.Builder, posEdgeValueUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(posEdgeValueUnit), 0)
}
func ProbeActualValuesAddNegEdgeValueUnit(builder *flatbuffers.Builder, negEdgeValueUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(negEdgeValueUnit), 0)
}
func ProbeActualValuesAddDifferValueUnit(builder *flatbuffers.Builder, differValueUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(differValueUnit), 0)
}
func ProbeActualValuesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
