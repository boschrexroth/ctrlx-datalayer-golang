// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// get informations of all active commands of a single motion object
type allActCmdJobObjectsT struct {
	Cmds []*actCmdJobObjectsT
}

func (t *allActCmdJobObjectsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	cmdsOffset := flatbuffers.UOffsetT(0)
	if t.Cmds != nil {
		cmdsLength := len(t.Cmds)
		cmdsOffsets := make([]flatbuffers.UOffsetT, cmdsLength)
		for j := 0; j < cmdsLength; j++ {
			cmdsOffsets[j] = t.Cmds[j].Pack(builder)
		}
		allActCmdJobObjectsStartCmdsVector(builder, cmdsLength)
		for j := cmdsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(cmdsOffsets[j])
		}
		cmdsOffset = builder.EndVector(cmdsLength)
	}
	allActCmdJobObjectsStart(builder)
	allActCmdJobObjectsAddCmds(builder, cmdsOffset)
	return allActCmdJobObjectsEnd(builder)
}

func (rcv *allActCmdJobObjects) UnPackTo(t *allActCmdJobObjectsT) {
	cmdsLength := rcv.CmdsLength()
	t.Cmds = make([]*actCmdJobObjectsT, cmdsLength)
	for j := 0; j < cmdsLength; j++ {
		x := actCmdJobObjects{}
		rcv.Cmds(&x, j)
		t.Cmds[j] = x.UnPack()
	}
}

func (rcv *allActCmdJobObjects) UnPack() *allActCmdJobObjectsT {
	if rcv == nil { return nil }
	t := &allActCmdJobObjectsT{}
	rcv.UnPackTo(t)
	return t
}

type allActCmdJobObjects struct {
	_tab flatbuffers.Table
}

func GetRootAsallActCmdJobObjects(buf []byte, offset flatbuffers.UOffsetT) *allActCmdJobObjects {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &allActCmdJobObjects{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsallActCmdJobObjects(buf []byte, offset flatbuffers.UOffsetT) *allActCmdJobObjects {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &allActCmdJobObjects{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *allActCmdJobObjects) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *allActCmdJobObjects) Table() flatbuffers.Table {
	return rcv._tab
}

/// vector of all command informations
func (rcv *allActCmdJobObjects) Cmds(obj *actCmdJobObjects, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *allActCmdJobObjects) CmdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of all command informations
func allActCmdJobObjectsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func allActCmdJobObjectsAddCmds(builder *flatbuffers.Builder, cmds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(cmds), 0)
}
func allActCmdJobObjectsStartCmdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func allActCmdJobObjectsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
