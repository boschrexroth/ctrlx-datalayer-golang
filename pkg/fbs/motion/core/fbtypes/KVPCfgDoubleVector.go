// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Table for a vector of double values
type KVPCfgDoubleVectorT struct {
	DoubleVector []float64 `json:"doubleVector"`
}

func (t *KVPCfgDoubleVectorT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	doubleVectorOffset := flatbuffers.UOffsetT(0)
	if t.DoubleVector != nil {
		doubleVectorLength := len(t.DoubleVector)
		KVPCfgDoubleVectorStartDoubleVectorVector(builder, doubleVectorLength)
		for j := doubleVectorLength - 1; j >= 0; j-- {
			builder.PrependFloat64(t.DoubleVector[j])
		}
		doubleVectorOffset = builder.EndVector(doubleVectorLength)
	}
	KVPCfgDoubleVectorStart(builder)
	KVPCfgDoubleVectorAddDoubleVector(builder, doubleVectorOffset)
	return KVPCfgDoubleVectorEnd(builder)
}

func (rcv *KVPCfgDoubleVector) UnPackTo(t *KVPCfgDoubleVectorT) {
	doubleVectorLength := rcv.DoubleVectorLength()
	t.DoubleVector = make([]float64, doubleVectorLength)
	for j := 0; j < doubleVectorLength; j++ {
		t.DoubleVector[j] = rcv.DoubleVector(j)
	}
}

func (rcv *KVPCfgDoubleVector) UnPack() *KVPCfgDoubleVectorT {
	if rcv == nil { return nil }
	t := &KVPCfgDoubleVectorT{}
	rcv.UnPackTo(t)
	return t
}

type KVPCfgDoubleVector struct {
	_tab flatbuffers.Table
}

func GetRootAsKVPCfgDoubleVector(buf []byte, offset flatbuffers.UOffsetT) *KVPCfgDoubleVector {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KVPCfgDoubleVector{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKVPCfgDoubleVector(buf []byte, offset flatbuffers.UOffsetT) *KVPCfgDoubleVector {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KVPCfgDoubleVector{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KVPCfgDoubleVector) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KVPCfgDoubleVector) Table() flatbuffers.Table {
	return rcv._tab
}

/// vector of double numbers
func (rcv *KVPCfgDoubleVector) DoubleVector(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *KVPCfgDoubleVector) DoubleVectorLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// vector of double numbers
func (rcv *KVPCfgDoubleVector) MutateDoubleVector(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func KVPCfgDoubleVectorStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func KVPCfgDoubleVectorAddDoubleVector(builder *flatbuffers.Builder, doubleVector flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(doubleVector), 0)
}
func KVPCfgDoubleVectorStartDoubleVectorVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func KVPCfgDoubleVectorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
