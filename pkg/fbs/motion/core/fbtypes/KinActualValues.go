// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// actual values of the kinematics
type KinActualValuesT struct {
	ActualPos []float64
	ActualVel float64
	ActualAcc float64
	ActualJerk float64
	ActualPosUnit []string
	ActualVelUnit string
	ActualAccUnit string
	ActualJerkUnit string
}

func (t *KinActualValuesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	actualPosOffset := flatbuffers.UOffsetT(0)
	if t.ActualPos != nil {
		actualPosLength := len(t.ActualPos)
		KinActualValuesStartActualPosVector(builder, actualPosLength)
		for j := actualPosLength - 1; j >= 0; j-- {
			builder.PrependFloat64(t.ActualPos[j])
		}
		actualPosOffset = builder.EndVector(actualPosLength)
	}
	actualPosUnitOffset := flatbuffers.UOffsetT(0)
	if t.ActualPosUnit != nil {
		actualPosUnitLength := len(t.ActualPosUnit)
		actualPosUnitOffsets := make([]flatbuffers.UOffsetT, actualPosUnitLength)
		for j := 0; j < actualPosUnitLength; j++ {
			actualPosUnitOffsets[j] = builder.CreateString(t.ActualPosUnit[j])
		}
		KinActualValuesStartActualPosUnitVector(builder, actualPosUnitLength)
		for j := actualPosUnitLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(actualPosUnitOffsets[j])
		}
		actualPosUnitOffset = builder.EndVector(actualPosUnitLength)
	}
	actualVelUnitOffset := builder.CreateString(t.ActualVelUnit)
	actualAccUnitOffset := builder.CreateString(t.ActualAccUnit)
	actualJerkUnitOffset := builder.CreateString(t.ActualJerkUnit)
	KinActualValuesStart(builder)
	KinActualValuesAddActualPos(builder, actualPosOffset)
	KinActualValuesAddActualVel(builder, t.ActualVel)
	KinActualValuesAddActualAcc(builder, t.ActualAcc)
	KinActualValuesAddActualJerk(builder, t.ActualJerk)
	KinActualValuesAddActualPosUnit(builder, actualPosUnitOffset)
	KinActualValuesAddActualVelUnit(builder, actualVelUnitOffset)
	KinActualValuesAddActualAccUnit(builder, actualAccUnitOffset)
	KinActualValuesAddActualJerkUnit(builder, actualJerkUnitOffset)
	return KinActualValuesEnd(builder)
}

func (rcv *KinActualValues) UnPackTo(t *KinActualValuesT) {
	actualPosLength := rcv.ActualPosLength()
	t.ActualPos = make([]float64, actualPosLength)
	for j := 0; j < actualPosLength; j++ {
		t.ActualPos[j] = rcv.ActualPos(j)
	}
	t.ActualVel = rcv.ActualVel()
	t.ActualAcc = rcv.ActualAcc()
	t.ActualJerk = rcv.ActualJerk()
	actualPosUnitLength := rcv.ActualPosUnitLength()
	t.ActualPosUnit = make([]string, actualPosUnitLength)
	for j := 0; j < actualPosUnitLength; j++ {
		t.ActualPosUnit[j] = string(rcv.ActualPosUnit(j))
	}
	t.ActualVelUnit = string(rcv.ActualVelUnit())
	t.ActualAccUnit = string(rcv.ActualAccUnit())
	t.ActualJerkUnit = string(rcv.ActualJerkUnit())
}

func (rcv *KinActualValues) UnPack() *KinActualValuesT {
	if rcv == nil { return nil }
	t := &KinActualValuesT{}
	rcv.UnPackTo(t)
	return t
}

type KinActualValues struct {
	_tab flatbuffers.Table
}

func GetRootAsKinActualValues(buf []byte, offset flatbuffers.UOffsetT) *KinActualValues {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinActualValues{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinActualValues(buf []byte, offset flatbuffers.UOffsetT) *KinActualValues {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinActualValues{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinActualValues) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinActualValues) Table() flatbuffers.Table {
	return rcv._tab
}

/// actual position
func (rcv *KinActualValues) ActualPos(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *KinActualValues) ActualPosLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// actual position
func (rcv *KinActualValues) MutateActualPos(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

/// actual velocity (currently not supported)
func (rcv *KinActualValues) ActualVel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// actual velocity (currently not supported)
func (rcv *KinActualValues) MutateActualVel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// actual acceleration (currently not supported)
func (rcv *KinActualValues) ActualAcc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// actual acceleration (currently not supported)
func (rcv *KinActualValues) MutateActualAcc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// actual jerk (currently not supported)
func (rcv *KinActualValues) ActualJerk() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// actual jerk (currently not supported)
func (rcv *KinActualValues) MutateActualJerk(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// units of the actual position
func (rcv *KinActualValues) ActualPosUnit(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *KinActualValues) ActualPosUnitLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// units of the actual position
/// unit of the actual velocity (currently not supported)
func (rcv *KinActualValues) ActualVelUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of the actual velocity (currently not supported)
/// unit of the actual acceleration (currently not supported)
func (rcv *KinActualValues) ActualAccUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of the actual acceleration (currently not supported)
/// unit of the actual jerk (currently not supported)
func (rcv *KinActualValues) ActualJerkUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unit of the actual jerk (currently not supported)
func KinActualValuesStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func KinActualValuesAddActualPos(builder *flatbuffers.Builder, actualPos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(actualPos), 0)
}
func KinActualValuesStartActualPosVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func KinActualValuesAddActualVel(builder *flatbuffers.Builder, actualVel float64) {
	builder.PrependFloat64Slot(1, actualVel, 0.0)
}
func KinActualValuesAddActualAcc(builder *flatbuffers.Builder, actualAcc float64) {
	builder.PrependFloat64Slot(2, actualAcc, 0.0)
}
func KinActualValuesAddActualJerk(builder *flatbuffers.Builder, actualJerk float64) {
	builder.PrependFloat64Slot(3, actualJerk, 0.0)
}
func KinActualValuesAddActualPosUnit(builder *flatbuffers.Builder, actualPosUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(actualPosUnit), 0)
}
func KinActualValuesStartActualPosUnitVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinActualValuesAddActualVelUnit(builder *flatbuffers.Builder, actualVelUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(actualVelUnit), 0)
}
func KinActualValuesAddActualAccUnit(builder *flatbuffers.Builder, actualAccUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(actualAccUnit), 0)
}
func KinActualValuesAddActualJerkUnit(builder *flatbuffers.Builder, actualJerkUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(actualJerkUnit), 0)
}
func KinActualValuesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
