// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// data of a single joint transformation set
type KinCfgJntTrafoSetT struct {
	Name string
	JntTrafo string
	Param *KinCfgJntTrafoAllParamT
}

func (t *KinCfgJntTrafoSetT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	jntTrafoOffset := builder.CreateString(t.JntTrafo)
	paramOffset := t.Param.Pack(builder)
	KinCfgJntTrafoSetStart(builder)
	KinCfgJntTrafoSetAddName(builder, nameOffset)
	KinCfgJntTrafoSetAddJntTrafo(builder, jntTrafoOffset)
	KinCfgJntTrafoSetAddParam(builder, paramOffset)
	return KinCfgJntTrafoSetEnd(builder)
}

func (rcv *KinCfgJntTrafoSet) UnPackTo(t *KinCfgJntTrafoSetT) {
	t.Name = string(rcv.Name())
	t.JntTrafo = string(rcv.JntTrafo())
	t.Param = rcv.Param(nil).UnPack()
}

func (rcv *KinCfgJntTrafoSet) UnPack() *KinCfgJntTrafoSetT {
	if rcv == nil { return nil }
	t := &KinCfgJntTrafoSetT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgJntTrafoSet struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgJntTrafoSet(buf []byte, offset flatbuffers.UOffsetT) *KinCfgJntTrafoSet {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgJntTrafoSet{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgJntTrafoSet(buf []byte, offset flatbuffers.UOffsetT) *KinCfgJntTrafoSet {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgJntTrafoSet{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgJntTrafoSet) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgJntTrafoSet) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the joint transformation set
func (rcv *KinCfgJntTrafoSet) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the joint transformation set
/// name of the joint transformation
func (rcv *KinCfgJntTrafoSet) JntTrafo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the joint transformation
/// configuration parameter of the joint transformation
func (rcv *KinCfgJntTrafoSet) Param(obj *KinCfgJntTrafoAllParam) *KinCfgJntTrafoAllParam {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(KinCfgJntTrafoAllParam)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// configuration parameter of the joint transformation
func KinCfgJntTrafoSetStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func KinCfgJntTrafoSetAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func KinCfgJntTrafoSetAddJntTrafo(builder *flatbuffers.Builder, jntTrafo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(jntTrafo), 0)
}
func KinCfgJntTrafoSetAddParam(builder *flatbuffers.Builder, param flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(param), 0)
}
func KinCfgJntTrafoSetEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
