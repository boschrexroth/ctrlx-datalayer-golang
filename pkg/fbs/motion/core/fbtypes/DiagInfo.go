// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// informations on the last diagnosis message of this motion object or of the system
type DiagInfoT struct {
	MainDiagCode uint32 `json:"mainDiagCode"`
	DetailedDiagCode uint32 `json:"detailedDiagCode"`
	ObjName string `json:"objName"`
	ObjUri string `json:"objURI"`
	Source string `json:"source"`
	AddInfo string `json:"addInfo"`
	FirstMainDiagCode uint32 `json:"firstMainDiagCode"`
	FirstDetailedDiagCode uint32 `json:"firstDetailedDiagCode"`
	FirstSource string `json:"firstSource"`
	FirstAddInfo string `json:"firstAddInfo"`
}

func (t *DiagInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	objNameOffset := flatbuffers.UOffsetT(0)
	if t.ObjName != "" {
		objNameOffset = builder.CreateString(t.ObjName)
	}
	objUriOffset := flatbuffers.UOffsetT(0)
	if t.ObjUri != "" {
		objUriOffset = builder.CreateString(t.ObjUri)
	}
	sourceOffset := flatbuffers.UOffsetT(0)
	if t.Source != "" {
		sourceOffset = builder.CreateString(t.Source)
	}
	addInfoOffset := flatbuffers.UOffsetT(0)
	if t.AddInfo != "" {
		addInfoOffset = builder.CreateString(t.AddInfo)
	}
	firstSourceOffset := flatbuffers.UOffsetT(0)
	if t.FirstSource != "" {
		firstSourceOffset = builder.CreateString(t.FirstSource)
	}
	firstAddInfoOffset := flatbuffers.UOffsetT(0)
	if t.FirstAddInfo != "" {
		firstAddInfoOffset = builder.CreateString(t.FirstAddInfo)
	}
	DiagInfoStart(builder)
	DiagInfoAddMainDiagCode(builder, t.MainDiagCode)
	DiagInfoAddDetailedDiagCode(builder, t.DetailedDiagCode)
	DiagInfoAddObjName(builder, objNameOffset)
	DiagInfoAddObjUri(builder, objUriOffset)
	DiagInfoAddSource(builder, sourceOffset)
	DiagInfoAddAddInfo(builder, addInfoOffset)
	DiagInfoAddFirstMainDiagCode(builder, t.FirstMainDiagCode)
	DiagInfoAddFirstDetailedDiagCode(builder, t.FirstDetailedDiagCode)
	DiagInfoAddFirstSource(builder, firstSourceOffset)
	DiagInfoAddFirstAddInfo(builder, firstAddInfoOffset)
	return DiagInfoEnd(builder)
}

func (rcv *DiagInfo) UnPackTo(t *DiagInfoT) {
	t.MainDiagCode = rcv.MainDiagCode()
	t.DetailedDiagCode = rcv.DetailedDiagCode()
	t.ObjName = string(rcv.ObjName())
	t.ObjUri = string(rcv.ObjUri())
	t.Source = string(rcv.Source())
	t.AddInfo = string(rcv.AddInfo())
	t.FirstMainDiagCode = rcv.FirstMainDiagCode()
	t.FirstDetailedDiagCode = rcv.FirstDetailedDiagCode()
	t.FirstSource = string(rcv.FirstSource())
	t.FirstAddInfo = string(rcv.FirstAddInfo())
}

func (rcv *DiagInfo) UnPack() *DiagInfoT {
	if rcv == nil { return nil }
	t := &DiagInfoT{}
	rcv.UnPackTo(t)
	return t
}

type DiagInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsDiagInfo(buf []byte, offset flatbuffers.UOffsetT) *DiagInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DiagInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDiagInfo(buf []byte, offset flatbuffers.UOffsetT) *DiagInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DiagInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DiagInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DiagInfo) Table() flatbuffers.Table {
	return rcv._tab
}

/// main diagnosis code (refer to the diagnosis data base)
func (rcv *DiagInfo) MainDiagCode() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// main diagnosis code (refer to the diagnosis data base)
func (rcv *DiagInfo) MutateMainDiagCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// detailed diagnosis code (refer to the diagnosis data base)
func (rcv *DiagInfo) DetailedDiagCode() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// detailed diagnosis code (refer to the diagnosis data base)
func (rcv *DiagInfo) MutateDetailedDiagCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

/// name of the motion object
func (rcv *DiagInfo) ObjName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the motion object
/// URI of the motion object
func (rcv *DiagInfo) ObjUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// URI of the motion object
/// command source, when the diagnosis refers to a command
func (rcv *DiagInfo) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// command source, when the diagnosis refers to a command
/// additional information on the error cause to help the user
func (rcv *DiagInfo) AddInfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// additional information on the error cause to help the user
/// main diagnosis code of the first error after a reset or booting (refer to the diagnosis data base)
func (rcv *DiagInfo) FirstMainDiagCode() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// main diagnosis code of the first error after a reset or booting (refer to the diagnosis data base)
func (rcv *DiagInfo) MutateFirstMainDiagCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

/// detailed diagnosis code of the first error after a reset or booting (refer to the diagnosis data base)
func (rcv *DiagInfo) FirstDetailedDiagCode() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// detailed diagnosis code of the first error after a reset or booting (refer to the diagnosis data base)
func (rcv *DiagInfo) MutateFirstDetailedDiagCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

/// command source of the first error after a reset or booting, when the diagnosis refers to a command
func (rcv *DiagInfo) FirstSource() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// command source of the first error after a reset or booting, when the diagnosis refers to a command
/// additional information on the error cause to help the user of the first error after a reset or booting
func (rcv *DiagInfo) FirstAddInfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// additional information on the error cause to help the user of the first error after a reset or booting
func DiagInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func DiagInfoAddMainDiagCode(builder *flatbuffers.Builder, mainDiagCode uint32) {
	builder.PrependUint32Slot(0, mainDiagCode, 0)
}
func DiagInfoAddDetailedDiagCode(builder *flatbuffers.Builder, detailedDiagCode uint32) {
	builder.PrependUint32Slot(1, detailedDiagCode, 0)
}
func DiagInfoAddObjName(builder *flatbuffers.Builder, objName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(objName), 0)
}
func DiagInfoAddObjUri(builder *flatbuffers.Builder, objUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(objUri), 0)
}
func DiagInfoAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(source), 0)
}
func DiagInfoAddAddInfo(builder *flatbuffers.Builder, addInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(addInfo), 0)
}
func DiagInfoAddFirstMainDiagCode(builder *flatbuffers.Builder, firstMainDiagCode uint32) {
	builder.PrependUint32Slot(6, firstMainDiagCode, 0)
}
func DiagInfoAddFirstDetailedDiagCode(builder *flatbuffers.Builder, firstDetailedDiagCode uint32) {
	builder.PrependUint32Slot(7, firstDetailedDiagCode, 0)
}
func DiagInfoAddFirstSource(builder *flatbuffers.Builder, firstSource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(firstSource), 0)
}
func DiagInfoAddFirstAddInfo(builder *flatbuffers.Builder, firstAddInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(firstAddInfo), 0)
}
func DiagInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
