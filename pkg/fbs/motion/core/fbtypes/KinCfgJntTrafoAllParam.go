// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// configuration parameter of a single joint transformation
type KinCfgJntTrafoAllParamT struct {
	AxisAssignment *KinCfgJntTrafoAxisAssignmentT
	Groups []*KinCfgJntTrafoParamGroupT
	General *KinCfgJntTrafoParamGroupT
}

func (t *KinCfgJntTrafoAllParamT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	axisAssignmentOffset := t.AxisAssignment.Pack(builder)
	groupsOffset := flatbuffers.UOffsetT(0)
	if t.Groups != nil {
		groupsLength := len(t.Groups)
		groupsOffsets := make([]flatbuffers.UOffsetT, groupsLength)
		for j := 0; j < groupsLength; j++ {
			groupsOffsets[j] = t.Groups[j].Pack(builder)
		}
		KinCfgJntTrafoAllParamStartGroupsVector(builder, groupsLength)
		for j := groupsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(groupsOffsets[j])
		}
		groupsOffset = builder.EndVector(groupsLength)
	}
	generalOffset := t.General.Pack(builder)
	KinCfgJntTrafoAllParamStart(builder)
	KinCfgJntTrafoAllParamAddAxisAssignment(builder, axisAssignmentOffset)
	KinCfgJntTrafoAllParamAddGroups(builder, groupsOffset)
	KinCfgJntTrafoAllParamAddGeneral(builder, generalOffset)
	return KinCfgJntTrafoAllParamEnd(builder)
}

func (rcv *KinCfgJntTrafoAllParam) UnPackTo(t *KinCfgJntTrafoAllParamT) {
	t.AxisAssignment = rcv.AxisAssignment(nil).UnPack()
	groupsLength := rcv.GroupsLength()
	t.Groups = make([]*KinCfgJntTrafoParamGroupT, groupsLength)
	for j := 0; j < groupsLength; j++ {
		x := KinCfgJntTrafoParamGroup{}
		rcv.Groups(&x, j)
		t.Groups[j] = x.UnPack()
	}
	t.General = rcv.General(nil).UnPack()
}

func (rcv *KinCfgJntTrafoAllParam) UnPack() *KinCfgJntTrafoAllParamT {
	if rcv == nil { return nil }
	t := &KinCfgJntTrafoAllParamT{}
	rcv.UnPackTo(t)
	return t
}

type KinCfgJntTrafoAllParam struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCfgJntTrafoAllParam(buf []byte, offset flatbuffers.UOffsetT) *KinCfgJntTrafoAllParam {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCfgJntTrafoAllParam{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCfgJntTrafoAllParam(buf []byte, offset flatbuffers.UOffsetT) *KinCfgJntTrafoAllParam {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCfgJntTrafoAllParam{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCfgJntTrafoAllParam) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCfgJntTrafoAllParam) Table() flatbuffers.Table {
	return rcv._tab
}

/// axis assignment 
func (rcv *KinCfgJntTrafoAllParam) AxisAssignment(obj *KinCfgJntTrafoAxisAssignment) *KinCfgJntTrafoAxisAssignment {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(KinCfgJntTrafoAxisAssignment)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// axis assignment 
/// all configuration parameter groups of this joint transformation
func (rcv *KinCfgJntTrafoAllParam) Groups(obj *KinCfgJntTrafoParamGroup, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *KinCfgJntTrafoAllParam) GroupsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// all configuration parameter groups of this joint transformation
/// all general parameter of this joint transformation
func (rcv *KinCfgJntTrafoAllParam) General(obj *KinCfgJntTrafoParamGroup) *KinCfgJntTrafoParamGroup {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(KinCfgJntTrafoParamGroup)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// all general parameter of this joint transformation
func KinCfgJntTrafoAllParamStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func KinCfgJntTrafoAllParamAddAxisAssignment(builder *flatbuffers.Builder, axisAssignment flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(axisAssignment), 0)
}
func KinCfgJntTrafoAllParamAddGroups(builder *flatbuffers.Builder, groups flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(groups), 0)
}
func KinCfgJntTrafoAllParamStartGroupsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KinCfgJntTrafoAllParamAddGeneral(builder *flatbuffers.Builder, general flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(general), 0)
}
func KinCfgJntTrafoAllParamEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
