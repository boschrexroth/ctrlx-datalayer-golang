// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters for the move direct commands for a kinematics
type KinCmdMoveDirectDataT struct {
	KinPos []float64 `json:"kinPos"`
	CoordSys string `json:"coordSys"`
	Buffered bool `json:"buffered"`
}

func (t *KinCmdMoveDirectDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	kinPosOffset := flatbuffers.UOffsetT(0)
	if t.KinPos != nil {
		kinPosLength := len(t.KinPos)
		KinCmdMoveDirectDataStartKinPosVector(builder, kinPosLength)
		for j := kinPosLength - 1; j >= 0; j-- {
			builder.PrependFloat64(t.KinPos[j])
		}
		kinPosOffset = builder.EndVector(kinPosLength)
	}
	coordSysOffset := flatbuffers.UOffsetT(0)
	if t.CoordSys != "" {
		coordSysOffset = builder.CreateString(t.CoordSys)
	}
	KinCmdMoveDirectDataStart(builder)
	KinCmdMoveDirectDataAddKinPos(builder, kinPosOffset)
	KinCmdMoveDirectDataAddCoordSys(builder, coordSysOffset)
	KinCmdMoveDirectDataAddBuffered(builder, t.Buffered)
	return KinCmdMoveDirectDataEnd(builder)
}

func (rcv *KinCmdMoveDirectData) UnPackTo(t *KinCmdMoveDirectDataT) {
	kinPosLength := rcv.KinPosLength()
	t.KinPos = make([]float64, kinPosLength)
	for j := 0; j < kinPosLength; j++ {
		t.KinPos[j] = rcv.KinPos(j)
	}
	t.CoordSys = string(rcv.CoordSys())
	t.Buffered = rcv.Buffered()
}

func (rcv *KinCmdMoveDirectData) UnPack() *KinCmdMoveDirectDataT {
	if rcv == nil { return nil }
	t := &KinCmdMoveDirectDataT{}
	rcv.UnPackTo(t)
	return t
}

type KinCmdMoveDirectData struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCmdMoveDirectData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdMoveDirectData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCmdMoveDirectData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCmdMoveDirectData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdMoveDirectData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCmdMoveDirectData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCmdMoveDirectData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCmdMoveDirectData) Table() flatbuffers.Table {
	return rcv._tab
}

/// commanded target position (or increment for relative position command)
func (rcv *KinCmdMoveDirectData) KinPos(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *KinCmdMoveDirectData) KinPosLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// commanded target position (or increment for relative position command)
func (rcv *KinCmdMoveDirectData) MutateKinPos(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

/// coordSys for commanded target position
func (rcv *KinCmdMoveDirectData) CoordSys() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// coordSys for commanded target position
/// should this be a buffered command?
func (rcv *KinCmdMoveDirectData) Buffered() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// should this be a buffered command?
func (rcv *KinCmdMoveDirectData) MutateBuffered(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func KinCmdMoveDirectDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func KinCmdMoveDirectDataAddKinPos(builder *flatbuffers.Builder, kinPos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(kinPos), 0)
}
func KinCmdMoveDirectDataStartKinPosVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func KinCmdMoveDirectDataAddCoordSys(builder *flatbuffers.Builder, coordSys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(coordSys), 0)
}
func KinCmdMoveDirectDataAddBuffered(builder *flatbuffers.Builder, buffered bool) {
	builder.PrependBoolSlot(2, buffered, true)
}
func KinCmdMoveDirectDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
