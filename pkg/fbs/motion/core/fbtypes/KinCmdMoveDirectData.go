// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters for the move linear commands for a kinematics
type KinCmdMoveDirectData struct {
	_tab flatbuffers.Table
}

func GetRootAsKinCmdMoveDirectData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdMoveDirectData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KinCmdMoveDirectData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsKinCmdMoveDirectData(buf []byte, offset flatbuffers.UOffsetT) *KinCmdMoveDirectData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KinCmdMoveDirectData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *KinCmdMoveDirectData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KinCmdMoveDirectData) Table() flatbuffers.Table {
	return rcv._tab
}

/// commanded target position (or increment for relative position command)
func (rcv *KinCmdMoveDirectData) KinPos(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *KinCmdMoveDirectData) KinPosLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// commanded target position (or increment for relative position command)
func (rcv *KinCmdMoveDirectData) MutateKinPos(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

/// coordSys for commanded target position
func (rcv *KinCmdMoveDirectData) CoordSys() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// coordSys for commanded target position
func KinCmdMoveDirectDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KinCmdMoveDirectDataAddKinPos(builder *flatbuffers.Builder, kinPos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(kinPos), 0)
}
func KinCmdMoveDirectDataStartKinPosVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func KinCmdMoveDirectDataAddCoordSys(builder *flatbuffers.Builder, coordSys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(coordSys), 0)
}
func KinCmdMoveDirectDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
