// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of the collision avoidance function
type CollisionAvoidanceT struct {
	AxsName string
	Enable bool
	Params *GetCollisionGuardStateParamsT
}

func (t *CollisionAvoidanceT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	axsNameOffset := builder.CreateString(t.AxsName)
	paramsOffset := t.Params.Pack(builder)
	CollisionAvoidanceStart(builder)
	CollisionAvoidanceAddAxsName(builder, axsNameOffset)
	CollisionAvoidanceAddEnable(builder, t.Enable)
	CollisionAvoidanceAddParams(builder, paramsOffset)
	return CollisionAvoidanceEnd(builder)
}

func (rcv *CollisionAvoidance) UnPackTo(t *CollisionAvoidanceT) {
	t.AxsName = string(rcv.AxsName())
	t.Enable = rcv.Enable()
	t.Params = rcv.Params(nil).UnPack()
}

func (rcv *CollisionAvoidance) UnPack() *CollisionAvoidanceT {
	if rcv == nil { return nil }
	t := &CollisionAvoidanceT{}
	rcv.UnPackTo(t)
	return t
}

type CollisionAvoidance struct {
	_tab flatbuffers.Table
}

func GetRootAsCollisionAvoidance(buf []byte, offset flatbuffers.UOffsetT) *CollisionAvoidance {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CollisionAvoidance{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCollisionAvoidance(buf []byte, offset flatbuffers.UOffsetT) *CollisionAvoidance {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CollisionAvoidance{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CollisionAvoidance) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CollisionAvoidance) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CollisionAvoidance) AxsName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CollisionAvoidance) Enable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CollisionAvoidance) MutateEnable(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *CollisionAvoidance) Params(obj *GetCollisionGuardStateParams) *GetCollisionGuardStateParams {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(GetCollisionGuardStateParams)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func CollisionAvoidanceStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func CollisionAvoidanceAddAxsName(builder *flatbuffers.Builder, axsName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(axsName), 0)
}
func CollisionAvoidanceAddEnable(builder *flatbuffers.Builder, enable bool) {
	builder.PrependBoolSlot(1, enable, false)
}
func CollisionAvoidanceAddParams(builder *flatbuffers.Builder, params flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(params), 0)
}
func CollisionAvoidanceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
