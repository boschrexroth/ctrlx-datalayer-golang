// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package health

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SensorT struct {
	Name string `json:"name"`
	Thresholds []*ThresholdT `json:"thresholds"`
	CheckInterval int64 `json:"checkInterval"`
	MddbPath string `json:"mddbPath"`
}

func (t *SensorT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	thresholdsOffset := flatbuffers.UOffsetT(0)
	if t.Thresholds != nil {
		thresholdsLength := len(t.Thresholds)
		thresholdsOffsets := make([]flatbuffers.UOffsetT, thresholdsLength)
		for j := 0; j < thresholdsLength; j++ {
			thresholdsOffsets[j] = t.Thresholds[j].Pack(builder)
		}
		SensorStartThresholdsVector(builder, thresholdsLength)
		for j := thresholdsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(thresholdsOffsets[j])
		}
		thresholdsOffset = builder.EndVector(thresholdsLength)
	}
	mddbPathOffset := flatbuffers.UOffsetT(0)
	if t.MddbPath != "" {
		mddbPathOffset = builder.CreateString(t.MddbPath)
	}
	SensorStart(builder)
	SensorAddName(builder, nameOffset)
	SensorAddThresholds(builder, thresholdsOffset)
	SensorAddCheckInterval(builder, t.CheckInterval)
	SensorAddMddbPath(builder, mddbPathOffset)
	return SensorEnd(builder)
}

func (rcv *Sensor) UnPackTo(t *SensorT) {
	t.Name = string(rcv.Name())
	thresholdsLength := rcv.ThresholdsLength()
	t.Thresholds = make([]*ThresholdT, thresholdsLength)
	for j := 0; j < thresholdsLength; j++ {
		x := Threshold{}
		rcv.Thresholds(&x, j)
		t.Thresholds[j] = x.UnPack()
	}
	t.CheckInterval = rcv.CheckInterval()
	t.MddbPath = string(rcv.MddbPath())
}

func (rcv *Sensor) UnPack() *SensorT {
	if rcv == nil { return nil }
	t := &SensorT{}
	rcv.UnPackTo(t)
	return t
}

type Sensor struct {
	_tab flatbuffers.Table
}

func GetRootAsSensor(buf []byte, offset flatbuffers.UOffsetT) *Sensor {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Sensor{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSensor(buf []byte, offset flatbuffers.UOffsetT) *Sensor {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Sensor{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Sensor) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Sensor) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Sensor) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Sensor) Thresholds(obj *Threshold, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Sensor) ThresholdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Sensor) CheckInterval() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Sensor) MutateCheckInterval(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *Sensor) MddbPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func SensorStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SensorAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func SensorAddThresholds(builder *flatbuffers.Builder, thresholds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(thresholds), 0)
}
func SensorStartThresholdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SensorAddCheckInterval(builder *flatbuffers.Builder, checkInterval int64) {
	builder.PrependInt64Slot(2, checkInterval, 0)
}
func SensorAddMddbPath(builder *flatbuffers.Builder, mddbPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(mddbPath), 0)
}
func SensorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
