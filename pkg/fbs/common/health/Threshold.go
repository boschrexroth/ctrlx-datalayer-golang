// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package health

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ThresholdT struct {
	Value string `json:"value"`
	MainDiagnosisCode string `json:"mainDiagnosisCode"`
	DetailedDiagnosisCode string `json:"detailedDiagnosisCode"`
}

func (t *ThresholdT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	valueOffset := flatbuffers.UOffsetT(0)
	if t.Value != "" {
		valueOffset = builder.CreateString(t.Value)
	}
	mainDiagnosisCodeOffset := flatbuffers.UOffsetT(0)
	if t.MainDiagnosisCode != "" {
		mainDiagnosisCodeOffset = builder.CreateString(t.MainDiagnosisCode)
	}
	detailedDiagnosisCodeOffset := flatbuffers.UOffsetT(0)
	if t.DetailedDiagnosisCode != "" {
		detailedDiagnosisCodeOffset = builder.CreateString(t.DetailedDiagnosisCode)
	}
	ThresholdStart(builder)
	ThresholdAddValue(builder, valueOffset)
	ThresholdAddMainDiagnosisCode(builder, mainDiagnosisCodeOffset)
	ThresholdAddDetailedDiagnosisCode(builder, detailedDiagnosisCodeOffset)
	return ThresholdEnd(builder)
}

func (rcv *Threshold) UnPackTo(t *ThresholdT) {
	t.Value = string(rcv.Value())
	t.MainDiagnosisCode = string(rcv.MainDiagnosisCode())
	t.DetailedDiagnosisCode = string(rcv.DetailedDiagnosisCode())
}

func (rcv *Threshold) UnPack() *ThresholdT {
	if rcv == nil { return nil }
	t := &ThresholdT{}
	rcv.UnPackTo(t)
	return t
}

type Threshold struct {
	_tab flatbuffers.Table
}

func GetRootAsThreshold(buf []byte, offset flatbuffers.UOffsetT) *Threshold {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Threshold{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsThreshold(buf []byte, offset flatbuffers.UOffsetT) *Threshold {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Threshold{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Threshold) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Threshold) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Threshold) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Threshold) MainDiagnosisCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Threshold) DetailedDiagnosisCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ThresholdStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ThresholdAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(value), 0)
}
func ThresholdAddMainDiagnosisCode(builder *flatbuffers.Builder, mainDiagnosisCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(mainDiagnosisCode), 0)
}
func ThresholdAddDetailedDiagnosisCode(builder *flatbuffers.Builder, detailedDiagnosisCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(detailedDiagnosisCode), 0)
}
func ThresholdEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
