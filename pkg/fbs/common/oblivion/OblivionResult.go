// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package oblivion

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OblivionResultT struct {
	Unfreed []*OblivionResultItemT
}

func (t *OblivionResultT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	unfreedOffset := flatbuffers.UOffsetT(0)
	if t.Unfreed != nil {
		unfreedLength := len(t.Unfreed)
		unfreedOffsets := make([]flatbuffers.UOffsetT, unfreedLength)
		for j := 0; j < unfreedLength; j++ {
			unfreedOffsets[j] = t.Unfreed[j].Pack(builder)
		}
		OblivionResultStartUnfreedVector(builder, unfreedLength)
		for j := unfreedLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(unfreedOffsets[j])
		}
		unfreedOffset = builder.EndVector(unfreedLength)
	}
	OblivionResultStart(builder)
	OblivionResultAddUnfreed(builder, unfreedOffset)
	return OblivionResultEnd(builder)
}

func (rcv *OblivionResult) UnPackTo(t *OblivionResultT) {
	unfreedLength := rcv.UnfreedLength()
	t.Unfreed = make([]*OblivionResultItemT, unfreedLength)
	for j := 0; j < unfreedLength; j++ {
		x := OblivionResultItem{}
		rcv.Unfreed(&x, j)
		t.Unfreed[j] = x.UnPack()
	}
}

func (rcv *OblivionResult) UnPack() *OblivionResultT {
	if rcv == nil { return nil }
	t := &OblivionResultT{}
	rcv.UnPackTo(t)
	return t
}

type OblivionResult struct {
	_tab flatbuffers.Table
}

func GetRootAsOblivionResult(buf []byte, offset flatbuffers.UOffsetT) *OblivionResult {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OblivionResult{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsOblivionResult(buf []byte, offset flatbuffers.UOffsetT) *OblivionResult {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OblivionResult{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *OblivionResult) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OblivionResult) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OblivionResult) Unfreed(obj *OblivionResultItem, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *OblivionResult) UnfreedLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func OblivionResultStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func OblivionResultAddUnfreed(builder *flatbuffers.Builder, unfreed flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(unfreed), 0)
}
func OblivionResultStartUnfreedVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OblivionResultEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
