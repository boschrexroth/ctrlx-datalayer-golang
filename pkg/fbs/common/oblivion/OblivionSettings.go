// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package oblivion

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OblivionSettingsT struct {
	HashSize uint32 `json:"hashSize"`
	Ignore uint32 `json:"ignore"`
	StackDepth uint32 `json:"stackDepth"`
	RecordType RecordType `json:"recordType"`
	ObserveThread uint64 `json:"observeThread"`
	StackUsage bool `json:"stackUsage"`
}

func (t *OblivionSettingsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	OblivionSettingsStart(builder)
	OblivionSettingsAddHashSize(builder, t.HashSize)
	OblivionSettingsAddIgnore(builder, t.Ignore)
	OblivionSettingsAddStackDepth(builder, t.StackDepth)
	OblivionSettingsAddRecordType(builder, t.RecordType)
	OblivionSettingsAddObserveThread(builder, t.ObserveThread)
	OblivionSettingsAddStackUsage(builder, t.StackUsage)
	return OblivionSettingsEnd(builder)
}

func (rcv *OblivionSettings) UnPackTo(t *OblivionSettingsT) {
	t.HashSize = rcv.HashSize()
	t.Ignore = rcv.Ignore()
	t.StackDepth = rcv.StackDepth()
	t.RecordType = rcv.RecordType()
	t.ObserveThread = rcv.ObserveThread()
	t.StackUsage = rcv.StackUsage()
}

func (rcv *OblivionSettings) UnPack() *OblivionSettingsT {
	if rcv == nil { return nil }
	t := &OblivionSettingsT{}
	rcv.UnPackTo(t)
	return t
}

type OblivionSettings struct {
	_tab flatbuffers.Table
}

func GetRootAsOblivionSettings(buf []byte, offset flatbuffers.UOffsetT) *OblivionSettings {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OblivionSettings{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsOblivionSettings(buf []byte, offset flatbuffers.UOffsetT) *OblivionSettings {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OblivionSettings{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *OblivionSettings) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OblivionSettings) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OblivionSettings) HashSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 4999
}

func (rcv *OblivionSettings) MutateHashSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *OblivionSettings) Ignore() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 20
}

func (rcv *OblivionSettings) MutateIgnore(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *OblivionSettings) StackDepth() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 8
}

func (rcv *OblivionSettings) MutateStackDepth(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *OblivionSettings) RecordType() RecordType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return RecordType(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 1
}

func (rcv *OblivionSettings) MutateRecordType(n RecordType) bool {
	return rcv._tab.MutateUint32Slot(10, uint32(n))
}

func (rcv *OblivionSettings) ObserveThread() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OblivionSettings) MutateObserveThread(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *OblivionSettings) StackUsage() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

func (rcv *OblivionSettings) MutateStackUsage(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func OblivionSettingsStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func OblivionSettingsAddHashSize(builder *flatbuffers.Builder, hashSize uint32) {
	builder.PrependUint32Slot(0, hashSize, 4999)
}
func OblivionSettingsAddIgnore(builder *flatbuffers.Builder, ignore uint32) {
	builder.PrependUint32Slot(1, ignore, 20)
}
func OblivionSettingsAddStackDepth(builder *flatbuffers.Builder, stackDepth uint32) {
	builder.PrependUint32Slot(2, stackDepth, 8)
}
func OblivionSettingsAddRecordType(builder *flatbuffers.Builder, recordType RecordType) {
	builder.PrependUint32Slot(3, uint32(recordType), 1)
}
func OblivionSettingsAddObserveThread(builder *flatbuffers.Builder, observeThread uint64) {
	builder.PrependUint64Slot(4, observeThread, 0)
}
func OblivionSettingsAddStackUsage(builder *flatbuffers.Builder, stackUsage bool) {
	builder.PrependBoolSlot(5, stackUsage, true)
}
func OblivionSettingsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
