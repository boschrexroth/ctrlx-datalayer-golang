// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package oblivion

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StackInfoT struct {
	Id uint32
	State State
	Name string
	Size uint32
	Used uint32
	Percent uint32
}

func (t *StackInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	StackInfoStart(builder)
	StackInfoAddId(builder, t.Id)
	StackInfoAddState(builder, t.State)
	StackInfoAddName(builder, nameOffset)
	StackInfoAddSize(builder, t.Size)
	StackInfoAddUsed(builder, t.Used)
	StackInfoAddPercent(builder, t.Percent)
	return StackInfoEnd(builder)
}

func (rcv *StackInfo) UnPackTo(t *StackInfoT) {
	t.Id = rcv.Id()
	t.State = rcv.State()
	t.Name = string(rcv.Name())
	t.Size = rcv.Size()
	t.Used = rcv.Used()
	t.Percent = rcv.Percent()
}

func (rcv *StackInfo) UnPack() *StackInfoT {
	if rcv == nil { return nil }
	t := &StackInfoT{}
	rcv.UnPackTo(t)
	return t
}

type StackInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsStackInfo(buf []byte, offset flatbuffers.UOffsetT) *StackInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StackInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStackInfo(buf []byte, offset flatbuffers.UOffsetT) *StackInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StackInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *StackInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StackInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StackInfo) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StackInfo) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *StackInfo) State() State {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return State(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *StackInfo) MutateState(n State) bool {
	return rcv._tab.MutateInt16Slot(6, int16(n))
}

func (rcv *StackInfo) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StackInfo) Size() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StackInfo) MutateSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *StackInfo) Used() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StackInfo) MutateUsed(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *StackInfo) Percent() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StackInfo) MutatePercent(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func StackInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func StackInfoAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func StackInfoAddState(builder *flatbuffers.Builder, state State) {
	builder.PrependInt16Slot(1, int16(state), 0)
}
func StackInfoAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func StackInfoAddSize(builder *flatbuffers.Builder, size uint32) {
	builder.PrependUint32Slot(3, size, 0)
}
func StackInfoAddUsed(builder *flatbuffers.Builder, used uint32) {
	builder.PrependUint32Slot(4, used, 0)
}
func StackInfoAddPercent(builder *flatbuffers.Builder, percent uint32) {
	builder.PrependUint32Slot(5, percent, 0)
}
func StackInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
