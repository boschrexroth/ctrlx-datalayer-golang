// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package oblivion

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StackUsageT struct {
	Stacks []*StackInfoT `json:"stacks"`
}

func (t *StackUsageT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	stacksOffset := flatbuffers.UOffsetT(0)
	if t.Stacks != nil {
		stacksLength := len(t.Stacks)
		stacksOffsets := make([]flatbuffers.UOffsetT, stacksLength)
		for j := 0; j < stacksLength; j++ {
			stacksOffsets[j] = t.Stacks[j].Pack(builder)
		}
		StackUsageStartStacksVector(builder, stacksLength)
		for j := stacksLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(stacksOffsets[j])
		}
		stacksOffset = builder.EndVector(stacksLength)
	}
	StackUsageStart(builder)
	StackUsageAddStacks(builder, stacksOffset)
	return StackUsageEnd(builder)
}

func (rcv *StackUsage) UnPackTo(t *StackUsageT) {
	stacksLength := rcv.StacksLength()
	t.Stacks = make([]*StackInfoT, stacksLength)
	for j := 0; j < stacksLength; j++ {
		x := StackInfo{}
		rcv.Stacks(&x, j)
		t.Stacks[j] = x.UnPack()
	}
}

func (rcv *StackUsage) UnPack() *StackUsageT {
	if rcv == nil { return nil }
	t := &StackUsageT{}
	rcv.UnPackTo(t)
	return t
}

type StackUsage struct {
	_tab flatbuffers.Table
}

func GetRootAsStackUsage(buf []byte, offset flatbuffers.UOffsetT) *StackUsage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StackUsage{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStackUsage(buf []byte, offset flatbuffers.UOffsetT) *StackUsage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StackUsage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *StackUsage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StackUsage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StackUsage) Stacks(obj *StackInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *StackUsage) StacksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func StackUsageStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func StackUsageAddStacks(builder *flatbuffers.Builder, stacks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(stacks), 0)
}
func StackUsageStartStacksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StackUsageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
