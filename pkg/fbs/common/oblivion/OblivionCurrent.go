// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package oblivion

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OblivionCurrentT struct {
	Count uint32 `json:"count"`
	Bytes uint32 `json:"bytes"`
	Unobserved uint32 `json:"unobserved"`
}

func (t *OblivionCurrentT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	OblivionCurrentStart(builder)
	OblivionCurrentAddCount(builder, t.Count)
	OblivionCurrentAddBytes(builder, t.Bytes)
	OblivionCurrentAddUnobserved(builder, t.Unobserved)
	return OblivionCurrentEnd(builder)
}

func (rcv *OblivionCurrent) UnPackTo(t *OblivionCurrentT) {
	t.Count = rcv.Count()
	t.Bytes = rcv.Bytes()
	t.Unobserved = rcv.Unobserved()
}

func (rcv *OblivionCurrent) UnPack() *OblivionCurrentT {
	if rcv == nil { return nil }
	t := &OblivionCurrentT{}
	rcv.UnPackTo(t)
	return t
}

type OblivionCurrent struct {
	_tab flatbuffers.Table
}

func GetRootAsOblivionCurrent(buf []byte, offset flatbuffers.UOffsetT) *OblivionCurrent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OblivionCurrent{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsOblivionCurrent(buf []byte, offset flatbuffers.UOffsetT) *OblivionCurrent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OblivionCurrent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *OblivionCurrent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OblivionCurrent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OblivionCurrent) Count() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OblivionCurrent) MutateCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *OblivionCurrent) Bytes() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OblivionCurrent) MutateBytes(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *OblivionCurrent) Unobserved() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OblivionCurrent) MutateUnobserved(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func OblivionCurrentStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func OblivionCurrentAddCount(builder *flatbuffers.Builder, count uint32) {
	builder.PrependUint32Slot(0, count, 0)
}
func OblivionCurrentAddBytes(builder *flatbuffers.Builder, bytes uint32) {
	builder.PrependUint32Slot(1, bytes, 0)
}
func OblivionCurrentAddUnobserved(builder *flatbuffers.Builder, unobserved uint32) {
	builder.PrependUint32Slot(2, unobserved, 0)
}
func OblivionCurrentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
