// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package licenseproxy

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LicenseResponseT struct {
	Name string
	Version string
	Id string
	IsPermanent bool
	StartDate string
	EndDate string
	Tampered bool
}

func (t *LicenseResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	versionOffset := builder.CreateString(t.Version)
	idOffset := builder.CreateString(t.Id)
	startDateOffset := builder.CreateString(t.StartDate)
	endDateOffset := builder.CreateString(t.EndDate)
	LicenseResponseStart(builder)
	LicenseResponseAddName(builder, nameOffset)
	LicenseResponseAddVersion(builder, versionOffset)
	LicenseResponseAddId(builder, idOffset)
	LicenseResponseAddIsPermanent(builder, t.IsPermanent)
	LicenseResponseAddStartDate(builder, startDateOffset)
	LicenseResponseAddEndDate(builder, endDateOffset)
	LicenseResponseAddTampered(builder, t.Tampered)
	return LicenseResponseEnd(builder)
}

func (rcv *LicenseResponse) UnPackTo(t *LicenseResponseT) {
	t.Name = string(rcv.Name())
	t.Version = string(rcv.Version())
	t.Id = string(rcv.Id())
	t.IsPermanent = rcv.IsPermanent()
	t.StartDate = string(rcv.StartDate())
	t.EndDate = string(rcv.EndDate())
	t.Tampered = rcv.Tampered()
}

func (rcv *LicenseResponse) UnPack() *LicenseResponseT {
	if rcv == nil { return nil }
	t := &LicenseResponseT{}
	rcv.UnPackTo(t)
	return t
}

type LicenseResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsLicenseResponse(buf []byte, offset flatbuffers.UOffsetT) *LicenseResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LicenseResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsLicenseResponse(buf []byte, offset flatbuffers.UOffsetT) *LicenseResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LicenseResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *LicenseResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LicenseResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LicenseResponse) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LicenseResponse) Version() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LicenseResponse) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LicenseResponse) IsPermanent() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *LicenseResponse) MutateIsPermanent(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *LicenseResponse) StartDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LicenseResponse) EndDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LicenseResponse) Tampered() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *LicenseResponse) MutateTampered(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func LicenseResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func LicenseResponseAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func LicenseResponseAddVersion(builder *flatbuffers.Builder, version flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(version), 0)
}
func LicenseResponseAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(id), 0)
}
func LicenseResponseAddIsPermanent(builder *flatbuffers.Builder, isPermanent bool) {
	builder.PrependBoolSlot(3, isPermanent, false)
}
func LicenseResponseAddStartDate(builder *flatbuffers.Builder, startDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(startDate), 0)
}
func LicenseResponseAddEndDate(builder *flatbuffers.Builder, endDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(endDate), 0)
}
func LicenseResponseAddTampered(builder *flatbuffers.Builder, tampered bool) {
	builder.PrependBoolSlot(6, tampered, false)
}
func LicenseResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
