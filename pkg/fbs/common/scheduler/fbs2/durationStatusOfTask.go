// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs2

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Status of the duration measurements of a task
type durationStatusOfTaskT struct {
	TaskName string `json:"taskName"`
	Status MeasurementStatus `json:"status"`
	StatusTask MeasurementStatus `json:"statusTask"`
	StatusHistogram MeasurementStatus `json:"statusHistogram"`
	StatusCallable MeasurementStatus `json:"statusCallable"`
}

func (t *durationStatusOfTaskT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	taskNameOffset := flatbuffers.UOffsetT(0)
	if t.TaskName != "" {
		taskNameOffset = builder.CreateString(t.TaskName)
	}
	durationStatusOfTaskStart(builder)
	durationStatusOfTaskAddTaskName(builder, taskNameOffset)
	durationStatusOfTaskAddStatus(builder, t.Status)
	durationStatusOfTaskAddStatusTask(builder, t.StatusTask)
	durationStatusOfTaskAddStatusHistogram(builder, t.StatusHistogram)
	durationStatusOfTaskAddStatusCallable(builder, t.StatusCallable)
	return durationStatusOfTaskEnd(builder)
}

func (rcv *durationStatusOfTask) UnPackTo(t *durationStatusOfTaskT) {
	t.TaskName = string(rcv.TaskName())
	t.Status = rcv.Status()
	t.StatusTask = rcv.StatusTask()
	t.StatusHistogram = rcv.StatusHistogram()
	t.StatusCallable = rcv.StatusCallable()
}

func (rcv *durationStatusOfTask) UnPack() *durationStatusOfTaskT {
	if rcv == nil { return nil }
	t := &durationStatusOfTaskT{}
	rcv.UnPackTo(t)
	return t
}

type durationStatusOfTask struct {
	_tab flatbuffers.Table
}

func GetRootAsdurationStatusOfTask(buf []byte, offset flatbuffers.UOffsetT) *durationStatusOfTask {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &durationStatusOfTask{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsdurationStatusOfTask(buf []byte, offset flatbuffers.UOffsetT) *durationStatusOfTask {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &durationStatusOfTask{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *durationStatusOfTask) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *durationStatusOfTask) Table() flatbuffers.Table {
	return rcv._tab
}

/// Name of the task
func (rcv *durationStatusOfTask) TaskName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the task
/// Status of any duration measurement or recording of the task including their callables
func (rcv *durationStatusOfTask) Status() MeasurementStatus {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return MeasurementStatus(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// Status of any duration measurement or recording of the task including their callables
func (rcv *durationStatusOfTask) MutateStatus(n MeasurementStatus) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

/// Status of the duration measurements of the task
func (rcv *durationStatusOfTask) StatusTask() MeasurementStatus {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return MeasurementStatus(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// Status of the duration measurements of the task
func (rcv *durationStatusOfTask) MutateStatusTask(n MeasurementStatus) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

/// Status of the recording of duration measurements of the task in their histogram
func (rcv *durationStatusOfTask) StatusHistogram() MeasurementStatus {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return MeasurementStatus(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// Status of the recording of duration measurements of the task in their histogram
func (rcv *durationStatusOfTask) MutateStatusHistogram(n MeasurementStatus) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

/// Status of the duration measurements of the callables of the tasks
func (rcv *durationStatusOfTask) StatusCallable() MeasurementStatus {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return MeasurementStatus(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// Status of the duration measurements of the callables of the tasks
func (rcv *durationStatusOfTask) MutateStatusCallable(n MeasurementStatus) bool {
	return rcv._tab.MutateInt8Slot(12, int8(n))
}

func durationStatusOfTaskStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func durationStatusOfTaskAddTaskName(builder *flatbuffers.Builder, taskName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(taskName), 0)
}
func durationStatusOfTaskAddStatus(builder *flatbuffers.Builder, status MeasurementStatus) {
	builder.PrependInt8Slot(1, int8(status), 1)
}
func durationStatusOfTaskAddStatusTask(builder *flatbuffers.Builder, statusTask MeasurementStatus) {
	builder.PrependInt8Slot(2, int8(statusTask), 1)
}
func durationStatusOfTaskAddStatusHistogram(builder *flatbuffers.Builder, statusHistogram MeasurementStatus) {
	builder.PrependInt8Slot(3, int8(statusHistogram), 1)
}
func durationStatusOfTaskAddStatusCallable(builder *flatbuffers.Builder, statusCallable MeasurementStatus) {
	builder.PrependInt8Slot(4, int8(statusCallable), 1)
}
func durationStatusOfTaskEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
