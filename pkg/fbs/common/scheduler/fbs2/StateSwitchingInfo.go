// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs2

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Switching progress (initial / current / target) of Scheduler operation state
type StateSwitchingInfoT struct {
	Initial CurrentState `json:"initial"`
	Current CurrentState `json:"current"`
	Target CurrentState `json:"target"`
}

func (t *StateSwitchingInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	StateSwitchingInfoStart(builder)
	StateSwitchingInfoAddInitial(builder, t.Initial)
	StateSwitchingInfoAddCurrent(builder, t.Current)
	StateSwitchingInfoAddTarget(builder, t.Target)
	return StateSwitchingInfoEnd(builder)
}

func (rcv *StateSwitchingInfo) UnPackTo(t *StateSwitchingInfoT) {
	t.Initial = rcv.Initial()
	t.Current = rcv.Current()
	t.Target = rcv.Target()
}

func (rcv *StateSwitchingInfo) UnPack() *StateSwitchingInfoT {
	if rcv == nil { return nil }
	t := &StateSwitchingInfoT{}
	rcv.UnPackTo(t)
	return t
}

type StateSwitchingInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsStateSwitchingInfo(buf []byte, offset flatbuffers.UOffsetT) *StateSwitchingInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StateSwitchingInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStateSwitchingInfo(buf []byte, offset flatbuffers.UOffsetT) *StateSwitchingInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StateSwitchingInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *StateSwitchingInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StateSwitchingInfo) Table() flatbuffers.Table {
	return rcv._tab
}

/// Initial operation state of Scheduler at the beginning of switching
func (rcv *StateSwitchingInfo) Initial() CurrentState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return CurrentState(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 2
}

/// Initial operation state of Scheduler at the beginning of switching
func (rcv *StateSwitchingInfo) MutateInitial(n CurrentState) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

/// Current operation state of Scheduler
func (rcv *StateSwitchingInfo) Current() CurrentState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return CurrentState(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 2
}

/// Current operation state of Scheduler
func (rcv *StateSwitchingInfo) MutateCurrent(n CurrentState) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

/// Target operation state of Scheduler
func (rcv *StateSwitchingInfo) Target() CurrentState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return CurrentState(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 2
}

/// Target operation state of Scheduler
func (rcv *StateSwitchingInfo) MutateTarget(n CurrentState) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func StateSwitchingInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func StateSwitchingInfoAddInitial(builder *flatbuffers.Builder, initial CurrentState) {
	builder.PrependInt8Slot(0, int8(initial), 2)
}
func StateSwitchingInfoAddCurrent(builder *flatbuffers.Builder, current CurrentState) {
	builder.PrependInt8Slot(1, int8(current), 2)
}
func StateSwitchingInfoAddTarget(builder *flatbuffers.Builder, target CurrentState) {
	builder.PrependInt8Slot(2, int8(target), 2)
}
func StateSwitchingInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
