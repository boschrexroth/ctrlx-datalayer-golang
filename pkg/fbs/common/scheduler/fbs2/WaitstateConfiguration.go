// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs2

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Configuration of waitstates before transitioning to the next operating state 'state'.
/// A waitstate represents a pause that is entered before switching to the next operating state 'state'.
/// A waitstate pause is characterized by the component with the largest timeout value.
/// A waitstate can be cancelled before the timeout is reached by:
/// - a component,
/// - executing the cancel command, or
/// - removing the relevant waitstate from the configuration.
type WaitstateConfigurationT struct {
	Components []*WaitstateComponentT `json:"components"`
}

func (t *WaitstateConfigurationT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	componentsOffset := flatbuffers.UOffsetT(0)
	if t.Components != nil {
		componentsLength := len(t.Components)
		componentsOffsets := make([]flatbuffers.UOffsetT, componentsLength)
		for j := 0; j < componentsLength; j++ {
			componentsOffsets[j] = t.Components[j].Pack(builder)
		}
		WaitstateConfigurationStartComponentsVector(builder, componentsLength)
		for j := componentsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(componentsOffsets[j])
		}
		componentsOffset = builder.EndVector(componentsLength)
	}
	WaitstateConfigurationStart(builder)
	WaitstateConfigurationAddComponents(builder, componentsOffset)
	return WaitstateConfigurationEnd(builder)
}

func (rcv *WaitstateConfiguration) UnPackTo(t *WaitstateConfigurationT) {
	componentsLength := rcv.ComponentsLength()
	t.Components = make([]*WaitstateComponentT, componentsLength)
	for j := 0; j < componentsLength; j++ {
		x := WaitstateComponent{}
		rcv.Components(&x, j)
		t.Components[j] = x.UnPack()
	}
}

func (rcv *WaitstateConfiguration) UnPack() *WaitstateConfigurationT {
	if rcv == nil { return nil }
	t := &WaitstateConfigurationT{}
	rcv.UnPackTo(t)
	return t
}

type WaitstateConfiguration struct {
	_tab flatbuffers.Table
}

func GetRootAsWaitstateConfiguration(buf []byte, offset flatbuffers.UOffsetT) *WaitstateConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WaitstateConfiguration{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsWaitstateConfiguration(buf []byte, offset flatbuffers.UOffsetT) *WaitstateConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WaitstateConfiguration{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *WaitstateConfiguration) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WaitstateConfiguration) Table() flatbuffers.Table {
	return rcv._tab
}

/// List of waitstates.
func (rcv *WaitstateConfiguration) Components(obj *WaitstateComponent, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *WaitstateConfiguration) ComponentsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of waitstates.
func WaitstateConfigurationStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func WaitstateConfigurationAddComponents(builder *flatbuffers.Builder, components flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(components), 0)
}
func WaitstateConfigurationStartComponentsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WaitstateConfigurationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
