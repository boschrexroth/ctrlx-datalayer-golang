// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs2

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Status of the duration measurements of all tasks
type DurationStatusT struct {
	DurationStatus []*durationStatusOfTaskT `json:"durationStatus"`
}

func (t *DurationStatusT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	durationStatusOffset := flatbuffers.UOffsetT(0)
	if t.DurationStatus != nil {
		durationStatusLength := len(t.DurationStatus)
		durationStatusOffsets := make([]flatbuffers.UOffsetT, durationStatusLength)
		for j := 0; j < durationStatusLength; j++ {
			durationStatusOffsets[j] = t.DurationStatus[j].Pack(builder)
		}
		DurationStatusStartDurationStatusVector(builder, durationStatusLength)
		for j := durationStatusLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(durationStatusOffsets[j])
		}
		durationStatusOffset = builder.EndVector(durationStatusLength)
	}
	DurationStatusStart(builder)
	DurationStatusAddDurationStatus(builder, durationStatusOffset)
	return DurationStatusEnd(builder)
}

func (rcv *DurationStatus) UnPackTo(t *DurationStatusT) {
	durationStatusLength := rcv.DurationStatusLength()
	t.DurationStatus = make([]*durationStatusOfTaskT, durationStatusLength)
	for j := 0; j < durationStatusLength; j++ {
		x := durationStatusOfTask{}
		rcv.DurationStatus(&x, j)
		t.DurationStatus[j] = x.UnPack()
	}
}

func (rcv *DurationStatus) UnPack() *DurationStatusT {
	if rcv == nil { return nil }
	t := &DurationStatusT{}
	rcv.UnPackTo(t)
	return t
}

type DurationStatus struct {
	_tab flatbuffers.Table
}

func GetRootAsDurationStatus(buf []byte, offset flatbuffers.UOffsetT) *DurationStatus {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DurationStatus{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDurationStatus(buf []byte, offset flatbuffers.UOffsetT) *DurationStatus {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DurationStatus{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DurationStatus) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DurationStatus) Table() flatbuffers.Table {
	return rcv._tab
}

/// Status of the duration measurements of all tasks
func (rcv *DurationStatus) DurationStatus(obj *durationStatusOfTask, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DurationStatus) DurationStatusLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Status of the duration measurements of all tasks
func DurationStatusStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func DurationStatusAddDurationStatus(builder *flatbuffers.Builder, durationStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(durationStatus), 0)
}
func DurationStatusStartDurationStatusVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DurationStatusEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
