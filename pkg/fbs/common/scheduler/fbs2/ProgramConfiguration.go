// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs2

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Program configuration mode
type ProgramConfigurationT struct {
	Mode ConfigurationMode `json:"mode"`
}

func (t *ProgramConfigurationT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	ProgramConfigurationStart(builder)
	ProgramConfigurationAddMode(builder, t.Mode)
	return ProgramConfigurationEnd(builder)
}

func (rcv *ProgramConfiguration) UnPackTo(t *ProgramConfigurationT) {
	t.Mode = rcv.Mode()
}

func (rcv *ProgramConfiguration) UnPack() *ProgramConfigurationT {
	if rcv == nil { return nil }
	t := &ProgramConfigurationT{}
	rcv.UnPackTo(t)
	return t
}

type ProgramConfiguration struct {
	_tab flatbuffers.Table
}

func GetRootAsProgramConfiguration(buf []byte, offset flatbuffers.UOffsetT) *ProgramConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ProgramConfiguration{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsProgramConfiguration(buf []byte, offset flatbuffers.UOffsetT) *ProgramConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ProgramConfiguration{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ProgramConfiguration) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProgramConfiguration) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ProgramConfiguration) Mode() ConfigurationMode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ConfigurationMode(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ProgramConfiguration) MutateMode(n ConfigurationMode) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func ProgramConfigurationStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ProgramConfigurationAddMode(builder *flatbuffers.Builder, mode ConfigurationMode) {
	builder.PrependInt8Slot(0, int8(mode), 0)
}
func ProgramConfigurationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
