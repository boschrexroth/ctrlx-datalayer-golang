// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs2

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Configuration of a waitstate that occurs before transitioning to the next operating state 'state'.
/// A waitstate represents a pause that is entered before switching to the next operating state 'state'.
/// This waitstate can be cancelled before the timeout is reached by:
/// - a component,
/// - executing the cancel command, or
/// - removing the waitstate from the waitstates configuration.
type WaitstateComponentT struct {
	State CurrentState `json:"state"`
	Name string `json:"name"`
	Timeout uint64 `json:"timeout"`
	Active bool `json:"active"`
	Save bool `json:"save"`
}

func (t *WaitstateComponentT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	WaitstateComponentStart(builder)
	WaitstateComponentAddState(builder, t.State)
	WaitstateComponentAddName(builder, nameOffset)
	WaitstateComponentAddTimeout(builder, t.Timeout)
	WaitstateComponentAddActive(builder, t.Active)
	WaitstateComponentAddSave(builder, t.Save)
	return WaitstateComponentEnd(builder)
}

func (rcv *WaitstateComponent) UnPackTo(t *WaitstateComponentT) {
	t.State = rcv.State()
	t.Name = string(rcv.Name())
	t.Timeout = rcv.Timeout()
	t.Active = rcv.Active()
	t.Save = rcv.Save()
}

func (rcv *WaitstateComponent) UnPack() *WaitstateComponentT {
	if rcv == nil { return nil }
	t := &WaitstateComponentT{}
	rcv.UnPackTo(t)
	return t
}

type WaitstateComponent struct {
	_tab flatbuffers.Table
}

func GetRootAsWaitstateComponent(buf []byte, offset flatbuffers.UOffsetT) *WaitstateComponent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WaitstateComponent{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsWaitstateComponent(buf []byte, offset flatbuffers.UOffsetT) *WaitstateComponent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WaitstateComponent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *WaitstateComponent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WaitstateComponent) Table() flatbuffers.Table {
	return rcv._tab
}

/// The operating state that follows the waitstate pause.
func (rcv *WaitstateComponent) State() CurrentState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return CurrentState(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 2
}

/// The operating state that follows the waitstate pause.
func (rcv *WaitstateComponent) MutateState(n CurrentState) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

/// A unique identifier defined by the requester of the waitstate.
func (rcv *WaitstateComponent) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A unique identifier defined by the requester of the waitstate.
/// Timeout in milliseconds before switching to the next operating state 'state' (0 = infinite, meaning the cancel command is executed or it is cancelled by a component).
func (rcv *WaitstateComponent) Timeout() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 1000
}

/// Timeout in milliseconds before switching to the next operating state 'state' (0 = infinite, meaning the cancel command is executed or it is cancelled by a component).
func (rcv *WaitstateComponent) MutateTimeout(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

/// Flag indicating whether the waitstate is still active or has expired.
func (rcv *WaitstateComponent) Active() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// Flag indicating whether the waitstate is still active or has expired.
func (rcv *WaitstateComponent) MutateActive(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

/// Save the waitstate component to the persistent storage.
func (rcv *WaitstateComponent) Save() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// Save the waitstate component to the persistent storage.
func (rcv *WaitstateComponent) MutateSave(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func WaitstateComponentStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func WaitstateComponentAddState(builder *flatbuffers.Builder, state CurrentState) {
	builder.PrependInt8Slot(0, int8(state), 2)
}
func WaitstateComponentAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func WaitstateComponentAddTimeout(builder *flatbuffers.Builder, timeout uint64) {
	builder.PrependUint64Slot(2, timeout, 1000)
}
func WaitstateComponentAddActive(builder *flatbuffers.Builder, active bool) {
	builder.PrependBoolSlot(3, active, true)
}
func WaitstateComponentAddSave(builder *flatbuffers.Builder, save bool) {
	builder.PrependBoolSlot(4, save, true)
}
func WaitstateComponentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
