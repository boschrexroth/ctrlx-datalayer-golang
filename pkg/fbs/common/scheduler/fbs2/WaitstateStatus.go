// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs2

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Status of active waitstate before transitioning to the next operating state 'state'.
type WaitstateStatusT struct {
	Waitstate *WaitstateComponentT `json:"waitstate"`
	Remaining uint64 `json:"remaining"`
}

func (t *WaitstateStatusT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	waitstateOffset := t.Waitstate.Pack(builder)
	WaitstateStatusStart(builder)
	WaitstateStatusAddWaitstate(builder, waitstateOffset)
	WaitstateStatusAddRemaining(builder, t.Remaining)
	return WaitstateStatusEnd(builder)
}

func (rcv *WaitstateStatus) UnPackTo(t *WaitstateStatusT) {
	t.Waitstate = rcv.Waitstate(nil).UnPack()
	t.Remaining = rcv.Remaining()
}

func (rcv *WaitstateStatus) UnPack() *WaitstateStatusT {
	if rcv == nil { return nil }
	t := &WaitstateStatusT{}
	rcv.UnPackTo(t)
	return t
}

type WaitstateStatus struct {
	_tab flatbuffers.Table
}

func GetRootAsWaitstateStatus(buf []byte, offset flatbuffers.UOffsetT) *WaitstateStatus {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WaitstateStatus{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsWaitstateStatus(buf []byte, offset flatbuffers.UOffsetT) *WaitstateStatus {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WaitstateStatus{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *WaitstateStatus) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WaitstateStatus) Table() flatbuffers.Table {
	return rcv._tab
}

/// Properties of active waitstate.
func (rcv *WaitstateStatus) Waitstate(obj *WaitstateComponent) *WaitstateComponent {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(WaitstateComponent)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Properties of active waitstate.
/// Remaining time in milliseconds within the waitstate pause before switching to the next operating state 'state'.
func (rcv *WaitstateStatus) Remaining() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// Remaining time in milliseconds within the waitstate pause before switching to the next operating state 'state'.
func (rcv *WaitstateStatus) MutateRemaining(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func WaitstateStatusStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func WaitstateStatusAddWaitstate(builder *flatbuffers.Builder, waitstate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(waitstate), 0)
}
func WaitstateStatusAddRemaining(builder *flatbuffers.Builder, remaining uint64) {
	builder.PrependUint64Slot(1, remaining, 0)
}
func WaitstateStatusEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
