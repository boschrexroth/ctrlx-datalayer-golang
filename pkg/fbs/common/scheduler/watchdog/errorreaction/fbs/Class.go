// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Criticality of task watchdog error which cause a pre-defined error reaction
type ClassT struct {
	Type CurrentClass `json:"type"`
}

func (t *ClassT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	ClassStart(builder)
	ClassAddType(builder, t.Type)
	return ClassEnd(builder)
}

func (rcv *Class) UnPackTo(t *ClassT) {
	t.Type = rcv.Type()
}

func (rcv *Class) UnPack() *ClassT {
	if rcv == nil { return nil }
	t := &ClassT{}
	rcv.UnPackTo(t)
	return t
}

type Class struct {
	_tab flatbuffers.Table
}

func GetRootAsClass(buf []byte, offset flatbuffers.UOffsetT) *Class {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Class{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsClass(buf []byte, offset flatbuffers.UOffsetT) *Class {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Class{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Class) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Class) Table() flatbuffers.Table {
	return rcv._tab
}

/// Criticality of task watchdog error which cause a pre-defined error reaction
func (rcv *Class) Type() CurrentClass {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return CurrentClass(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// Criticality of task watchdog error which cause a pre-defined error reaction
func (rcv *Class) MutateType(n CurrentClass) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func ClassStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ClassAddType(builder *flatbuffers.Builder, type_ CurrentClass) {
	builder.PrependInt8Slot(0, int8(type_), 1)
}
func ClassEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
