// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	"strconv"
	flatbuffers "github.com/google/flatbuffers/go"
)

type WatchdogVariant byte

const (
	WatchdogVariantNONE   WatchdogVariant = 0
	WatchdogVariantCyclic WatchdogVariant = 1
)

var EnumNamesWatchdogVariant = map[WatchdogVariant]string{
	WatchdogVariantNONE:   "NONE",
	WatchdogVariantCyclic: "Cyclic",
}

var EnumValuesWatchdogVariant = map[string]WatchdogVariant{
	"NONE":   WatchdogVariantNONE,
	"Cyclic": WatchdogVariantCyclic,
}

func (v WatchdogVariant) String() string {
	if s, ok := EnumNamesWatchdogVariant[v]; ok {
		return s
	}
	return "WatchdogVariant(" + strconv.FormatInt(int64(v), 10) + ")"
}

type WatchdogVariantT struct {
	Type WatchdogVariant
	Value interface{}
}

func (t *WatchdogVariantT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case WatchdogVariantCyclic:
		return t.Value.(*CyclicT).Pack(builder)
	}
	return 0
}

func (rcv WatchdogVariant) UnPack(table flatbuffers.Table) *WatchdogVariantT {
	switch rcv {
	case WatchdogVariantCyclic:
		var x Cyclic
		x.Init(table.Bytes, table.Pos)
		return &WatchdogVariantT{ Type: WatchdogVariantCyclic, Value: x.UnPack() }
	}
	return nil
}
