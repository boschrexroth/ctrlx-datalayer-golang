// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WatchdogT struct {
	Name string
	Type *TypeT
	Variant *WatchdogVariantT
}

func (t *WatchdogT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	typeOffset := t.Type.Pack(builder)
	variantOffset := t.Variant.Pack(builder)
	
	WatchdogStart(builder)
	WatchdogAddName(builder, nameOffset)
	WatchdogAddType(builder, typeOffset)
	if t.Variant != nil {
		WatchdogAddVariantType(builder, t.Variant.Type)
	}
	WatchdogAddVariant(builder, variantOffset)
	return WatchdogEnd(builder)
}

func (rcv *Watchdog) UnPackTo(t *WatchdogT) {
	t.Name = string(rcv.Name())
	t.Type = rcv.Type(nil).UnPack()
	variantTable := flatbuffers.Table{}
	if rcv.Variant(&variantTable) {
		t.Variant = rcv.VariantType().UnPack(variantTable)
	}
}

func (rcv *Watchdog) UnPack() *WatchdogT {
	if rcv == nil { return nil }
	t := &WatchdogT{}
	rcv.UnPackTo(t)
	return t
}

type Watchdog struct {
	_tab flatbuffers.Table
}

func GetRootAsWatchdog(buf []byte, offset flatbuffers.UOffsetT) *Watchdog {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Watchdog{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsWatchdog(buf []byte, offset flatbuffers.UOffsetT) *Watchdog {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Watchdog{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Watchdog) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Watchdog) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Watchdog) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Watchdog) Type(obj *Type) *Type {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Type)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Watchdog) VariantType() WatchdogVariant {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return WatchdogVariant(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Watchdog) MutateVariantType(n WatchdogVariant) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *Watchdog) Variant(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func WatchdogStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func WatchdogAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func WatchdogAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(type_), 0)
}
func WatchdogAddVariantType(builder *flatbuffers.Builder, variantType WatchdogVariant) {
	builder.PrependByteSlot(2, byte(variantType), 0)
}
func WatchdogAddVariant(builder *flatbuffers.Builder, variant flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(variant), 0)
}
func WatchdogEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
