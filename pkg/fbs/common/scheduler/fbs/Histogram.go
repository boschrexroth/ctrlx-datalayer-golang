// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Timing histogram
type HistogramT struct {
	Scale uint64
	Values []uint64
}

func (t *HistogramT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	valuesOffset := flatbuffers.UOffsetT(0)
	if t.Values != nil {
		valuesLength := len(t.Values)
		HistogramStartValuesVector(builder, valuesLength)
		for j := valuesLength - 1; j >= 0; j-- {
			builder.PrependUint64(t.Values[j])
		}
		valuesOffset = builder.EndVector(valuesLength)
	}
	HistogramStart(builder)
	HistogramAddScale(builder, t.Scale)
	HistogramAddValues(builder, valuesOffset)
	return HistogramEnd(builder)
}

func (rcv *Histogram) UnPackTo(t *HistogramT) {
	t.Scale = rcv.Scale()
	valuesLength := rcv.ValuesLength()
	t.Values = make([]uint64, valuesLength)
	for j := 0; j < valuesLength; j++ {
		t.Values[j] = rcv.Values(j)
	}
}

func (rcv *Histogram) UnPack() *HistogramT {
	if rcv == nil { return nil }
	t := &HistogramT{}
	rcv.UnPackTo(t)
	return t
}

type Histogram struct {
	_tab flatbuffers.Table
}

func GetRootAsHistogram(buf []byte, offset flatbuffers.UOffsetT) *Histogram {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Histogram{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsHistogram(buf []byte, offset flatbuffers.UOffsetT) *Histogram {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Histogram{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Histogram) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Histogram) Table() flatbuffers.Table {
	return rcv._tab
}

/// Scale of one element of timing histogram in [µs]
func (rcv *Histogram) Scale() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// Scale of one element of timing histogram in [µs]
func (rcv *Histogram) MutateScale(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

/// Count of hits within the ranges of the scale elements of the timing values
func (rcv *Histogram) Values(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *Histogram) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Count of hits within the ranges of the scale elements of the timing values
func (rcv *Histogram) MutateValues(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func HistogramStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func HistogramAddScale(builder *flatbuffers.Builder, scale uint64) {
	builder.PrependUint64Slot(0, scale, 0)
}
func HistogramAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(values), 0)
}
func HistogramStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func HistogramEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
