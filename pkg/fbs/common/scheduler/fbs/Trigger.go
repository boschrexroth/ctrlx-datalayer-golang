// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Type selector of trigger sources of Scheduler
type TriggerT struct {
	Trigger CurrentTrigger `json:"trigger"`
}

func (t *TriggerT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	TriggerStart(builder)
	TriggerAddTrigger(builder, t.Trigger)
	return TriggerEnd(builder)
}

func (rcv *Trigger) UnPackTo(t *TriggerT) {
	t.Trigger = rcv.Trigger()
}

func (rcv *Trigger) UnPack() *TriggerT {
	if rcv == nil { return nil }
	t := &TriggerT{}
	rcv.UnPackTo(t)
	return t
}

type Trigger struct {
	_tab flatbuffers.Table
}

func GetRootAsTrigger(buf []byte, offset flatbuffers.UOffsetT) *Trigger {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Trigger{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTrigger(buf []byte, offset flatbuffers.UOffsetT) *Trigger {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Trigger{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Trigger) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Trigger) Table() flatbuffers.Table {
	return rcv._tab
}

/// Type selector of trigger sources of Scheduler
func (rcv *Trigger) Trigger() CurrentTrigger {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return CurrentTrigger(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

/// Type selector of trigger sources of Scheduler
func (rcv *Trigger) MutateTrigger(n CurrentTrigger) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func TriggerStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func TriggerAddTrigger(builder *flatbuffers.Builder, trigger CurrentTrigger) {
	builder.PrependInt8Slot(0, int8(trigger), 1)
}
func TriggerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
