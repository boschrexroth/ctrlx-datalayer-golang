// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TaskSpecsT struct {
	Name string
	Priority string
	Type string
}

func (t *TaskSpecsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	priorityOffset := builder.CreateString(t.Priority)
	typeOffset := builder.CreateString(t.Type)
	TaskSpecsStart(builder)
	TaskSpecsAddName(builder, nameOffset)
	TaskSpecsAddPriority(builder, priorityOffset)
	TaskSpecsAddType(builder, typeOffset)
	return TaskSpecsEnd(builder)
}

func (rcv *TaskSpecs) UnPackTo(t *TaskSpecsT) {
	t.Name = string(rcv.Name())
	t.Priority = string(rcv.Priority())
	t.Type = string(rcv.Type())
}

func (rcv *TaskSpecs) UnPack() *TaskSpecsT {
	if rcv == nil { return nil }
	t := &TaskSpecsT{}
	rcv.UnPackTo(t)
	return t
}

type TaskSpecs struct {
	_tab flatbuffers.Table
}

func GetRootAsTaskSpecs(buf []byte, offset flatbuffers.UOffsetT) *TaskSpecs {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TaskSpecs{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTaskSpecs(buf []byte, offset flatbuffers.UOffsetT) *TaskSpecs {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TaskSpecs{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TaskSpecs) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TaskSpecs) Table() flatbuffers.Table {
	return rcv._tab
}

/// task name to link callables together within a task, e.g. "ctrlXAutomation" or "gppServices"
func (rcv *TaskSpecs) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// task name to link callables together within a task, e.g. "ctrlXAutomation" or "gppServices"
/// task priority as well defined digit or range, e.g. "40" or "mid" to runs with medium priority
func (rcv *TaskSpecs) Priority() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// task priority as well defined digit or range, e.g. "40" or "mid" to runs with medium priority
/// describes required task properties, e.g. "cyclic/ms/10" to runs cyclic every 10 millisecons
func (rcv *TaskSpecs) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// describes required task properties, e.g. "cyclic/ms/10" to runs cyclic every 10 millisecons
func TaskSpecsStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func TaskSpecsAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func TaskSpecsAddPriority(builder *flatbuffers.Builder, priority flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(priority), 0)
}
func TaskSpecsAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(type_), 0)
}
func TaskSpecsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
