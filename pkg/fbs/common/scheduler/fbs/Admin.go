// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"

	common__scheduler__controls__fbs "common/scheduler/controls/fbs"
)

type Admin struct {
	_tab flatbuffers.Table
}

func GetRootAsAdmin(buf []byte, offset flatbuffers.UOffsetT) *Admin {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Admin{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAdmin(buf []byte, offset flatbuffers.UOffsetT) *Admin {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Admin{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Admin) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Admin) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Admin) StartupState() CurrentState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return CurrentState(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Admin) MutateStartupState(n CurrentState) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *Admin) StartupTimeout() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 5
}

func (rcv *Admin) MutateStartupTimeout(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *Admin) StartupErrorReaction() CurrentErrorReaction {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return CurrentErrorReaction(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Admin) MutateStartupErrorReaction(n CurrentErrorReaction) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func (rcv *Admin) TriggerSource() CurrentTrigger {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return CurrentTrigger(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 1
}

func (rcv *Admin) MutateTriggerSource(n CurrentTrigger) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func (rcv *Admin) ControlDebugType() common__scheduler__controls__fbs.Controls {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return common__scheduler__controls__fbs.Controls(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Admin) MutateControlDebugType(n common__scheduler__controls__fbs.Controls) bool {
	return rcv._tab.MutateByteSlot(12, byte(n))
}

func (rcv *Admin) ControlDebug(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *Admin) CpuInfo(obj *CpuInfo) *CpuInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CpuInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func AdminStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func AdminAddStartupState(builder *flatbuffers.Builder, startupState CurrentState) {
	builder.PrependInt8Slot(0, int8(startupState), 0)
}
func AdminAddStartupTimeout(builder *flatbuffers.Builder, startupTimeout uint32) {
	builder.PrependUint32Slot(1, startupTimeout, 5)
}
func AdminAddStartupErrorReaction(builder *flatbuffers.Builder, startupErrorReaction CurrentErrorReaction) {
	builder.PrependInt8Slot(2, int8(startupErrorReaction), 0)
}
func AdminAddTriggerSource(builder *flatbuffers.Builder, triggerSource CurrentTrigger) {
	builder.PrependInt8Slot(3, int8(triggerSource), 1)
}
func AdminAddControlDebugType(builder *flatbuffers.Builder, controlDebugType common__scheduler__controls__fbs.Controls) {
	builder.PrependByteSlot(4, byte(controlDebugType), 0)
}
func AdminAddControlDebug(builder *flatbuffers.Builder, controlDebug flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(controlDebug), 0)
}
func AdminAddCpuInfo(builder *flatbuffers.Builder, cpuInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(cpuInfo), 0)
}
func AdminEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
