// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CpuInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsCpuInfo(buf []byte, offset flatbuffers.UOffsetT) *CpuInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CpuInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCpuInfo(buf []byte, offset flatbuffers.UOffsetT) *CpuInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CpuInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CpuInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CpuInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CpuInfo) CpuCoresTotal(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *CpuInfo) CpuCoresTotalLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CpuInfo) MutateCpuCoresTotal(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *CpuInfo) CpuCoresActive(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *CpuInfo) CpuCoresActiveLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CpuInfo) MutateCpuCoresActive(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *CpuInfo) CpuCoresRealtime(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *CpuInfo) CpuCoresRealtimeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CpuInfo) MutateCpuCoresRealtime(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *CpuInfo) CpuCoresNonRealtime(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *CpuInfo) CpuCoresNonRealtimeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CpuInfo) MutateCpuCoresNonRealtime(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *CpuInfo) CpuCoreRealtimeMax() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *CpuInfo) MutateCpuCoreRealtimeMax(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *CpuInfo) CpuCoreRealtimeMin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *CpuInfo) MutateCpuCoreRealtimeMin(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *CpuInfo) CpuCoreRealtimeDefault() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *CpuInfo) MutateCpuCoreRealtimeDefault(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *CpuInfo) CpuCoreNonRealtimeMax() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *CpuInfo) MutateCpuCoreNonRealtimeMax(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *CpuInfo) CpuCoreNonRealtimeMin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *CpuInfo) MutateCpuCoreNonRealtimeMin(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *CpuInfo) CpuCoreNonRealtimeDefault() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *CpuInfo) MutateCpuCoreNonRealtimeDefault(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *CpuInfo) VariationId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CpuInfo) CpuCoreHwWdg() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CpuInfo) MutateCpuCoreHwWdg(n uint32) bool {
	return rcv._tab.MutateUint32Slot(26, n)
}

func (rcv *CpuInfo) CpuCorePtpTimer() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CpuInfo) MutateCpuCorePtpTimer(n uint32) bool {
	return rcv._tab.MutateUint32Slot(28, n)
}

func (rcv *CpuInfo) CpuCoreScheduler() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CpuInfo) MutateCpuCoreScheduler(n uint32) bool {
	return rcv._tab.MutateUint32Slot(30, n)
}

func (rcv *CpuInfo) CpuCoreAutomation() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CpuInfo) MutateCpuCoreAutomation(n uint32) bool {
	return rcv._tab.MutateUint32Slot(32, n)
}

func CpuInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func CpuInfoAddCpuCoresTotal(builder *flatbuffers.Builder, cpuCoresTotal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(cpuCoresTotal), 0)
}
func CpuInfoStartCpuCoresTotalVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CpuInfoAddCpuCoresActive(builder *flatbuffers.Builder, cpuCoresActive flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(cpuCoresActive), 0)
}
func CpuInfoStartCpuCoresActiveVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CpuInfoAddCpuCoresRealtime(builder *flatbuffers.Builder, cpuCoresRealtime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(cpuCoresRealtime), 0)
}
func CpuInfoStartCpuCoresRealtimeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CpuInfoAddCpuCoresNonRealtime(builder *flatbuffers.Builder, cpuCoresNonRealtime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(cpuCoresNonRealtime), 0)
}
func CpuInfoStartCpuCoresNonRealtimeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CpuInfoAddCpuCoreRealtimeMax(builder *flatbuffers.Builder, cpuCoreRealtimeMax int32) {
	builder.PrependInt32Slot(4, cpuCoreRealtimeMax, -1)
}
func CpuInfoAddCpuCoreRealtimeMin(builder *flatbuffers.Builder, cpuCoreRealtimeMin int32) {
	builder.PrependInt32Slot(5, cpuCoreRealtimeMin, -1)
}
func CpuInfoAddCpuCoreRealtimeDefault(builder *flatbuffers.Builder, cpuCoreRealtimeDefault int32) {
	builder.PrependInt32Slot(6, cpuCoreRealtimeDefault, -1)
}
func CpuInfoAddCpuCoreNonRealtimeMax(builder *flatbuffers.Builder, cpuCoreNonRealtimeMax int32) {
	builder.PrependInt32Slot(7, cpuCoreNonRealtimeMax, -1)
}
func CpuInfoAddCpuCoreNonRealtimeMin(builder *flatbuffers.Builder, cpuCoreNonRealtimeMin int32) {
	builder.PrependInt32Slot(8, cpuCoreNonRealtimeMin, -1)
}
func CpuInfoAddCpuCoreNonRealtimeDefault(builder *flatbuffers.Builder, cpuCoreNonRealtimeDefault int32) {
	builder.PrependInt32Slot(9, cpuCoreNonRealtimeDefault, -1)
}
func CpuInfoAddVariationId(builder *flatbuffers.Builder, variationId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(variationId), 0)
}
func CpuInfoAddCpuCoreHwWdg(builder *flatbuffers.Builder, cpuCoreHwWdg uint32) {
	builder.PrependUint32Slot(11, cpuCoreHwWdg, 0)
}
func CpuInfoAddCpuCorePtpTimer(builder *flatbuffers.Builder, cpuCorePtpTimer uint32) {
	builder.PrependUint32Slot(12, cpuCorePtpTimer, 0)
}
func CpuInfoAddCpuCoreScheduler(builder *flatbuffers.Builder, cpuCoreScheduler uint32) {
	builder.PrependUint32Slot(13, cpuCoreScheduler, 0)
}
func CpuInfoAddCpuCoreAutomation(builder *flatbuffers.Builder, cpuCoreAutomation uint32) {
	builder.PrependUint32Slot(14, cpuCoreAutomation, 0)
}
func CpuInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
