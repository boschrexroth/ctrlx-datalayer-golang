// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DurationTimerT struct {
	Timer Timer
}

func (t *DurationTimerT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	DurationTimerStart(builder)
	DurationTimerAddTimer(builder, t.Timer)
	return DurationTimerEnd(builder)
}

func (rcv *DurationTimer) UnPackTo(t *DurationTimerT) {
	t.Timer = rcv.Timer()
}

func (rcv *DurationTimer) UnPack() *DurationTimerT {
	if rcv == nil { return nil }
	t := &DurationTimerT{}
	rcv.UnPackTo(t)
	return t
}

type DurationTimer struct {
	_tab flatbuffers.Table
}

func GetRootAsDurationTimer(buf []byte, offset flatbuffers.UOffsetT) *DurationTimer {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DurationTimer{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDurationTimer(buf []byte, offset flatbuffers.UOffsetT) *DurationTimer {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DurationTimer{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DurationTimer) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DurationTimer) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DurationTimer) Timer() Timer {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Timer(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 4
}

func (rcv *DurationTimer) MutateTimer(n Timer) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func DurationTimerStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func DurationTimerAddTimer(builder *flatbuffers.Builder, timer Timer) {
	builder.PrependInt8Slot(0, int8(timer), 4)
}
func DurationTimerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
