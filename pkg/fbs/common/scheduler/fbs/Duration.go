// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DurationT struct {
	Minimum uint64
	Maximum uint64
	Average uint64
	Active bool
}

func (t *DurationT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	DurationStart(builder)
	DurationAddMinimum(builder, t.Minimum)
	DurationAddMaximum(builder, t.Maximum)
	DurationAddAverage(builder, t.Average)
	DurationAddActive(builder, t.Active)
	return DurationEnd(builder)
}

func (rcv *Duration) UnPackTo(t *DurationT) {
	t.Minimum = rcv.Minimum()
	t.Maximum = rcv.Maximum()
	t.Average = rcv.Average()
	t.Active = rcv.Active()
}

func (rcv *Duration) UnPack() *DurationT {
	if rcv == nil { return nil }
	t := &DurationT{}
	rcv.UnPackTo(t)
	return t
}

type Duration struct {
	_tab flatbuffers.Table
}

func GetRootAsDuration(buf []byte, offset flatbuffers.UOffsetT) *Duration {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Duration{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDuration(buf []byte, offset flatbuffers.UOffsetT) *Duration {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Duration{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Duration) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Duration) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Duration) Minimum() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Duration) MutateMinimum(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Duration) Maximum() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Duration) MutateMaximum(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Duration) Average() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Duration) MutateAverage(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *Duration) Active() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Duration) MutateActive(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func DurationStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DurationAddMinimum(builder *flatbuffers.Builder, minimum uint64) {
	builder.PrependUint64Slot(0, minimum, 0)
}
func DurationAddMaximum(builder *flatbuffers.Builder, maximum uint64) {
	builder.PrependUint64Slot(1, maximum, 0)
}
func DurationAddAverage(builder *flatbuffers.Builder, average uint64) {
	builder.PrependUint64Slot(2, average, 0)
}
func DurationAddActive(builder *flatbuffers.Builder, active bool) {
	builder.PrependBoolSlot(3, active, false)
}
func DurationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
