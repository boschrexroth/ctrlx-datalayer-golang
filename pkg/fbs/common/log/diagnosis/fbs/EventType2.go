// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// This table defines the generic event type 2 that is used to evaluate specific diagnostic events.
type EventType2T struct {
	EventCounter uint64 `json:"eventCounter"`
}

func (t *EventType2T) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	EventType2Start(builder)
	EventType2AddEventCounter(builder, t.EventCounter)
	return EventType2End(builder)
}

func (rcv *EventType2) UnPackTo(t *EventType2T) {
	t.EventCounter = rcv.EventCounter()
}

func (rcv *EventType2) UnPack() *EventType2T {
	if rcv == nil { return nil }
	t := &EventType2T{}
	rcv.UnPackTo(t)
	return t
}

type EventType2 struct {
	_tab flatbuffers.Table
}

func GetRootAsEventType2(buf []byte, offset flatbuffers.UOffsetT) *EventType2 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventType2{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEventType2(buf []byte, offset flatbuffers.UOffsetT) *EventType2 {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventType2{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EventType2) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventType2) Table() flatbuffers.Table {
	return rcv._tab
}

/// Event counter that is incremented if the selected event occurs. 
func (rcv *EventType2) EventCounter() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// Event counter that is incremented if the selected event occurs. 
func (rcv *EventType2) MutateEventCounter(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func EventType2Start(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func EventType2AddEventCounter(builder *flatbuffers.Builder, eventCounter uint64) {
	builder.PrependUint64Slot(0, eventCounter, 0)
}
func EventType2End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
