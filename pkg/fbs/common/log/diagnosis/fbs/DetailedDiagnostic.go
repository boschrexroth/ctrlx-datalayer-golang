// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// This table defines the elements of one detailed diagnostics that should be registered.
type DetailedDiagnosticT struct {
	Number string `json:"number"`
	Version uint32 `json:"version"`
	Text string `json:"text"`
}

func (t *DetailedDiagnosticT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	numberOffset := flatbuffers.UOffsetT(0)
	if t.Number != "" {
		numberOffset = builder.CreateString(t.Number)
	}
	textOffset := flatbuffers.UOffsetT(0)
	if t.Text != "" {
		textOffset = builder.CreateString(t.Text)
	}
	DetailedDiagnosticStart(builder)
	DetailedDiagnosticAddNumber(builder, numberOffset)
	DetailedDiagnosticAddVersion(builder, t.Version)
	DetailedDiagnosticAddText(builder, textOffset)
	return DetailedDiagnosticEnd(builder)
}

func (rcv *DetailedDiagnostic) UnPackTo(t *DetailedDiagnosticT) {
	t.Number = string(rcv.Number())
	t.Version = rcv.Version()
	t.Text = string(rcv.Text())
}

func (rcv *DetailedDiagnostic) UnPack() *DetailedDiagnosticT {
	if rcv == nil { return nil }
	t := &DetailedDiagnosticT{}
	rcv.UnPackTo(t)
	return t
}

type DetailedDiagnostic struct {
	_tab flatbuffers.Table
}

func GetRootAsDetailedDiagnostic(buf []byte, offset flatbuffers.UOffsetT) *DetailedDiagnostic {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DetailedDiagnostic{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDetailedDiagnostic(buf []byte, offset flatbuffers.UOffsetT) *DetailedDiagnostic {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DetailedDiagnostic{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DetailedDiagnostic) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DetailedDiagnostic) Table() flatbuffers.Table {
	return rcv._tab
}

/// Detailed diagnostic number.
func (rcv *DetailedDiagnostic) Number() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Detailed diagnostic number.
/// Version of the detailed diagnostics starting with 1.
func (rcv *DetailedDiagnostic) Version() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 1
}

/// Version of the detailed diagnostics starting with 1.
func (rcv *DetailedDiagnostic) MutateVersion(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

/// Default text of the detailed diagnostics.
func (rcv *DetailedDiagnostic) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Default text of the detailed diagnostics.
func DetailedDiagnosticStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DetailedDiagnosticAddNumber(builder *flatbuffers.Builder, number flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(number), 0)
}
func DetailedDiagnosticAddVersion(builder *flatbuffers.Builder, version uint32) {
	builder.PrependUint32Slot(1, version, 1)
}
func DetailedDiagnosticAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(text), 0)
}
func DetailedDiagnosticEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
