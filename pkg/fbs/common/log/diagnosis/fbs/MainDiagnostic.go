// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MainDiagnostic struct {
	_tab flatbuffers.Table
}

func GetRootAsMainDiagnostic(buf []byte, offset flatbuffers.UOffsetT) *MainDiagnostic {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MainDiagnostic{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMainDiagnostic(buf []byte, offset flatbuffers.UOffsetT) *MainDiagnostic {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MainDiagnostic{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MainDiagnostic) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MainDiagnostic) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MainDiagnostic) Number() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MainDiagnostic) Version() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *MainDiagnostic) MutateVersion(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *MainDiagnostic) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MainDiagnostic) DetailedDiagnostics(obj *DetailedDiagnostic, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MainDiagnostic) DetailedDiagnosticsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func MainDiagnosticStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func MainDiagnosticAddNumber(builder *flatbuffers.Builder, number flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(number), 0)
}
func MainDiagnosticAddVersion(builder *flatbuffers.Builder, version uint32) {
	builder.PrependUint32Slot(1, version, 1)
}
func MainDiagnosticAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(text), 0)
}
func MainDiagnosticAddDetailedDiagnostics(builder *flatbuffers.Builder, detailedDiagnostics flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(detailedDiagnostics), 0)
}
func MainDiagnosticStartDetailedDiagnosticsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MainDiagnosticEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
