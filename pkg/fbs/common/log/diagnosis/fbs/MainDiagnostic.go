// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// This table defines the elements of one main diagnostics that should be registered.
type MainDiagnosticT struct {
	Number string `json:"number"`
	Version uint32 `json:"version"`
	Text string `json:"text"`
	DetailedDiagnostics []*DetailedDiagnosticT `json:"detailedDiagnostics"`
}

func (t *MainDiagnosticT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	numberOffset := flatbuffers.UOffsetT(0)
	if t.Number != "" {
		numberOffset = builder.CreateString(t.Number)
	}
	textOffset := flatbuffers.UOffsetT(0)
	if t.Text != "" {
		textOffset = builder.CreateString(t.Text)
	}
	detailedDiagnosticsOffset := flatbuffers.UOffsetT(0)
	if t.DetailedDiagnostics != nil {
		detailedDiagnosticsLength := len(t.DetailedDiagnostics)
		detailedDiagnosticsOffsets := make([]flatbuffers.UOffsetT, detailedDiagnosticsLength)
		for j := 0; j < detailedDiagnosticsLength; j++ {
			detailedDiagnosticsOffsets[j] = t.DetailedDiagnostics[j].Pack(builder)
		}
		MainDiagnosticStartDetailedDiagnosticsVector(builder, detailedDiagnosticsLength)
		for j := detailedDiagnosticsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(detailedDiagnosticsOffsets[j])
		}
		detailedDiagnosticsOffset = builder.EndVector(detailedDiagnosticsLength)
	}
	MainDiagnosticStart(builder)
	MainDiagnosticAddNumber(builder, numberOffset)
	MainDiagnosticAddVersion(builder, t.Version)
	MainDiagnosticAddText(builder, textOffset)
	MainDiagnosticAddDetailedDiagnostics(builder, detailedDiagnosticsOffset)
	return MainDiagnosticEnd(builder)
}

func (rcv *MainDiagnostic) UnPackTo(t *MainDiagnosticT) {
	t.Number = string(rcv.Number())
	t.Version = rcv.Version()
	t.Text = string(rcv.Text())
	detailedDiagnosticsLength := rcv.DetailedDiagnosticsLength()
	t.DetailedDiagnostics = make([]*DetailedDiagnosticT, detailedDiagnosticsLength)
	for j := 0; j < detailedDiagnosticsLength; j++ {
		x := DetailedDiagnostic{}
		rcv.DetailedDiagnostics(&x, j)
		t.DetailedDiagnostics[j] = x.UnPack()
	}
}

func (rcv *MainDiagnostic) UnPack() *MainDiagnosticT {
	if rcv == nil { return nil }
	t := &MainDiagnosticT{}
	rcv.UnPackTo(t)
	return t
}

type MainDiagnostic struct {
	_tab flatbuffers.Table
}

func GetRootAsMainDiagnostic(buf []byte, offset flatbuffers.UOffsetT) *MainDiagnostic {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MainDiagnostic{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMainDiagnostic(buf []byte, offset flatbuffers.UOffsetT) *MainDiagnostic {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MainDiagnostic{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MainDiagnostic) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MainDiagnostic) Table() flatbuffers.Table {
	return rcv._tab
}

/// Main diagnostic number.
func (rcv *MainDiagnostic) Number() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Main diagnostic number.
/// Version of the main diagnostics starting with 1.
func (rcv *MainDiagnostic) Version() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 1
}

/// Version of the main diagnostics starting with 1.
func (rcv *MainDiagnostic) MutateVersion(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

/// Default text of the main diagnostics.
func (rcv *MainDiagnostic) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Default text of the main diagnostics.
/// All detailed diagnostics that belong to this main diagnostics.
func (rcv *MainDiagnostic) DetailedDiagnostics(obj *DetailedDiagnostic, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MainDiagnostic) DetailedDiagnosticsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// All detailed diagnostics that belong to this main diagnostics.
func MainDiagnosticStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func MainDiagnosticAddNumber(builder *flatbuffers.Builder, number flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(number), 0)
}
func MainDiagnosticAddVersion(builder *flatbuffers.Builder, version uint32) {
	builder.PrependUint32Slot(1, version, 1)
}
func MainDiagnosticAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(text), 0)
}
func MainDiagnosticAddDetailedDiagnostics(builder *flatbuffers.Builder, detailedDiagnostics flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(detailedDiagnostics), 0)
}
func MainDiagnosticStartDetailedDiagnosticsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MainDiagnosticEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
