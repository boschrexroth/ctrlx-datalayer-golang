// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DiagnosisIdentificationWithTimestampT struct {
	DiagnosisIdentification *DiagnosisIdentificationT
	Timestamp string
}

func (t *DiagnosisIdentificationWithTimestampT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	diagnosisIdentificationOffset := t.DiagnosisIdentification.Pack(builder)
	timestampOffset := builder.CreateString(t.Timestamp)
	DiagnosisIdentificationWithTimestampStart(builder)
	DiagnosisIdentificationWithTimestampAddDiagnosisIdentification(builder, diagnosisIdentificationOffset)
	DiagnosisIdentificationWithTimestampAddTimestamp(builder, timestampOffset)
	return DiagnosisIdentificationWithTimestampEnd(builder)
}

func (rcv *DiagnosisIdentificationWithTimestamp) UnPackTo(t *DiagnosisIdentificationWithTimestampT) {
	t.DiagnosisIdentification = rcv.DiagnosisIdentification(nil).UnPack()
	t.Timestamp = string(rcv.Timestamp())
}

func (rcv *DiagnosisIdentificationWithTimestamp) UnPack() *DiagnosisIdentificationWithTimestampT {
	if rcv == nil { return nil }
	t := &DiagnosisIdentificationWithTimestampT{}
	rcv.UnPackTo(t)
	return t
}

type DiagnosisIdentificationWithTimestamp struct {
	_tab flatbuffers.Table
}

func GetRootAsDiagnosisIdentificationWithTimestamp(buf []byte, offset flatbuffers.UOffsetT) *DiagnosisIdentificationWithTimestamp {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DiagnosisIdentificationWithTimestamp{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDiagnosisIdentificationWithTimestamp(buf []byte, offset flatbuffers.UOffsetT) *DiagnosisIdentificationWithTimestamp {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DiagnosisIdentificationWithTimestamp{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DiagnosisIdentificationWithTimestamp) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DiagnosisIdentificationWithTimestamp) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DiagnosisIdentificationWithTimestamp) DiagnosisIdentification(obj *DiagnosisIdentification) *DiagnosisIdentification {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DiagnosisIdentification)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DiagnosisIdentificationWithTimestamp) Timestamp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func DiagnosisIdentificationWithTimestampStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DiagnosisIdentificationWithTimestampAddDiagnosisIdentification(builder *flatbuffers.Builder, diagnosisIdentification flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(diagnosisIdentification), 0)
}
func DiagnosisIdentificationWithTimestampAddTimestamp(builder *flatbuffers.Builder, timestamp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(timestamp), 0)
}
func DiagnosisIdentificationWithTimestampEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
