// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DiagnosisIdentification struct {
	_tab flatbuffers.Table
}

func GetRootAsDiagnosisIdentification(buf []byte, offset flatbuffers.UOffsetT) *DiagnosisIdentification {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DiagnosisIdentification{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDiagnosisIdentification(buf []byte, offset flatbuffers.UOffsetT) *DiagnosisIdentification {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DiagnosisIdentification{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DiagnosisIdentification) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DiagnosisIdentification) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DiagnosisIdentification) MainDiagnosisNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DiagnosisIdentification) DetailedDiagnosisNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DiagnosisIdentification) Entity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func DiagnosisIdentificationStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DiagnosisIdentificationAddMainDiagnosisNumber(builder *flatbuffers.Builder, mainDiagnosisNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(mainDiagnosisNumber), 0)
}
func DiagnosisIdentificationAddDetailedDiagnosisNumber(builder *flatbuffers.Builder, detailedDiagnosisNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(detailedDiagnosisNumber), 0)
}
func DiagnosisIdentificationAddEntity(builder *flatbuffers.Builder, entity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(entity), 0)
}
func DiagnosisIdentificationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
