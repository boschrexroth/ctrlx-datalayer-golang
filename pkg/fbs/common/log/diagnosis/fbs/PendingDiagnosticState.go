// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// This table defines the state of one diagnostic log in the pending diagnostics.
type PendingDiagnosticStateT struct {
	PendingDiagnosticState State
}

func (t *PendingDiagnosticStateT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	PendingDiagnosticStateStart(builder)
	PendingDiagnosticStateAddPendingDiagnosticState(builder, t.PendingDiagnosticState)
	return PendingDiagnosticStateEnd(builder)
}

func (rcv *PendingDiagnosticState) UnPackTo(t *PendingDiagnosticStateT) {
	t.PendingDiagnosticState = rcv.PendingDiagnosticState()
}

func (rcv *PendingDiagnosticState) UnPack() *PendingDiagnosticStateT {
	if rcv == nil { return nil }
	t := &PendingDiagnosticStateT{}
	rcv.UnPackTo(t)
	return t
}

type PendingDiagnosticState struct {
	_tab flatbuffers.Table
}

func GetRootAsPendingDiagnosticState(buf []byte, offset flatbuffers.UOffsetT) *PendingDiagnosticState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PendingDiagnosticState{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPendingDiagnosticState(buf []byte, offset flatbuffers.UOffsetT) *PendingDiagnosticState {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PendingDiagnosticState{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PendingDiagnosticState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PendingDiagnosticState) Table() flatbuffers.Table {
	return rcv._tab
}

/// State of one diagnostic log in the pending diagnostics.
func (rcv *PendingDiagnosticState) PendingDiagnosticState() State {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return State(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// State of one diagnostic log in the pending diagnostics.
func (rcv *PendingDiagnosticState) MutatePendingDiagnosticState(n State) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func PendingDiagnosticStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func PendingDiagnosticStateAddPendingDiagnosticState(builder *flatbuffers.Builder, pendingDiagnosticState State) {
	builder.PrependInt8Slot(0, int8(pendingDiagnosticState), 0)
}
func PendingDiagnosticStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
