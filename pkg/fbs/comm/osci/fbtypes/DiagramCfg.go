// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DiagramCfgT struct {
	Name string
	Channels []*ViewChannelT
}

func (t *DiagramCfgT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	channelsOffset := flatbuffers.UOffsetT(0)
	if t.Channels != nil {
		channelsLength := len(t.Channels)
		channelsOffsets := make([]flatbuffers.UOffsetT, channelsLength)
		for j := 0; j < channelsLength; j++ {
			channelsOffsets[j] = t.Channels[j].Pack(builder)
		}
		DiagramCfgStartChannelsVector(builder, channelsLength)
		for j := channelsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(channelsOffsets[j])
		}
		channelsOffset = builder.EndVector(channelsLength)
	}
	DiagramCfgStart(builder)
	DiagramCfgAddName(builder, nameOffset)
	DiagramCfgAddChannels(builder, channelsOffset)
	return DiagramCfgEnd(builder)
}

func (rcv *DiagramCfg) UnPackTo(t *DiagramCfgT) {
	t.Name = string(rcv.Name())
	channelsLength := rcv.ChannelsLength()
	t.Channels = make([]*ViewChannelT, channelsLength)
	for j := 0; j < channelsLength; j++ {
		x := ViewChannel{}
		rcv.Channels(&x, j)
		t.Channels[j] = x.UnPack()
	}
}

func (rcv *DiagramCfg) UnPack() *DiagramCfgT {
	if rcv == nil { return nil }
	t := &DiagramCfgT{}
	rcv.UnPackTo(t)
	return t
}

type DiagramCfg struct {
	_tab flatbuffers.Table
}

func GetRootAsDiagramCfg(buf []byte, offset flatbuffers.UOffsetT) *DiagramCfg {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DiagramCfg{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDiagramCfg(buf []byte, offset flatbuffers.UOffsetT) *DiagramCfg {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DiagramCfg{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DiagramCfg) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DiagramCfg) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DiagramCfg) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DiagramCfg) Channels(obj *ViewChannel, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DiagramCfg) ChannelsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func DiagramCfgStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DiagramCfgAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func DiagramCfgAddChannels(builder *flatbuffers.Builder, channels flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(channels), 0)
}
func DiagramCfgStartChannelsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DiagramCfgEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
