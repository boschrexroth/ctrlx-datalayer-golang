// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RecSliceT struct {
	Values []*RecValueT
}

func (t *RecSliceT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	valuesOffset := flatbuffers.UOffsetT(0)
	if t.Values != nil {
		valuesLength := len(t.Values)
		valuesOffsets := make([]flatbuffers.UOffsetT, valuesLength)
		for j := 0; j < valuesLength; j++ {
			valuesOffsets[j] = t.Values[j].Pack(builder)
		}
		RecSliceStartValuesVector(builder, valuesLength)
		for j := valuesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(valuesOffsets[j])
		}
		valuesOffset = builder.EndVector(valuesLength)
	}
	RecSliceStart(builder)
	RecSliceAddValues(builder, valuesOffset)
	return RecSliceEnd(builder)
}

func (rcv *RecSlice) UnPackTo(t *RecSliceT) {
	valuesLength := rcv.ValuesLength()
	t.Values = make([]*RecValueT, valuesLength)
	for j := 0; j < valuesLength; j++ {
		x := RecValue{}
		rcv.Values(&x, j)
		t.Values[j] = x.UnPack()
	}
}

func (rcv *RecSlice) UnPack() *RecSliceT {
	if rcv == nil { return nil }
	t := &RecSliceT{}
	rcv.UnPackTo(t)
	return t
}

type RecSlice struct {
	_tab flatbuffers.Table
}

func GetRootAsRecSlice(buf []byte, offset flatbuffers.UOffsetT) *RecSlice {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RecSlice{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRecSlice(buf []byte, offset flatbuffers.UOffsetT) *RecSlice {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RecSlice{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RecSlice) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RecSlice) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RecSlice) Values(obj *RecValue, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RecSlice) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RecSliceStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func RecSliceAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(values), 0)
}
func RecSliceStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RecSliceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
