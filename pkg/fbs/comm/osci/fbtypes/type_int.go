// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type type_intT struct {
	Value int32 `json:"value"`
}

func (t *type_intT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	type_intStart(builder)
	type_intAddValue(builder, t.Value)
	return type_intEnd(builder)
}

func (rcv *type_int) UnPackTo(t *type_intT) {
	t.Value = rcv.Value()
}

func (rcv *type_int) UnPack() *type_intT {
	if rcv == nil { return nil }
	t := &type_intT{}
	rcv.UnPackTo(t)
	return t
}

type type_int struct {
	_tab flatbuffers.Table
}

func GetRootAstype_int(buf []byte, offset flatbuffers.UOffsetT) *type_int {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &type_int{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAstype_int(buf []byte, offset flatbuffers.UOffsetT) *type_int {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &type_int{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *type_int) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *type_int) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *type_int) Value() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *type_int) MutateValue(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func type_intStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func type_intAddValue(builder *flatbuffers.Builder, value int32) {
	builder.PrependInt32Slot(0, value, 0)
}
func type_intEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
