// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ViewChannelT struct {
	Source string `json:"source"`
	Color string `json:"color"`
	Visible bool `json:"visible"`
	ConnectionType ConnectionTypeEnumFb `json:"connectionType"`
}

func (t *ViewChannelT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	sourceOffset := flatbuffers.UOffsetT(0)
	if t.Source != "" {
		sourceOffset = builder.CreateString(t.Source)
	}
	colorOffset := flatbuffers.UOffsetT(0)
	if t.Color != "" {
		colorOffset = builder.CreateString(t.Color)
	}
	ViewChannelStart(builder)
	ViewChannelAddSource(builder, sourceOffset)
	ViewChannelAddColor(builder, colorOffset)
	ViewChannelAddVisible(builder, t.Visible)
	ViewChannelAddConnectionType(builder, t.ConnectionType)
	return ViewChannelEnd(builder)
}

func (rcv *ViewChannel) UnPackTo(t *ViewChannelT) {
	t.Source = string(rcv.Source())
	t.Color = string(rcv.Color())
	t.Visible = rcv.Visible()
	t.ConnectionType = rcv.ConnectionType()
}

func (rcv *ViewChannel) UnPack() *ViewChannelT {
	if rcv == nil { return nil }
	t := &ViewChannelT{}
	rcv.UnPackTo(t)
	return t
}

type ViewChannel struct {
	_tab flatbuffers.Table
}

func GetRootAsViewChannel(buf []byte, offset flatbuffers.UOffsetT) *ViewChannel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ViewChannel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsViewChannel(buf []byte, offset flatbuffers.UOffsetT) *ViewChannel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ViewChannel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ViewChannel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ViewChannel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ViewChannel) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ViewChannel) Color() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ViewChannel) Visible() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ViewChannel) MutateVisible(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *ViewChannel) ConnectionType() ConnectionTypeEnumFb {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return ConnectionTypeEnumFb(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ViewChannel) MutateConnectionType(n ConnectionTypeEnumFb) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func ViewChannelStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ViewChannelAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(source), 0)
}
func ViewChannelAddColor(builder *flatbuffers.Builder, color flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(color), 0)
}
func ViewChannelAddVisible(builder *flatbuffers.Builder, visible bool) {
	builder.PrependBoolSlot(2, visible, false)
}
func ViewChannelAddConnectionType(builder *flatbuffers.Builder, connectionType ConnectionTypeEnumFb) {
	builder.PrependInt8Slot(3, int8(connectionType), 0)
}
func ViewChannelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
