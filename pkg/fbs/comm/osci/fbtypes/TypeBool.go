// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TypeBoolT struct {
	Value bool `json:"value"`
}

func (t *TypeBoolT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	TypeBoolStart(builder)
	TypeBoolAddValue(builder, t.Value)
	return TypeBoolEnd(builder)
}

func (rcv *TypeBool) UnPackTo(t *TypeBoolT) {
	t.Value = rcv.Value()
}

func (rcv *TypeBool) UnPack() *TypeBoolT {
	if rcv == nil { return nil }
	t := &TypeBoolT{}
	rcv.UnPackTo(t)
	return t
}

type TypeBool struct {
	_tab flatbuffers.Table
}

func GetRootAsTypeBool(buf []byte, offset flatbuffers.UOffsetT) *TypeBool {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TypeBool{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTypeBool(buf []byte, offset flatbuffers.UOffsetT) *TypeBool {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TypeBool{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TypeBool) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TypeBool) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TypeBool) Value() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *TypeBool) MutateValue(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func TypeBoolStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func TypeBoolAddValue(builder *flatbuffers.Builder, value bool) {
	builder.PrependBoolSlot(0, value, false)
}
func TypeBoolEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
