// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OscilloscopeRecT struct {
	Trigger *TimeT `json:"trigger"`
	Channels []string `json:"channels"`
}

func (t *OscilloscopeRecT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	triggerOffset := t.Trigger.Pack(builder)
	channelsOffset := flatbuffers.UOffsetT(0)
	if t.Channels != nil {
		channelsLength := len(t.Channels)
		channelsOffsets := make([]flatbuffers.UOffsetT, channelsLength)
		for j := 0; j < channelsLength; j++ {
			channelsOffsets[j] = builder.CreateString(t.Channels[j])
		}
		OscilloscopeRecStartChannelsVector(builder, channelsLength)
		for j := channelsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(channelsOffsets[j])
		}
		channelsOffset = builder.EndVector(channelsLength)
	}
	OscilloscopeRecStart(builder)
	OscilloscopeRecAddTrigger(builder, triggerOffset)
	OscilloscopeRecAddChannels(builder, channelsOffset)
	return OscilloscopeRecEnd(builder)
}

func (rcv *OscilloscopeRec) UnPackTo(t *OscilloscopeRecT) {
	t.Trigger = rcv.Trigger(nil).UnPack()
	channelsLength := rcv.ChannelsLength()
	t.Channels = make([]string, channelsLength)
	for j := 0; j < channelsLength; j++ {
		t.Channels[j] = string(rcv.Channels(j))
	}
}

func (rcv *OscilloscopeRec) UnPack() *OscilloscopeRecT {
	if rcv == nil { return nil }
	t := &OscilloscopeRecT{}
	rcv.UnPackTo(t)
	return t
}

type OscilloscopeRec struct {
	_tab flatbuffers.Table
}

func GetRootAsOscilloscopeRec(buf []byte, offset flatbuffers.UOffsetT) *OscilloscopeRec {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OscilloscopeRec{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsOscilloscopeRec(buf []byte, offset flatbuffers.UOffsetT) *OscilloscopeRec {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OscilloscopeRec{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *OscilloscopeRec) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OscilloscopeRec) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OscilloscopeRec) Trigger(obj *Time) *Time {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Time)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *OscilloscopeRec) Channels(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OscilloscopeRec) ChannelsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func OscilloscopeRecStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func OscilloscopeRecAddTrigger(builder *flatbuffers.Builder, trigger flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(trigger), 0)
}
func OscilloscopeRecAddChannels(builder *flatbuffers.Builder, channels flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(channels), 0)
}
func OscilloscopeRecStartChannelsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OscilloscopeRecEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
