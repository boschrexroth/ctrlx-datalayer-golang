// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OscilloscopeStateT struct {
	Opstate OscilloscopeStateEnum
	Diagnosis *OscilloscopeDiagnosisT
	BufferLevel float64
}

func (t *OscilloscopeStateT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	diagnosisOffset := t.Diagnosis.Pack(builder)
	OscilloscopeStateStart(builder)
	OscilloscopeStateAddOpstate(builder, t.Opstate)
	OscilloscopeStateAddDiagnosis(builder, diagnosisOffset)
	OscilloscopeStateAddBufferLevel(builder, t.BufferLevel)
	return OscilloscopeStateEnd(builder)
}

func (rcv *OscilloscopeState) UnPackTo(t *OscilloscopeStateT) {
	t.Opstate = rcv.Opstate()
	t.Diagnosis = rcv.Diagnosis(nil).UnPack()
	t.BufferLevel = rcv.BufferLevel()
}

func (rcv *OscilloscopeState) UnPack() *OscilloscopeStateT {
	if rcv == nil { return nil }
	t := &OscilloscopeStateT{}
	rcv.UnPackTo(t)
	return t
}

type OscilloscopeState struct {
	_tab flatbuffers.Table
}

func GetRootAsOscilloscopeState(buf []byte, offset flatbuffers.UOffsetT) *OscilloscopeState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OscilloscopeState{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsOscilloscopeState(buf []byte, offset flatbuffers.UOffsetT) *OscilloscopeState {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OscilloscopeState{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *OscilloscopeState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OscilloscopeState) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OscilloscopeState) Opstate() OscilloscopeStateEnum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return OscilloscopeStateEnum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *OscilloscopeState) MutateOpstate(n OscilloscopeStateEnum) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *OscilloscopeState) Diagnosis(obj *OscilloscopeDiagnosis) *OscilloscopeDiagnosis {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(OscilloscopeDiagnosis)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *OscilloscopeState) BufferLevel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *OscilloscopeState) MutateBufferLevel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func OscilloscopeStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func OscilloscopeStateAddOpstate(builder *flatbuffers.Builder, opstate OscilloscopeStateEnum) {
	builder.PrependInt8Slot(0, int8(opstate), 0)
}
func OscilloscopeStateAddDiagnosis(builder *flatbuffers.Builder, diagnosis flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(diagnosis), 0)
}
func OscilloscopeStateAddBufferLevel(builder *flatbuffers.Builder, bufferLevel float64) {
	builder.PrependFloat64Slot(2, bufferLevel, 0.0)
}
func OscilloscopeStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
