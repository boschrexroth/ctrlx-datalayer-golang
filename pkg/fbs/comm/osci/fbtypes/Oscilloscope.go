// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OscilloscopeT struct {
	Cfg *OscilloscopeCfgT
	State *OscilloscopeStateT
}

func (t *OscilloscopeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	cfgOffset := t.Cfg.Pack(builder)
	stateOffset := t.State.Pack(builder)
	OscilloscopeStart(builder)
	OscilloscopeAddCfg(builder, cfgOffset)
	OscilloscopeAddState(builder, stateOffset)
	return OscilloscopeEnd(builder)
}

func (rcv *Oscilloscope) UnPackTo(t *OscilloscopeT) {
	t.Cfg = rcv.Cfg(nil).UnPack()
	t.State = rcv.State(nil).UnPack()
}

func (rcv *Oscilloscope) UnPack() *OscilloscopeT {
	if rcv == nil { return nil }
	t := &OscilloscopeT{}
	rcv.UnPackTo(t)
	return t
}

type Oscilloscope struct {
	_tab flatbuffers.Table
}

func GetRootAsOscilloscope(buf []byte, offset flatbuffers.UOffsetT) *Oscilloscope {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Oscilloscope{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsOscilloscope(buf []byte, offset flatbuffers.UOffsetT) *Oscilloscope {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Oscilloscope{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Oscilloscope) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Oscilloscope) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Oscilloscope) Cfg(obj *OscilloscopeCfg) *OscilloscopeCfg {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(OscilloscopeCfg)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Oscilloscope) State(obj *OscilloscopeState) *OscilloscopeState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(OscilloscopeState)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func OscilloscopeStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func OscilloscopeAddCfg(builder *flatbuffers.Builder, cfg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(cfg), 0)
}
func OscilloscopeAddState(builder *flatbuffers.Builder, state flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(state), 0)
}
func OscilloscopeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
