// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TypeDoubleT struct {
	Value float64 `json:"value"`
}

func (t *TypeDoubleT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	TypeDoubleStart(builder)
	TypeDoubleAddValue(builder, t.Value)
	return TypeDoubleEnd(builder)
}

func (rcv *TypeDouble) UnPackTo(t *TypeDoubleT) {
	t.Value = rcv.Value()
}

func (rcv *TypeDouble) UnPack() *TypeDoubleT {
	if rcv == nil { return nil }
	t := &TypeDoubleT{}
	rcv.UnPackTo(t)
	return t
}

type TypeDouble struct {
	_tab flatbuffers.Table
}

func GetRootAsTypeDouble(buf []byte, offset flatbuffers.UOffsetT) *TypeDouble {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TypeDouble{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTypeDouble(buf []byte, offset flatbuffers.UOffsetT) *TypeDouble {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TypeDouble{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TypeDouble) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TypeDouble) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TypeDouble) Value() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *TypeDouble) MutateValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

func TypeDoubleStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func TypeDoubleAddValue(builder *flatbuffers.Builder, value float64) {
	builder.PrependFloat64Slot(0, value, 0.0)
}
func TypeDoubleEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
