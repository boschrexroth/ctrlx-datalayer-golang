// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type storageT struct {
	InfluxDbcfg *influxDBT `json:"influxDBCfg"`
	Local bool `json:"local"`
}

func (t *storageT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	influxDbcfgOffset := t.InfluxDbcfg.Pack(builder)
	storageStart(builder)
	storageAddInfluxDbcfg(builder, influxDbcfgOffset)
	storageAddLocal(builder, t.Local)
	return storageEnd(builder)
}

func (rcv *storage) UnPackTo(t *storageT) {
	t.InfluxDbcfg = rcv.InfluxDbcfg(nil).UnPack()
	t.Local = rcv.Local()
}

func (rcv *storage) UnPack() *storageT {
	if rcv == nil { return nil }
	t := &storageT{}
	rcv.UnPackTo(t)
	return t
}

type storage struct {
	_tab flatbuffers.Table
}

func GetRootAsstorage(buf []byte, offset flatbuffers.UOffsetT) *storage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &storage{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsstorage(buf []byte, offset flatbuffers.UOffsetT) *storage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &storage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *storage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *storage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *storage) InfluxDbcfg(obj *influxDB) *influxDB {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(influxDB)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *storage) Local() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *storage) MutateLocal(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func storageStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func storageAddInfluxDbcfg(builder *flatbuffers.Builder, influxDbcfg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(influxDbcfg), 0)
}
func storageAddLocal(builder *flatbuffers.Builder, local bool) {
	builder.PrependBoolSlot(1, local, false)
}
func storageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
