// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type InfluxDBT struct {
	Enable bool `json:"enable"`
	Host string `json:"host"`
	Organization string `json:"organization"`
	Token string `json:"token"`
	Bucket string `json:"bucket"`
}

func (t *InfluxDBT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	hostOffset := flatbuffers.UOffsetT(0)
	if t.Host != "" {
		hostOffset = builder.CreateString(t.Host)
	}
	organizationOffset := flatbuffers.UOffsetT(0)
	if t.Organization != "" {
		organizationOffset = builder.CreateString(t.Organization)
	}
	tokenOffset := flatbuffers.UOffsetT(0)
	if t.Token != "" {
		tokenOffset = builder.CreateString(t.Token)
	}
	bucketOffset := flatbuffers.UOffsetT(0)
	if t.Bucket != "" {
		bucketOffset = builder.CreateString(t.Bucket)
	}
	InfluxDBStart(builder)
	InfluxDBAddEnable(builder, t.Enable)
	InfluxDBAddHost(builder, hostOffset)
	InfluxDBAddOrganization(builder, organizationOffset)
	InfluxDBAddToken(builder, tokenOffset)
	InfluxDBAddBucket(builder, bucketOffset)
	return InfluxDBEnd(builder)
}

func (rcv *InfluxDB) UnPackTo(t *InfluxDBT) {
	t.Enable = rcv.Enable()
	t.Host = string(rcv.Host())
	t.Organization = string(rcv.Organization())
	t.Token = string(rcv.Token())
	t.Bucket = string(rcv.Bucket())
}

func (rcv *InfluxDB) UnPack() *InfluxDBT {
	if rcv == nil { return nil }
	t := &InfluxDBT{}
	rcv.UnPackTo(t)
	return t
}

type InfluxDB struct {
	_tab flatbuffers.Table
}

func GetRootAsInfluxDB(buf []byte, offset flatbuffers.UOffsetT) *InfluxDB {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &InfluxDB{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsInfluxDB(buf []byte, offset flatbuffers.UOffsetT) *InfluxDB {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &InfluxDB{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *InfluxDB) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *InfluxDB) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *InfluxDB) Enable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *InfluxDB) MutateEnable(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *InfluxDB) Host() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *InfluxDB) Organization() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *InfluxDB) Token() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *InfluxDB) Bucket() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func InfluxDBStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func InfluxDBAddEnable(builder *flatbuffers.Builder, enable bool) {
	builder.PrependBoolSlot(0, enable, false)
}
func InfluxDBAddHost(builder *flatbuffers.Builder, host flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(host), 0)
}
func InfluxDBAddOrganization(builder *flatbuffers.Builder, organization flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(organization), 0)
}
func InfluxDBAddToken(builder *flatbuffers.Builder, token flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(token), 0)
}
func InfluxDBAddBucket(builder *flatbuffers.Builder, bucket flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(bucket), 0)
}
func InfluxDBEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
