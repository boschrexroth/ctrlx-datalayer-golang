// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RecAllSignalsT struct {
	AllSignals []*RecChannelT `json:"allSignals"`
}

func (t *RecAllSignalsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	allSignalsOffset := flatbuffers.UOffsetT(0)
	if t.AllSignals != nil {
		allSignalsLength := len(t.AllSignals)
		allSignalsOffsets := make([]flatbuffers.UOffsetT, allSignalsLength)
		for j := 0; j < allSignalsLength; j++ {
			allSignalsOffsets[j] = t.AllSignals[j].Pack(builder)
		}
		RecAllSignalsStartAllSignalsVector(builder, allSignalsLength)
		for j := allSignalsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(allSignalsOffsets[j])
		}
		allSignalsOffset = builder.EndVector(allSignalsLength)
	}
	RecAllSignalsStart(builder)
	RecAllSignalsAddAllSignals(builder, allSignalsOffset)
	return RecAllSignalsEnd(builder)
}

func (rcv *RecAllSignals) UnPackTo(t *RecAllSignalsT) {
	allSignalsLength := rcv.AllSignalsLength()
	t.AllSignals = make([]*RecChannelT, allSignalsLength)
	for j := 0; j < allSignalsLength; j++ {
		x := RecChannel{}
		rcv.AllSignals(&x, j)
		t.AllSignals[j] = x.UnPack()
	}
}

func (rcv *RecAllSignals) UnPack() *RecAllSignalsT {
	if rcv == nil { return nil }
	t := &RecAllSignalsT{}
	rcv.UnPackTo(t)
	return t
}

type RecAllSignals struct {
	_tab flatbuffers.Table
}

func GetRootAsRecAllSignals(buf []byte, offset flatbuffers.UOffsetT) *RecAllSignals {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RecAllSignals{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRecAllSignals(buf []byte, offset flatbuffers.UOffsetT) *RecAllSignals {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RecAllSignals{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RecAllSignals) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RecAllSignals) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RecAllSignals) AllSignals(obj *RecChannel, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RecAllSignals) AllSignalsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RecAllSignalsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func RecAllSignalsAddAllSignals(builder *flatbuffers.Builder, allSignals flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(allSignals), 0)
}
func RecAllSignalsStartAllSignalsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RecAllSignalsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
