// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RecValueT struct {
	Time *TimeT `json:"time"`
	ValuesBool *TypeBoolT `json:"values_bool"`
	ValuesByte *TypeByteT `json:"values_byte"`
	ValuesUbyte *TypeUbyteT `json:"values_ubyte"`
	ValuesShort *TypeShortT `json:"values_short"`
	ValuesUshort *TypeUshortT `json:"values_ushort"`
	ValuesInt *TypeIntT `json:"values_int"`
	ValuesUint *TypeUintT `json:"values_uint"`
	ValuesLong *TypeLongT `json:"values_long"`
	ValuesUlong *TypeUlongT `json:"values_ulong"`
	ValuesFloat *TypeFloatT `json:"values_float"`
	ValuesDouble *TypeDoubleT `json:"values_double"`
	ValuesString *TypeStringT `json:"values_string"`
}

func (t *RecValueT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	timeOffset := t.Time.Pack(builder)
	valuesBoolOffset := t.ValuesBool.Pack(builder)
	valuesByteOffset := t.ValuesByte.Pack(builder)
	valuesUbyteOffset := t.ValuesUbyte.Pack(builder)
	valuesShortOffset := t.ValuesShort.Pack(builder)
	valuesUshortOffset := t.ValuesUshort.Pack(builder)
	valuesIntOffset := t.ValuesInt.Pack(builder)
	valuesUintOffset := t.ValuesUint.Pack(builder)
	valuesLongOffset := t.ValuesLong.Pack(builder)
	valuesUlongOffset := t.ValuesUlong.Pack(builder)
	valuesFloatOffset := t.ValuesFloat.Pack(builder)
	valuesDoubleOffset := t.ValuesDouble.Pack(builder)
	valuesStringOffset := t.ValuesString.Pack(builder)
	RecValueStart(builder)
	RecValueAddTime(builder, timeOffset)
	RecValueAddValuesBool(builder, valuesBoolOffset)
	RecValueAddValuesByte(builder, valuesByteOffset)
	RecValueAddValuesUbyte(builder, valuesUbyteOffset)
	RecValueAddValuesShort(builder, valuesShortOffset)
	RecValueAddValuesUshort(builder, valuesUshortOffset)
	RecValueAddValuesInt(builder, valuesIntOffset)
	RecValueAddValuesUint(builder, valuesUintOffset)
	RecValueAddValuesLong(builder, valuesLongOffset)
	RecValueAddValuesUlong(builder, valuesUlongOffset)
	RecValueAddValuesFloat(builder, valuesFloatOffset)
	RecValueAddValuesDouble(builder, valuesDoubleOffset)
	RecValueAddValuesString(builder, valuesStringOffset)
	return RecValueEnd(builder)
}

func (rcv *RecValue) UnPackTo(t *RecValueT) {
	t.Time = rcv.Time(nil).UnPack()
	t.ValuesBool = rcv.ValuesBool(nil).UnPack()
	t.ValuesByte = rcv.ValuesByte(nil).UnPack()
	t.ValuesUbyte = rcv.ValuesUbyte(nil).UnPack()
	t.ValuesShort = rcv.ValuesShort(nil).UnPack()
	t.ValuesUshort = rcv.ValuesUshort(nil).UnPack()
	t.ValuesInt = rcv.ValuesInt(nil).UnPack()
	t.ValuesUint = rcv.ValuesUint(nil).UnPack()
	t.ValuesLong = rcv.ValuesLong(nil).UnPack()
	t.ValuesUlong = rcv.ValuesUlong(nil).UnPack()
	t.ValuesFloat = rcv.ValuesFloat(nil).UnPack()
	t.ValuesDouble = rcv.ValuesDouble(nil).UnPack()
	t.ValuesString = rcv.ValuesString(nil).UnPack()
}

func (rcv *RecValue) UnPack() *RecValueT {
	if rcv == nil { return nil }
	t := &RecValueT{}
	rcv.UnPackTo(t)
	return t
}

type RecValue struct {
	_tab flatbuffers.Table
}

func GetRootAsRecValue(buf []byte, offset flatbuffers.UOffsetT) *RecValue {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RecValue{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRecValue(buf []byte, offset flatbuffers.UOffsetT) *RecValue {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RecValue{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RecValue) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RecValue) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RecValue) Time(obj *Time) *Time {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Time)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RecValue) ValuesBool(obj *TypeBool) *TypeBool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TypeBool)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RecValue) ValuesByte(obj *TypeByte) *TypeByte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TypeByte)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RecValue) ValuesUbyte(obj *TypeUbyte) *TypeUbyte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TypeUbyte)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RecValue) ValuesShort(obj *TypeShort) *TypeShort {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TypeShort)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RecValue) ValuesUshort(obj *TypeUshort) *TypeUshort {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TypeUshort)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RecValue) ValuesInt(obj *TypeInt) *TypeInt {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TypeInt)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RecValue) ValuesUint(obj *TypeUint) *TypeUint {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TypeUint)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RecValue) ValuesLong(obj *TypeLong) *TypeLong {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TypeLong)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RecValue) ValuesUlong(obj *TypeUlong) *TypeUlong {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TypeUlong)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RecValue) ValuesFloat(obj *TypeFloat) *TypeFloat {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TypeFloat)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RecValue) ValuesDouble(obj *TypeDouble) *TypeDouble {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TypeDouble)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RecValue) ValuesString(obj *TypeString) *TypeString {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TypeString)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func RecValueStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func RecValueAddTime(builder *flatbuffers.Builder, time flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(time), 0)
}
func RecValueAddValuesBool(builder *flatbuffers.Builder, valuesBool flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(valuesBool), 0)
}
func RecValueAddValuesByte(builder *flatbuffers.Builder, valuesByte flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(valuesByte), 0)
}
func RecValueAddValuesUbyte(builder *flatbuffers.Builder, valuesUbyte flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(valuesUbyte), 0)
}
func RecValueAddValuesShort(builder *flatbuffers.Builder, valuesShort flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(valuesShort), 0)
}
func RecValueAddValuesUshort(builder *flatbuffers.Builder, valuesUshort flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(valuesUshort), 0)
}
func RecValueAddValuesInt(builder *flatbuffers.Builder, valuesInt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(valuesInt), 0)
}
func RecValueAddValuesUint(builder *flatbuffers.Builder, valuesUint flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(valuesUint), 0)
}
func RecValueAddValuesLong(builder *flatbuffers.Builder, valuesLong flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(valuesLong), 0)
}
func RecValueAddValuesUlong(builder *flatbuffers.Builder, valuesUlong flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(valuesUlong), 0)
}
func RecValueAddValuesFloat(builder *flatbuffers.Builder, valuesFloat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(valuesFloat), 0)
}
func RecValueAddValuesDouble(builder *flatbuffers.Builder, valuesDouble flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(valuesDouble), 0)
}
func RecValueAddValuesString(builder *flatbuffers.Builder, valuesString flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(valuesString), 0)
}
func RecValueEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
