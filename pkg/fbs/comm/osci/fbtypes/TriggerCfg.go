// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TriggerCfgT struct {
	TriggerType TriggerTypeEnumFb `json:"triggerType"`
	Name string `json:"name"`
	Level string `json:"level"`
	PreTrigger float64 `json:"preTrigger"`
}

func (t *TriggerCfgT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	levelOffset := flatbuffers.UOffsetT(0)
	if t.Level != "" {
		levelOffset = builder.CreateString(t.Level)
	}
	TriggerCfgStart(builder)
	TriggerCfgAddTriggerType(builder, t.TriggerType)
	TriggerCfgAddName(builder, nameOffset)
	TriggerCfgAddLevel(builder, levelOffset)
	TriggerCfgAddPreTrigger(builder, t.PreTrigger)
	return TriggerCfgEnd(builder)
}

func (rcv *TriggerCfg) UnPackTo(t *TriggerCfgT) {
	t.TriggerType = rcv.TriggerType()
	t.Name = string(rcv.Name())
	t.Level = string(rcv.Level())
	t.PreTrigger = rcv.PreTrigger()
}

func (rcv *TriggerCfg) UnPack() *TriggerCfgT {
	if rcv == nil { return nil }
	t := &TriggerCfgT{}
	rcv.UnPackTo(t)
	return t
}

type TriggerCfg struct {
	_tab flatbuffers.Table
}

func GetRootAsTriggerCfg(buf []byte, offset flatbuffers.UOffsetT) *TriggerCfg {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TriggerCfg{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTriggerCfg(buf []byte, offset flatbuffers.UOffsetT) *TriggerCfg {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TriggerCfg{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TriggerCfg) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TriggerCfg) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TriggerCfg) TriggerType() TriggerTypeEnumFb {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return TriggerTypeEnumFb(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *TriggerCfg) MutateTriggerType(n TriggerTypeEnumFb) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *TriggerCfg) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TriggerCfg) Level() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TriggerCfg) PreTrigger() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *TriggerCfg) MutatePreTrigger(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func TriggerCfgStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func TriggerCfgAddTriggerType(builder *flatbuffers.Builder, triggerType TriggerTypeEnumFb) {
	builder.PrependInt8Slot(0, int8(triggerType), 0)
}
func TriggerCfgAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func TriggerCfgAddLevel(builder *flatbuffers.Builder, level flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(level), 0)
}
func TriggerCfgAddPreTrigger(builder *flatbuffers.Builder, preTrigger float64) {
	builder.PrependFloat64Slot(3, preTrigger, 0.0)
}
func TriggerCfgEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
