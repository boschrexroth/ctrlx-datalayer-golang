// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OscilloscopeDiagnosisT struct {
	MainDiagnosisCode uint32
	DetailedDiagnosisCode uint32
	DynamicDescription string
}

func (t *OscilloscopeDiagnosisT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	dynamicDescriptionOffset := builder.CreateString(t.DynamicDescription)
	OscilloscopeDiagnosisStart(builder)
	OscilloscopeDiagnosisAddMainDiagnosisCode(builder, t.MainDiagnosisCode)
	OscilloscopeDiagnosisAddDetailedDiagnosisCode(builder, t.DetailedDiagnosisCode)
	OscilloscopeDiagnosisAddDynamicDescription(builder, dynamicDescriptionOffset)
	return OscilloscopeDiagnosisEnd(builder)
}

func (rcv *OscilloscopeDiagnosis) UnPackTo(t *OscilloscopeDiagnosisT) {
	t.MainDiagnosisCode = rcv.MainDiagnosisCode()
	t.DetailedDiagnosisCode = rcv.DetailedDiagnosisCode()
	t.DynamicDescription = string(rcv.DynamicDescription())
}

func (rcv *OscilloscopeDiagnosis) UnPack() *OscilloscopeDiagnosisT {
	if rcv == nil { return nil }
	t := &OscilloscopeDiagnosisT{}
	rcv.UnPackTo(t)
	return t
}

type OscilloscopeDiagnosis struct {
	_tab flatbuffers.Table
}

func GetRootAsOscilloscopeDiagnosis(buf []byte, offset flatbuffers.UOffsetT) *OscilloscopeDiagnosis {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OscilloscopeDiagnosis{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsOscilloscopeDiagnosis(buf []byte, offset flatbuffers.UOffsetT) *OscilloscopeDiagnosis {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OscilloscopeDiagnosis{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *OscilloscopeDiagnosis) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OscilloscopeDiagnosis) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OscilloscopeDiagnosis) MainDiagnosisCode() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OscilloscopeDiagnosis) MutateMainDiagnosisCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *OscilloscopeDiagnosis) DetailedDiagnosisCode() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OscilloscopeDiagnosis) MutateDetailedDiagnosisCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *OscilloscopeDiagnosis) DynamicDescription() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func OscilloscopeDiagnosisStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func OscilloscopeDiagnosisAddMainDiagnosisCode(builder *flatbuffers.Builder, mainDiagnosisCode uint32) {
	builder.PrependUint32Slot(0, mainDiagnosisCode, 0)
}
func OscilloscopeDiagnosisAddDetailedDiagnosisCode(builder *flatbuffers.Builder, detailedDiagnosisCode uint32) {
	builder.PrependUint32Slot(1, detailedDiagnosisCode, 0)
}
func OscilloscopeDiagnosisAddDynamicDescription(builder *flatbuffers.Builder, dynamicDescription flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(dynamicDescription), 0)
}
func OscilloscopeDiagnosisEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
