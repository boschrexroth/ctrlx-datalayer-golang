// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RecChannelT struct {
	Name string
	Slices []*RecSliceT
}

func (t *RecChannelT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	slicesOffset := flatbuffers.UOffsetT(0)
	if t.Slices != nil {
		slicesLength := len(t.Slices)
		slicesOffsets := make([]flatbuffers.UOffsetT, slicesLength)
		for j := 0; j < slicesLength; j++ {
			slicesOffsets[j] = t.Slices[j].Pack(builder)
		}
		RecChannelStartSlicesVector(builder, slicesLength)
		for j := slicesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(slicesOffsets[j])
		}
		slicesOffset = builder.EndVector(slicesLength)
	}
	RecChannelStart(builder)
	RecChannelAddName(builder, nameOffset)
	RecChannelAddSlices(builder, slicesOffset)
	return RecChannelEnd(builder)
}

func (rcv *RecChannel) UnPackTo(t *RecChannelT) {
	t.Name = string(rcv.Name())
	slicesLength := rcv.SlicesLength()
	t.Slices = make([]*RecSliceT, slicesLength)
	for j := 0; j < slicesLength; j++ {
		x := RecSlice{}
		rcv.Slices(&x, j)
		t.Slices[j] = x.UnPack()
	}
}

func (rcv *RecChannel) UnPack() *RecChannelT {
	if rcv == nil { return nil }
	t := &RecChannelT{}
	rcv.UnPackTo(t)
	return t
}

type RecChannel struct {
	_tab flatbuffers.Table
}

func GetRootAsRecChannel(buf []byte, offset flatbuffers.UOffsetT) *RecChannel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RecChannel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRecChannel(buf []byte, offset flatbuffers.UOffsetT) *RecChannel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RecChannel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RecChannel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RecChannel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RecChannel) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RecChannel) Slices(obj *RecSlice, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RecChannel) SlicesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RecChannelStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RecChannelAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func RecChannelAddSlices(builder *flatbuffers.Builder, slices flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(slices), 0)
}
func RecChannelStartSlicesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RecChannelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
