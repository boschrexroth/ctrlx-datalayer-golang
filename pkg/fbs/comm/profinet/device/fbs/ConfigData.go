// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConfigDataT struct {
	Name string
	Description string
	ConfigdataVector []*ModuleDataT
}

func (t *ConfigDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	descriptionOffset := builder.CreateString(t.Description)
	configdataVectorOffset := flatbuffers.UOffsetT(0)
	if t.ConfigdataVector != nil {
		configdataVectorLength := len(t.ConfigdataVector)
		configdataVectorOffsets := make([]flatbuffers.UOffsetT, configdataVectorLength)
		for j := 0; j < configdataVectorLength; j++ {
			configdataVectorOffsets[j] = t.ConfigdataVector[j].Pack(builder)
		}
		ConfigDataStartConfigdataVectorVector(builder, configdataVectorLength)
		for j := configdataVectorLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(configdataVectorOffsets[j])
		}
		configdataVectorOffset = builder.EndVector(configdataVectorLength)
	}
	ConfigDataStart(builder)
	ConfigDataAddName(builder, nameOffset)
	ConfigDataAddDescription(builder, descriptionOffset)
	ConfigDataAddConfigdataVector(builder, configdataVectorOffset)
	return ConfigDataEnd(builder)
}

func (rcv *ConfigData) UnPackTo(t *ConfigDataT) {
	t.Name = string(rcv.Name())
	t.Description = string(rcv.Description())
	configdataVectorLength := rcv.ConfigdataVectorLength()
	t.ConfigdataVector = make([]*ModuleDataT, configdataVectorLength)
	for j := 0; j < configdataVectorLength; j++ {
		x := ModuleData{}
		rcv.ConfigdataVector(&x, j)
		t.ConfigdataVector[j] = x.UnPack()
	}
}

func (rcv *ConfigData) UnPack() *ConfigDataT {
	if rcv == nil { return nil }
	t := &ConfigDataT{}
	rcv.UnPackTo(t)
	return t
}

type ConfigData struct {
	_tab flatbuffers.Table
}

func GetRootAsConfigData(buf []byte, offset flatbuffers.UOffsetT) *ConfigData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConfigData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsConfigData(buf []byte, offset flatbuffers.UOffsetT) *ConfigData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConfigData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ConfigData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConfigData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConfigData) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConfigData) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConfigData) ConfigdataVector(obj *ModuleData, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ConfigData) ConfigdataVectorLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ConfigDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ConfigDataAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func ConfigDataAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(description), 0)
}
func ConfigDataAddConfigdataVector(builder *flatbuffers.Builder, configdataVector flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(configdataVector), 0)
}
func ConfigDataStartConfigdataVectorVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConfigDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
