// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ModuleDataT struct {
	ModuleType ModuleType
	ModuleIndex uint16
	ContainerType ContainerType
	NumberElements uint16
}

func (t *ModuleDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	ModuleDataStart(builder)
	ModuleDataAddModuleType(builder, t.ModuleType)
	ModuleDataAddModuleIndex(builder, t.ModuleIndex)
	ModuleDataAddContainerType(builder, t.ContainerType)
	ModuleDataAddNumberElements(builder, t.NumberElements)
	return ModuleDataEnd(builder)
}

func (rcv *ModuleData) UnPackTo(t *ModuleDataT) {
	t.ModuleType = rcv.ModuleType()
	t.ModuleIndex = rcv.ModuleIndex()
	t.ContainerType = rcv.ContainerType()
	t.NumberElements = rcv.NumberElements()
}

func (rcv *ModuleData) UnPack() *ModuleDataT {
	if rcv == nil { return nil }
	t := &ModuleDataT{}
	rcv.UnPackTo(t)
	return t
}

type ModuleData struct {
	_tab flatbuffers.Table
}

func GetRootAsModuleData(buf []byte, offset flatbuffers.UOffsetT) *ModuleData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ModuleData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsModuleData(buf []byte, offset flatbuffers.UOffsetT) *ModuleData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ModuleData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ModuleData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ModuleData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ModuleData) ModuleType() ModuleType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ModuleType(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ModuleData) MutateModuleType(n ModuleType) bool {
	return rcv._tab.MutateUint16Slot(4, uint16(n))
}

func (rcv *ModuleData) ModuleIndex() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ModuleData) MutateModuleIndex(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *ModuleData) ContainerType() ContainerType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ContainerType(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ModuleData) MutateContainerType(n ContainerType) bool {
	return rcv._tab.MutateUint16Slot(8, uint16(n))
}

func (rcv *ModuleData) NumberElements() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ModuleData) MutateNumberElements(n uint16) bool {
	return rcv._tab.MutateUint16Slot(10, n)
}

func ModuleDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ModuleDataAddModuleType(builder *flatbuffers.Builder, moduleType ModuleType) {
	builder.PrependUint16Slot(0, uint16(moduleType), 0)
}
func ModuleDataAddModuleIndex(builder *flatbuffers.Builder, moduleIndex uint16) {
	builder.PrependUint16Slot(1, moduleIndex, 0)
}
func ModuleDataAddContainerType(builder *flatbuffers.Builder, containerType ContainerType) {
	builder.PrependUint16Slot(2, uint16(containerType), 0)
}
func ModuleDataAddNumberElements(builder *flatbuffers.Builder, numberElements uint16) {
	builder.PrependUint16Slot(3, numberElements, 0)
}
func ModuleDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
