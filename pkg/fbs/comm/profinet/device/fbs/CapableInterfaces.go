// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CapableInterfacesT struct {
	InterfaceList []*InterfaceT
}

func (t *CapableInterfacesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	interfaceListOffset := flatbuffers.UOffsetT(0)
	if t.InterfaceList != nil {
		interfaceListLength := len(t.InterfaceList)
		interfaceListOffsets := make([]flatbuffers.UOffsetT, interfaceListLength)
		for j := 0; j < interfaceListLength; j++ {
			interfaceListOffsets[j] = t.InterfaceList[j].Pack(builder)
		}
		CapableInterfacesStartInterfaceListVector(builder, interfaceListLength)
		for j := interfaceListLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(interfaceListOffsets[j])
		}
		interfaceListOffset = builder.EndVector(interfaceListLength)
	}
	CapableInterfacesStart(builder)
	CapableInterfacesAddInterfaceList(builder, interfaceListOffset)
	return CapableInterfacesEnd(builder)
}

func (rcv *CapableInterfaces) UnPackTo(t *CapableInterfacesT) {
	interfaceListLength := rcv.InterfaceListLength()
	t.InterfaceList = make([]*InterfaceT, interfaceListLength)
	for j := 0; j < interfaceListLength; j++ {
		x := Interface{}
		rcv.InterfaceList(&x, j)
		t.InterfaceList[j] = x.UnPack()
	}
}

func (rcv *CapableInterfaces) UnPack() *CapableInterfacesT {
	if rcv == nil { return nil }
	t := &CapableInterfacesT{}
	rcv.UnPackTo(t)
	return t
}

type CapableInterfaces struct {
	_tab flatbuffers.Table
}

func GetRootAsCapableInterfaces(buf []byte, offset flatbuffers.UOffsetT) *CapableInterfaces {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CapableInterfaces{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCapableInterfaces(buf []byte, offset flatbuffers.UOffsetT) *CapableInterfaces {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CapableInterfaces{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CapableInterfaces) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CapableInterfaces) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CapableInterfaces) InterfaceList(obj *Interface, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *CapableInterfaces) InterfaceListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func CapableInterfacesStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func CapableInterfacesAddInterfaceList(builder *flatbuffers.Builder, interfaceList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(interfaceList), 0)
}
func CapableInterfacesStartInterfaceListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CapableInterfacesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
