// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type IpSettingsResponseT struct {
	Address []byte `json:"address"`
	SubnetMask []byte `json:"subnet_mask"`
	GatewayAddress []byte `json:"gateway_address"`
}

func (t *IpSettingsResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	addressOffset := flatbuffers.UOffsetT(0)
	if t.Address != nil {
		addressOffset = builder.CreateByteString(t.Address)
	}
	subnetMaskOffset := flatbuffers.UOffsetT(0)
	if t.SubnetMask != nil {
		subnetMaskOffset = builder.CreateByteString(t.SubnetMask)
	}
	gatewayAddressOffset := flatbuffers.UOffsetT(0)
	if t.GatewayAddress != nil {
		gatewayAddressOffset = builder.CreateByteString(t.GatewayAddress)
	}
	IpSettingsResponseStart(builder)
	IpSettingsResponseAddAddress(builder, addressOffset)
	IpSettingsResponseAddSubnetMask(builder, subnetMaskOffset)
	IpSettingsResponseAddGatewayAddress(builder, gatewayAddressOffset)
	return IpSettingsResponseEnd(builder)
}

func (rcv *IpSettingsResponse) UnPackTo(t *IpSettingsResponseT) {
	t.Address = rcv.AddressBytes()
	t.SubnetMask = rcv.SubnetMaskBytes()
	t.GatewayAddress = rcv.GatewayAddressBytes()
}

func (rcv *IpSettingsResponse) UnPack() *IpSettingsResponseT {
	if rcv == nil { return nil }
	t := &IpSettingsResponseT{}
	rcv.UnPackTo(t)
	return t
}

type IpSettingsResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsIpSettingsResponse(buf []byte, offset flatbuffers.UOffsetT) *IpSettingsResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IpSettingsResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsIpSettingsResponse(buf []byte, offset flatbuffers.UOffsetT) *IpSettingsResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IpSettingsResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *IpSettingsResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IpSettingsResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *IpSettingsResponse) Address(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *IpSettingsResponse) AddressLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *IpSettingsResponse) AddressBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *IpSettingsResponse) MutateAddress(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *IpSettingsResponse) SubnetMask(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *IpSettingsResponse) SubnetMaskLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *IpSettingsResponse) SubnetMaskBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *IpSettingsResponse) MutateSubnetMask(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *IpSettingsResponse) GatewayAddress(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *IpSettingsResponse) GatewayAddressLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *IpSettingsResponse) GatewayAddressBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *IpSettingsResponse) MutateGatewayAddress(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func IpSettingsResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func IpSettingsResponseAddAddress(builder *flatbuffers.Builder, address flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(address), 0)
}
func IpSettingsResponseStartAddressVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func IpSettingsResponseAddSubnetMask(builder *flatbuffers.Builder, subnetMask flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(subnetMask), 0)
}
func IpSettingsResponseStartSubnetMaskVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func IpSettingsResponseAddGatewayAddress(builder *flatbuffers.Builder, gatewayAddress flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(gatewayAddress), 0)
}
func IpSettingsResponseStartGatewayAddressVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func IpSettingsResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
