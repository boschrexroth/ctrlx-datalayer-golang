// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DeviceConfigResponseT struct {
	Name string `json:"name"`
	Description string `json:"description"`
}

func (t *DeviceConfigResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	descriptionOffset := flatbuffers.UOffsetT(0)
	if t.Description != "" {
		descriptionOffset = builder.CreateString(t.Description)
	}
	DeviceConfigResponseStart(builder)
	DeviceConfigResponseAddName(builder, nameOffset)
	DeviceConfigResponseAddDescription(builder, descriptionOffset)
	return DeviceConfigResponseEnd(builder)
}

func (rcv *DeviceConfigResponse) UnPackTo(t *DeviceConfigResponseT) {
	t.Name = string(rcv.Name())
	t.Description = string(rcv.Description())
}

func (rcv *DeviceConfigResponse) UnPack() *DeviceConfigResponseT {
	if rcv == nil { return nil }
	t := &DeviceConfigResponseT{}
	rcv.UnPackTo(t)
	return t
}

type DeviceConfigResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsDeviceConfigResponse(buf []byte, offset flatbuffers.UOffsetT) *DeviceConfigResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DeviceConfigResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDeviceConfigResponse(buf []byte, offset flatbuffers.UOffsetT) *DeviceConfigResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DeviceConfigResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DeviceConfigResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DeviceConfigResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DeviceConfigResponse) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DeviceConfigResponse) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func DeviceConfigResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DeviceConfigResponseAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func DeviceConfigResponseAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(description), 0)
}
func DeviceConfigResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
