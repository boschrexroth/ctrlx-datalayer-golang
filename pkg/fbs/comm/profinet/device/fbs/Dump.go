// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DumpT struct {
	Request *DumpRequestT `json:"request"`
}

func (t *DumpT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	requestOffset := t.Request.Pack(builder)
	DumpStart(builder)
	DumpAddRequest(builder, requestOffset)
	return DumpEnd(builder)
}

func (rcv *Dump) UnPackTo(t *DumpT) {
	t.Request = rcv.Request(nil).UnPack()
}

func (rcv *Dump) UnPack() *DumpT {
	if rcv == nil { return nil }
	t := &DumpT{}
	rcv.UnPackTo(t)
	return t
}

type Dump struct {
	_tab flatbuffers.Table
}

func GetRootAsDump(buf []byte, offset flatbuffers.UOffsetT) *Dump {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Dump{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDump(buf []byte, offset flatbuffers.UOffsetT) *Dump {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Dump{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Dump) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Dump) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Dump) Request(obj *DumpRequest) *DumpRequest {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DumpRequest)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func DumpStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func DumpAddRequest(builder *flatbuffers.Builder, request flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(request), 0)
}
func DumpEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
