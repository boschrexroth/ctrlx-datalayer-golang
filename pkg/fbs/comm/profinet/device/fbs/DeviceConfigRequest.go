// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DeviceConfigRequestT struct {
	Name string `json:"name"`
	Configuration []byte `json:"configuration"`
}

func (t *DeviceConfigRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	configurationOffset := flatbuffers.UOffsetT(0)
	if t.Configuration != nil {
		configurationOffset = builder.CreateByteString(t.Configuration)
	}
	DeviceConfigRequestStart(builder)
	DeviceConfigRequestAddName(builder, nameOffset)
	DeviceConfigRequestAddConfiguration(builder, configurationOffset)
	return DeviceConfigRequestEnd(builder)
}

func (rcv *DeviceConfigRequest) UnPackTo(t *DeviceConfigRequestT) {
	t.Name = string(rcv.Name())
	t.Configuration = rcv.ConfigurationBytes()
}

func (rcv *DeviceConfigRequest) UnPack() *DeviceConfigRequestT {
	if rcv == nil { return nil }
	t := &DeviceConfigRequestT{}
	rcv.UnPackTo(t)
	return t
}

type DeviceConfigRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsDeviceConfigRequest(buf []byte, offset flatbuffers.UOffsetT) *DeviceConfigRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DeviceConfigRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDeviceConfigRequest(buf []byte, offset flatbuffers.UOffsetT) *DeviceConfigRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DeviceConfigRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DeviceConfigRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DeviceConfigRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DeviceConfigRequest) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DeviceConfigRequest) Configuration(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *DeviceConfigRequest) ConfigurationLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DeviceConfigRequest) ConfigurationBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DeviceConfigRequest) MutateConfiguration(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func DeviceConfigRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DeviceConfigRequestAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func DeviceConfigRequestAddConfiguration(builder *flatbuffers.Builder, configuration flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(configuration), 0)
}
func DeviceConfigRequestStartConfigurationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func DeviceConfigRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
