// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PortNameResponseT struct {
	Name string `json:"name"`
}

func (t *PortNameResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	PortNameResponseStart(builder)
	PortNameResponseAddName(builder, nameOffset)
	return PortNameResponseEnd(builder)
}

func (rcv *PortNameResponse) UnPackTo(t *PortNameResponseT) {
	t.Name = string(rcv.Name())
}

func (rcv *PortNameResponse) UnPack() *PortNameResponseT {
	if rcv == nil { return nil }
	t := &PortNameResponseT{}
	rcv.UnPackTo(t)
	return t
}

type PortNameResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsPortNameResponse(buf []byte, offset flatbuffers.UOffsetT) *PortNameResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PortNameResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPortNameResponse(buf []byte, offset flatbuffers.UOffsetT) *PortNameResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PortNameResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PortNameResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PortNameResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PortNameResponse) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PortNameResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func PortNameResponseAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func PortNameResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
