// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DeviceStateRequestT struct {
	NewState ProfinetState `json:"newState"`
}

func (t *DeviceStateRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	DeviceStateRequestStart(builder)
	DeviceStateRequestAddNewState(builder, t.NewState)
	return DeviceStateRequestEnd(builder)
}

func (rcv *DeviceStateRequest) UnPackTo(t *DeviceStateRequestT) {
	t.NewState = rcv.NewState()
}

func (rcv *DeviceStateRequest) UnPack() *DeviceStateRequestT {
	if rcv == nil { return nil }
	t := &DeviceStateRequestT{}
	rcv.UnPackTo(t)
	return t
}

type DeviceStateRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsDeviceStateRequest(buf []byte, offset flatbuffers.UOffsetT) *DeviceStateRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DeviceStateRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDeviceStateRequest(buf []byte, offset flatbuffers.UOffsetT) *DeviceStateRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DeviceStateRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DeviceStateRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DeviceStateRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DeviceStateRequest) NewState() ProfinetState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ProfinetState(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DeviceStateRequest) MutateNewState(n ProfinetState) bool {
	return rcv._tab.MutateUint16Slot(4, uint16(n))
}

func DeviceStateRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func DeviceStateRequestAddNewState(builder *flatbuffers.Builder, newState ProfinetState) {
	builder.PrependUint16Slot(0, uint16(newState), 0)
}
func DeviceStateRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
