// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DeviceStateResponseT struct {
	CurrentState ProfinetState `json:"currentState"`
	RequestedState ProfinetState `json:"requestedState"`
}

func (t *DeviceStateResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	DeviceStateResponseStart(builder)
	DeviceStateResponseAddCurrentState(builder, t.CurrentState)
	DeviceStateResponseAddRequestedState(builder, t.RequestedState)
	return DeviceStateResponseEnd(builder)
}

func (rcv *DeviceStateResponse) UnPackTo(t *DeviceStateResponseT) {
	t.CurrentState = rcv.CurrentState()
	t.RequestedState = rcv.RequestedState()
}

func (rcv *DeviceStateResponse) UnPack() *DeviceStateResponseT {
	if rcv == nil { return nil }
	t := &DeviceStateResponseT{}
	rcv.UnPackTo(t)
	return t
}

type DeviceStateResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsDeviceStateResponse(buf []byte, offset flatbuffers.UOffsetT) *DeviceStateResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DeviceStateResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDeviceStateResponse(buf []byte, offset flatbuffers.UOffsetT) *DeviceStateResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DeviceStateResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DeviceStateResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DeviceStateResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DeviceStateResponse) CurrentState() ProfinetState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ProfinetState(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DeviceStateResponse) MutateCurrentState(n ProfinetState) bool {
	return rcv._tab.MutateUint16Slot(4, uint16(n))
}

func (rcv *DeviceStateResponse) RequestedState() ProfinetState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ProfinetState(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DeviceStateResponse) MutateRequestedState(n ProfinetState) bool {
	return rcv._tab.MutateUint16Slot(6, uint16(n))
}

func DeviceStateResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DeviceStateResponseAddCurrentState(builder *flatbuffers.Builder, currentState ProfinetState) {
	builder.PrependUint16Slot(0, uint16(currentState), 0)
}
func DeviceStateResponseAddRequestedState(builder *flatbuffers.Builder, requestedState ProfinetState) {
	builder.PrependUint16Slot(1, uint16(requestedState), 0)
}
func DeviceStateResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
