// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RetainCorruptedT struct {
	Begin uint32 `json:"begin"`
	End uint32 `json:"end"`
}

func (t *RetainCorruptedT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	return CreateRetainCorrupted(builder, t.Begin, t.End)
}
func (rcv *RetainCorrupted) UnPackTo(t *RetainCorruptedT) {
	t.Begin = rcv.Begin()
	t.End = rcv.End()
}

func (rcv *RetainCorrupted) UnPack() *RetainCorruptedT {
	if rcv == nil { return nil }
	t := &RetainCorruptedT{}
	rcv.UnPackTo(t)
	return t
}

type RetainCorrupted struct {
	_tab flatbuffers.Struct
}

func (rcv *RetainCorrupted) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RetainCorrupted) Table() flatbuffers.Table {
	return rcv._tab.Table
}

/// Start byte offset of corrupted nvram area
func (rcv *RetainCorrupted) Begin() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
/// Start byte offset of corrupted nvram area
func (rcv *RetainCorrupted) MutateBegin(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

/// End byte offset of corrupted nvram area
func (rcv *RetainCorrupted) End() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
/// End byte offset of corrupted nvram area
func (rcv *RetainCorrupted) MutateEnd(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func CreateRetainCorrupted(builder *flatbuffers.Builder, begin uint32, end uint32) flatbuffers.UOffsetT {
	builder.Prep(4, 8)
	builder.PrependUint32(end)
	builder.PrependUint32(begin)
	return builder.Offset()
}
