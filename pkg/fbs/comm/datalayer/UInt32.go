// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UInt32T struct {
	Value uint32
}

func (t *UInt32T) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	UInt32Start(builder)
	UInt32AddValue(builder, t.Value)
	return UInt32End(builder)
}

func (rcv *UInt32) UnPackTo(t *UInt32T) {
	t.Value = rcv.Value()
}

func (rcv *UInt32) UnPack() *UInt32T {
	if rcv == nil { return nil }
	t := &UInt32T{}
	rcv.UnPackTo(t)
	return t
}

type UInt32 struct {
	_tab flatbuffers.Table
}

func GetRootAsUInt32(buf []byte, offset flatbuffers.UOffsetT) *UInt32 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UInt32{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsUInt32(buf []byte, offset flatbuffers.UOffsetT) *UInt32 {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UInt32{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *UInt32) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UInt32) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UInt32) Value() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UInt32) MutateValue(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func UInt32Start(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func UInt32AddValue(builder *flatbuffers.Builder, value uint32) {
	builder.PrependUint32Slot(0, value, 0)
}
func UInt32End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
