// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type VariableT struct {
	Name string
	Bitoffset uint32
	Bitsize uint32
	Type string
}

func (t *VariableT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	typeOffset := builder.CreateString(t.Type)
	VariableStart(builder)
	VariableAddName(builder, nameOffset)
	VariableAddBitoffset(builder, t.Bitoffset)
	VariableAddBitsize(builder, t.Bitsize)
	VariableAddType(builder, typeOffset)
	return VariableEnd(builder)
}

func (rcv *Variable) UnPackTo(t *VariableT) {
	t.Name = string(rcv.Name())
	t.Bitoffset = rcv.Bitoffset()
	t.Bitsize = rcv.Bitsize()
	t.Type = string(rcv.Type())
}

func (rcv *Variable) UnPack() *VariableT {
	if rcv == nil { return nil }
	t := &VariableT{}
	rcv.UnPackTo(t)
	return t
}

type Variable struct {
	_tab flatbuffers.Table
}

func GetRootAsVariable(buf []byte, offset flatbuffers.UOffsetT) *Variable {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Variable{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsVariable(buf []byte, offset flatbuffers.UOffsetT) *Variable {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Variable{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Variable) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Variable) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Variable) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Variable) Bitoffset() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Variable) MutateBitoffset(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *Variable) Bitsize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Variable) MutateBitsize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *Variable) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func VariableStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func VariableAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func VariableAddBitoffset(builder *flatbuffers.Builder, bitoffset uint32) {
	builder.PrependUint32Slot(1, bitoffset, 0)
}
func VariableAddBitsize(builder *flatbuffers.Builder, bitsize uint32) {
	builder.PrependUint32Slot(2, bitsize, 0)
}
func VariableAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(type_), 0)
}
func VariableEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
