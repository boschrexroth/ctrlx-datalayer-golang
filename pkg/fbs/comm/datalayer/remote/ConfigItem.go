// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package remote

import (
	"bytes"
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConfigItemT struct {
	Name string `json:"name"`
	Address string `json:"address"`
}

func (t *ConfigItemT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	addressOffset := flatbuffers.UOffsetT(0)
	if t.Address != "" {
		addressOffset = builder.CreateString(t.Address)
	}
	ConfigItemStart(builder)
	ConfigItemAddName(builder, nameOffset)
	ConfigItemAddAddress(builder, addressOffset)
	return ConfigItemEnd(builder)
}

func (rcv *ConfigItem) UnPackTo(t *ConfigItemT) {
	t.Name = string(rcv.Name())
	t.Address = string(rcv.Address())
}

func (rcv *ConfigItem) UnPack() *ConfigItemT {
	if rcv == nil { return nil }
	t := &ConfigItemT{}
	rcv.UnPackTo(t)
	return t
}

type ConfigItem struct {
	_tab flatbuffers.Table
}

func GetRootAsConfigItem(buf []byte, offset flatbuffers.UOffsetT) *ConfigItem {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConfigItem{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsConfigItem(buf []byte, offset flatbuffers.UOffsetT) *ConfigItem {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConfigItem{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ConfigItem) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConfigItem) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the remote connection
func (rcv *ConfigItem) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the remote connection
func ConfigItemKeyCompare(o1, o2 flatbuffers.UOffsetT, buf []byte) bool {
	obj1 := &ConfigItem{}
	obj2 := &ConfigItem{}
	obj1.Init(buf, flatbuffers.UOffsetT(len(buf)) - o1)
	obj2.Init(buf, flatbuffers.UOffsetT(len(buf)) - o2)
	return string(obj1.Name()) < string(obj2.Name())
}

func (rcv *ConfigItem) LookupByKey(key string, vectorLocation flatbuffers.UOffsetT, buf []byte) bool {
	span := flatbuffers.GetUOffsetT(buf[vectorLocation - 4:])
	start := flatbuffers.UOffsetT(0)
	bKey := []byte(key)
	for span != 0 {
		middle := span / 2
		tableOffset := flatbuffers.GetIndirectOffset(buf, vectorLocation+ 4 * (start + middle))
		obj := &ConfigItem{}
		obj.Init(buf, tableOffset)
		comp := bytes.Compare(obj.Name(), bKey)
		if comp > 0 {
			span = middle
		} else if comp < 0 {
			middle += 1
			start += middle
			span -= middle
		} else {
			rcv.Init(buf, tableOffset)
			return true
		}
	}
	return false
}

/// remote data layer connection string
func (rcv *ConfigItem) Address() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// remote data layer connection string
func ConfigItemStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ConfigItemAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func ConfigItemAddAddress(builder *flatbuffers.Builder, address flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(address), 0)
}
func ConfigItemEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
