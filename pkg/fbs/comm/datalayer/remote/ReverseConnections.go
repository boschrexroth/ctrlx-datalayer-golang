// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package remote

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ReverseConnectionsT struct {
	ReverseConnections []*ReverseConnectionT `json:"reverse_connections"`
}

func (t *ReverseConnectionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	reverseConnectionsOffset := flatbuffers.UOffsetT(0)
	if t.ReverseConnections != nil {
		reverseConnectionsLength := len(t.ReverseConnections)
		reverseConnectionsOffsets := make([]flatbuffers.UOffsetT, reverseConnectionsLength)
		for j := 0; j < reverseConnectionsLength; j++ {
			reverseConnectionsOffsets[j] = t.ReverseConnections[j].Pack(builder)
		}
		ReverseConnectionsStartReverseConnectionsVector(builder, reverseConnectionsLength)
		for j := reverseConnectionsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(reverseConnectionsOffsets[j])
		}
		reverseConnectionsOffset = builder.EndVector(reverseConnectionsLength)
	}
	ReverseConnectionsStart(builder)
	ReverseConnectionsAddReverseConnections(builder, reverseConnectionsOffset)
	return ReverseConnectionsEnd(builder)
}

func (rcv *ReverseConnections) UnPackTo(t *ReverseConnectionsT) {
	reverseConnectionsLength := rcv.ReverseConnectionsLength()
	t.ReverseConnections = make([]*ReverseConnectionT, reverseConnectionsLength)
	for j := 0; j < reverseConnectionsLength; j++ {
		x := ReverseConnection{}
		rcv.ReverseConnections(&x, j)
		t.ReverseConnections[j] = x.UnPack()
	}
}

func (rcv *ReverseConnections) UnPack() *ReverseConnectionsT {
	if rcv == nil { return nil }
	t := &ReverseConnectionsT{}
	rcv.UnPackTo(t)
	return t
}

type ReverseConnections struct {
	_tab flatbuffers.Table
}

func GetRootAsReverseConnections(buf []byte, offset flatbuffers.UOffsetT) *ReverseConnections {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ReverseConnections{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsReverseConnections(buf []byte, offset flatbuffers.UOffsetT) *ReverseConnections {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ReverseConnections{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ReverseConnections) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ReverseConnections) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ReverseConnections) ReverseConnections(obj *ReverseConnection, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ReverseConnections) ReverseConnectionsByKey(obj *ReverseConnection, key string) bool{
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *ReverseConnections) ReverseConnectionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ReverseConnectionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ReverseConnectionsAddReverseConnections(builder *flatbuffers.Builder, reverseConnections flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(reverseConnections), 0)
}
func ReverseConnectionsStartReverseConnectionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ReverseConnectionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
