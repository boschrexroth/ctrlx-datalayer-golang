// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Token struct {
	_tab flatbuffers.Table
}

func GetRootAsToken(buf []byte, offset flatbuffers.UOffsetT) *Token {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Token{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsToken(buf []byte, offset flatbuffers.UOffsetT) *Token {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Token{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Token) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Token) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Token) Claims(obj *Claim, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Token) ClaimsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Token) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Token) Iat() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Token) MutateIat(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *Token) Exp() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Token) MutateExp(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *Token) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Token) Plchandle() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Token) MutatePlchandle(n uint64) bool {
	return rcv._tab.MutateUint64Slot(14, n)
}

func (rcv *Token) Scope(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Token) ScopeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TokenStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func TokenAddClaims(builder *flatbuffers.Builder, claims flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(claims), 0)
}
func TokenStartClaimsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TokenAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(id), 0)
}
func TokenAddIat(builder *flatbuffers.Builder, iat uint64) {
	builder.PrependUint64Slot(2, iat, 0)
}
func TokenAddExp(builder *flatbuffers.Builder, exp uint64) {
	builder.PrependUint64Slot(3, exp, 0)
}
func TokenAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(name), 0)
}
func TokenAddPlchandle(builder *flatbuffers.Builder, plchandle uint64) {
	builder.PrependUint64Slot(5, plchandle, 0)
}
func TokenAddScope(builder *flatbuffers.Builder, scope flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(scope), 0)
}
func TokenStartScopeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TokenEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
