// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SubscriptionPropertiesT struct {
	Id string `json:"id"`
	KeepaliveInterval uint32 `json:"keepaliveInterval"`
	PublishInterval uint32 `json:"publishInterval"`
	Rules []*PropertyT `json:"rules"`
	ErrorInterval uint32 `json:"errorInterval"`
}

func (t *SubscriptionPropertiesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	idOffset := flatbuffers.UOffsetT(0)
	if t.Id != "" {
		idOffset = builder.CreateString(t.Id)
	}
	rulesOffset := flatbuffers.UOffsetT(0)
	if t.Rules != nil {
		rulesLength := len(t.Rules)
		rulesOffsets := make([]flatbuffers.UOffsetT, rulesLength)
		for j := 0; j < rulesLength; j++ {
			rulesOffsets[j] = t.Rules[j].Pack(builder)
		}
		SubscriptionPropertiesStartRulesVector(builder, rulesLength)
		for j := rulesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(rulesOffsets[j])
		}
		rulesOffset = builder.EndVector(rulesLength)
	}
	SubscriptionPropertiesStart(builder)
	SubscriptionPropertiesAddId(builder, idOffset)
	SubscriptionPropertiesAddKeepaliveInterval(builder, t.KeepaliveInterval)
	SubscriptionPropertiesAddPublishInterval(builder, t.PublishInterval)
	SubscriptionPropertiesAddRules(builder, rulesOffset)
	SubscriptionPropertiesAddErrorInterval(builder, t.ErrorInterval)
	return SubscriptionPropertiesEnd(builder)
}

func (rcv *SubscriptionProperties) UnPackTo(t *SubscriptionPropertiesT) {
	t.Id = string(rcv.Id())
	t.KeepaliveInterval = rcv.KeepaliveInterval()
	t.PublishInterval = rcv.PublishInterval()
	rulesLength := rcv.RulesLength()
	t.Rules = make([]*PropertyT, rulesLength)
	for j := 0; j < rulesLength; j++ {
		x := Property{}
		rcv.Rules(&x, j)
		t.Rules[j] = x.UnPack()
	}
	t.ErrorInterval = rcv.ErrorInterval()
}

func (rcv *SubscriptionProperties) UnPack() *SubscriptionPropertiesT {
	if rcv == nil { return nil }
	t := &SubscriptionPropertiesT{}
	rcv.UnPackTo(t)
	return t
}

type SubscriptionProperties struct {
	_tab flatbuffers.Table
}

func GetRootAsSubscriptionProperties(buf []byte, offset flatbuffers.UOffsetT) *SubscriptionProperties {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SubscriptionProperties{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSubscriptionProperties(buf []byte, offset flatbuffers.UOffsetT) *SubscriptionProperties {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SubscriptionProperties{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SubscriptionProperties) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SubscriptionProperties) Table() flatbuffers.Table {
	return rcv._tab
}

/// user identification for subscribtion Use it update and dispose the old subscription
func (rcv *SubscriptionProperties) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// user identification for subscribtion Use it update and dispose the old subscription
/// keepalive in milli seconds for subscription - this time is used to detect life status of providers
func (rcv *SubscriptionProperties) KeepaliveInterval() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 60000
}

/// keepalive in milli seconds for subscription - this time is used to detect life status of providers
func (rcv *SubscriptionProperties) MutateKeepaliveInterval(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

/// time in milli seconds for upper limit of publish messages to not get flooded with new messages
func (rcv *SubscriptionProperties) PublishInterval() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 1000
}

/// time in milli seconds for upper limit of publish messages to not get flooded with new messages
func (rcv *SubscriptionProperties) MutatePublishInterval(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

/// Rules for subscription
func (rcv *SubscriptionProperties) Rules(obj *Property, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SubscriptionProperties) RulesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Rules for subscription
/// time in milli seconds to re-read data if an error was received for a nodex
func (rcv *SubscriptionProperties) ErrorInterval() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 10000
}

/// time in milli seconds to re-read data if an error was received for a nodex
func (rcv *SubscriptionProperties) MutateErrorInterval(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func SubscriptionPropertiesStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func SubscriptionPropertiesAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SubscriptionPropertiesAddKeepaliveInterval(builder *flatbuffers.Builder, keepaliveInterval uint32) {
	builder.PrependUint32Slot(1, keepaliveInterval, 60000)
}
func SubscriptionPropertiesAddPublishInterval(builder *flatbuffers.Builder, publishInterval uint32) {
	builder.PrependUint32Slot(2, publishInterval, 1000)
}
func SubscriptionPropertiesAddRules(builder *flatbuffers.Builder, rules flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(rules), 0)
}
func SubscriptionPropertiesStartRulesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SubscriptionPropertiesAddErrorInterval(builder *flatbuffers.Builder, errorInterval uint32) {
	builder.PrependUint32Slot(4, errorInterval, 10000)
}
func SubscriptionPropertiesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
