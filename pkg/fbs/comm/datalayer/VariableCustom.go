// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	"bytes"
	flatbuffers "github.com/google/flatbuffers/go"
)

type VariableCustomT struct {
	Name string `json:"name"`
	BitoffsetReference string `json:"bitoffsetReference"`
	Bitoffset uint32 `json:"bitoffset"`
	Bitsize uint32 `json:"bitsize"`
	Type string `json:"type"`
	Metadata *MetadataT `json:"metadata"`
}

func (t *VariableCustomT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	bitoffsetReferenceOffset := flatbuffers.UOffsetT(0)
	if t.BitoffsetReference != "" {
		bitoffsetReferenceOffset = builder.CreateString(t.BitoffsetReference)
	}
	type_Offset := flatbuffers.UOffsetT(0)
	if t.Type != "" {
		type_Offset = builder.CreateString(t.Type)
	}
	metadataOffset := t.Metadata.Pack(builder)
	VariableCustomStart(builder)
	VariableCustomAddName(builder, nameOffset)
	VariableCustomAddBitoffsetReference(builder, bitoffsetReferenceOffset)
	VariableCustomAddBitoffset(builder, t.Bitoffset)
	VariableCustomAddBitsize(builder, t.Bitsize)
	VariableCustomAddType(builder, type_Offset)
	VariableCustomAddMetadata(builder, metadataOffset)
	return VariableCustomEnd(builder)
}

func (rcv *VariableCustom) UnPackTo(t *VariableCustomT) {
	t.Name = string(rcv.Name())
	t.BitoffsetReference = string(rcv.BitoffsetReference())
	t.Bitoffset = rcv.Bitoffset()
	t.Bitsize = rcv.Bitsize()
	t.Type = string(rcv.Type())
	t.Metadata = rcv.Metadata(nil).UnPack()
}

func (rcv *VariableCustom) UnPack() *VariableCustomT {
	if rcv == nil { return nil }
	t := &VariableCustomT{}
	rcv.UnPackTo(t)
	return t
}

type VariableCustom struct {
	_tab flatbuffers.Table
}

func GetRootAsVariableCustom(buf []byte, offset flatbuffers.UOffsetT) *VariableCustom {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &VariableCustom{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsVariableCustom(buf []byte, offset flatbuffers.UOffsetT) *VariableCustom {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &VariableCustom{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *VariableCustom) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *VariableCustom) Table() flatbuffers.Table {
	return rcv._tab
}

/// Name of the variable
func (rcv *VariableCustom) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the variable
func VariableCustomKeyCompare(o1, o2 flatbuffers.UOffsetT, buf []byte) bool {
	obj1 := &VariableCustom{}
	obj2 := &VariableCustom{}
	obj1.Init(buf, flatbuffers.UOffsetT(len(buf)) - o1)
	obj2.Init(buf, flatbuffers.UOffsetT(len(buf)) - o2)
	return string(obj1.Name()) < string(obj2.Name())
}

func (rcv *VariableCustom) LookupByKey(key string, vectorLocation flatbuffers.UOffsetT, buf []byte) bool {
	span := flatbuffers.GetUOffsetT(buf[vectorLocation - 4:])
	start := flatbuffers.UOffsetT(0)
	bKey := []byte(key)
	for span != 0 {
		middle := span / 2
		tableOffset := flatbuffers.GetIndirectOffset(buf, vectorLocation+ 4 * (start + middle))
		obj := &VariableCustom{}
		obj.Init(buf, tableOffset)
		comp := bytes.Compare(obj.Name(), bKey)
		if comp > 0 {
			span = middle
		} else if comp < 0 {
			middle += 1
			start += middle
			span -= middle
		} else {
			rcv.Init(buf, tableOffset)
			return true
		}
	}
	return false
}

/// Name of a variable in the memory map to reference to
func (rcv *VariableCustom) BitoffsetReference() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of a variable in the memory map to reference to
/// Offset (in bits) of variable in memory additional to bitoffsetReference
func (rcv *VariableCustom) Bitoffset() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Offset (in bits) of variable in memory additional to bitoffsetReference
func (rcv *VariableCustom) MutateBitoffset(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

/// Size (in bits) of variable in memory
func (rcv *VariableCustom) Bitsize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Size (in bits) of variable in memory
func (rcv *VariableCustom) MutateBitsize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

/// type information
func (rcv *VariableCustom) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// type information
/// metadata of the variable (optional)
func (rcv *VariableCustom) Metadata(obj *Metadata) *Metadata {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Metadata)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// metadata of the variable (optional)
func VariableCustomStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func VariableCustomAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func VariableCustomAddBitoffsetReference(builder *flatbuffers.Builder, bitoffsetReference flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(bitoffsetReference), 0)
}
func VariableCustomAddBitoffset(builder *flatbuffers.Builder, bitoffset uint32) {
	builder.PrependUint32Slot(2, bitoffset, 0)
}
func VariableCustomAddBitsize(builder *flatbuffers.Builder, bitsize uint32) {
	builder.PrependUint32Slot(3, bitsize, 0)
}
func VariableCustomAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(type_), 0)
}
func VariableCustomAddMetadata(builder *flatbuffers.Builder, metadata flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(metadata), 0)
}
func VariableCustomEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
