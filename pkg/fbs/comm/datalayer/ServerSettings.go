// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ServerSettingsT struct {
	ServerIdlePingTimeout uint32
	ServerWaitResponseTimeout uint32
	ServerMaxMessageSize uint32
	DebugAddress string
	ServerMaxRtSize uint32
	ServerEmulatedNvramSize uint32
}

func (t *ServerSettingsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	debugAddressOffset := builder.CreateString(t.DebugAddress)
	ServerSettingsStart(builder)
	ServerSettingsAddServerIdlePingTimeout(builder, t.ServerIdlePingTimeout)
	ServerSettingsAddServerWaitResponseTimeout(builder, t.ServerWaitResponseTimeout)
	ServerSettingsAddServerMaxMessageSize(builder, t.ServerMaxMessageSize)
	ServerSettingsAddDebugAddress(builder, debugAddressOffset)
	ServerSettingsAddServerMaxRtSize(builder, t.ServerMaxRtSize)
	ServerSettingsAddServerEmulatedNvramSize(builder, t.ServerEmulatedNvramSize)
	return ServerSettingsEnd(builder)
}

func (rcv *ServerSettings) UnPackTo(t *ServerSettingsT) {
	t.ServerIdlePingTimeout = rcv.ServerIdlePingTimeout()
	t.ServerWaitResponseTimeout = rcv.ServerWaitResponseTimeout()
	t.ServerMaxMessageSize = rcv.ServerMaxMessageSize()
	t.DebugAddress = string(rcv.DebugAddress())
	t.ServerMaxRtSize = rcv.ServerMaxRtSize()
	t.ServerEmulatedNvramSize = rcv.ServerEmulatedNvramSize()
}

func (rcv *ServerSettings) UnPack() *ServerSettingsT {
	if rcv == nil { return nil }
	t := &ServerSettingsT{}
	rcv.UnPackTo(t)
	return t
}

type ServerSettings struct {
	_tab flatbuffers.Table
}

func GetRootAsServerSettings(buf []byte, offset flatbuffers.UOffsetT) *ServerSettings {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ServerSettings{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsServerSettings(buf []byte, offset flatbuffers.UOffsetT) *ServerSettings {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ServerSettings{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ServerSettings) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ServerSettings) Table() flatbuffers.Table {
	return rcv._tab
}

/// after this time send a ping to not used provider is send to test if provider is still alive
func (rcv *ServerSettings) ServerIdlePingTimeout() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 30000
}

/// after this time send a ping to not used provider is send to test if provider is still alive
func (rcv *ServerSettings) MutateServerIdlePingTimeout(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// after this time a response from provider is expected - if there is no answer a provider is assumed to be dead --> kick provider out of routing
func (rcv *ServerSettings) ServerWaitResponseTimeout() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 3000
}

/// after this time a response from provider is expected - if there is no answer a provider is assumed to be dead --> kick provider out of routing
func (rcv *ServerSettings) MutateServerWaitResponseTimeout(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

/// maximum inbound message size
func (rcv *ServerSettings) ServerMaxMessageSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 52428800
}

/// maximum inbound message size
func (rcv *ServerSettings) MutateServerMaxMessageSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

/// Address to debug disconnect
func (rcv *ServerSettings) DebugAddress() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Address to debug disconnect
/// Maximum size of a RT area
func (rcv *ServerSettings) ServerMaxRtSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 1048576
}

/// Maximum size of a RT area
func (rcv *ServerSettings) MutateServerMaxRtSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

/// Emulated NVRam size - will be active after a restart of app.automationcore
func (rcv *ServerSettings) ServerEmulatedNvramSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 122880
}

/// Emulated NVRam size - will be active after a restart of app.automationcore
func (rcv *ServerSettings) MutateServerEmulatedNvramSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func ServerSettingsStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ServerSettingsAddServerIdlePingTimeout(builder *flatbuffers.Builder, serverIdlePingTimeout uint32) {
	builder.PrependUint32Slot(0, serverIdlePingTimeout, 30000)
}
func ServerSettingsAddServerWaitResponseTimeout(builder *flatbuffers.Builder, serverWaitResponseTimeout uint32) {
	builder.PrependUint32Slot(1, serverWaitResponseTimeout, 3000)
}
func ServerSettingsAddServerMaxMessageSize(builder *flatbuffers.Builder, serverMaxMessageSize uint32) {
	builder.PrependUint32Slot(2, serverMaxMessageSize, 52428800)
}
func ServerSettingsAddDebugAddress(builder *flatbuffers.Builder, debugAddress flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(debugAddress), 0)
}
func ServerSettingsAddServerMaxRtSize(builder *flatbuffers.Builder, serverMaxRtSize uint32) {
	builder.PrependUint32Slot(4, serverMaxRtSize, 1048576)
}
func ServerSettingsAddServerEmulatedNvramSize(builder *flatbuffers.Builder, serverEmulatedNvramSize uint32) {
	builder.PrependUint32Slot(5, serverEmulatedNvramSize, 122880)
}
func ServerSettingsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
