// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ServerSettings struct {
	_tab flatbuffers.Table
}

func GetRootAsServerSettings(buf []byte, offset flatbuffers.UOffsetT) *ServerSettings {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ServerSettings{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsServerSettings(buf []byte, offset flatbuffers.UOffsetT) *ServerSettings {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ServerSettings{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ServerSettings) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ServerSettings) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ServerSettings) ServerIdlePingTimeout() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 30000
}

func (rcv *ServerSettings) MutateServerIdlePingTimeout(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *ServerSettings) ServerWaitResponseTimeout() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 3000
}

func (rcv *ServerSettings) MutateServerWaitResponseTimeout(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func ServerSettingsStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ServerSettingsAddServerIdlePingTimeout(builder *flatbuffers.Builder, serverIdlePingTimeout uint32) {
	builder.PrependUint32Slot(0, serverIdlePingTimeout, 30000)
}
func ServerSettingsAddServerWaitResponseTimeout(builder *flatbuffers.Builder, serverWaitResponseTimeout uint32) {
	builder.PrependUint32Slot(1, serverWaitResponseTimeout, 3000)
}
func ServerSettingsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
