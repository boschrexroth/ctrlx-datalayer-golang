// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DiagnosisT struct {
	MainDiagnosisCode uint32 `json:"mainDiagnosisCode"`
	DetailedDiagnosisCode uint32 `json:"detailedDiagnosisCode"`
	DynamicDescription string `json:"dynamicDescription"`
	Entity string `json:"entity"`
	MoreInfo []*DiagMoreInfoT `json:"moreInfo"`
	Cause []*DiagnosisT `json:"cause"`
}

func (t *DiagnosisT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	dynamicDescriptionOffset := flatbuffers.UOffsetT(0)
	if t.DynamicDescription != "" {
		dynamicDescriptionOffset = builder.CreateString(t.DynamicDescription)
	}
	entityOffset := flatbuffers.UOffsetT(0)
	if t.Entity != "" {
		entityOffset = builder.CreateString(t.Entity)
	}
	moreInfoOffset := flatbuffers.UOffsetT(0)
	if t.MoreInfo != nil {
		moreInfoLength := len(t.MoreInfo)
		moreInfoOffsets := make([]flatbuffers.UOffsetT, moreInfoLength)
		for j := 0; j < moreInfoLength; j++ {
			moreInfoOffsets[j] = t.MoreInfo[j].Pack(builder)
		}
		DiagnosisStartMoreInfoVector(builder, moreInfoLength)
		for j := moreInfoLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(moreInfoOffsets[j])
		}
		moreInfoOffset = builder.EndVector(moreInfoLength)
	}
	causeOffset := flatbuffers.UOffsetT(0)
	if t.Cause != nil {
		causeLength := len(t.Cause)
		causeOffsets := make([]flatbuffers.UOffsetT, causeLength)
		for j := 0; j < causeLength; j++ {
			causeOffsets[j] = t.Cause[j].Pack(builder)
		}
		DiagnosisStartCauseVector(builder, causeLength)
		for j := causeLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(causeOffsets[j])
		}
		causeOffset = builder.EndVector(causeLength)
	}
	DiagnosisStart(builder)
	DiagnosisAddMainDiagnosisCode(builder, t.MainDiagnosisCode)
	DiagnosisAddDetailedDiagnosisCode(builder, t.DetailedDiagnosisCode)
	DiagnosisAddDynamicDescription(builder, dynamicDescriptionOffset)
	DiagnosisAddEntity(builder, entityOffset)
	DiagnosisAddMoreInfo(builder, moreInfoOffset)
	DiagnosisAddCause(builder, causeOffset)
	return DiagnosisEnd(builder)
}

func (rcv *Diagnosis) UnPackTo(t *DiagnosisT) {
	t.MainDiagnosisCode = rcv.MainDiagnosisCode()
	t.DetailedDiagnosisCode = rcv.DetailedDiagnosisCode()
	t.DynamicDescription = string(rcv.DynamicDescription())
	t.Entity = string(rcv.Entity())
	moreInfoLength := rcv.MoreInfoLength()
	t.MoreInfo = make([]*DiagMoreInfoT, moreInfoLength)
	for j := 0; j < moreInfoLength; j++ {
		x := DiagMoreInfo{}
		rcv.MoreInfo(&x, j)
		t.MoreInfo[j] = x.UnPack()
	}
	causeLength := rcv.CauseLength()
	t.Cause = make([]*DiagnosisT, causeLength)
	for j := 0; j < causeLength; j++ {
		x := Diagnosis{}
		rcv.Cause(&x, j)
		t.Cause[j] = x.UnPack()
	}
}

func (rcv *Diagnosis) UnPack() *DiagnosisT {
	if rcv == nil { return nil }
	t := &DiagnosisT{}
	rcv.UnPackTo(t)
	return t
}

type Diagnosis struct {
	_tab flatbuffers.Table
}

func GetRootAsDiagnosis(buf []byte, offset flatbuffers.UOffsetT) *Diagnosis {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Diagnosis{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDiagnosis(buf []byte, offset flatbuffers.UOffsetT) *Diagnosis {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Diagnosis{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Diagnosis) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Diagnosis) Table() flatbuffers.Table {
	return rcv._tab
}

/// Main diagnosis code for diagnosis system. E.g.: 0x3F0A0901
func (rcv *Diagnosis) MainDiagnosisCode() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Main diagnosis code for diagnosis system. E.g.: 0x3F0A0901
func (rcv *Diagnosis) MutateMainDiagnosisCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// Detailed diagnosis code for diagnosis system. E.g.: 0xC00E2050
func (rcv *Diagnosis) DetailedDiagnosisCode() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Detailed diagnosis code for diagnosis system. E.g.: 0xC00E2050
func (rcv *Diagnosis) MutateDetailedDiagnosisCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

/// A human-readable explanation with even more detailed information specific to this occurrence of the problem.
func (rcv *Diagnosis) DynamicDescription() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A human-readable explanation with even more detailed information specific to this occurrence of the problem.
/// Resource or entity which causes the problem E.g.: motion/axs/Axis_1
func (rcv *Diagnosis) Entity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Resource or entity which causes the problem E.g.: motion/axs/Axis_1
/// More information about the diagnosis
func (rcv *Diagnosis) MoreInfo(obj *DiagMoreInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Diagnosis) MoreInfoByKey(obj *DiagMoreInfo, key string) bool{
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *Diagnosis) MoreInfoLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// More information about the diagnosis
/// Cause of this diagnosis
func (rcv *Diagnosis) Cause(obj *Diagnosis, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Diagnosis) CauseLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Cause of this diagnosis
func DiagnosisStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func DiagnosisAddMainDiagnosisCode(builder *flatbuffers.Builder, mainDiagnosisCode uint32) {
	builder.PrependUint32Slot(0, mainDiagnosisCode, 0)
}
func DiagnosisAddDetailedDiagnosisCode(builder *flatbuffers.Builder, detailedDiagnosisCode uint32) {
	builder.PrependUint32Slot(1, detailedDiagnosisCode, 0)
}
func DiagnosisAddDynamicDescription(builder *flatbuffers.Builder, dynamicDescription flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(dynamicDescription), 0)
}
func DiagnosisAddEntity(builder *flatbuffers.Builder, entity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(entity), 0)
}
func DiagnosisAddMoreInfo(builder *flatbuffers.Builder, moreInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(moreInfo), 0)
}
func DiagnosisStartMoreInfoVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DiagnosisAddCause(builder *flatbuffers.Builder, cause flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(cause), 0)
}
func DiagnosisStartCauseVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DiagnosisEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
