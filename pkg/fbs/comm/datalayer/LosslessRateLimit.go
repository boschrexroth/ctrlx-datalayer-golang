// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LosslessRateLimitT struct {
	RateLimit uint32 `json:"rateLimit"`
}

func (t *LosslessRateLimitT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	LosslessRateLimitStart(builder)
	LosslessRateLimitAddRateLimit(builder, t.RateLimit)
	return LosslessRateLimitEnd(builder)
}

func (rcv *LosslessRateLimit) UnPackTo(t *LosslessRateLimitT) {
	t.RateLimit = rcv.RateLimit()
}

func (rcv *LosslessRateLimit) UnPack() *LosslessRateLimitT {
	if rcv == nil { return nil }
	t := &LosslessRateLimitT{}
	rcv.UnPackTo(t)
	return t
}

type LosslessRateLimit struct {
	_tab flatbuffers.Table
}

func GetRootAsLosslessRateLimit(buf []byte, offset flatbuffers.UOffsetT) *LosslessRateLimit {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LosslessRateLimit{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsLosslessRateLimit(buf []byte, offset flatbuffers.UOffsetT) *LosslessRateLimit {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LosslessRateLimit{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *LosslessRateLimit) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LosslessRateLimit) Table() flatbuffers.Table {
	return rcv._tab
}

/// Only every n-th new data will be recoreded - this is usefull to limit amount of data transmitted
/// This feature is only implemented in lossless subscriptions
func (rcv *LosslessRateLimit) RateLimit() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Only every n-th new data will be recoreded - this is usefull to limit amount of data transmitted
/// This feature is only implemented in lossless subscriptions
func (rcv *LosslessRateLimit) MutateRateLimit(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func LosslessRateLimitStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func LosslessRateLimitAddRateLimit(builder *flatbuffers.Builder, rateLimit uint32) {
	builder.PrependUint32Slot(0, rateLimit, 0)
}
func LosslessRateLimitEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
