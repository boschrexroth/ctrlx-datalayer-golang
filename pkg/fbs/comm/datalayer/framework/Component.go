// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package framework

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ComponentT struct {
	Name string
	Id string
	Active bool
	State string
	Interfaces []*Interface_T
	Dependencies []*DependencyT
}

func (t *ComponentT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	idOffset := builder.CreateString(t.Id)
	stateOffset := builder.CreateString(t.State)
	interfacesOffset := flatbuffers.UOffsetT(0)
	if t.Interfaces != nil {
		interfacesLength := len(t.Interfaces)
		interfacesOffsets := make([]flatbuffers.UOffsetT, interfacesLength)
		for j := 0; j < interfacesLength; j++ {
			interfacesOffsets[j] = t.Interfaces[j].Pack(builder)
		}
		ComponentStartInterfacesVector(builder, interfacesLength)
		for j := interfacesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(interfacesOffsets[j])
		}
		interfacesOffset = builder.EndVector(interfacesLength)
	}
	dependenciesOffset := flatbuffers.UOffsetT(0)
	if t.Dependencies != nil {
		dependenciesLength := len(t.Dependencies)
		dependenciesOffsets := make([]flatbuffers.UOffsetT, dependenciesLength)
		for j := 0; j < dependenciesLength; j++ {
			dependenciesOffsets[j] = t.Dependencies[j].Pack(builder)
		}
		ComponentStartDependenciesVector(builder, dependenciesLength)
		for j := dependenciesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(dependenciesOffsets[j])
		}
		dependenciesOffset = builder.EndVector(dependenciesLength)
	}
	ComponentStart(builder)
	ComponentAddName(builder, nameOffset)
	ComponentAddId(builder, idOffset)
	ComponentAddActive(builder, t.Active)
	ComponentAddState(builder, stateOffset)
	ComponentAddInterfaces(builder, interfacesOffset)
	ComponentAddDependencies(builder, dependenciesOffset)
	return ComponentEnd(builder)
}

func (rcv *Component) UnPackTo(t *ComponentT) {
	t.Name = string(rcv.Name())
	t.Id = string(rcv.Id())
	t.Active = rcv.Active()
	t.State = string(rcv.State())
	interfacesLength := rcv.InterfacesLength()
	t.Interfaces = make([]*Interface_T, interfacesLength)
	for j := 0; j < interfacesLength; j++ {
		x := Interface_{}
		rcv.Interfaces(&x, j)
		t.Interfaces[j] = x.UnPack()
	}
	dependenciesLength := rcv.DependenciesLength()
	t.Dependencies = make([]*DependencyT, dependenciesLength)
	for j := 0; j < dependenciesLength; j++ {
		x := Dependency{}
		rcv.Dependencies(&x, j)
		t.Dependencies[j] = x.UnPack()
	}
}

func (rcv *Component) UnPack() *ComponentT {
	if rcv == nil { return nil }
	t := &ComponentT{}
	rcv.UnPackTo(t)
	return t
}

type Component struct {
	_tab flatbuffers.Table
}

func GetRootAsComponent(buf []byte, offset flatbuffers.UOffsetT) *Component {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Component{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsComponent(buf []byte, offset flatbuffers.UOffsetT) *Component {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Component{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Component) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Component) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Component) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Component) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Component) Active() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Component) MutateActive(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *Component) State() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Component) Interfaces(obj *Interface_, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Component) InterfacesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Component) Dependencies(obj *Dependency, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Component) DependenciesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ComponentStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ComponentAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func ComponentAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(id), 0)
}
func ComponentAddActive(builder *flatbuffers.Builder, active bool) {
	builder.PrependBoolSlot(2, active, false)
}
func ComponentAddState(builder *flatbuffers.Builder, state flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(state), 0)
}
func ComponentAddInterfaces(builder *flatbuffers.Builder, interfaces flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(interfaces), 0)
}
func ComponentStartInterfacesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ComponentAddDependencies(builder *flatbuffers.Builder, dependencies flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(dependencies), 0)
}
func ComponentStartDependenciesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ComponentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
