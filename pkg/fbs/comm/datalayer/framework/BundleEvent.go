// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package framework

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BundleEventT struct {
	Name string `json:"name"`
	Id int64 `json:"id"`
	Event InstallEvent `json:"event"`
	Location string `json:"location"`
	Version string `json:"version"`
}

func (t *BundleEventT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	locationOffset := flatbuffers.UOffsetT(0)
	if t.Location != "" {
		locationOffset = builder.CreateString(t.Location)
	}
	versionOffset := flatbuffers.UOffsetT(0)
	if t.Version != "" {
		versionOffset = builder.CreateString(t.Version)
	}
	BundleEventStart(builder)
	BundleEventAddName(builder, nameOffset)
	BundleEventAddId(builder, t.Id)
	BundleEventAddEvent(builder, t.Event)
	BundleEventAddLocation(builder, locationOffset)
	BundleEventAddVersion(builder, versionOffset)
	return BundleEventEnd(builder)
}

func (rcv *BundleEvent) UnPackTo(t *BundleEventT) {
	t.Name = string(rcv.Name())
	t.Id = rcv.Id()
	t.Event = rcv.Event()
	t.Location = string(rcv.Location())
	t.Version = string(rcv.Version())
}

func (rcv *BundleEvent) UnPack() *BundleEventT {
	if rcv == nil { return nil }
	t := &BundleEventT{}
	rcv.UnPackTo(t)
	return t
}

type BundleEvent struct {
	_tab flatbuffers.Table
}

func GetRootAsBundleEvent(buf []byte, offset flatbuffers.UOffsetT) *BundleEvent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BundleEvent{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBundleEvent(buf []byte, offset flatbuffers.UOffsetT) *BundleEvent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BundleEvent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BundleEvent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BundleEvent) Table() flatbuffers.Table {
	return rcv._tab
}

/// Name of the bundle
func (rcv *BundleEvent) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the bundle
func (rcv *BundleEvent) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BundleEvent) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

/// Type of event
func (rcv *BundleEvent) Event() InstallEvent {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return InstallEvent(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Type of event
func (rcv *BundleEvent) MutateEvent(n InstallEvent) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

/// File location of the bundle
func (rcv *BundleEvent) Location() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// File location of the bundle
/// verison of the bundle
func (rcv *BundleEvent) Version() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// verison of the bundle
func BundleEventStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func BundleEventAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func BundleEventAddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(1, id, 0)
}
func BundleEventAddEvent(builder *flatbuffers.Builder, event InstallEvent) {
	builder.PrependInt8Slot(2, int8(event), 0)
}
func BundleEventAddLocation(builder *flatbuffers.Builder, location flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(location), 0)
}
func BundleEventAddVersion(builder *flatbuffers.Builder, version flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(version), 0)
}
func BundleEventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
