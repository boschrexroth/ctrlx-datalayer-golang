// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package framework

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RegisterT struct {
	IP string
	SP string
	BP string
}

func (t *RegisterT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	IPOffset := builder.CreateString(t.IP)
	SPOffset := builder.CreateString(t.SP)
	BPOffset := builder.CreateString(t.BP)
	RegisterStart(builder)
	RegisterAddIP(builder, IPOffset)
	RegisterAddSP(builder, SPOffset)
	RegisterAddBP(builder, BPOffset)
	return RegisterEnd(builder)
}

func (rcv *Register) UnPackTo(t *RegisterT) {
	t.IP = string(rcv.IP())
	t.SP = string(rcv.SP())
	t.BP = string(rcv.BP())
}

func (rcv *Register) UnPack() *RegisterT {
	if rcv == nil { return nil }
	t := &RegisterT{}
	rcv.UnPackTo(t)
	return t
}

type Register struct {
	_tab flatbuffers.Table
}

func GetRootAsRegister(buf []byte, offset flatbuffers.UOffsetT) *Register {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Register{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRegister(buf []byte, offset flatbuffers.UOffsetT) *Register {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Register{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Register) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Register) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Register) IP() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Register) SP() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Register) BP() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func RegisterStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RegisterAddIP(builder *flatbuffers.Builder, IP flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(IP), 0)
}
func RegisterAddSP(builder *flatbuffers.Builder, SP flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(SP), 0)
}
func RegisterAddBP(builder *flatbuffers.Builder, BP flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(BP), 0)
}
func RegisterEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
