// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package framework

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ComponentListT struct {
	Components []*ComponentT `json:"components"`
}

func (t *ComponentListT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	componentsOffset := flatbuffers.UOffsetT(0)
	if t.Components != nil {
		componentsLength := len(t.Components)
		componentsOffsets := make([]flatbuffers.UOffsetT, componentsLength)
		for j := 0; j < componentsLength; j++ {
			componentsOffsets[j] = t.Components[j].Pack(builder)
		}
		ComponentListStartComponentsVector(builder, componentsLength)
		for j := componentsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(componentsOffsets[j])
		}
		componentsOffset = builder.EndVector(componentsLength)
	}
	ComponentListStart(builder)
	ComponentListAddComponents(builder, componentsOffset)
	return ComponentListEnd(builder)
}

func (rcv *ComponentList) UnPackTo(t *ComponentListT) {
	componentsLength := rcv.ComponentsLength()
	t.Components = make([]*ComponentT, componentsLength)
	for j := 0; j < componentsLength; j++ {
		x := Component{}
		rcv.Components(&x, j)
		t.Components[j] = x.UnPack()
	}
}

func (rcv *ComponentList) UnPack() *ComponentListT {
	if rcv == nil { return nil }
	t := &ComponentListT{}
	rcv.UnPackTo(t)
	return t
}

type ComponentList struct {
	_tab flatbuffers.Table
}

func GetRootAsComponentList(buf []byte, offset flatbuffers.UOffsetT) *ComponentList {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ComponentList{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsComponentList(buf []byte, offset flatbuffers.UOffsetT) *ComponentList {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ComponentList{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ComponentList) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ComponentList) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ComponentList) Components(obj *Component, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ComponentList) ComponentsByKey(obj *Component, key string) bool{
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *ComponentList) ComponentsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ComponentListStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ComponentListAddComponents(builder *flatbuffers.Builder, components flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(components), 0)
}
func ComponentListStartComponentsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ComponentListEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
