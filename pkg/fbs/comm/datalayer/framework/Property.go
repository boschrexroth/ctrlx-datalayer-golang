// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package framework

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PropertyT struct {
	Name string
	Value string
}

func (t *PropertyT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	valueOffset := builder.CreateString(t.Value)
	PropertyStart(builder)
	PropertyAddName(builder, nameOffset)
	PropertyAddValue(builder, valueOffset)
	return PropertyEnd(builder)
}

func (rcv *Property) UnPackTo(t *PropertyT) {
	t.Name = string(rcv.Name())
	t.Value = string(rcv.Value())
}

func (rcv *Property) UnPack() *PropertyT {
	if rcv == nil { return nil }
	t := &PropertyT{}
	rcv.UnPackTo(t)
	return t
}

type Property struct {
	_tab flatbuffers.Table
}

func GetRootAsProperty(buf []byte, offset flatbuffers.UOffsetT) *Property {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Property{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsProperty(buf []byte, offset flatbuffers.UOffsetT) *Property {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Property{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Property) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Property) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Property) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Property) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PropertyStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func PropertyAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func PropertyAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}
func PropertyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
