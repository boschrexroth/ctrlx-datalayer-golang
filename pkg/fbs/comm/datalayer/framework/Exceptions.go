// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package framework

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ExceptionsT struct {
	Exceptions []*ExceptionT `json:"exceptions"`
}

func (t *ExceptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	exceptionsOffset := flatbuffers.UOffsetT(0)
	if t.Exceptions != nil {
		exceptionsLength := len(t.Exceptions)
		exceptionsOffsets := make([]flatbuffers.UOffsetT, exceptionsLength)
		for j := 0; j < exceptionsLength; j++ {
			exceptionsOffsets[j] = t.Exceptions[j].Pack(builder)
		}
		ExceptionsStartExceptionsVector(builder, exceptionsLength)
		for j := exceptionsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(exceptionsOffsets[j])
		}
		exceptionsOffset = builder.EndVector(exceptionsLength)
	}
	ExceptionsStart(builder)
	ExceptionsAddExceptions(builder, exceptionsOffset)
	return ExceptionsEnd(builder)
}

func (rcv *Exceptions) UnPackTo(t *ExceptionsT) {
	exceptionsLength := rcv.ExceptionsLength()
	t.Exceptions = make([]*ExceptionT, exceptionsLength)
	for j := 0; j < exceptionsLength; j++ {
		x := Exception{}
		rcv.Exceptions(&x, j)
		t.Exceptions[j] = x.UnPack()
	}
}

func (rcv *Exceptions) UnPack() *ExceptionsT {
	if rcv == nil { return nil }
	t := &ExceptionsT{}
	rcv.UnPackTo(t)
	return t
}

type Exceptions struct {
	_tab flatbuffers.Table
}

func GetRootAsExceptions(buf []byte, offset flatbuffers.UOffsetT) *Exceptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Exceptions{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsExceptions(buf []byte, offset flatbuffers.UOffsetT) *Exceptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Exceptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Exceptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Exceptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Exceptions) Exceptions(obj *Exception, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Exceptions) ExceptionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ExceptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ExceptionsAddExceptions(builder *flatbuffers.Builder, exceptions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(exceptions), 0)
}
func ExceptionsStartExceptionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ExceptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
