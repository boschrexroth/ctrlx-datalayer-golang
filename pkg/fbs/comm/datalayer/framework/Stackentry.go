// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package framework

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StackentryT struct {
	Frame uint32 `json:"frame"`
	Stack string `json:"stack"`
}

func (t *StackentryT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	stackOffset := flatbuffers.UOffsetT(0)
	if t.Stack != "" {
		stackOffset = builder.CreateString(t.Stack)
	}
	StackentryStart(builder)
	StackentryAddFrame(builder, t.Frame)
	StackentryAddStack(builder, stackOffset)
	return StackentryEnd(builder)
}

func (rcv *Stackentry) UnPackTo(t *StackentryT) {
	t.Frame = rcv.Frame()
	t.Stack = string(rcv.Stack())
}

func (rcv *Stackentry) UnPack() *StackentryT {
	if rcv == nil { return nil }
	t := &StackentryT{}
	rcv.UnPackTo(t)
	return t
}

type Stackentry struct {
	_tab flatbuffers.Table
}

func GetRootAsStackentry(buf []byte, offset flatbuffers.UOffsetT) *Stackentry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Stackentry{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStackentry(buf []byte, offset flatbuffers.UOffsetT) *Stackentry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Stackentry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Stackentry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Stackentry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Stackentry) Frame() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Stackentry) MutateFrame(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func StackentryKeyCompare(o1, o2 flatbuffers.UOffsetT, buf []byte) bool {
	obj1 := &Stackentry{}
	obj2 := &Stackentry{}
	obj1.Init(buf, flatbuffers.UOffsetT(len(buf)) - o1)
	obj2.Init(buf, flatbuffers.UOffsetT(len(buf)) - o2)
	return obj1.Frame() < obj2.Frame()
}

func (rcv *Stackentry) LookupByKey(key uint32, vectorLocation flatbuffers.UOffsetT, buf []byte) bool {
	span := flatbuffers.GetUOffsetT(buf[vectorLocation - 4:])
	start := flatbuffers.UOffsetT(0)
	for span != 0 {
		middle := span / 2
		tableOffset := flatbuffers.GetIndirectOffset(buf, vectorLocation+ 4 * (start + middle))
		obj := &Stackentry{}
		obj.Init(buf, tableOffset)
		val := obj.Frame()
		comp := 0
		if val > key {
			comp = 1
		} else if val < key {
			comp = -1
		}
		if comp > 0 {
			span = middle
		} else if comp < 0 {
			middle += 1
			start += middle
			span -= middle
		} else {
			rcv.Init(buf, tableOffset)
			return true
		}
	}
	return false
}

func (rcv *Stackentry) Stack() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func StackentryStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func StackentryAddFrame(builder *flatbuffers.Builder, frame uint32) {
	builder.PrependUint32Slot(0, frame, 0)
}
func StackentryAddStack(builder *flatbuffers.Builder, stack flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(stack), 0)
}
func StackentryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
