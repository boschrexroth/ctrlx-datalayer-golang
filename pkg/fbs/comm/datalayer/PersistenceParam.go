// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PersistenceParamT struct {
	ConfigurationPath string
	Id string
	Phase string
}

func (t *PersistenceParamT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	configurationPathOffset := builder.CreateString(t.ConfigurationPath)
	idOffset := builder.CreateString(t.Id)
	phaseOffset := builder.CreateString(t.Phase)
	PersistenceParamStart(builder)
	PersistenceParamAddConfigurationPath(builder, configurationPathOffset)
	PersistenceParamAddId(builder, idOffset)
	PersistenceParamAddPhase(builder, phaseOffset)
	return PersistenceParamEnd(builder)
}

func (rcv *PersistenceParam) UnPackTo(t *PersistenceParamT) {
	t.ConfigurationPath = string(rcv.ConfigurationPath())
	t.Id = string(rcv.Id())
	t.Phase = string(rcv.Phase())
}

func (rcv *PersistenceParam) UnPack() *PersistenceParamT {
	if rcv == nil { return nil }
	t := &PersistenceParamT{}
	rcv.UnPackTo(t)
	return t
}

type PersistenceParam struct {
	_tab flatbuffers.Table
}

func GetRootAsPersistenceParam(buf []byte, offset flatbuffers.UOffsetT) *PersistenceParam {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PersistenceParam{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPersistenceParam(buf []byte, offset flatbuffers.UOffsetT) *PersistenceParam {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PersistenceParam{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PersistenceParam) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PersistenceParam) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PersistenceParam) ConfigurationPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PersistenceParam) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PersistenceParam) Phase() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PersistenceParamStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PersistenceParamAddConfigurationPath(builder *flatbuffers.Builder, configurationPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(configurationPath), 0)
}
func PersistenceParamAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(id), 0)
}
func PersistenceParamAddPhase(builder *flatbuffers.Builder, phase flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(phase), 0)
}
func PersistenceParamEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
