// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DebugChannel struct {
	_tab flatbuffers.Table
}

func GetRootAsDebugChannel(buf []byte, offset flatbuffers.UOffsetT) *DebugChannel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DebugChannel{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDebugChannel(buf []byte, offset flatbuffers.UOffsetT) *DebugChannel {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DebugChannel{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DebugChannel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DebugChannel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DebugChannel) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DebugChannel) Address() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DebugChannel) IsTrigger() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *DebugChannel) MutateIsTrigger(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func DebugChannelStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DebugChannelAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func DebugChannelAddAddress(builder *flatbuffers.Builder, address flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(address), 0)
}
func DebugChannelAddIsTrigger(builder *flatbuffers.Builder, isTrigger bool) {
	builder.PrependBoolSlot(2, isTrigger, false)
}
func DebugChannelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
