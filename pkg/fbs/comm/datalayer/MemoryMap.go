// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MemoryMapT struct {
	Variables []*VariableT
	Revision uint32
}

func (t *MemoryMapT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	variablesOffset := flatbuffers.UOffsetT(0)
	if t.Variables != nil {
		variablesLength := len(t.Variables)
		variablesOffsets := make([]flatbuffers.UOffsetT, variablesLength)
		for j := 0; j < variablesLength; j++ {
			variablesOffsets[j] = t.Variables[j].Pack(builder)
		}
		MemoryMapStartVariablesVector(builder, variablesLength)
		for j := variablesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(variablesOffsets[j])
		}
		variablesOffset = builder.EndVector(variablesLength)
	}
	MemoryMapStart(builder)
	MemoryMapAddVariables(builder, variablesOffset)
	MemoryMapAddRevision(builder, t.Revision)
	return MemoryMapEnd(builder)
}

func (rcv *MemoryMap) UnPackTo(t *MemoryMapT) {
	variablesLength := rcv.VariablesLength()
	t.Variables = make([]*VariableT, variablesLength)
	for j := 0; j < variablesLength; j++ {
		x := Variable{}
		rcv.Variables(&x, j)
		t.Variables[j] = x.UnPack()
	}
	t.Revision = rcv.Revision()
}

func (rcv *MemoryMap) UnPack() *MemoryMapT {
	if rcv == nil { return nil }
	t := &MemoryMapT{}
	rcv.UnPackTo(t)
	return t
}

type MemoryMap struct {
	_tab flatbuffers.Table
}

func GetRootAsMemoryMap(buf []byte, offset flatbuffers.UOffsetT) *MemoryMap {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MemoryMap{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMemoryMap(buf []byte, offset flatbuffers.UOffsetT) *MemoryMap {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MemoryMap{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MemoryMap) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MemoryMap) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MemoryMap) Variables(obj *Variable, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MemoryMap) VariablesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MemoryMap) Revision() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MemoryMap) MutateRevision(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func MemoryMapStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func MemoryMapAddVariables(builder *flatbuffers.Builder, variables flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(variables), 0)
}
func MemoryMapStartVariablesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MemoryMapAddRevision(builder *flatbuffers.Builder, revision uint32) {
	builder.PrependUint32Slot(1, revision, 0)
}
func MemoryMapEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
