// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DiagMoreInfoT struct {
	Key string
	Value string
}

func (t *DiagMoreInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	keyOffset := builder.CreateString(t.Key)
	valueOffset := builder.CreateString(t.Value)
	DiagMoreInfoStart(builder)
	DiagMoreInfoAddKey(builder, keyOffset)
	DiagMoreInfoAddValue(builder, valueOffset)
	return DiagMoreInfoEnd(builder)
}

func (rcv *DiagMoreInfo) UnPackTo(t *DiagMoreInfoT) {
	t.Key = string(rcv.Key())
	t.Value = string(rcv.Value())
}

func (rcv *DiagMoreInfo) UnPack() *DiagMoreInfoT {
	if rcv == nil { return nil }
	t := &DiagMoreInfoT{}
	rcv.UnPackTo(t)
	return t
}

type DiagMoreInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsDiagMoreInfo(buf []byte, offset flatbuffers.UOffsetT) *DiagMoreInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DiagMoreInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDiagMoreInfo(buf []byte, offset flatbuffers.UOffsetT) *DiagMoreInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DiagMoreInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DiagMoreInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DiagMoreInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DiagMoreInfo) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DiagMoreInfo) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func DiagMoreInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DiagMoreInfoAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func DiagMoreInfoAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}
func DiagMoreInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
