// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	"bytes"
	flatbuffers "github.com/google/flatbuffers/go"
)

type DiagMoreInfoT struct {
	Key string `json:"key"`
	Value string `json:"value"`
}

func (t *DiagMoreInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	keyOffset := flatbuffers.UOffsetT(0)
	if t.Key != "" {
		keyOffset = builder.CreateString(t.Key)
	}
	valueOffset := flatbuffers.UOffsetT(0)
	if t.Value != "" {
		valueOffset = builder.CreateString(t.Value)
	}
	DiagMoreInfoStart(builder)
	DiagMoreInfoAddKey(builder, keyOffset)
	DiagMoreInfoAddValue(builder, valueOffset)
	return DiagMoreInfoEnd(builder)
}

func (rcv *DiagMoreInfo) UnPackTo(t *DiagMoreInfoT) {
	t.Key = string(rcv.Key())
	t.Value = string(rcv.Value())
}

func (rcv *DiagMoreInfo) UnPack() *DiagMoreInfoT {
	if rcv == nil { return nil }
	t := &DiagMoreInfoT{}
	rcv.UnPackTo(t)
	return t
}

type DiagMoreInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsDiagMoreInfo(buf []byte, offset flatbuffers.UOffsetT) *DiagMoreInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DiagMoreInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDiagMoreInfo(buf []byte, offset flatbuffers.UOffsetT) *DiagMoreInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DiagMoreInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DiagMoreInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DiagMoreInfo) Table() flatbuffers.Table {
	return rcv._tab
}

/// defined key 
///   "requiredLicenses": list of required licences seperated by ","
///   "requiredScopes": list of required scopes seperated by ","
func (rcv *DiagMoreInfo) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// defined key 
///   "requiredLicenses": list of required licences seperated by ","
///   "requiredScopes": list of required scopes seperated by ","
func DiagMoreInfoKeyCompare(o1, o2 flatbuffers.UOffsetT, buf []byte) bool {
	obj1 := &DiagMoreInfo{}
	obj2 := &DiagMoreInfo{}
	obj1.Init(buf, flatbuffers.UOffsetT(len(buf)) - o1)
	obj2.Init(buf, flatbuffers.UOffsetT(len(buf)) - o2)
	return string(obj1.Key()) < string(obj2.Key())
}

func (rcv *DiagMoreInfo) LookupByKey(key string, vectorLocation flatbuffers.UOffsetT, buf []byte) bool {
	span := flatbuffers.GetUOffsetT(buf[vectorLocation - 4:])
	start := flatbuffers.UOffsetT(0)
	bKey := []byte(key)
	for span != 0 {
		middle := span / 2
		tableOffset := flatbuffers.GetIndirectOffset(buf, vectorLocation+ 4 * (start + middle))
		obj := &DiagMoreInfo{}
		obj.Init(buf, tableOffset)
		comp := bytes.Compare(obj.Key(), bKey)
		if comp > 0 {
			span = middle
		} else if comp < 0 {
			middle += 1
			start += middle
			span -= middle
		} else {
			rcv.Init(buf, tableOffset)
			return true
		}
	}
	return false
}

/// corresponding value
func (rcv *DiagMoreInfo) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// corresponding value
func DiagMoreInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DiagMoreInfoAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func DiagMoreInfoAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}
func DiagMoreInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
