// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RawT struct {
	Value []int8 `json:"value"`
}

func (t *RawT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	valueOffset := flatbuffers.UOffsetT(0)
	if t.Value != nil {
		valueLength := len(t.Value)
		RawStartValueVector(builder, valueLength)
		for j := valueLength - 1; j >= 0; j-- {
			builder.PrependInt8(t.Value[j])
		}
		valueOffset = builder.EndVector(valueLength)
	}
	RawStart(builder)
	RawAddValue(builder, valueOffset)
	return RawEnd(builder)
}

func (rcv *Raw) UnPackTo(t *RawT) {
	valueLength := rcv.ValueLength()
	t.Value = make([]int8, valueLength)
	for j := 0; j < valueLength; j++ {
		t.Value[j] = rcv.Value(j)
	}
}

func (rcv *Raw) UnPack() *RawT {
	if rcv == nil { return nil }
	t := &RawT{}
	rcv.UnPackTo(t)
	return t
}

type Raw struct {
	_tab flatbuffers.Table
}

func GetRootAsRaw(buf []byte, offset flatbuffers.UOffsetT) *Raw {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Raw{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRaw(buf []byte, offset flatbuffers.UOffsetT) *Raw {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Raw{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Raw) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Raw) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Raw) Value(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Raw) ValueLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Raw) MutateValue(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func RawStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func RawAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(value), 0)
}
func RawStartValueVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func RawEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
