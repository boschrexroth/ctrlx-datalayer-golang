// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type QueueingT struct {
	QueueSize uint32
	Behaviour QueueBehaviour
}

func (t *QueueingT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	QueueingStart(builder)
	QueueingAddQueueSize(builder, t.QueueSize)
	QueueingAddBehaviour(builder, t.Behaviour)
	return QueueingEnd(builder)
}

func (rcv *Queueing) UnPackTo(t *QueueingT) {
	t.QueueSize = rcv.QueueSize()
	t.Behaviour = rcv.Behaviour()
}

func (rcv *Queueing) UnPack() *QueueingT {
	if rcv == nil { return nil }
	t := &QueueingT{}
	rcv.UnPackTo(t)
	return t
}

type Queueing struct {
	_tab flatbuffers.Table
}

func GetRootAsQueueing(buf []byte, offset flatbuffers.UOffsetT) *Queueing {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Queueing{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsQueueing(buf []byte, offset flatbuffers.UOffsetT) *Queueing {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Queueing{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Queueing) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Queueing) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Queueing) QueueSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 10
}

func (rcv *Queueing) MutateQueueSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Queueing) Behaviour() QueueBehaviour {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return QueueBehaviour(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Queueing) MutateBehaviour(n QueueBehaviour) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func QueueingStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func QueueingAddQueueSize(builder *flatbuffers.Builder, queueSize uint32) {
	builder.PrependUint32Slot(0, queueSize, 10)
}
func QueueingAddBehaviour(builder *flatbuffers.Builder, behaviour QueueBehaviour) {
	builder.PrependInt32Slot(1, int32(behaviour), 0)
}
func QueueingEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
