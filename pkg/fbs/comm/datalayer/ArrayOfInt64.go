// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ArrayOfInt64T struct {
	Value []int64 `json:"value"`
}

func (t *ArrayOfInt64T) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	valueOffset := flatbuffers.UOffsetT(0)
	if t.Value != nil {
		valueLength := len(t.Value)
		ArrayOfInt64StartValueVector(builder, valueLength)
		for j := valueLength - 1; j >= 0; j-- {
			builder.PrependInt64(t.Value[j])
		}
		valueOffset = builder.EndVector(valueLength)
	}
	ArrayOfInt64Start(builder)
	ArrayOfInt64AddValue(builder, valueOffset)
	return ArrayOfInt64End(builder)
}

func (rcv *ArrayOfInt64) UnPackTo(t *ArrayOfInt64T) {
	valueLength := rcv.ValueLength()
	t.Value = make([]int64, valueLength)
	for j := 0; j < valueLength; j++ {
		t.Value[j] = rcv.Value(j)
	}
}

func (rcv *ArrayOfInt64) UnPack() *ArrayOfInt64T {
	if rcv == nil { return nil }
	t := &ArrayOfInt64T{}
	rcv.UnPackTo(t)
	return t
}

type ArrayOfInt64 struct {
	_tab flatbuffers.Table
}

func GetRootAsArrayOfInt64(buf []byte, offset flatbuffers.UOffsetT) *ArrayOfInt64 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ArrayOfInt64{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsArrayOfInt64(buf []byte, offset flatbuffers.UOffsetT) *ArrayOfInt64 {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ArrayOfInt64{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ArrayOfInt64) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ArrayOfInt64) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ArrayOfInt64) Value(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ArrayOfInt64) ValueLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ArrayOfInt64) MutateValue(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func ArrayOfInt64Start(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ArrayOfInt64AddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(value), 0)
}
func ArrayOfInt64StartValueVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ArrayOfInt64End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
