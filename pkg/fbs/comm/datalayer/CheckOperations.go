// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CheckOperationsT struct {
	Address string `json:"address"`
	Token string `json:"token"`
}

func (t *CheckOperationsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	addressOffset := flatbuffers.UOffsetT(0)
	if t.Address != "" {
		addressOffset = builder.CreateString(t.Address)
	}
	tokenOffset := flatbuffers.UOffsetT(0)
	if t.Token != "" {
		tokenOffset = builder.CreateString(t.Token)
	}
	CheckOperationsStart(builder)
	CheckOperationsAddAddress(builder, addressOffset)
	CheckOperationsAddToken(builder, tokenOffset)
	return CheckOperationsEnd(builder)
}

func (rcv *CheckOperations) UnPackTo(t *CheckOperationsT) {
	t.Address = string(rcv.Address())
	t.Token = string(rcv.Token())
}

func (rcv *CheckOperations) UnPack() *CheckOperationsT {
	if rcv == nil { return nil }
	t := &CheckOperationsT{}
	rcv.UnPackTo(t)
	return t
}

type CheckOperations struct {
	_tab flatbuffers.Table
}

func GetRootAsCheckOperations(buf []byte, offset flatbuffers.UOffsetT) *CheckOperations {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CheckOperations{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCheckOperations(buf []byte, offset flatbuffers.UOffsetT) *CheckOperations {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CheckOperations{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CheckOperations) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CheckOperations) Table() flatbuffers.Table {
	return rcv._tab
}

/// address to check
func (rcv *CheckOperations) Address() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// address to check
/// token to check
func (rcv *CheckOperations) Token() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// token to check
func CheckOperationsStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CheckOperationsAddAddress(builder *flatbuffers.Builder, address flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(address), 0)
}
func CheckOperationsAddToken(builder *flatbuffers.Builder, token flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(token), 0)
}
func CheckOperationsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
