// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ScopesT struct {
	Scopes []*ScopeT
}

func (t *ScopesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	scopesOffset := flatbuffers.UOffsetT(0)
	if t.Scopes != nil {
		scopesLength := len(t.Scopes)
		scopesOffsets := make([]flatbuffers.UOffsetT, scopesLength)
		for j := 0; j < scopesLength; j++ {
			scopesOffsets[j] = t.Scopes[j].Pack(builder)
		}
		ScopesStartScopesVector(builder, scopesLength)
		for j := scopesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(scopesOffsets[j])
		}
		scopesOffset = builder.EndVector(scopesLength)
	}
	ScopesStart(builder)
	ScopesAddScopes(builder, scopesOffset)
	return ScopesEnd(builder)
}

func (rcv *Scopes) UnPackTo(t *ScopesT) {
	scopesLength := rcv.ScopesLength()
	t.Scopes = make([]*ScopeT, scopesLength)
	for j := 0; j < scopesLength; j++ {
		x := Scope{}
		rcv.Scopes(&x, j)
		t.Scopes[j] = x.UnPack()
	}
}

func (rcv *Scopes) UnPack() *ScopesT {
	if rcv == nil { return nil }
	t := &ScopesT{}
	rcv.UnPackTo(t)
	return t
}

type Scopes struct {
	_tab flatbuffers.Table
}

func GetRootAsScopes(buf []byte, offset flatbuffers.UOffsetT) *Scopes {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Scopes{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsScopes(buf []byte, offset flatbuffers.UOffsetT) *Scopes {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Scopes{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Scopes) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Scopes) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Scopes) Scopes(obj *Scope, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Scopes) ScopesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ScopesStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ScopesAddScopes(builder *flatbuffers.Builder, scopes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(scopes), 0)
}
func ScopesStartScopesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ScopesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
