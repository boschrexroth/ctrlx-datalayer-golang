// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FooT struct {
	A float32 `json:"a"`
	B float32 `json:"b"`
	C float32 `json:"c"`
}

func (t *FooT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	return CreateFoo(builder, t.A, t.B, t.C)
}
func (rcv *Foo) UnPackTo(t *FooT) {
	t.A = rcv.A()
	t.B = rcv.B()
	t.C = rcv.C()
}

func (rcv *Foo) UnPack() *FooT {
	if rcv == nil { return nil }
	t := &FooT{}
	rcv.UnPackTo(t)
	return t
}

type Foo struct {
	_tab flatbuffers.Struct
}

func (rcv *Foo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Foo) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Foo) A() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Foo) MutateA(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Foo) B() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *Foo) MutateB(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *Foo) C() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *Foo) MutateC(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func CreateFoo(builder *flatbuffers.Builder, a float32, b float32, c float32) flatbuffers.UOffsetT {
	builder.Prep(4, 12)
	builder.PrependFloat32(c)
	builder.PrependFloat32(b)
	builder.PrependFloat32(a)
	return builder.Offset()
}
