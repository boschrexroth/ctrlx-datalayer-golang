// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MemoryMapsCustomT struct {
	CustomMaps []*MemoryMapCustomT `json:"customMaps"`
}

func (t *MemoryMapsCustomT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	customMapsOffset := flatbuffers.UOffsetT(0)
	if t.CustomMaps != nil {
		customMapsLength := len(t.CustomMaps)
		customMapsOffsets := make([]flatbuffers.UOffsetT, customMapsLength)
		for j := 0; j < customMapsLength; j++ {
			customMapsOffsets[j] = t.CustomMaps[j].Pack(builder)
		}
		MemoryMapsCustomStartCustomMapsVector(builder, customMapsLength)
		for j := customMapsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(customMapsOffsets[j])
		}
		customMapsOffset = builder.EndVector(customMapsLength)
	}
	MemoryMapsCustomStart(builder)
	MemoryMapsCustomAddCustomMaps(builder, customMapsOffset)
	return MemoryMapsCustomEnd(builder)
}

func (rcv *MemoryMapsCustom) UnPackTo(t *MemoryMapsCustomT) {
	customMapsLength := rcv.CustomMapsLength()
	t.CustomMaps = make([]*MemoryMapCustomT, customMapsLength)
	for j := 0; j < customMapsLength; j++ {
		x := MemoryMapCustom{}
		rcv.CustomMaps(&x, j)
		t.CustomMaps[j] = x.UnPack()
	}
}

func (rcv *MemoryMapsCustom) UnPack() *MemoryMapsCustomT {
	if rcv == nil { return nil }
	t := &MemoryMapsCustomT{}
	rcv.UnPackTo(t)
	return t
}

type MemoryMapsCustom struct {
	_tab flatbuffers.Table
}

func GetRootAsMemoryMapsCustom(buf []byte, offset flatbuffers.UOffsetT) *MemoryMapsCustom {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MemoryMapsCustom{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMemoryMapsCustom(buf []byte, offset flatbuffers.UOffsetT) *MemoryMapsCustom {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MemoryMapsCustom{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MemoryMapsCustom) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MemoryMapsCustom) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MemoryMapsCustom) CustomMaps(obj *MemoryMapCustom, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MemoryMapsCustom) CustomMapsByKey(obj *MemoryMapCustom, key string) bool{
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *MemoryMapsCustom) CustomMapsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func MemoryMapsCustomStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func MemoryMapsCustomAddCustomMaps(builder *flatbuffers.Builder, customMaps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(customMaps), 0)
}
func MemoryMapsCustomStartCustomMapsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MemoryMapsCustomEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
