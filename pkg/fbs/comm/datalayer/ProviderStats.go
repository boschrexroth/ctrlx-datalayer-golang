// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// statistics of all providers
type ProviderStatsT struct {
	Providers []*ProviderStatT `json:"providers"`
}

func (t *ProviderStatsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	providersOffset := flatbuffers.UOffsetT(0)
	if t.Providers != nil {
		providersLength := len(t.Providers)
		providersOffsets := make([]flatbuffers.UOffsetT, providersLength)
		for j := 0; j < providersLength; j++ {
			providersOffsets[j] = t.Providers[j].Pack(builder)
		}
		ProviderStatsStartProvidersVector(builder, providersLength)
		for j := providersLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(providersOffsets[j])
		}
		providersOffset = builder.EndVector(providersLength)
	}
	ProviderStatsStart(builder)
	ProviderStatsAddProviders(builder, providersOffset)
	return ProviderStatsEnd(builder)
}

func (rcv *ProviderStats) UnPackTo(t *ProviderStatsT) {
	providersLength := rcv.ProvidersLength()
	t.Providers = make([]*ProviderStatT, providersLength)
	for j := 0; j < providersLength; j++ {
		x := ProviderStat{}
		rcv.Providers(&x, j)
		t.Providers[j] = x.UnPack()
	}
}

func (rcv *ProviderStats) UnPack() *ProviderStatsT {
	if rcv == nil { return nil }
	t := &ProviderStatsT{}
	rcv.UnPackTo(t)
	return t
}

type ProviderStats struct {
	_tab flatbuffers.Table
}

func GetRootAsProviderStats(buf []byte, offset flatbuffers.UOffsetT) *ProviderStats {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ProviderStats{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsProviderStats(buf []byte, offset flatbuffers.UOffsetT) *ProviderStats {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ProviderStats{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ProviderStats) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProviderStats) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ProviderStats) Providers(obj *ProviderStat, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ProviderStats) ProvidersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ProviderStatsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ProviderStatsAddProviders(builder *flatbuffers.Builder, providers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(providers), 0)
}
func ProviderStatsStartProvidersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ProviderStatsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
