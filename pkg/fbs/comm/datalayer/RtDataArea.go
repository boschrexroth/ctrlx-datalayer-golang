// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RtDataAreaT struct {
	Bitoffset uint32 `json:"bitoffset"`
	Bitsize uint32 `json:"bitsize"`
	Data []byte `json:"data"`
}

func (t *RtDataAreaT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	dataOffset := flatbuffers.UOffsetT(0)
	if t.Data != nil {
		dataOffset = builder.CreateByteString(t.Data)
	}
	RtDataAreaStart(builder)
	RtDataAreaAddBitoffset(builder, t.Bitoffset)
	RtDataAreaAddBitsize(builder, t.Bitsize)
	RtDataAreaAddData(builder, dataOffset)
	return RtDataAreaEnd(builder)
}

func (rcv *RtDataArea) UnPackTo(t *RtDataAreaT) {
	t.Bitoffset = rcv.Bitoffset()
	t.Bitsize = rcv.Bitsize()
	t.Data = rcv.DataBytes()
}

func (rcv *RtDataArea) UnPack() *RtDataAreaT {
	if rcv == nil { return nil }
	t := &RtDataAreaT{}
	rcv.UnPackTo(t)
	return t
}

type RtDataArea struct {
	_tab flatbuffers.Table
}

func GetRootAsRtDataArea(buf []byte, offset flatbuffers.UOffsetT) *RtDataArea {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RtDataArea{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRtDataArea(buf []byte, offset flatbuffers.UOffsetT) *RtDataArea {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RtDataArea{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RtDataArea) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RtDataArea) Table() flatbuffers.Table {
	return rcv._tab
}

/// Offset (in bits) of variable in memory
func (rcv *RtDataArea) Bitoffset() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Offset (in bits) of variable in memory
func (rcv *RtDataArea) MutateBitoffset(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// Size (in bits) of variable in memory
func (rcv *RtDataArea) Bitsize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Size (in bits) of variable in memory
func (rcv *RtDataArea) MutateBitsize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

/// Data of the area
func (rcv *RtDataArea) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *RtDataArea) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RtDataArea) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Data of the area
func (rcv *RtDataArea) MutateData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func RtDataAreaStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RtDataAreaAddBitoffset(builder *flatbuffers.Builder, bitoffset uint32) {
	builder.PrependUint32Slot(0, bitoffset, 0)
}
func RtDataAreaAddBitsize(builder *flatbuffers.Builder, bitsize uint32) {
	builder.PrependUint32Slot(1, bitsize, 0)
}
func RtDataAreaAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(data), 0)
}
func RtDataAreaStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func RtDataAreaEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
