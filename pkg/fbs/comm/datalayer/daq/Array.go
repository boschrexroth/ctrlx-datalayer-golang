// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package daq

import (
	"strconv"
	flatbuffers "github.com/google/flatbuffers/go"

	comm__datalayer "github.com/boschrexroth/ctrlx-datalayer-golang/v2/pkg/fbs/comm/datalayer"
)

/// union of all array types
type Array byte

const (
	ArrayNONE             Array = 0
	ArrayArrayOfBool8     Array = 1
	ArrayArrayOfFloat32   Array = 2
	ArrayArrayOfFloat64   Array = 3
	ArrayArrayOfDouble    Array = 4
	ArrayArrayOfInt8      Array = 5
	ArrayArrayOfInt16     Array = 6
	ArrayArrayOfInt32     Array = 7
	ArrayArrayOfInt64     Array = 8
	ArrayArrayOfUInt8     Array = 9
	ArrayArrayOfUInt16    Array = 10
	ArrayArrayOfUInt32    Array = 11
	ArrayArrayOfUInt64    Array = 12
	ArrayArrayOfTimestamp Array = 13
	ArrayArrayOfString    Array = 14
)

var EnumNamesArray = map[Array]string{
	ArrayNONE:             "NONE",
	ArrayArrayOfBool8:     "ArrayOfBool8",
	ArrayArrayOfFloat32:   "ArrayOfFloat32",
	ArrayArrayOfFloat64:   "ArrayOfFloat64",
	ArrayArrayOfDouble:    "ArrayOfDouble",
	ArrayArrayOfInt8:      "ArrayOfInt8",
	ArrayArrayOfInt16:     "ArrayOfInt16",
	ArrayArrayOfInt32:     "ArrayOfInt32",
	ArrayArrayOfInt64:     "ArrayOfInt64",
	ArrayArrayOfUInt8:     "ArrayOfUInt8",
	ArrayArrayOfUInt16:    "ArrayOfUInt16",
	ArrayArrayOfUInt32:    "ArrayOfUInt32",
	ArrayArrayOfUInt64:    "ArrayOfUInt64",
	ArrayArrayOfTimestamp: "ArrayOfTimestamp",
	ArrayArrayOfString:    "ArrayOfString",
}

var EnumValuesArray = map[string]Array{
	"NONE":             ArrayNONE,
	"ArrayOfBool8":     ArrayArrayOfBool8,
	"ArrayOfFloat32":   ArrayArrayOfFloat32,
	"ArrayOfFloat64":   ArrayArrayOfFloat64,
	"ArrayOfDouble":    ArrayArrayOfDouble,
	"ArrayOfInt8":      ArrayArrayOfInt8,
	"ArrayOfInt16":     ArrayArrayOfInt16,
	"ArrayOfInt32":     ArrayArrayOfInt32,
	"ArrayOfInt64":     ArrayArrayOfInt64,
	"ArrayOfUInt8":     ArrayArrayOfUInt8,
	"ArrayOfUInt16":    ArrayArrayOfUInt16,
	"ArrayOfUInt32":    ArrayArrayOfUInt32,
	"ArrayOfUInt64":    ArrayArrayOfUInt64,
	"ArrayOfTimestamp": ArrayArrayOfTimestamp,
	"ArrayOfString":    ArrayArrayOfString,
}

func (v Array) String() string {
	if s, ok := EnumNamesArray[v]; ok {
		return s
	}
	return "Array(" + strconv.FormatInt(int64(v), 10) + ")"
}

type ArrayT struct {
	Type Array
	Value interface{}
}

func (t *ArrayT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case ArrayArrayOfBool8:
		return t.Value.(*comm__datalayer.ArrayOfBool8T).Pack(builder)
	case ArrayArrayOfFloat32:
		return t.Value.(*comm__datalayer.ArrayOfFloat32T).Pack(builder)
	case ArrayArrayOfFloat64:
		return t.Value.(*comm__datalayer.ArrayOfFloat64T).Pack(builder)
	case ArrayArrayOfDouble:
		return t.Value.(*comm__datalayer.ArrayOfDoubleT).Pack(builder)
	case ArrayArrayOfInt8:
		return t.Value.(*comm__datalayer.ArrayOfInt8T).Pack(builder)
	case ArrayArrayOfInt16:
		return t.Value.(*comm__datalayer.ArrayOfInt16T).Pack(builder)
	case ArrayArrayOfInt32:
		return t.Value.(*comm__datalayer.ArrayOfInt32T).Pack(builder)
	case ArrayArrayOfInt64:
		return t.Value.(*comm__datalayer.ArrayOfInt64T).Pack(builder)
	case ArrayArrayOfUInt8:
		return t.Value.(*comm__datalayer.ArrayOfUInt8T).Pack(builder)
	case ArrayArrayOfUInt16:
		return t.Value.(*comm__datalayer.ArrayOfUInt16T).Pack(builder)
	case ArrayArrayOfUInt32:
		return t.Value.(*comm__datalayer.ArrayOfUInt32T).Pack(builder)
	case ArrayArrayOfUInt64:
		return t.Value.(*comm__datalayer.ArrayOfUInt64T).Pack(builder)
	case ArrayArrayOfTimestamp:
		return t.Value.(*comm__datalayer.ArrayOfTimestampT).Pack(builder)
	case ArrayArrayOfString:
		return t.Value.(*comm__datalayer.ArrayOfStringT).Pack(builder)
	}
	return 0
}

func (rcv Array) UnPack(table flatbuffers.Table) *ArrayT {
	switch rcv {
	case ArrayArrayOfBool8:
		var x comm__datalayer.ArrayOfBool8
		x.Init(table.Bytes, table.Pos)
		return &ArrayT{ Type: ArrayArrayOfBool8, Value: x.UnPack() }
	case ArrayArrayOfFloat32:
		var x comm__datalayer.ArrayOfFloat32
		x.Init(table.Bytes, table.Pos)
		return &ArrayT{ Type: ArrayArrayOfFloat32, Value: x.UnPack() }
	case ArrayArrayOfFloat64:
		var x comm__datalayer.ArrayOfFloat64
		x.Init(table.Bytes, table.Pos)
		return &ArrayT{ Type: ArrayArrayOfFloat64, Value: x.UnPack() }
	case ArrayArrayOfDouble:
		var x comm__datalayer.ArrayOfDouble
		x.Init(table.Bytes, table.Pos)
		return &ArrayT{ Type: ArrayArrayOfDouble, Value: x.UnPack() }
	case ArrayArrayOfInt8:
		var x comm__datalayer.ArrayOfInt8
		x.Init(table.Bytes, table.Pos)
		return &ArrayT{ Type: ArrayArrayOfInt8, Value: x.UnPack() }
	case ArrayArrayOfInt16:
		var x comm__datalayer.ArrayOfInt16
		x.Init(table.Bytes, table.Pos)
		return &ArrayT{ Type: ArrayArrayOfInt16, Value: x.UnPack() }
	case ArrayArrayOfInt32:
		var x comm__datalayer.ArrayOfInt32
		x.Init(table.Bytes, table.Pos)
		return &ArrayT{ Type: ArrayArrayOfInt32, Value: x.UnPack() }
	case ArrayArrayOfInt64:
		var x comm__datalayer.ArrayOfInt64
		x.Init(table.Bytes, table.Pos)
		return &ArrayT{ Type: ArrayArrayOfInt64, Value: x.UnPack() }
	case ArrayArrayOfUInt8:
		var x comm__datalayer.ArrayOfUInt8
		x.Init(table.Bytes, table.Pos)
		return &ArrayT{ Type: ArrayArrayOfUInt8, Value: x.UnPack() }
	case ArrayArrayOfUInt16:
		var x comm__datalayer.ArrayOfUInt16
		x.Init(table.Bytes, table.Pos)
		return &ArrayT{ Type: ArrayArrayOfUInt16, Value: x.UnPack() }
	case ArrayArrayOfUInt32:
		var x comm__datalayer.ArrayOfUInt32
		x.Init(table.Bytes, table.Pos)
		return &ArrayT{ Type: ArrayArrayOfUInt32, Value: x.UnPack() }
	case ArrayArrayOfUInt64:
		var x comm__datalayer.ArrayOfUInt64
		x.Init(table.Bytes, table.Pos)
		return &ArrayT{ Type: ArrayArrayOfUInt64, Value: x.UnPack() }
	case ArrayArrayOfTimestamp:
		var x comm__datalayer.ArrayOfTimestamp
		x.Init(table.Bytes, table.Pos)
		return &ArrayT{ Type: ArrayArrayOfTimestamp, Value: x.UnPack() }
	case ArrayArrayOfString:
		var x comm__datalayer.ArrayOfString
		x.Init(table.Bytes, table.Pos)
		return &ArrayT{ Type: ArrayArrayOfString, Value: x.UnPack() }
	}
	return nil
}
