// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package daq

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// DAQ container containing equidistant and non-equidistant daq data
type DaqContainerT struct {
	Name string `json:"name"`
	Tags []*TagT `json:"tags"`
	Equidistant []*EquidistantT `json:"equidistant"`
	NonEquidistant []*NonEquidistantT `json:"nonEquidistant"`
}

func (t *DaqContainerT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	tagsOffset := flatbuffers.UOffsetT(0)
	if t.Tags != nil {
		tagsLength := len(t.Tags)
		tagsOffsets := make([]flatbuffers.UOffsetT, tagsLength)
		for j := 0; j < tagsLength; j++ {
			tagsOffsets[j] = t.Tags[j].Pack(builder)
		}
		DaqContainerStartTagsVector(builder, tagsLength)
		for j := tagsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(tagsOffsets[j])
		}
		tagsOffset = builder.EndVector(tagsLength)
	}
	equidistantOffset := flatbuffers.UOffsetT(0)
	if t.Equidistant != nil {
		equidistantLength := len(t.Equidistant)
		equidistantOffsets := make([]flatbuffers.UOffsetT, equidistantLength)
		for j := 0; j < equidistantLength; j++ {
			equidistantOffsets[j] = t.Equidistant[j].Pack(builder)
		}
		DaqContainerStartEquidistantVector(builder, equidistantLength)
		for j := equidistantLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(equidistantOffsets[j])
		}
		equidistantOffset = builder.EndVector(equidistantLength)
	}
	nonEquidistantOffset := flatbuffers.UOffsetT(0)
	if t.NonEquidistant != nil {
		nonEquidistantLength := len(t.NonEquidistant)
		nonEquidistantOffsets := make([]flatbuffers.UOffsetT, nonEquidistantLength)
		for j := 0; j < nonEquidistantLength; j++ {
			nonEquidistantOffsets[j] = t.NonEquidistant[j].Pack(builder)
		}
		DaqContainerStartNonEquidistantVector(builder, nonEquidistantLength)
		for j := nonEquidistantLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(nonEquidistantOffsets[j])
		}
		nonEquidistantOffset = builder.EndVector(nonEquidistantLength)
	}
	DaqContainerStart(builder)
	DaqContainerAddName(builder, nameOffset)
	DaqContainerAddTags(builder, tagsOffset)
	DaqContainerAddEquidistant(builder, equidistantOffset)
	DaqContainerAddNonEquidistant(builder, nonEquidistantOffset)
	return DaqContainerEnd(builder)
}

func (rcv *DaqContainer) UnPackTo(t *DaqContainerT) {
	t.Name = string(rcv.Name())
	tagsLength := rcv.TagsLength()
	t.Tags = make([]*TagT, tagsLength)
	for j := 0; j < tagsLength; j++ {
		x := Tag{}
		rcv.Tags(&x, j)
		t.Tags[j] = x.UnPack()
	}
	equidistantLength := rcv.EquidistantLength()
	t.Equidistant = make([]*EquidistantT, equidistantLength)
	for j := 0; j < equidistantLength; j++ {
		x := Equidistant{}
		rcv.Equidistant(&x, j)
		t.Equidistant[j] = x.UnPack()
	}
	nonEquidistantLength := rcv.NonEquidistantLength()
	t.NonEquidistant = make([]*NonEquidistantT, nonEquidistantLength)
	for j := 0; j < nonEquidistantLength; j++ {
		x := NonEquidistant{}
		rcv.NonEquidistant(&x, j)
		t.NonEquidistant[j] = x.UnPack()
	}
}

func (rcv *DaqContainer) UnPack() *DaqContainerT {
	if rcv == nil { return nil }
	t := &DaqContainerT{}
	rcv.UnPackTo(t)
	return t
}

type DaqContainer struct {
	_tab flatbuffers.Table
}

func GetRootAsDaqContainer(buf []byte, offset flatbuffers.UOffsetT) *DaqContainer {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DaqContainer{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDaqContainer(buf []byte, offset flatbuffers.UOffsetT) *DaqContainer {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DaqContainer{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DaqContainer) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DaqContainer) Table() flatbuffers.Table {
	return rcv._tab
}

/// name of the DAQ container
func (rcv *DaqContainer) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// name of the DAQ container
/// array of tags for meta data
func (rcv *DaqContainer) Tags(obj *Tag, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DaqContainer) TagsByKey(obj *Tag, key string) bool{
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *DaqContainer) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// array of tags for meta data
/// array of equidistant data
func (rcv *DaqContainer) Equidistant(obj *Equidistant, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DaqContainer) EquidistantByKey(obj *Equidistant, key string) bool{
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *DaqContainer) EquidistantLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// array of equidistant data
/// array of non-equidistant data
func (rcv *DaqContainer) NonEquidistant(obj *NonEquidistant, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DaqContainer) NonEquidistantByKey(obj *NonEquidistant, key string) bool{
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *DaqContainer) NonEquidistantLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// array of non-equidistant data
func DaqContainerStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DaqContainerAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func DaqContainerAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(tags), 0)
}
func DaqContainerStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DaqContainerAddEquidistant(builder *flatbuffers.Builder, equidistant flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(equidistant), 0)
}
func DaqContainerStartEquidistantVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DaqContainerAddNonEquidistant(builder *flatbuffers.Builder, nonEquidistant flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(nonEquidistant), 0)
}
func DaqContainerStartNonEquidistantVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DaqContainerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
