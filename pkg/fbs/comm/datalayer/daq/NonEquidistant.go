// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package daq

import (
	"bytes"
	flatbuffers "github.com/google/flatbuffers/go"
)

///  non-equidistant DAQ data
type NonEquidistantT struct {
	Name string `json:"name"`
	Tags []*TagT `json:"tags"`
	TimestampsNs []uint64 `json:"timestampsNs"`
	Array *ArrayT `json:"array"`
}

func (t *NonEquidistantT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	tagsOffset := flatbuffers.UOffsetT(0)
	if t.Tags != nil {
		tagsLength := len(t.Tags)
		tagsOffsets := make([]flatbuffers.UOffsetT, tagsLength)
		for j := 0; j < tagsLength; j++ {
			tagsOffsets[j] = t.Tags[j].Pack(builder)
		}
		NonEquidistantStartTagsVector(builder, tagsLength)
		for j := tagsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(tagsOffsets[j])
		}
		tagsOffset = builder.EndVector(tagsLength)
	}
	timestampsNsOffset := flatbuffers.UOffsetT(0)
	if t.TimestampsNs != nil {
		timestampsNsLength := len(t.TimestampsNs)
		NonEquidistantStartTimestampsNsVector(builder, timestampsNsLength)
		for j := timestampsNsLength - 1; j >= 0; j-- {
			builder.PrependUint64(t.TimestampsNs[j])
		}
		timestampsNsOffset = builder.EndVector(timestampsNsLength)
	}
	arrayOffset := t.Array.Pack(builder)
	
	NonEquidistantStart(builder)
	NonEquidistantAddName(builder, nameOffset)
	NonEquidistantAddTags(builder, tagsOffset)
	NonEquidistantAddTimestampsNs(builder, timestampsNsOffset)
	if t.Array != nil {
		NonEquidistantAddArrayType(builder, t.Array.Type)
	}
	NonEquidistantAddArray(builder, arrayOffset)
	return NonEquidistantEnd(builder)
}

func (rcv *NonEquidistant) UnPackTo(t *NonEquidistantT) {
	t.Name = string(rcv.Name())
	tagsLength := rcv.TagsLength()
	t.Tags = make([]*TagT, tagsLength)
	for j := 0; j < tagsLength; j++ {
		x := Tag{}
		rcv.Tags(&x, j)
		t.Tags[j] = x.UnPack()
	}
	timestampsNsLength := rcv.TimestampsNsLength()
	t.TimestampsNs = make([]uint64, timestampsNsLength)
	for j := 0; j < timestampsNsLength; j++ {
		t.TimestampsNs[j] = rcv.TimestampsNs(j)
	}
	arrayTable := flatbuffers.Table{}
	if rcv.Array(&arrayTable) {
		t.Array = rcv.ArrayType().UnPack(arrayTable)
	}
}

func (rcv *NonEquidistant) UnPack() *NonEquidistantT {
	if rcv == nil { return nil }
	t := &NonEquidistantT{}
	rcv.UnPackTo(t)
	return t
}

type NonEquidistant struct {
	_tab flatbuffers.Table
}

func GetRootAsNonEquidistant(buf []byte, offset flatbuffers.UOffsetT) *NonEquidistant {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NonEquidistant{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsNonEquidistant(buf []byte, offset flatbuffers.UOffsetT) *NonEquidistant {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NonEquidistant{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *NonEquidistant) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NonEquidistant) Table() flatbuffers.Table {
	return rcv._tab
}

/// unique name of the non-equidistant data
func (rcv *NonEquidistant) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// unique name of the non-equidistant data
func NonEquidistantKeyCompare(o1, o2 flatbuffers.UOffsetT, buf []byte) bool {
	obj1 := &NonEquidistant{}
	obj2 := &NonEquidistant{}
	obj1.Init(buf, flatbuffers.UOffsetT(len(buf)) - o1)
	obj2.Init(buf, flatbuffers.UOffsetT(len(buf)) - o2)
	return string(obj1.Name()) < string(obj2.Name())
}

func (rcv *NonEquidistant) LookupByKey(key string, vectorLocation flatbuffers.UOffsetT, buf []byte) bool {
	span := flatbuffers.GetUOffsetT(buf[vectorLocation - 4:])
	start := flatbuffers.UOffsetT(0)
	bKey := []byte(key)
	for span != 0 {
		middle := span / 2
		tableOffset := flatbuffers.GetIndirectOffset(buf, vectorLocation+ 4 * (start + middle))
		obj := &NonEquidistant{}
		obj.Init(buf, tableOffset)
		comp := bytes.Compare(obj.Name(), bKey)
		if comp > 0 {
			span = middle
		} else if comp < 0 {
			middle += 1
			start += middle
			span -= middle
		} else {
			rcv.Init(buf, tableOffset)
			return true
		}
	}
	return false
}

/// array of tags for meta data
func (rcv *NonEquidistant) Tags(obj *Tag, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *NonEquidistant) TagsByKey(obj *Tag, key string) bool{
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *NonEquidistant) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// array of tags for meta data
/// array of unix epoch time (since 1.1.1970) in [ns]
func (rcv *NonEquidistant) TimestampsNs(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *NonEquidistant) TimestampsNsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// array of unix epoch time (since 1.1.1970) in [ns]
func (rcv *NonEquidistant) MutateTimestampsNs(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *NonEquidistant) ArrayType() Array {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return Array(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *NonEquidistant) MutateArrayType(n Array) bool {
	return rcv._tab.MutateByteSlot(10, byte(n))
}

/// array of sampled values at the corresponding timestamps
func (rcv *NonEquidistant) Array(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

/// array of sampled values at the corresponding timestamps
func NonEquidistantStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func NonEquidistantAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func NonEquidistantAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(tags), 0)
}
func NonEquidistantStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NonEquidistantAddTimestampsNs(builder *flatbuffers.Builder, timestampsNs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(timestampsNs), 0)
}
func NonEquidistantStartTimestampsNsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func NonEquidistantAddArrayType(builder *flatbuffers.Builder, arrayType Array) {
	builder.PrependByteSlot(3, byte(arrayType), 0)
}
func NonEquidistantAddArray(builder *flatbuffers.Builder, array flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(array), 0)
}
func NonEquidistantEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
