// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MemoryT struct {
	Type MemoryType
	Id string
	SizeBytes uint32
	AccessType AccessType
}

func (t *MemoryT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	idOffset := builder.CreateString(t.Id)
	MemoryStart(builder)
	MemoryAddType(builder, t.Type)
	MemoryAddId(builder, idOffset)
	MemoryAddSizeBytes(builder, t.SizeBytes)
	MemoryAddAccessType(builder, t.AccessType)
	return MemoryEnd(builder)
}

func (rcv *Memory) UnPackTo(t *MemoryT) {
	t.Type = rcv.Type()
	t.Id = string(rcv.Id())
	t.SizeBytes = rcv.SizeBytes()
	t.AccessType = rcv.AccessType()
}

func (rcv *Memory) UnPack() *MemoryT {
	if rcv == nil { return nil }
	t := &MemoryT{}
	rcv.UnPackTo(t)
	return t
}

type Memory struct {
	_tab flatbuffers.Table
}

func GetRootAsMemory(buf []byte, offset flatbuffers.UOffsetT) *Memory {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Memory{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMemory(buf []byte, offset flatbuffers.UOffsetT) *Memory {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Memory{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Memory) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Memory) Table() flatbuffers.Table {
	return rcv._tab
}

/// memory type
func (rcv *Memory) Type() MemoryType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return MemoryType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// memory type
func (rcv *Memory) MutateType(n MemoryType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

/// identification of the memory - contains how to access memory
func (rcv *Memory) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// identification of the memory - contains how to access memory
/// size of usable bytes of memory
func (rcv *Memory) SizeBytes() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// size of usable bytes of memory
func (rcv *Memory) MutateSizeBytes(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

/// how to access memory
func (rcv *Memory) AccessType() AccessType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return AccessType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// how to access memory
func (rcv *Memory) MutateAccessType(n AccessType) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func MemoryStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func MemoryAddType(builder *flatbuffers.Builder, type_ MemoryType) {
	builder.PrependInt8Slot(0, int8(type_), 0)
}
func MemoryAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(id), 0)
}
func MemoryAddSizeBytes(builder *flatbuffers.Builder, sizeBytes uint32) {
	builder.PrependUint32Slot(2, sizeBytes, 0)
}
func MemoryAddAccessType(builder *flatbuffers.Builder, accessType AccessType) {
	builder.PrependInt8Slot(3, int8(accessType), 0)
}
func MemoryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
