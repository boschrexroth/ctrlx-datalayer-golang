// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RealtimeConfigT struct {
	DefaultInputAcessType AccessType
	NTelBufConfig *NTelBufferConfigT
}

func (t *RealtimeConfigT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nTelBufConfigOffset := t.NTelBufConfig.Pack(builder)
	RealtimeConfigStart(builder)
	RealtimeConfigAddDefaultInputAcessType(builder, t.DefaultInputAcessType)
	RealtimeConfigAddNTelBufConfig(builder, nTelBufConfigOffset)
	return RealtimeConfigEnd(builder)
}

func (rcv *RealtimeConfig) UnPackTo(t *RealtimeConfigT) {
	t.DefaultInputAcessType = rcv.DefaultInputAcessType()
	t.NTelBufConfig = rcv.NTelBufConfig(nil).UnPack()
}

func (rcv *RealtimeConfig) UnPack() *RealtimeConfigT {
	if rcv == nil { return nil }
	t := &RealtimeConfigT{}
	rcv.UnPackTo(t)
	return t
}

type RealtimeConfig struct {
	_tab flatbuffers.Table
}

func GetRootAsRealtimeConfig(buf []byte, offset flatbuffers.UOffsetT) *RealtimeConfig {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RealtimeConfig{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRealtimeConfig(buf []byte, offset flatbuffers.UOffsetT) *RealtimeConfig {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RealtimeConfig{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RealtimeConfig) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RealtimeConfig) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RealtimeConfig) DefaultInputAcessType() AccessType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return AccessType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 2
}

func (rcv *RealtimeConfig) MutateDefaultInputAcessType(n AccessType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *RealtimeConfig) NTelBufConfig(obj *NTelBufferConfig) *NTelBufferConfig {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(NTelBufferConfig)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func RealtimeConfigStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RealtimeConfigAddDefaultInputAcessType(builder *flatbuffers.Builder, defaultInputAcessType AccessType) {
	builder.PrependInt8Slot(0, int8(defaultInputAcessType), 2)
}
func RealtimeConfigAddNTelBufConfig(builder *flatbuffers.Builder, nTelBufConfig flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(nTelBufConfig), 0)
}
func RealtimeConfigEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
