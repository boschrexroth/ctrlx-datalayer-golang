// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// statistics of a provider
type ProviderStatT struct {
	Identity string `json:"identity"`
	Nodes []string `json:"nodes"`
	RejectedNodes []string `json:"rejectedNodes"`
	Scopes []*ScopeT `json:"scopes"`
	Capabilities *CapabilitiesT `json:"capabilities"`
	RejectedScopes []*ScopeT `json:"rejectedScopes"`
}

func (t *ProviderStatT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	identityOffset := flatbuffers.UOffsetT(0)
	if t.Identity != "" {
		identityOffset = builder.CreateString(t.Identity)
	}
	nodesOffset := flatbuffers.UOffsetT(0)
	if t.Nodes != nil {
		nodesLength := len(t.Nodes)
		nodesOffsets := make([]flatbuffers.UOffsetT, nodesLength)
		for j := 0; j < nodesLength; j++ {
			nodesOffsets[j] = builder.CreateString(t.Nodes[j])
		}
		ProviderStatStartNodesVector(builder, nodesLength)
		for j := nodesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(nodesOffsets[j])
		}
		nodesOffset = builder.EndVector(nodesLength)
	}
	rejectedNodesOffset := flatbuffers.UOffsetT(0)
	if t.RejectedNodes != nil {
		rejectedNodesLength := len(t.RejectedNodes)
		rejectedNodesOffsets := make([]flatbuffers.UOffsetT, rejectedNodesLength)
		for j := 0; j < rejectedNodesLength; j++ {
			rejectedNodesOffsets[j] = builder.CreateString(t.RejectedNodes[j])
		}
		ProviderStatStartRejectedNodesVector(builder, rejectedNodesLength)
		for j := rejectedNodesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(rejectedNodesOffsets[j])
		}
		rejectedNodesOffset = builder.EndVector(rejectedNodesLength)
	}
	scopesOffset := flatbuffers.UOffsetT(0)
	if t.Scopes != nil {
		scopesLength := len(t.Scopes)
		scopesOffsets := make([]flatbuffers.UOffsetT, scopesLength)
		for j := 0; j < scopesLength; j++ {
			scopesOffsets[j] = t.Scopes[j].Pack(builder)
		}
		ProviderStatStartScopesVector(builder, scopesLength)
		for j := scopesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(scopesOffsets[j])
		}
		scopesOffset = builder.EndVector(scopesLength)
	}
	capabilitiesOffset := t.Capabilities.Pack(builder)
	rejectedScopesOffset := flatbuffers.UOffsetT(0)
	if t.RejectedScopes != nil {
		rejectedScopesLength := len(t.RejectedScopes)
		rejectedScopesOffsets := make([]flatbuffers.UOffsetT, rejectedScopesLength)
		for j := 0; j < rejectedScopesLength; j++ {
			rejectedScopesOffsets[j] = t.RejectedScopes[j].Pack(builder)
		}
		ProviderStatStartRejectedScopesVector(builder, rejectedScopesLength)
		for j := rejectedScopesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(rejectedScopesOffsets[j])
		}
		rejectedScopesOffset = builder.EndVector(rejectedScopesLength)
	}
	ProviderStatStart(builder)
	ProviderStatAddIdentity(builder, identityOffset)
	ProviderStatAddNodes(builder, nodesOffset)
	ProviderStatAddRejectedNodes(builder, rejectedNodesOffset)
	ProviderStatAddScopes(builder, scopesOffset)
	ProviderStatAddCapabilities(builder, capabilitiesOffset)
	ProviderStatAddRejectedScopes(builder, rejectedScopesOffset)
	return ProviderStatEnd(builder)
}

func (rcv *ProviderStat) UnPackTo(t *ProviderStatT) {
	t.Identity = string(rcv.Identity())
	nodesLength := rcv.NodesLength()
	t.Nodes = make([]string, nodesLength)
	for j := 0; j < nodesLength; j++ {
		t.Nodes[j] = string(rcv.Nodes(j))
	}
	rejectedNodesLength := rcv.RejectedNodesLength()
	t.RejectedNodes = make([]string, rejectedNodesLength)
	for j := 0; j < rejectedNodesLength; j++ {
		t.RejectedNodes[j] = string(rcv.RejectedNodes(j))
	}
	scopesLength := rcv.ScopesLength()
	t.Scopes = make([]*ScopeT, scopesLength)
	for j := 0; j < scopesLength; j++ {
		x := Scope{}
		rcv.Scopes(&x, j)
		t.Scopes[j] = x.UnPack()
	}
	t.Capabilities = rcv.Capabilities(nil).UnPack()
	rejectedScopesLength := rcv.RejectedScopesLength()
	t.RejectedScopes = make([]*ScopeT, rejectedScopesLength)
	for j := 0; j < rejectedScopesLength; j++ {
		x := Scope{}
		rcv.RejectedScopes(&x, j)
		t.RejectedScopes[j] = x.UnPack()
	}
}

func (rcv *ProviderStat) UnPack() *ProviderStatT {
	if rcv == nil { return nil }
	t := &ProviderStatT{}
	rcv.UnPackTo(t)
	return t
}

type ProviderStat struct {
	_tab flatbuffers.Table
}

func GetRootAsProviderStat(buf []byte, offset flatbuffers.UOffsetT) *ProviderStat {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ProviderStat{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsProviderStat(buf []byte, offset flatbuffers.UOffsetT) *ProviderStat {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ProviderStat{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ProviderStat) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProviderStat) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ProviderStat) Identity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ProviderStat) Nodes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ProviderStat) NodesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ProviderStat) RejectedNodes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ProviderStat) RejectedNodesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ProviderStat) Scopes(obj *Scope, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ProviderStat) ScopesByKey(obj *Scope, key string) bool{
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *ProviderStat) ScopesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ProviderStat) Capabilities(obj *Capabilities) *Capabilities {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Capabilities)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ProviderStat) RejectedScopes(obj *Scope, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ProviderStat) RejectedScopesByKey(obj *Scope, key string) bool{
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *ProviderStat) RejectedScopesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ProviderStatStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ProviderStatAddIdentity(builder *flatbuffers.Builder, identity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(identity), 0)
}
func ProviderStatAddNodes(builder *flatbuffers.Builder, nodes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(nodes), 0)
}
func ProviderStatStartNodesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ProviderStatAddRejectedNodes(builder *flatbuffers.Builder, rejectedNodes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rejectedNodes), 0)
}
func ProviderStatStartRejectedNodesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ProviderStatAddScopes(builder *flatbuffers.Builder, scopes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(scopes), 0)
}
func ProviderStatStartScopesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ProviderStatAddCapabilities(builder *flatbuffers.Builder, capabilities flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(capabilities), 0)
}
func ProviderStatAddRejectedScopes(builder *flatbuffers.Builder, rejectedScopes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(rejectedScopes), 0)
}
func ProviderStatStartRejectedScopesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ProviderStatEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
