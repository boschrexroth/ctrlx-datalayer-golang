// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// statistics of a provider
type ProviderStatT struct {
	Identity string `json:"identity"`
	Nodes []string `json:"nodes"`
	RejectedNodes []string `json:"rejectedNodes"`
}

func (t *ProviderStatT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	identityOffset := flatbuffers.UOffsetT(0)
	if t.Identity != "" {
		identityOffset = builder.CreateString(t.Identity)
	}
	nodesOffset := flatbuffers.UOffsetT(0)
	if t.Nodes != nil {
		nodesLength := len(t.Nodes)
		nodesOffsets := make([]flatbuffers.UOffsetT, nodesLength)
		for j := 0; j < nodesLength; j++ {
			nodesOffsets[j] = builder.CreateString(t.Nodes[j])
		}
		ProviderStatStartNodesVector(builder, nodesLength)
		for j := nodesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(nodesOffsets[j])
		}
		nodesOffset = builder.EndVector(nodesLength)
	}
	rejectedNodesOffset := flatbuffers.UOffsetT(0)
	if t.RejectedNodes != nil {
		rejectedNodesLength := len(t.RejectedNodes)
		rejectedNodesOffsets := make([]flatbuffers.UOffsetT, rejectedNodesLength)
		for j := 0; j < rejectedNodesLength; j++ {
			rejectedNodesOffsets[j] = builder.CreateString(t.RejectedNodes[j])
		}
		ProviderStatStartRejectedNodesVector(builder, rejectedNodesLength)
		for j := rejectedNodesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(rejectedNodesOffsets[j])
		}
		rejectedNodesOffset = builder.EndVector(rejectedNodesLength)
	}
	ProviderStatStart(builder)
	ProviderStatAddIdentity(builder, identityOffset)
	ProviderStatAddNodes(builder, nodesOffset)
	ProviderStatAddRejectedNodes(builder, rejectedNodesOffset)
	return ProviderStatEnd(builder)
}

func (rcv *ProviderStat) UnPackTo(t *ProviderStatT) {
	t.Identity = string(rcv.Identity())
	nodesLength := rcv.NodesLength()
	t.Nodes = make([]string, nodesLength)
	for j := 0; j < nodesLength; j++ {
		t.Nodes[j] = string(rcv.Nodes(j))
	}
	rejectedNodesLength := rcv.RejectedNodesLength()
	t.RejectedNodes = make([]string, rejectedNodesLength)
	for j := 0; j < rejectedNodesLength; j++ {
		t.RejectedNodes[j] = string(rcv.RejectedNodes(j))
	}
}

func (rcv *ProviderStat) UnPack() *ProviderStatT {
	if rcv == nil { return nil }
	t := &ProviderStatT{}
	rcv.UnPackTo(t)
	return t
}

type ProviderStat struct {
	_tab flatbuffers.Table
}

func GetRootAsProviderStat(buf []byte, offset flatbuffers.UOffsetT) *ProviderStat {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ProviderStat{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsProviderStat(buf []byte, offset flatbuffers.UOffsetT) *ProviderStat {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ProviderStat{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ProviderStat) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProviderStat) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ProviderStat) Identity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ProviderStat) Nodes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ProviderStat) NodesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ProviderStat) RejectedNodes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ProviderStat) RejectedNodesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ProviderStatStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ProviderStatAddIdentity(builder *flatbuffers.Builder, identity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(identity), 0)
}
func ProviderStatAddNodes(builder *flatbuffers.Builder, nodes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(nodes), 0)
}
func ProviderStatStartNodesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ProviderStatAddRejectedNodes(builder *flatbuffers.Builder, rejectedNodes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rejectedNodes), 0)
}
func ProviderStatStartRejectedNodesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ProviderStatEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
