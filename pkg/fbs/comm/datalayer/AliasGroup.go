// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	"bytes"
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Related aliases can be grouped together.
/// Multiple alias groups can be handled in the data layer.
/// This we it is possible manage many aliases which originate from different clients.
/// The table AliasGroup encapsulates an array of Aliases.
type AliasGroupT struct {
	Name string `json:"name"`
	Aliases []*AliasT `json:"aliases"`
}

func (t *AliasGroupT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	aliasesOffset := flatbuffers.UOffsetT(0)
	if t.Aliases != nil {
		aliasesLength := len(t.Aliases)
		aliasesOffsets := make([]flatbuffers.UOffsetT, aliasesLength)
		for j := 0; j < aliasesLength; j++ {
			aliasesOffsets[j] = t.Aliases[j].Pack(builder)
		}
		AliasGroupStartAliasesVector(builder, aliasesLength)
		for j := aliasesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(aliasesOffsets[j])
		}
		aliasesOffset = builder.EndVector(aliasesLength)
	}
	AliasGroupStart(builder)
	AliasGroupAddName(builder, nameOffset)
	AliasGroupAddAliases(builder, aliasesOffset)
	return AliasGroupEnd(builder)
}

func (rcv *AliasGroup) UnPackTo(t *AliasGroupT) {
	t.Name = string(rcv.Name())
	aliasesLength := rcv.AliasesLength()
	t.Aliases = make([]*AliasT, aliasesLength)
	for j := 0; j < aliasesLength; j++ {
		x := Alias{}
		rcv.Aliases(&x, j)
		t.Aliases[j] = x.UnPack()
	}
}

func (rcv *AliasGroup) UnPack() *AliasGroupT {
	if rcv == nil { return nil }
	t := &AliasGroupT{}
	rcv.UnPackTo(t)
	return t
}

type AliasGroup struct {
	_tab flatbuffers.Table
}

func GetRootAsAliasGroup(buf []byte, offset flatbuffers.UOffsetT) *AliasGroup {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AliasGroup{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAliasGroup(buf []byte, offset flatbuffers.UOffsetT) *AliasGroup {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AliasGroup{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AliasGroup) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AliasGroup) Table() flatbuffers.Table {
	return rcv._tab
}

/// A name for the group of aliases.
func (rcv *AliasGroup) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A name for the group of aliases.
func AliasGroupKeyCompare(o1, o2 flatbuffers.UOffsetT, buf []byte) bool {
	obj1 := &AliasGroup{}
	obj2 := &AliasGroup{}
	obj1.Init(buf, flatbuffers.UOffsetT(len(buf)) - o1)
	obj2.Init(buf, flatbuffers.UOffsetT(len(buf)) - o2)
	return string(obj1.Name()) < string(obj2.Name())
}

func (rcv *AliasGroup) LookupByKey(key string, vectorLocation flatbuffers.UOffsetT, buf []byte) bool {
	span := flatbuffers.GetUOffsetT(buf[vectorLocation - 4:])
	start := flatbuffers.UOffsetT(0)
	bKey := []byte(key)
	for span != 0 {
		middle := span / 2
		tableOffset := flatbuffers.GetIndirectOffset(buf, vectorLocation+ 4 * (start + middle))
		obj := &AliasGroup{}
		obj.Init(buf, tableOffset)
		comp := bytes.Compare(obj.Name(), bKey)
		if comp > 0 {
			span = middle
		} else if comp < 0 {
			middle += 1
			start += middle
			span -= middle
		} else {
			rcv.Init(buf, tableOffset)
			return true
		}
	}
	return false
}

/// An array of aliases which belong to this group.
func (rcv *AliasGroup) Aliases(obj *Alias, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AliasGroup) AliasesByKey(obj *Alias, key string) bool{
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *AliasGroup) AliasesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// An array of aliases which belong to this group.
func AliasGroupStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AliasGroupAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func AliasGroupAddAliases(builder *flatbuffers.Builder, aliases flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(aliases), 0)
}
func AliasGroupStartAliasesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AliasGroupEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
