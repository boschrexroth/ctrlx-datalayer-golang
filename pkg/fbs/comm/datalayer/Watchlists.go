// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WatchlistsT struct {
	Watchlists []*WatchlistT `json:"watchlists"`
}

func (t *WatchlistsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	watchlistsOffset := flatbuffers.UOffsetT(0)
	if t.Watchlists != nil {
		watchlistsLength := len(t.Watchlists)
		watchlistsOffsets := make([]flatbuffers.UOffsetT, watchlistsLength)
		for j := 0; j < watchlistsLength; j++ {
			watchlistsOffsets[j] = t.Watchlists[j].Pack(builder)
		}
		WatchlistsStartWatchlistsVector(builder, watchlistsLength)
		for j := watchlistsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(watchlistsOffsets[j])
		}
		watchlistsOffset = builder.EndVector(watchlistsLength)
	}
	WatchlistsStart(builder)
	WatchlistsAddWatchlists(builder, watchlistsOffset)
	return WatchlistsEnd(builder)
}

func (rcv *Watchlists) UnPackTo(t *WatchlistsT) {
	watchlistsLength := rcv.WatchlistsLength()
	t.Watchlists = make([]*WatchlistT, watchlistsLength)
	for j := 0; j < watchlistsLength; j++ {
		x := Watchlist{}
		rcv.Watchlists(&x, j)
		t.Watchlists[j] = x.UnPack()
	}
}

func (rcv *Watchlists) UnPack() *WatchlistsT {
	if rcv == nil { return nil }
	t := &WatchlistsT{}
	rcv.UnPackTo(t)
	return t
}

type Watchlists struct {
	_tab flatbuffers.Table
}

func GetRootAsWatchlists(buf []byte, offset flatbuffers.UOffsetT) *Watchlists {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Watchlists{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsWatchlists(buf []byte, offset flatbuffers.UOffsetT) *Watchlists {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Watchlists{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Watchlists) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Watchlists) Table() flatbuffers.Table {
	return rcv._tab
}

/// Watchlists
func (rcv *Watchlists) Watchlists(obj *Watchlist, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Watchlists) WatchlistsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Watchlists
func WatchlistsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func WatchlistsAddWatchlists(builder *flatbuffers.Builder, watchlists flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(watchlists), 0)
}
func WatchlistsStartWatchlistsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WatchlistsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
