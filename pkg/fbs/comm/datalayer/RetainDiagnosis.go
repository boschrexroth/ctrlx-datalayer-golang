// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Diagnosis of nvram
type RetainDiagnosisT struct {
	Corrupted []*RetainCorruptedT `json:"corrupted"`
}

func (t *RetainDiagnosisT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	corruptedOffset := flatbuffers.UOffsetT(0)
	if t.Corrupted != nil {
		corruptedLength := len(t.Corrupted)
		RetainDiagnosisStartCorruptedVector(builder, corruptedLength)
		for j := corruptedLength - 1; j >= 0; j-- {
			t.Corrupted[j].Pack(builder)
		}
		corruptedOffset = builder.EndVector(corruptedLength)
	}
	RetainDiagnosisStart(builder)
	RetainDiagnosisAddCorrupted(builder, corruptedOffset)
	return RetainDiagnosisEnd(builder)
}

func (rcv *RetainDiagnosis) UnPackTo(t *RetainDiagnosisT) {
	corruptedLength := rcv.CorruptedLength()
	t.Corrupted = make([]*RetainCorruptedT, corruptedLength)
	for j := 0; j < corruptedLength; j++ {
		x := RetainCorrupted{}
		rcv.Corrupted(&x, j)
		t.Corrupted[j] = x.UnPack()
	}
}

func (rcv *RetainDiagnosis) UnPack() *RetainDiagnosisT {
	if rcv == nil { return nil }
	t := &RetainDiagnosisT{}
	rcv.UnPackTo(t)
	return t
}

type RetainDiagnosis struct {
	_tab flatbuffers.Table
}

func GetRootAsRetainDiagnosis(buf []byte, offset flatbuffers.UOffsetT) *RetainDiagnosis {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RetainDiagnosis{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRetainDiagnosis(buf []byte, offset flatbuffers.UOffsetT) *RetainDiagnosis {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RetainDiagnosis{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RetainDiagnosis) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RetainDiagnosis) Table() flatbuffers.Table {
	return rcv._tab
}

/// List of corrupted memory areas in nvram
func (rcv *RetainDiagnosis) Corrupted(obj *RetainCorrupted, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 8
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RetainDiagnosis) CorruptedLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of corrupted memory areas in nvram
func RetainDiagnosisStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func RetainDiagnosisAddCorrupted(builder *flatbuffers.Builder, corrupted flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(corrupted), 0)
}
func RetainDiagnosisStartCorruptedVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 4)
}
func RetainDiagnosisEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
