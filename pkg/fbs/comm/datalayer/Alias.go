// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	"bytes"
	flatbuffers "github.com/google/flatbuffers/go"
)

/// An Alias gives the possibility to expose a data layer node under another well-defined data layer address.
/// The concept of Aliases is similar to symbolic links in a file-system.
/// The alias inherits all properties of the target, that it points to.
/// There can be multiple aliases for the same data layer node.
/// It is possible to have an aliases which points to another alias to configurable number of recursions.
/// This configuration takes place in data layer node datalayer/server/settings field maxAliasDepth.
type AliasT struct {
	Address string `json:"address"`
	Target string `json:"target"`
}

func (t *AliasT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	addressOffset := flatbuffers.UOffsetT(0)
	if t.Address != "" {
		addressOffset = builder.CreateString(t.Address)
	}
	targetOffset := flatbuffers.UOffsetT(0)
	if t.Target != "" {
		targetOffset = builder.CreateString(t.Target)
	}
	AliasStart(builder)
	AliasAddAddress(builder, addressOffset)
	AliasAddTarget(builder, targetOffset)
	return AliasEnd(builder)
}

func (rcv *Alias) UnPackTo(t *AliasT) {
	t.Address = string(rcv.Address())
	t.Target = string(rcv.Target())
}

func (rcv *Alias) UnPack() *AliasT {
	if rcv == nil { return nil }
	t := &AliasT{}
	rcv.UnPackTo(t)
	return t
}

type Alias struct {
	_tab flatbuffers.Table
}

func GetRootAsAlias(buf []byte, offset flatbuffers.UOffsetT) *Alias {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Alias{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAlias(buf []byte, offset flatbuffers.UOffsetT) *Alias {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Alias{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Alias) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Alias) Table() flatbuffers.Table {
	return rcv._tab
}

/// The address of the alias in the data layer.
func (rcv *Alias) Address() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The address of the alias in the data layer.
func AliasKeyCompare(o1, o2 flatbuffers.UOffsetT, buf []byte) bool {
	obj1 := &Alias{}
	obj2 := &Alias{}
	obj1.Init(buf, flatbuffers.UOffsetT(len(buf)) - o1)
	obj2.Init(buf, flatbuffers.UOffsetT(len(buf)) - o2)
	return string(obj1.Address()) < string(obj2.Address())
}

func (rcv *Alias) LookupByKey(key string, vectorLocation flatbuffers.UOffsetT, buf []byte) bool {
	span := flatbuffers.GetUOffsetT(buf[vectorLocation - 4:])
	start := flatbuffers.UOffsetT(0)
	bKey := []byte(key)
	for span != 0 {
		middle := span / 2
		tableOffset := flatbuffers.GetIndirectOffset(buf, vectorLocation+ 4 * (start + middle))
		obj := &Alias{}
		obj.Init(buf, tableOffset)
		comp := bytes.Compare(obj.Address(), bKey)
		if comp > 0 {
			span = middle
		} else if comp < 0 {
			middle += 1
			start += middle
			span -= middle
		} else {
			rcv.Init(buf, tableOffset)
			return true
		}
	}
	return false
}

/// Location where address points to in data layer.
func (rcv *Alias) Target() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Location where address points to in data layer.
func AliasStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AliasAddAddress(builder *flatbuffers.Builder, address flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(address), 0)
}
func AliasAddTarget(builder *flatbuffers.Builder, target flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(target), 0)
}
func AliasEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
