// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ProgramTask struct {
	_tab flatbuffers.Table
}

func GetRootAsProgramTask(buf []byte, offset flatbuffers.UOffsetT) *ProgramTask {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ProgramTask{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsProgramTask(buf []byte, offset flatbuffers.UOffsetT) *ProgramTask {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ProgramTask{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ProgramTask) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProgramTask) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ProgramTask) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ProgramTask) State() ProgramTaskState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ProgramTaskState(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ProgramTask) MutateState(n ProgramTaskState) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func (rcv *ProgramTask) Progress() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ProgramTask) MutateProgress(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *ProgramTask) Result(obj *Diagnosis) *Diagnosis {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Diagnosis)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ProgramTaskStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ProgramTaskAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ProgramTaskAddState(builder *flatbuffers.Builder, state ProgramTaskState) {
	builder.PrependInt8Slot(1, int8(state), 0)
}
func ProgramTaskAddProgress(builder *flatbuffers.Builder, progress uint32) {
	builder.PrependUint32Slot(2, progress, 0)
}
func ProgramTaskAddResult(builder *flatbuffers.Builder, result flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(result), 0)
}
func ProgramTaskEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
