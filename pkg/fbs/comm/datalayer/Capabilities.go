// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CapabilitiesT struct {
	BulkMax uint32 `json:"bulkMax"`
	MultiRegister bool `json:"multiRegister"`
	MaximumMessageSize uint32 `json:"maximumMessageSize"`
}

func (t *CapabilitiesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	CapabilitiesStart(builder)
	CapabilitiesAddBulkMax(builder, t.BulkMax)
	CapabilitiesAddMultiRegister(builder, t.MultiRegister)
	CapabilitiesAddMaximumMessageSize(builder, t.MaximumMessageSize)
	return CapabilitiesEnd(builder)
}

func (rcv *Capabilities) UnPackTo(t *CapabilitiesT) {
	t.BulkMax = rcv.BulkMax()
	t.MultiRegister = rcv.MultiRegister()
	t.MaximumMessageSize = rcv.MaximumMessageSize()
}

func (rcv *Capabilities) UnPack() *CapabilitiesT {
	if rcv == nil { return nil }
	t := &CapabilitiesT{}
	rcv.UnPackTo(t)
	return t
}

type Capabilities struct {
	_tab flatbuffers.Table
}

func GetRootAsCapabilities(buf []byte, offset flatbuffers.UOffsetT) *Capabilities {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Capabilities{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCapabilities(buf []byte, offset flatbuffers.UOffsetT) *Capabilities {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Capabilities{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Capabilities) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Capabilities) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Capabilities) BulkMax() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Capabilities) MutateBulkMax(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Capabilities) MultiRegister() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Capabilities) MutateMultiRegister(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *Capabilities) MaximumMessageSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Capabilities) MutateMaximumMessageSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func CapabilitiesStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func CapabilitiesAddBulkMax(builder *flatbuffers.Builder, bulkMax uint32) {
	builder.PrependUint32Slot(0, bulkMax, 0)
}
func CapabilitiesAddMultiRegister(builder *flatbuffers.Builder, multiRegister bool) {
	builder.PrependBoolSlot(1, multiRegister, false)
}
func CapabilitiesAddMaximumMessageSize(builder *flatbuffers.Builder, maximumMessageSize uint32) {
	builder.PrependUint32Slot(2, maximumMessageSize, 0)
}
func CapabilitiesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
