// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// The table Property can be used to set additional optional properties which influence the subcription behaviour.
/// If no Properties are given, default values will be used automatically.
type PropertyT struct {
	Rule *PropertiesT
}

func (t *PropertyT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	ruleOffset := t.Rule.Pack(builder)
	
	PropertyStart(builder)
	if t.Rule != nil {
		PropertyAddRuleType(builder, t.Rule.Type)
	}
	PropertyAddRule(builder, ruleOffset)
	return PropertyEnd(builder)
}

func (rcv *Property) UnPackTo(t *PropertyT) {
	ruleTable := flatbuffers.Table{}
	if rcv.Rule(&ruleTable) {
		t.Rule = rcv.RuleType().UnPack(ruleTable)
	}
}

func (rcv *Property) UnPack() *PropertyT {
	if rcv == nil { return nil }
	t := &PropertyT{}
	rcv.UnPackTo(t)
	return t
}

type Property struct {
	_tab flatbuffers.Table
}

func GetRootAsProperty(buf []byte, offset flatbuffers.UOffsetT) *Property {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Property{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsProperty(buf []byte, offset flatbuffers.UOffsetT) *Property {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Property{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Property) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Property) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Property) RuleType() Properties {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Properties(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Property) MutateRuleType(n Properties) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *Property) Rule(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func PropertyStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func PropertyAddRuleType(builder *flatbuffers.Builder, ruleType Properties) {
	builder.PrependByteSlot(0, byte(ruleType), 0)
}
func PropertyAddRule(builder *flatbuffers.Builder, rule flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rule), 0)
}
func PropertyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
