// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SubscriptionSettings struct {
	_tab flatbuffers.Table
}

func GetRootAsSubscriptionSettings(buf []byte, offset flatbuffers.UOffsetT) *SubscriptionSettings {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SubscriptionSettings{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSubscriptionSettings(buf []byte, offset flatbuffers.UOffsetT) *SubscriptionSettings {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SubscriptionSettings{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SubscriptionSettings) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SubscriptionSettings) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SubscriptionSettings) MinimumPublishInterval() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 50
}

func (rcv *SubscriptionSettings) MutateMinimumPublishInterval(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *SubscriptionSettings) MinimumSampleInterval() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 100000
}

func (rcv *SubscriptionSettings) MutateMinimumSampleInterval(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *SubscriptionSettings) MaximumBufferSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 50
}

func (rcv *SubscriptionSettings) MutateMaximumBufferSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *SubscriptionSettings) MinimumErrorInterval() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 10000
}

func (rcv *SubscriptionSettings) MutateMinimumErrorInterval(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func SubscriptionSettingsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SubscriptionSettingsAddMinimumPublishInterval(builder *flatbuffers.Builder, minimumPublishInterval uint32) {
	builder.PrependUint32Slot(0, minimumPublishInterval, 50)
}
func SubscriptionSettingsAddMinimumSampleInterval(builder *flatbuffers.Builder, minimumSampleInterval uint64) {
	builder.PrependUint64Slot(1, minimumSampleInterval, 100000)
}
func SubscriptionSettingsAddMaximumBufferSize(builder *flatbuffers.Builder, maximumBufferSize uint32) {
	builder.PrependUint32Slot(2, maximumBufferSize, 50)
}
func SubscriptionSettingsAddMinimumErrorInterval(builder *flatbuffers.Builder, minimumErrorInterval uint32) {
	builder.PrependUint32Slot(3, minimumErrorInterval, 10000)
}
func SubscriptionSettingsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
