// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SubscriptionStatisticsT struct {
	NumberClients uint32
	NumberSubscriptions uint32
	NumberSubscribedNodes uint32
	NumberRTSubscribedNodes uint32
}

func (t *SubscriptionStatisticsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	SubscriptionStatisticsStart(builder)
	SubscriptionStatisticsAddNumberClients(builder, t.NumberClients)
	SubscriptionStatisticsAddNumberSubscriptions(builder, t.NumberSubscriptions)
	SubscriptionStatisticsAddNumberSubscribedNodes(builder, t.NumberSubscribedNodes)
	SubscriptionStatisticsAddNumberRTSubscribedNodes(builder, t.NumberRTSubscribedNodes)
	return SubscriptionStatisticsEnd(builder)
}

func (rcv *SubscriptionStatistics) UnPackTo(t *SubscriptionStatisticsT) {
	t.NumberClients = rcv.NumberClients()
	t.NumberSubscriptions = rcv.NumberSubscriptions()
	t.NumberSubscribedNodes = rcv.NumberSubscribedNodes()
	t.NumberRTSubscribedNodes = rcv.NumberRTSubscribedNodes()
}

func (rcv *SubscriptionStatistics) UnPack() *SubscriptionStatisticsT {
	if rcv == nil { return nil }
	t := &SubscriptionStatisticsT{}
	rcv.UnPackTo(t)
	return t
}

type SubscriptionStatistics struct {
	_tab flatbuffers.Table
}

func GetRootAsSubscriptionStatistics(buf []byte, offset flatbuffers.UOffsetT) *SubscriptionStatistics {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SubscriptionStatistics{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSubscriptionStatistics(buf []byte, offset flatbuffers.UOffsetT) *SubscriptionStatistics {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SubscriptionStatistics{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SubscriptionStatistics) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SubscriptionStatistics) Table() flatbuffers.Table {
	return rcv._tab
}

/// Number of clients with subscriptions
func (rcv *SubscriptionStatistics) NumberClients() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of clients with subscriptions
func (rcv *SubscriptionStatistics) MutateNumberClients(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// Number of subscriptions
func (rcv *SubscriptionStatistics) NumberSubscriptions() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of subscriptions
func (rcv *SubscriptionStatistics) MutateNumberSubscriptions(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

/// Number of subscribed nodes;
func (rcv *SubscriptionStatistics) NumberSubscribedNodes() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of subscribed nodes;
func (rcv *SubscriptionStatistics) MutateNumberSubscribedNodes(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

/// Number of realtime subscribed nodes
func (rcv *SubscriptionStatistics) NumberRTSubscribedNodes() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of realtime subscribed nodes
func (rcv *SubscriptionStatistics) MutateNumberRTSubscribedNodes(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func SubscriptionStatisticsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SubscriptionStatisticsAddNumberClients(builder *flatbuffers.Builder, numberClients uint32) {
	builder.PrependUint32Slot(0, numberClients, 0)
}
func SubscriptionStatisticsAddNumberSubscriptions(builder *flatbuffers.Builder, numberSubscriptions uint32) {
	builder.PrependUint32Slot(1, numberSubscriptions, 0)
}
func SubscriptionStatisticsAddNumberSubscribedNodes(builder *flatbuffers.Builder, numberSubscribedNodes uint32) {
	builder.PrependUint32Slot(2, numberSubscribedNodes, 0)
}
func SubscriptionStatisticsAddNumberRTSubscribedNodes(builder *flatbuffers.Builder, numberRTSubscribedNodes uint32) {
	builder.PrependUint32Slot(3, numberRTSubscribedNodes, 0)
}
func SubscriptionStatisticsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
