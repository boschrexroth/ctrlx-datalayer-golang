// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ReferenceT struct {
	Type string
	TargetAddress string
}

func (t *ReferenceT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	typeOffset := builder.CreateString(t.Type)
	targetAddressOffset := builder.CreateString(t.TargetAddress)
	ReferenceStart(builder)
	ReferenceAddType(builder, typeOffset)
	ReferenceAddTargetAddress(builder, targetAddressOffset)
	return ReferenceEnd(builder)
}

func (rcv *Reference) UnPackTo(t *ReferenceT) {
	t.Type = string(rcv.Type())
	t.TargetAddress = string(rcv.TargetAddress())
}

func (rcv *Reference) UnPack() *ReferenceT {
	if rcv == nil { return nil }
	t := &ReferenceT{}
	rcv.UnPackTo(t)
	return t
}

type Reference struct {
	_tab flatbuffers.Table
}

func GetRootAsReference(buf []byte, offset flatbuffers.UOffsetT) *Reference {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Reference{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsReference(buf []byte, offset flatbuffers.UOffsetT) *Reference {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Reference{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Reference) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Reference) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Reference) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Reference) TargetAddress() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ReferenceStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ReferenceAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(type_), 0)
}
func ReferenceAddTargetAddress(builder *flatbuffers.Builder, targetAddress flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(targetAddress), 0)
}
func ReferenceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
