// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package datalayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Diagnosis of nvram
type BarT struct {
	Test *FooT `json:"test"`
}

func (t *BarT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	BarStart(builder)
	testOffset := t.Test.Pack(builder)
	BarAddTest(builder, testOffset)
	return BarEnd(builder)
}

func (rcv *Bar) UnPackTo(t *BarT) {
	t.Test = rcv.Test(nil).UnPack()
}

func (rcv *Bar) UnPack() *BarT {
	if rcv == nil { return nil }
	t := &BarT{}
	rcv.UnPackTo(t)
	return t
}

type Bar struct {
	_tab flatbuffers.Table
}

func GetRootAsBar(buf []byte, offset flatbuffers.UOffsetT) *Bar {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Bar{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBar(buf []byte, offset flatbuffers.UOffsetT) *Bar {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Bar{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Bar) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Bar) Table() flatbuffers.Table {
	return rcv._tab
}

/// List of corrupted memory areas in nvram
func (rcv *Bar) Test(obj *Foo) *Foo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Foo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// List of corrupted memory areas in nvram
func BarStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func BarAddTest(builder *flatbuffers.Builder, test flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(test), 0)
}
func BarEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
