// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package client

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AddressPlaceholdersT struct {
	Ns string `json:"ns"`
	String string `json:"string"`
	Integer string `json:"integer"`
}

func (t *AddressPlaceholdersT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nsOffset := flatbuffers.UOffsetT(0)
	if t.Ns != "" {
		nsOffset = builder.CreateString(t.Ns)
	}
	stringOffset := flatbuffers.UOffsetT(0)
	if t.String != "" {
		stringOffset = builder.CreateString(t.String)
	}
	integerOffset := flatbuffers.UOffsetT(0)
	if t.Integer != "" {
		integerOffset = builder.CreateString(t.Integer)
	}
	AddressPlaceholdersStart(builder)
	AddressPlaceholdersAddNs(builder, nsOffset)
	AddressPlaceholdersAddString(builder, stringOffset)
	AddressPlaceholdersAddInteger(builder, integerOffset)
	return AddressPlaceholdersEnd(builder)
}

func (rcv *AddressPlaceholders) UnPackTo(t *AddressPlaceholdersT) {
	t.Ns = string(rcv.Ns())
	t.String = string(rcv.String())
	t.Integer = string(rcv.Integer())
}

func (rcv *AddressPlaceholders) UnPack() *AddressPlaceholdersT {
	if rcv == nil { return nil }
	t := &AddressPlaceholdersT{}
	rcv.UnPackTo(t)
	return t
}

type AddressPlaceholders struct {
	_tab flatbuffers.Table
}

func GetRootAsAddressPlaceholders(buf []byte, offset flatbuffers.UOffsetT) *AddressPlaceholders {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AddressPlaceholders{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAddressPlaceholders(buf []byte, offset flatbuffers.UOffsetT) *AddressPlaceholders {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AddressPlaceholders{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AddressPlaceholders) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AddressPlaceholders) Table() flatbuffers.Table {
	return rcv._tab
}

/// Placeholder for the namespace index
func (rcv *AddressPlaceholders) Ns() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Placeholder for the namespace index
/// Placeholder for string identifiers
func (rcv *AddressPlaceholders) String() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Placeholder for string identifiers
/// Placeholder for numeric identifiers
func (rcv *AddressPlaceholders) Integer() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Placeholder for numeric identifiers
func AddressPlaceholdersStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AddressPlaceholdersAddNs(builder *flatbuffers.Builder, ns flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ns), 0)
}
func AddressPlaceholdersAddString(builder *flatbuffers.Builder, string flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(string), 0)
}
func AddressPlaceholdersAddInteger(builder *flatbuffers.Builder, integer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(integer), 0)
}
func AddressPlaceholdersEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
