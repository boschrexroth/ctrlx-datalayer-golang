// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package client

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TokenUserPasswordT struct {
	Username string
	Password string
}

func (t *TokenUserPasswordT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	usernameOffset := builder.CreateString(t.Username)
	passwordOffset := builder.CreateString(t.Password)
	TokenUserPasswordStart(builder)
	TokenUserPasswordAddUsername(builder, usernameOffset)
	TokenUserPasswordAddPassword(builder, passwordOffset)
	return TokenUserPasswordEnd(builder)
}

func (rcv *TokenUserPassword) UnPackTo(t *TokenUserPasswordT) {
	t.Username = string(rcv.Username())
	t.Password = string(rcv.Password())
}

func (rcv *TokenUserPassword) UnPack() *TokenUserPasswordT {
	if rcv == nil { return nil }
	t := &TokenUserPasswordT{}
	rcv.UnPackTo(t)
	return t
}

type TokenUserPassword struct {
	_tab flatbuffers.Table
}

func GetRootAsTokenUserPassword(buf []byte, offset flatbuffers.UOffsetT) *TokenUserPassword {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TokenUserPassword{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTokenUserPassword(buf []byte, offset flatbuffers.UOffsetT) *TokenUserPassword {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TokenUserPassword{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TokenUserPassword) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TokenUserPassword) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TokenUserPassword) Username() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TokenUserPassword) Password() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func TokenUserPasswordStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TokenUserPasswordAddUsername(builder *flatbuffers.Builder, username flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(username), 0)
}
func TokenUserPasswordAddPassword(builder *flatbuffers.Builder, password flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(password), 0)
}
func TokenUserPasswordEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
