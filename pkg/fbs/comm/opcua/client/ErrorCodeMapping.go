// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package client

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ErrorCodeMappingT struct {
	ListDlResultToUaStatusCode []*DlResultToUaStatusCodeT `json:"listDlResultToUaStatusCode"`
}

func (t *ErrorCodeMappingT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	listDlResultToUaStatusCodeOffset := flatbuffers.UOffsetT(0)
	if t.ListDlResultToUaStatusCode != nil {
		listDlResultToUaStatusCodeLength := len(t.ListDlResultToUaStatusCode)
		listDlResultToUaStatusCodeOffsets := make([]flatbuffers.UOffsetT, listDlResultToUaStatusCodeLength)
		for j := 0; j < listDlResultToUaStatusCodeLength; j++ {
			listDlResultToUaStatusCodeOffsets[j] = t.ListDlResultToUaStatusCode[j].Pack(builder)
		}
		ErrorCodeMappingStartListDlResultToUaStatusCodeVector(builder, listDlResultToUaStatusCodeLength)
		for j := listDlResultToUaStatusCodeLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(listDlResultToUaStatusCodeOffsets[j])
		}
		listDlResultToUaStatusCodeOffset = builder.EndVector(listDlResultToUaStatusCodeLength)
	}
	ErrorCodeMappingStart(builder)
	ErrorCodeMappingAddListDlResultToUaStatusCode(builder, listDlResultToUaStatusCodeOffset)
	return ErrorCodeMappingEnd(builder)
}

func (rcv *ErrorCodeMapping) UnPackTo(t *ErrorCodeMappingT) {
	listDlResultToUaStatusCodeLength := rcv.ListDlResultToUaStatusCodeLength()
	t.ListDlResultToUaStatusCode = make([]*DlResultToUaStatusCodeT, listDlResultToUaStatusCodeLength)
	for j := 0; j < listDlResultToUaStatusCodeLength; j++ {
		x := DlResultToUaStatusCode{}
		rcv.ListDlResultToUaStatusCode(&x, j)
		t.ListDlResultToUaStatusCode[j] = x.UnPack()
	}
}

func (rcv *ErrorCodeMapping) UnPack() *ErrorCodeMappingT {
	if rcv == nil { return nil }
	t := &ErrorCodeMappingT{}
	rcv.UnPackTo(t)
	return t
}

type ErrorCodeMapping struct {
	_tab flatbuffers.Table
}

func GetRootAsErrorCodeMapping(buf []byte, offset flatbuffers.UOffsetT) *ErrorCodeMapping {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ErrorCodeMapping{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsErrorCodeMapping(buf []byte, offset flatbuffers.UOffsetT) *ErrorCodeMapping {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ErrorCodeMapping{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ErrorCodeMapping) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ErrorCodeMapping) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ErrorCodeMapping) ListDlResultToUaStatusCode(obj *DlResultToUaStatusCode, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ErrorCodeMapping) ListDlResultToUaStatusCodeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ErrorCodeMappingStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ErrorCodeMappingAddListDlResultToUaStatusCode(builder *flatbuffers.Builder, listDlResultToUaStatusCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(listDlResultToUaStatusCode), 0)
}
func ErrorCodeMappingStartListDlResultToUaStatusCodeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ErrorCodeMappingEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
