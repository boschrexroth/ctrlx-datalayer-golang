// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package client

import (
	"strconv"
	flatbuffers "github.com/google/flatbuffers/go"
)

type UserIdentityTokenUnion byte

const (
	UserIdentityTokenUnionNONE              UserIdentityTokenUnion = 0
	UserIdentityTokenUnionTokenAnonymous    UserIdentityTokenUnion = 1
	UserIdentityTokenUnionTokenUserPassword UserIdentityTokenUnion = 2
	UserIdentityTokenUnionTokenCert         UserIdentityTokenUnion = 3
)

var EnumNamesUserIdentityTokenUnion = map[UserIdentityTokenUnion]string{
	UserIdentityTokenUnionNONE:              "NONE",
	UserIdentityTokenUnionTokenAnonymous:    "TokenAnonymous",
	UserIdentityTokenUnionTokenUserPassword: "TokenUserPassword",
	UserIdentityTokenUnionTokenCert:         "TokenCert",
}

var EnumValuesUserIdentityTokenUnion = map[string]UserIdentityTokenUnion{
	"NONE":              UserIdentityTokenUnionNONE,
	"TokenAnonymous":    UserIdentityTokenUnionTokenAnonymous,
	"TokenUserPassword": UserIdentityTokenUnionTokenUserPassword,
	"TokenCert":         UserIdentityTokenUnionTokenCert,
}

func (v UserIdentityTokenUnion) String() string {
	if s, ok := EnumNamesUserIdentityTokenUnion[v]; ok {
		return s
	}
	return "UserIdentityTokenUnion(" + strconv.FormatInt(int64(v), 10) + ")"
}

type UserIdentityTokenUnionT struct {
	Type UserIdentityTokenUnion
	Value interface{}
}

func (t *UserIdentityTokenUnionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case UserIdentityTokenUnionTokenAnonymous:
		return t.Value.(*TokenAnonymousT).Pack(builder)
	case UserIdentityTokenUnionTokenUserPassword:
		return t.Value.(*TokenUserPasswordT).Pack(builder)
	case UserIdentityTokenUnionTokenCert:
		return t.Value.(*TokenCertT).Pack(builder)
	}
	return 0
}

func (rcv UserIdentityTokenUnion) UnPack(table flatbuffers.Table) *UserIdentityTokenUnionT {
	switch rcv {
	case UserIdentityTokenUnionTokenAnonymous:
		var x TokenAnonymous
		x.Init(table.Bytes, table.Pos)
		return &UserIdentityTokenUnionT{ Type: UserIdentityTokenUnionTokenAnonymous, Value: x.UnPack() }
	case UserIdentityTokenUnionTokenUserPassword:
		var x TokenUserPassword
		x.Init(table.Bytes, table.Pos)
		return &UserIdentityTokenUnionT{ Type: UserIdentityTokenUnionTokenUserPassword, Value: x.UnPack() }
	case UserIdentityTokenUnionTokenCert:
		var x TokenCert
		x.Init(table.Bytes, table.Pos)
		return &UserIdentityTokenUnionT{ Type: UserIdentityTokenUnionTokenCert, Value: x.UnPack() }
	}
	return nil
}
