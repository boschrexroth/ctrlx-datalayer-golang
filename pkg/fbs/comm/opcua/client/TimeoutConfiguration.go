// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package client

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TimeoutConfiguration struct {
	_tab flatbuffers.Table
}

func GetRootAsTimeoutConfiguration(buf []byte, offset flatbuffers.UOffsetT) *TimeoutConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TimeoutConfiguration{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTimeoutConfiguration(buf []byte, offset flatbuffers.UOffsetT) *TimeoutConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TimeoutConfiguration{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TimeoutConfiguration) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TimeoutConfiguration) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TimeoutConfiguration) BrowseCallTimeout() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 10000
}

func (rcv *TimeoutConfiguration) MutateBrowseCallTimeout(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *TimeoutConfiguration) DiscoveryTimeout() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 60000
}

func (rcv *TimeoutConfiguration) MutateDiscoveryTimeout(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *TimeoutConfiguration) PublishTimeout() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 60000
}

func (rcv *TimeoutConfiguration) MutatePublishTimeout(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *TimeoutConfiguration) ReadCallTimeout() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 10000
}

func (rcv *TimeoutConfiguration) MutateReadCallTimeout(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *TimeoutConfiguration) SessionTimeout() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 1200000.0
}

func (rcv *TimeoutConfiguration) MutateSessionTimeout(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func (rcv *TimeoutConfiguration) WatchdogTimeout() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 5000
}

func (rcv *TimeoutConfiguration) MutateWatchdogTimeout(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *TimeoutConfiguration) WriteCallTimeout() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 10000
}

func (rcv *TimeoutConfiguration) MutateWriteCallTimeout(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func TimeoutConfigurationStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func TimeoutConfigurationAddBrowseCallTimeout(builder *flatbuffers.Builder, browseCallTimeout uint32) {
	builder.PrependUint32Slot(0, browseCallTimeout, 10000)
}
func TimeoutConfigurationAddDiscoveryTimeout(builder *flatbuffers.Builder, discoveryTimeout uint32) {
	builder.PrependUint32Slot(1, discoveryTimeout, 60000)
}
func TimeoutConfigurationAddPublishTimeout(builder *flatbuffers.Builder, publishTimeout uint32) {
	builder.PrependUint32Slot(2, publishTimeout, 60000)
}
func TimeoutConfigurationAddReadCallTimeout(builder *flatbuffers.Builder, readCallTimeout uint32) {
	builder.PrependUint32Slot(3, readCallTimeout, 10000)
}
func TimeoutConfigurationAddSessionTimeout(builder *flatbuffers.Builder, sessionTimeout float64) {
	builder.PrependFloat64Slot(4, sessionTimeout, 1200000.0)
}
func TimeoutConfigurationAddWatchdogTimeout(builder *flatbuffers.Builder, watchdogTimeout uint32) {
	builder.PrependUint32Slot(5, watchdogTimeout, 5000)
}
func TimeoutConfigurationAddWriteCallTimeout(builder *flatbuffers.Builder, writeCallTimeout uint32) {
	builder.PrependUint32Slot(6, writeCallTimeout, 10000)
}
func TimeoutConfigurationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
