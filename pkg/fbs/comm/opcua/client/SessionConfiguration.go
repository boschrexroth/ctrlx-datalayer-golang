// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package client

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SessionConfiguration struct {
	_tab flatbuffers.Table
}

func GetRootAsSessionConfiguration(buf []byte, offset flatbuffers.UOffsetT) *SessionConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SessionConfiguration{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSessionConfiguration(buf []byte, offset flatbuffers.UOffsetT) *SessionConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SessionConfiguration{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SessionConfiguration) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SessionConfiguration) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SessionConfiguration) UserToken(obj *UserIdentityToken) *UserIdentityToken {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(UserIdentityToken)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SessionConfiguration) MessageSecurityMode(obj *MessageSecurityMode) *MessageSecurityMode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MessageSecurityMode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SessionConfiguration) SecurityPolicy(obj *SecurityPolicy) *SecurityPolicy {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(SecurityPolicy)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SessionConfiguration) LocaleIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SessionConfiguration) LocaleIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func SessionConfigurationStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SessionConfigurationAddUserToken(builder *flatbuffers.Builder, userToken flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(userToken), 0)
}
func SessionConfigurationAddMessageSecurityMode(builder *flatbuffers.Builder, messageSecurityMode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(messageSecurityMode), 0)
}
func SessionConfigurationAddSecurityPolicy(builder *flatbuffers.Builder, securityPolicy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(securityPolicy), 0)
}
func SessionConfigurationAddLocaleIds(builder *flatbuffers.Builder, localeIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(localeIds), 0)
}
func SessionConfigurationStartLocaleIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SessionConfigurationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
