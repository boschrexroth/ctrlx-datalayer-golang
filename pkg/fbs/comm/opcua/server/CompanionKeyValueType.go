// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package server

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Mapping of one source to target node
type CompanionKeyValueTypeT struct {
	SourceUaNodeId string `json:"sourceUaNodeId"`
	TargetUaNodeId string `json:"targetUaNodeId"`
	Result []Result `json:"result"`
}

func (t *CompanionKeyValueTypeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	sourceUaNodeIdOffset := flatbuffers.UOffsetT(0)
	if t.SourceUaNodeId != "" {
		sourceUaNodeIdOffset = builder.CreateString(t.SourceUaNodeId)
	}
	targetUaNodeIdOffset := flatbuffers.UOffsetT(0)
	if t.TargetUaNodeId != "" {
		targetUaNodeIdOffset = builder.CreateString(t.TargetUaNodeId)
	}
	resultOffset := flatbuffers.UOffsetT(0)
	if t.Result != nil {
		resultLength := len(t.Result)
		CompanionKeyValueTypeStartResultVector(builder, resultLength)
		for j := resultLength - 1; j >= 0; j-- {
			builder.PrependInt8(int8(t.Result[j]))
		}
		resultOffset = builder.EndVector(resultLength)
	}
	CompanionKeyValueTypeStart(builder)
	CompanionKeyValueTypeAddSourceUaNodeId(builder, sourceUaNodeIdOffset)
	CompanionKeyValueTypeAddTargetUaNodeId(builder, targetUaNodeIdOffset)
	CompanionKeyValueTypeAddResult(builder, resultOffset)
	return CompanionKeyValueTypeEnd(builder)
}

func (rcv *CompanionKeyValueType) UnPackTo(t *CompanionKeyValueTypeT) {
	t.SourceUaNodeId = string(rcv.SourceUaNodeId())
	t.TargetUaNodeId = string(rcv.TargetUaNodeId())
	resultLength := rcv.ResultLength()
	t.Result = make([]Result, resultLength)
	for j := 0; j < resultLength; j++ {
		t.Result[j] = rcv.Result(j)
	}
}

func (rcv *CompanionKeyValueType) UnPack() *CompanionKeyValueTypeT {
	if rcv == nil { return nil }
	t := &CompanionKeyValueTypeT{}
	rcv.UnPackTo(t)
	return t
}

type CompanionKeyValueType struct {
	_tab flatbuffers.Table
}

func GetRootAsCompanionKeyValueType(buf []byte, offset flatbuffers.UOffsetT) *CompanionKeyValueType {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CompanionKeyValueType{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCompanionKeyValueType(buf []byte, offset flatbuffers.UOffsetT) *CompanionKeyValueType {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CompanionKeyValueType{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CompanionKeyValueType) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CompanionKeyValueType) Table() flatbuffers.Table {
	return rcv._tab
}

/// The original opc ua node id which will be mapped into the opc ua companion model, e.g. ns=2;s=plc/app/Appl/...
func (rcv *CompanionKeyValueType) SourceUaNodeId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The original opc ua node id which will be mapped into the opc ua companion model, e.g. ns=2;s=plc/app/Appl/...
/// The target opc ua node id in the companion model, e.g. ns=5;s=myModel.myPlcNode
func (rcv *CompanionKeyValueType) TargetUaNodeId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The target opc ua node id in the companion model, e.g. ns=5;s=myModel.myPlcNode
/// Verification of the mapping, used as output parameter
func (rcv *CompanionKeyValueType) Result(j int) Result {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return Result(rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1)))
	}
	return 0
}

func (rcv *CompanionKeyValueType) ResultLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Verification of the mapping, used as output parameter
func (rcv *CompanionKeyValueType) MutateResult(j int, n Result) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), int8(n))
	}
	return false
}

func CompanionKeyValueTypeStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func CompanionKeyValueTypeAddSourceUaNodeId(builder *flatbuffers.Builder, sourceUaNodeId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(sourceUaNodeId), 0)
}
func CompanionKeyValueTypeAddTargetUaNodeId(builder *flatbuffers.Builder, targetUaNodeId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(targetUaNodeId), 0)
}
func CompanionKeyValueTypeAddResult(builder *flatbuffers.Builder, result flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(result), 0)
}
func CompanionKeyValueTypeStartResultVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func CompanionKeyValueTypeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
