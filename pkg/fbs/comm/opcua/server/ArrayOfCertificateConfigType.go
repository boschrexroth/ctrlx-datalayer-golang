// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package server

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ArrayOfCertificateConfigTypeT struct {
	CertificateConfigArray []*CertificateConfigTypeT
}

func (t *ArrayOfCertificateConfigTypeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	certificateConfigArrayOffset := flatbuffers.UOffsetT(0)
	if t.CertificateConfigArray != nil {
		certificateConfigArrayLength := len(t.CertificateConfigArray)
		certificateConfigArrayOffsets := make([]flatbuffers.UOffsetT, certificateConfigArrayLength)
		for j := 0; j < certificateConfigArrayLength; j++ {
			certificateConfigArrayOffsets[j] = t.CertificateConfigArray[j].Pack(builder)
		}
		ArrayOfCertificateConfigTypeStartCertificateConfigArrayVector(builder, certificateConfigArrayLength)
		for j := certificateConfigArrayLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(certificateConfigArrayOffsets[j])
		}
		certificateConfigArrayOffset = builder.EndVector(certificateConfigArrayLength)
	}
	ArrayOfCertificateConfigTypeStart(builder)
	ArrayOfCertificateConfigTypeAddCertificateConfigArray(builder, certificateConfigArrayOffset)
	return ArrayOfCertificateConfigTypeEnd(builder)
}

func (rcv *ArrayOfCertificateConfigType) UnPackTo(t *ArrayOfCertificateConfigTypeT) {
	certificateConfigArrayLength := rcv.CertificateConfigArrayLength()
	t.CertificateConfigArray = make([]*CertificateConfigTypeT, certificateConfigArrayLength)
	for j := 0; j < certificateConfigArrayLength; j++ {
		x := CertificateConfigType{}
		rcv.CertificateConfigArray(&x, j)
		t.CertificateConfigArray[j] = x.UnPack()
	}
}

func (rcv *ArrayOfCertificateConfigType) UnPack() *ArrayOfCertificateConfigTypeT {
	if rcv == nil { return nil }
	t := &ArrayOfCertificateConfigTypeT{}
	rcv.UnPackTo(t)
	return t
}

type ArrayOfCertificateConfigType struct {
	_tab flatbuffers.Table
}

func GetRootAsArrayOfCertificateConfigType(buf []byte, offset flatbuffers.UOffsetT) *ArrayOfCertificateConfigType {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ArrayOfCertificateConfigType{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsArrayOfCertificateConfigType(buf []byte, offset flatbuffers.UOffsetT) *ArrayOfCertificateConfigType {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ArrayOfCertificateConfigType{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ArrayOfCertificateConfigType) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ArrayOfCertificateConfigType) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ArrayOfCertificateConfigType) CertificateConfigArray(obj *CertificateConfigType, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ArrayOfCertificateConfigType) CertificateConfigArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ArrayOfCertificateConfigTypeStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ArrayOfCertificateConfigTypeAddCertificateConfigArray(builder *flatbuffers.Builder, certificateConfigArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(certificateConfigArray), 0)
}
func ArrayOfCertificateConfigTypeStartCertificateConfigArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ArrayOfCertificateConfigTypeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
