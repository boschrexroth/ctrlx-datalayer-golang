// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package server

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Sample1TypeSub2SubT struct {
	C1 *Sample1TypeSub3SubT
	C2 []int32
}

func (t *Sample1TypeSub2SubT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	c1Offset := t.C1.Pack(builder)
	c2Offset := flatbuffers.UOffsetT(0)
	if t.C2 != nil {
		c2Length := len(t.C2)
		Sample1TypeSub2SubStartC2Vector(builder, c2Length)
		for j := c2Length - 1; j >= 0; j-- {
			builder.PrependInt32(t.C2[j])
		}
		c2Offset = builder.EndVector(c2Length)
	}
	Sample1TypeSub2SubStart(builder)
	Sample1TypeSub2SubAddC1(builder, c1Offset)
	Sample1TypeSub2SubAddC2(builder, c2Offset)
	return Sample1TypeSub2SubEnd(builder)
}

func (rcv *Sample1TypeSub2Sub) UnPackTo(t *Sample1TypeSub2SubT) {
	t.C1 = rcv.C1(nil).UnPack()
	c2Length := rcv.C2Length()
	t.C2 = make([]int32, c2Length)
	for j := 0; j < c2Length; j++ {
		t.C2[j] = rcv.C2(j)
	}
}

func (rcv *Sample1TypeSub2Sub) UnPack() *Sample1TypeSub2SubT {
	if rcv == nil { return nil }
	t := &Sample1TypeSub2SubT{}
	rcv.UnPackTo(t)
	return t
}

type Sample1TypeSub2Sub struct {
	_tab flatbuffers.Table
}

func GetRootAsSample1TypeSub2Sub(buf []byte, offset flatbuffers.UOffsetT) *Sample1TypeSub2Sub {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Sample1TypeSub2Sub{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSample1TypeSub2Sub(buf []byte, offset flatbuffers.UOffsetT) *Sample1TypeSub2Sub {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Sample1TypeSub2Sub{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Sample1TypeSub2Sub) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Sample1TypeSub2Sub) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Sample1TypeSub2Sub) C1(obj *Sample1TypeSub3Sub) *Sample1TypeSub3Sub {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Sample1TypeSub3Sub)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Sample1TypeSub2Sub) C2(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *Sample1TypeSub2Sub) C2Length() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Sample1TypeSub2Sub) MutateC2(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func Sample1TypeSub2SubStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func Sample1TypeSub2SubAddC1(builder *flatbuffers.Builder, c1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(c1), 0)
}
func Sample1TypeSub2SubAddC2(builder *flatbuffers.Builder, c2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(c2), 0)
}
func Sample1TypeSub2SubStartC2Vector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Sample1TypeSub2SubEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
