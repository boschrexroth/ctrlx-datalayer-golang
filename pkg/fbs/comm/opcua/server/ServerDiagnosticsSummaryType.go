// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package server

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ServerDiagnosticsSummaryTypeT struct {
	CumulatedSessionCount uint32
	CumulatedSubscriptionCount uint32
	CurrentSessonCount uint32
	CurrentSubscriptionCount uint32
	PublishingIntervalCount uint32
	RejectedRequestsCount uint32
	RejectedSessionCount uint32
	SecurityRejectedRequestsCount uint32
	SecurityRejectedSessionCount uint32
	ServerViewCount uint32
	SessionAbortCount uint32
	SessionTimeoutCount uint32
}

func (t *ServerDiagnosticsSummaryTypeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	ServerDiagnosticsSummaryTypeStart(builder)
	ServerDiagnosticsSummaryTypeAddCumulatedSessionCount(builder, t.CumulatedSessionCount)
	ServerDiagnosticsSummaryTypeAddCumulatedSubscriptionCount(builder, t.CumulatedSubscriptionCount)
	ServerDiagnosticsSummaryTypeAddCurrentSessonCount(builder, t.CurrentSessonCount)
	ServerDiagnosticsSummaryTypeAddCurrentSubscriptionCount(builder, t.CurrentSubscriptionCount)
	ServerDiagnosticsSummaryTypeAddPublishingIntervalCount(builder, t.PublishingIntervalCount)
	ServerDiagnosticsSummaryTypeAddRejectedRequestsCount(builder, t.RejectedRequestsCount)
	ServerDiagnosticsSummaryTypeAddRejectedSessionCount(builder, t.RejectedSessionCount)
	ServerDiagnosticsSummaryTypeAddSecurityRejectedRequestsCount(builder, t.SecurityRejectedRequestsCount)
	ServerDiagnosticsSummaryTypeAddSecurityRejectedSessionCount(builder, t.SecurityRejectedSessionCount)
	ServerDiagnosticsSummaryTypeAddServerViewCount(builder, t.ServerViewCount)
	ServerDiagnosticsSummaryTypeAddSessionAbortCount(builder, t.SessionAbortCount)
	ServerDiagnosticsSummaryTypeAddSessionTimeoutCount(builder, t.SessionTimeoutCount)
	return ServerDiagnosticsSummaryTypeEnd(builder)
}

func (rcv *ServerDiagnosticsSummaryType) UnPackTo(t *ServerDiagnosticsSummaryTypeT) {
	t.CumulatedSessionCount = rcv.CumulatedSessionCount()
	t.CumulatedSubscriptionCount = rcv.CumulatedSubscriptionCount()
	t.CurrentSessonCount = rcv.CurrentSessonCount()
	t.CurrentSubscriptionCount = rcv.CurrentSubscriptionCount()
	t.PublishingIntervalCount = rcv.PublishingIntervalCount()
	t.RejectedRequestsCount = rcv.RejectedRequestsCount()
	t.RejectedSessionCount = rcv.RejectedSessionCount()
	t.SecurityRejectedRequestsCount = rcv.SecurityRejectedRequestsCount()
	t.SecurityRejectedSessionCount = rcv.SecurityRejectedSessionCount()
	t.ServerViewCount = rcv.ServerViewCount()
	t.SessionAbortCount = rcv.SessionAbortCount()
	t.SessionTimeoutCount = rcv.SessionTimeoutCount()
}

func (rcv *ServerDiagnosticsSummaryType) UnPack() *ServerDiagnosticsSummaryTypeT {
	if rcv == nil { return nil }
	t := &ServerDiagnosticsSummaryTypeT{}
	rcv.UnPackTo(t)
	return t
}

type ServerDiagnosticsSummaryType struct {
	_tab flatbuffers.Table
}

func GetRootAsServerDiagnosticsSummaryType(buf []byte, offset flatbuffers.UOffsetT) *ServerDiagnosticsSummaryType {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ServerDiagnosticsSummaryType{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsServerDiagnosticsSummaryType(buf []byte, offset flatbuffers.UOffsetT) *ServerDiagnosticsSummaryType {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ServerDiagnosticsSummaryType{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ServerDiagnosticsSummaryType) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ServerDiagnosticsSummaryType) Table() flatbuffers.Table {
	return rcv._tab
}

/// The sum of the created sessions of the OPC UA Server since its start
func (rcv *ServerDiagnosticsSummaryType) CumulatedSessionCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The sum of the created sessions of the OPC UA Server since its start
func (rcv *ServerDiagnosticsSummaryType) MutateCumulatedSessionCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// The sum of the created subscriptions during all sessions of the OPC UA Server since its start
func (rcv *ServerDiagnosticsSummaryType) CumulatedSubscriptionCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The sum of the created subscriptions during all sessions of the OPC UA Server since its start
func (rcv *ServerDiagnosticsSummaryType) MutateCumulatedSubscriptionCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

/// The current number of active sessions of the OPC UA Server
func (rcv *ServerDiagnosticsSummaryType) CurrentSessonCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The current number of active sessions of the OPC UA Server
func (rcv *ServerDiagnosticsSummaryType) MutateCurrentSessonCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

/// The current number of active subscriptions of the OPC UA Server
func (rcv *ServerDiagnosticsSummaryType) CurrentSubscriptionCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The current number of active subscriptions of the OPC UA Server
func (rcv *ServerDiagnosticsSummaryType) MutateCurrentSubscriptionCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

/// The number of the supported publishing intervals of the OPC UA Server
func (rcv *ServerDiagnosticsSummaryType) PublishingIntervalCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of the supported publishing intervals of the OPC UA Server
func (rcv *ServerDiagnosticsSummaryType) MutatePublishingIntervalCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

/// The number of the discarded queries of the OPC UA Server since its start
func (rcv *ServerDiagnosticsSummaryType) RejectedRequestsCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of the discarded queries of the OPC UA Server since its start
func (rcv *ServerDiagnosticsSummaryType) MutateRejectedRequestsCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

/// The number of the discarded sessions of the OPC UA Server since its start
func (rcv *ServerDiagnosticsSummaryType) RejectedSessionCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of the discarded sessions of the OPC UA Server since its start
func (rcv *ServerDiagnosticsSummaryType) MutateRejectedSessionCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

/// The number of discarded service queries of the OPC UA Server since its start
/// that were rejected due to security criteria that were not met
func (rcv *ServerDiagnosticsSummaryType) SecurityRejectedRequestsCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of discarded service queries of the OPC UA Server since its start
/// that were rejected due to security criteria that were not met
func (rcv *ServerDiagnosticsSummaryType) MutateSecurityRejectedRequestsCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

/// The number of discarded sessions (service queries) of the OPC UA Server since its start
/// that were rejected due to security criteria that were not met
func (rcv *ServerDiagnosticsSummaryType) SecurityRejectedSessionCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of discarded sessions (service queries) of the OPC UA Server since its start
/// that were rejected due to security criteria that were not met
func (rcv *ServerDiagnosticsSummaryType) MutateSecurityRejectedSessionCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(20, n)
}

/// The number of views available in the OPC UA Server
func (rcv *ServerDiagnosticsSummaryType) ServerViewCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of views available in the OPC UA Server
func (rcv *ServerDiagnosticsSummaryType) MutateServerViewCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(22, n)
}

/// The number of the error-caused ended sessions of the OPC UA Server since its start
func (rcv *ServerDiagnosticsSummaryType) SessionAbortCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of the error-caused ended sessions of the OPC UA Server since its start
func (rcv *ServerDiagnosticsSummaryType) MutateSessionAbortCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(24, n)
}

/// The number of the timeout-caused ended sessions of the OPC UA Server since its start
func (rcv *ServerDiagnosticsSummaryType) SessionTimeoutCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of the timeout-caused ended sessions of the OPC UA Server since its start
func (rcv *ServerDiagnosticsSummaryType) MutateSessionTimeoutCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(26, n)
}

func ServerDiagnosticsSummaryTypeStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func ServerDiagnosticsSummaryTypeAddCumulatedSessionCount(builder *flatbuffers.Builder, cumulatedSessionCount uint32) {
	builder.PrependUint32Slot(0, cumulatedSessionCount, 0)
}
func ServerDiagnosticsSummaryTypeAddCumulatedSubscriptionCount(builder *flatbuffers.Builder, cumulatedSubscriptionCount uint32) {
	builder.PrependUint32Slot(1, cumulatedSubscriptionCount, 0)
}
func ServerDiagnosticsSummaryTypeAddCurrentSessonCount(builder *flatbuffers.Builder, currentSessonCount uint32) {
	builder.PrependUint32Slot(2, currentSessonCount, 0)
}
func ServerDiagnosticsSummaryTypeAddCurrentSubscriptionCount(builder *flatbuffers.Builder, currentSubscriptionCount uint32) {
	builder.PrependUint32Slot(3, currentSubscriptionCount, 0)
}
func ServerDiagnosticsSummaryTypeAddPublishingIntervalCount(builder *flatbuffers.Builder, publishingIntervalCount uint32) {
	builder.PrependUint32Slot(4, publishingIntervalCount, 0)
}
func ServerDiagnosticsSummaryTypeAddRejectedRequestsCount(builder *flatbuffers.Builder, rejectedRequestsCount uint32) {
	builder.PrependUint32Slot(5, rejectedRequestsCount, 0)
}
func ServerDiagnosticsSummaryTypeAddRejectedSessionCount(builder *flatbuffers.Builder, rejectedSessionCount uint32) {
	builder.PrependUint32Slot(6, rejectedSessionCount, 0)
}
func ServerDiagnosticsSummaryTypeAddSecurityRejectedRequestsCount(builder *flatbuffers.Builder, securityRejectedRequestsCount uint32) {
	builder.PrependUint32Slot(7, securityRejectedRequestsCount, 0)
}
func ServerDiagnosticsSummaryTypeAddSecurityRejectedSessionCount(builder *flatbuffers.Builder, securityRejectedSessionCount uint32) {
	builder.PrependUint32Slot(8, securityRejectedSessionCount, 0)
}
func ServerDiagnosticsSummaryTypeAddServerViewCount(builder *flatbuffers.Builder, serverViewCount uint32) {
	builder.PrependUint32Slot(9, serverViewCount, 0)
}
func ServerDiagnosticsSummaryTypeAddSessionAbortCount(builder *flatbuffers.Builder, sessionAbortCount uint32) {
	builder.PrependUint32Slot(10, sessionAbortCount, 0)
}
func ServerDiagnosticsSummaryTypeAddSessionTimeoutCount(builder *flatbuffers.Builder, sessionTimeoutCount uint32) {
	builder.PrependUint32Slot(11, sessionTimeoutCount, 0)
}
func ServerDiagnosticsSummaryTypeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
