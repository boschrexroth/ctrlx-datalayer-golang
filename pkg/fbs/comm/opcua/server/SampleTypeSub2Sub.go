// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package server

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SampleTypeSub2Sub struct {
	_tab flatbuffers.Table
}

func GetRootAsSampleTypeSub2Sub(buf []byte, offset flatbuffers.UOffsetT) *SampleTypeSub2Sub {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SampleTypeSub2Sub{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSampleTypeSub2Sub(buf []byte, offset flatbuffers.UOffsetT) *SampleTypeSub2Sub {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SampleTypeSub2Sub{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SampleTypeSub2Sub) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SampleTypeSub2Sub) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SampleTypeSub2Sub) AValueBool() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SampleTypeSub2Sub) MutateAValueBool(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *SampleTypeSub2Sub) AValueBoolArray(j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetBool(a + flatbuffers.UOffsetT(j*1))
	}
	return false
}

func (rcv *SampleTypeSub2Sub) AValueBoolArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) MutateAValueBoolArray(j int, n bool) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateBool(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *SampleTypeSub2Sub) BValueShort() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) MutateBValueShort(n int16) bool {
	return rcv._tab.MutateInt16Slot(8, n)
}

func (rcv *SampleTypeSub2Sub) BValueShortArray(j int) int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) BValueShortArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) MutateBValueShortArray(j int, n int16) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt16(a+flatbuffers.UOffsetT(j*2), n)
	}
	return false
}

func (rcv *SampleTypeSub2Sub) CValueUshort() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) MutateCValueUshort(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func (rcv *SampleTypeSub2Sub) CValueUshortArray(j int) uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) CValueUshortArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) MutateCValueUshortArray(j int, n uint16) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint16(a+flatbuffers.UOffsetT(j*2), n)
	}
	return false
}

func (rcv *SampleTypeSub2Sub) DValueInt() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) MutateDValueInt(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *SampleTypeSub2Sub) DValueIntArray(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) DValueIntArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) MutateDValueIntArray(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *SampleTypeSub2Sub) EValueUint() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) MutateEValueUint(n uint32) bool {
	return rcv._tab.MutateUint32Slot(20, n)
}

func (rcv *SampleTypeSub2Sub) EValueUintArray(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) EValueUintArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) MutateEValueUintArray(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *SampleTypeSub2Sub) FValueFloat() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *SampleTypeSub2Sub) MutateFValueFloat(n float32) bool {
	return rcv._tab.MutateFloat32Slot(24, n)
}

func (rcv *SampleTypeSub2Sub) FValueFloatArray(j int) float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) FValueFloatArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) MutateFValueFloatArray(j int, n float32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *SampleTypeSub2Sub) GValueLong() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) MutateGValueLong(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *SampleTypeSub2Sub) GValueLongArray(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) GValueLongArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) MutateGValueLongArray(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *SampleTypeSub2Sub) HValueUlong() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) MutateHValueUlong(n uint64) bool {
	return rcv._tab.MutateUint64Slot(32, n)
}

func (rcv *SampleTypeSub2Sub) HValueUlongArray(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) HValueUlongArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) MutateHValueUlongArray(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *SampleTypeSub2Sub) IValueDouble() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *SampleTypeSub2Sub) MutateIValueDouble(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

func (rcv *SampleTypeSub2Sub) IValueDoubleArray(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) IValueDoubleArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleTypeSub2Sub) MutateIValueDoubleArray(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *SampleTypeSub2Sub) JValueString() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SampleTypeSub2Sub) JValueStringArray(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SampleTypeSub2Sub) JValueStringArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func SampleTypeSub2SubStart(builder *flatbuffers.Builder) {
	builder.StartObject(20)
}
func SampleTypeSub2SubAddAValueBool(builder *flatbuffers.Builder, aValueBool bool) {
	builder.PrependBoolSlot(0, aValueBool, false)
}
func SampleTypeSub2SubAddAValueBoolArray(builder *flatbuffers.Builder, aValueBoolArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(aValueBoolArray), 0)
}
func SampleTypeSub2SubStartAValueBoolArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func SampleTypeSub2SubAddBValueShort(builder *flatbuffers.Builder, bValueShort int16) {
	builder.PrependInt16Slot(2, bValueShort, 0)
}
func SampleTypeSub2SubAddBValueShortArray(builder *flatbuffers.Builder, bValueShortArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(bValueShortArray), 0)
}
func SampleTypeSub2SubStartBValueShortArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func SampleTypeSub2SubAddCValueUshort(builder *flatbuffers.Builder, cValueUshort uint16) {
	builder.PrependUint16Slot(4, cValueUshort, 0)
}
func SampleTypeSub2SubAddCValueUshortArray(builder *flatbuffers.Builder, cValueUshortArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(cValueUshortArray), 0)
}
func SampleTypeSub2SubStartCValueUshortArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func SampleTypeSub2SubAddDValueInt(builder *flatbuffers.Builder, dValueInt int32) {
	builder.PrependInt32Slot(6, dValueInt, 0)
}
func SampleTypeSub2SubAddDValueIntArray(builder *flatbuffers.Builder, dValueIntArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(dValueIntArray), 0)
}
func SampleTypeSub2SubStartDValueIntArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SampleTypeSub2SubAddEValueUint(builder *flatbuffers.Builder, eValueUint uint32) {
	builder.PrependUint32Slot(8, eValueUint, 0)
}
func SampleTypeSub2SubAddEValueUintArray(builder *flatbuffers.Builder, eValueUintArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(eValueUintArray), 0)
}
func SampleTypeSub2SubStartEValueUintArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SampleTypeSub2SubAddFValueFloat(builder *flatbuffers.Builder, fValueFloat float32) {
	builder.PrependFloat32Slot(10, fValueFloat, 0.0)
}
func SampleTypeSub2SubAddFValueFloatArray(builder *flatbuffers.Builder, fValueFloatArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(fValueFloatArray), 0)
}
func SampleTypeSub2SubStartFValueFloatArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SampleTypeSub2SubAddGValueLong(builder *flatbuffers.Builder, gValueLong int64) {
	builder.PrependInt64Slot(12, gValueLong, 0)
}
func SampleTypeSub2SubAddGValueLongArray(builder *flatbuffers.Builder, gValueLongArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(gValueLongArray), 0)
}
func SampleTypeSub2SubStartGValueLongArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SampleTypeSub2SubAddHValueUlong(builder *flatbuffers.Builder, hValueUlong uint64) {
	builder.PrependUint64Slot(14, hValueUlong, 0)
}
func SampleTypeSub2SubAddHValueUlongArray(builder *flatbuffers.Builder, hValueUlongArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(hValueUlongArray), 0)
}
func SampleTypeSub2SubStartHValueUlongArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SampleTypeSub2SubAddIValueDouble(builder *flatbuffers.Builder, iValueDouble float64) {
	builder.PrependFloat64Slot(16, iValueDouble, 0.0)
}
func SampleTypeSub2SubAddIValueDoubleArray(builder *flatbuffers.Builder, iValueDoubleArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(iValueDoubleArray), 0)
}
func SampleTypeSub2SubStartIValueDoubleArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SampleTypeSub2SubAddJValueString(builder *flatbuffers.Builder, jValueString flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(jValueString), 0)
}
func SampleTypeSub2SubAddJValueStringArray(builder *flatbuffers.Builder, jValueStringArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(jValueStringArray), 0)
}
func SampleTypeSub2SubStartJValueStringArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SampleTypeSub2SubEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
