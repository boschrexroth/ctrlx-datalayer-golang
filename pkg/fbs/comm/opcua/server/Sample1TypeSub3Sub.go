// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package server

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Sample1TypeSub3Sub struct {
	_tab flatbuffers.Table
}

func GetRootAsSample1TypeSub3Sub(buf []byte, offset flatbuffers.UOffsetT) *Sample1TypeSub3Sub {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Sample1TypeSub3Sub{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSample1TypeSub3Sub(buf []byte, offset flatbuffers.UOffsetT) *Sample1TypeSub3Sub {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Sample1TypeSub3Sub{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Sample1TypeSub3Sub) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Sample1TypeSub3Sub) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Sample1TypeSub3Sub) D1() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Sample1TypeSub3Sub) MutateD1(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Sample1TypeSub3Sub) D2(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *Sample1TypeSub3Sub) D2Length() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Sample1TypeSub3Sub) MutateD2(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func Sample1TypeSub3SubStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func Sample1TypeSub3SubAddD1(builder *flatbuffers.Builder, d1 int32) {
	builder.PrependInt32Slot(0, d1, 0)
}
func Sample1TypeSub3SubAddD2(builder *flatbuffers.Builder, d2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(d2), 0)
}
func Sample1TypeSub3SubStartD2Vector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Sample1TypeSub3SubEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
