// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package server

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Companion model mapping description
type CompanionTypeT struct {
	Name string `json:"name"`
	TypeSafety bool `json:"typeSafety"`
	Mapping []*CompanionKeyValueTypeT `json:"mapping"`
}

func (t *CompanionTypeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	mappingOffset := flatbuffers.UOffsetT(0)
	if t.Mapping != nil {
		mappingLength := len(t.Mapping)
		mappingOffsets := make([]flatbuffers.UOffsetT, mappingLength)
		for j := 0; j < mappingLength; j++ {
			mappingOffsets[j] = t.Mapping[j].Pack(builder)
		}
		CompanionTypeStartMappingVector(builder, mappingLength)
		for j := mappingLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(mappingOffsets[j])
		}
		mappingOffset = builder.EndVector(mappingLength)
	}
	CompanionTypeStart(builder)
	CompanionTypeAddName(builder, nameOffset)
	CompanionTypeAddTypeSafety(builder, t.TypeSafety)
	CompanionTypeAddMapping(builder, mappingOffset)
	return CompanionTypeEnd(builder)
}

func (rcv *CompanionType) UnPackTo(t *CompanionTypeT) {
	t.Name = string(rcv.Name())
	t.TypeSafety = rcv.TypeSafety()
	mappingLength := rcv.MappingLength()
	t.Mapping = make([]*CompanionKeyValueTypeT, mappingLength)
	for j := 0; j < mappingLength; j++ {
		x := CompanionKeyValueType{}
		rcv.Mapping(&x, j)
		t.Mapping[j] = x.UnPack()
	}
}

func (rcv *CompanionType) UnPack() *CompanionTypeT {
	if rcv == nil { return nil }
	t := &CompanionTypeT{}
	rcv.UnPackTo(t)
	return t
}

type CompanionType struct {
	_tab flatbuffers.Table
}

func GetRootAsCompanionType(buf []byte, offset flatbuffers.UOffsetT) *CompanionType {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CompanionType{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCompanionType(buf []byte, offset flatbuffers.UOffsetT) *CompanionType {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CompanionType{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CompanionType) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CompanionType) Table() flatbuffers.Table {
	return rcv._tab
}

/// Name of the companion model
func (rcv *CompanionType) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the companion model
/// Check if source and target have same datatype
func (rcv *CompanionType) TypeSafety() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// Check if source and target have same datatype
func (rcv *CompanionType) MutateTypeSafety(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

/// Mapping of the nodes
func (rcv *CompanionType) Mapping(obj *CompanionKeyValueType, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *CompanionType) MappingLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Mapping of the nodes
func CompanionTypeStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func CompanionTypeAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func CompanionTypeAddTypeSafety(builder *flatbuffers.Builder, typeSafety bool) {
	builder.PrependBoolSlot(1, typeSafety, true)
}
func CompanionTypeAddMapping(builder *flatbuffers.Builder, mapping flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(mapping), 0)
}
func CompanionTypeStartMappingVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CompanionTypeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
