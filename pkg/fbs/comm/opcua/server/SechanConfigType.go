// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package server

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SechanConfigType struct {
	_tab flatbuffers.Table
}

func GetRootAsSechanConfigType(buf []byte, offset flatbuffers.UOffsetT) *SechanConfigType {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SechanConfigType{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSechanConfigType(buf []byte, offset flatbuffers.UOffsetT) *SechanConfigType {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SechanConfigType{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SechanConfigType) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SechanConfigType) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SechanConfigType) PolicyId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SechanConfigType) MutatePolicyId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *SechanConfigType) ModeNone() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SechanConfigType) MutateModeNone(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *SechanConfigType) ModeSign() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SechanConfigType) MutateModeSign(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *SechanConfigType) ModeSignAndEncrypt() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SechanConfigType) MutateModeSignAndEncrypt(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func SechanConfigTypeStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SechanConfigTypeAddPolicyId(builder *flatbuffers.Builder, policyId uint32) {
	builder.PrependUint32Slot(0, policyId, 0)
}
func SechanConfigTypeAddModeNone(builder *flatbuffers.Builder, modeNone bool) {
	builder.PrependBoolSlot(1, modeNone, false)
}
func SechanConfigTypeAddModeSign(builder *flatbuffers.Builder, modeSign bool) {
	builder.PrependBoolSlot(2, modeSign, false)
}
func SechanConfigTypeAddModeSignAndEncrypt(builder *flatbuffers.Builder, modeSignAndEncrypt bool) {
	builder.PrependBoolSlot(3, modeSignAndEncrypt, false)
}
func SechanConfigTypeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
