// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package server

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SampleTypeSub2 struct {
	_tab flatbuffers.Table
}

func GetRootAsSampleTypeSub2(buf []byte, offset flatbuffers.UOffsetT) *SampleTypeSub2 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SampleTypeSub2{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSampleTypeSub2(buf []byte, offset flatbuffers.UOffsetT) *SampleTypeSub2 {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SampleTypeSub2{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SampleTypeSub2) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SampleTypeSub2) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SampleTypeSub2) SimpleData() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SampleTypeSub2) SimpleData2() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SampleTypeSub2) MutateSimpleData2(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *SampleTypeSub2) SubStruct(obj *SampleTypeSub2Sub) *SampleTypeSub2Sub {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(SampleTypeSub2Sub)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func SampleTypeSub2Start(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SampleTypeSub2AddSimpleData(builder *flatbuffers.Builder, simpleData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(simpleData), 0)
}
func SampleTypeSub2AddSimpleData2(builder *flatbuffers.Builder, simpleData2 uint32) {
	builder.PrependUint32Slot(1, simpleData2, 0)
}
func SampleTypeSub2AddSubStruct(builder *flatbuffers.Builder, subStruct flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(subStruct), 0)
}
func SampleTypeSub2End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
