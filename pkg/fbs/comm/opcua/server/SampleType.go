// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package server

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SampleType struct {
	_tab flatbuffers.Table
}

func GetRootAsSampleType(buf []byte, offset flatbuffers.UOffsetT) *SampleType {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SampleType{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSampleType(buf []byte, offset flatbuffers.UOffsetT) *SampleType {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SampleType{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SampleType) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SampleType) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SampleType) AValueBool() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SampleType) MutateAValueBool(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *SampleType) AValueBoolArray(j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetBool(a + flatbuffers.UOffsetT(j*1))
	}
	return false
}

func (rcv *SampleType) AValueBoolArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleType) MutateAValueBoolArray(j int, n bool) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateBool(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *SampleType) BValueShort() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SampleType) MutateBValueShort(n int16) bool {
	return rcv._tab.MutateInt16Slot(8, n)
}

func (rcv *SampleType) BValueShortArray(j int) int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *SampleType) BValueShortArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleType) MutateBValueShortArray(j int, n int16) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt16(a+flatbuffers.UOffsetT(j*2), n)
	}
	return false
}

func (rcv *SampleType) CValueUshort() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SampleType) MutateCValueUshort(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func (rcv *SampleType) CValueUshortArray(j int) uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *SampleType) CValueUshortArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleType) MutateCValueUshortArray(j int, n uint16) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint16(a+flatbuffers.UOffsetT(j*2), n)
	}
	return false
}

func (rcv *SampleType) DValueInt() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SampleType) MutateDValueInt(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *SampleType) DValueIntArray(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *SampleType) DValueIntArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleType) MutateDValueIntArray(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *SampleType) EValueUint() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SampleType) MutateEValueUint(n uint32) bool {
	return rcv._tab.MutateUint32Slot(20, n)
}

func (rcv *SampleType) EValueUintArray(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *SampleType) EValueUintArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleType) MutateEValueUintArray(j int, n uint32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *SampleType) FValueFloat() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *SampleType) MutateFValueFloat(n float32) bool {
	return rcv._tab.MutateFloat32Slot(24, n)
}

func (rcv *SampleType) FValueFloatArray(j int) float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *SampleType) FValueFloatArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleType) MutateFValueFloatArray(j int, n float32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *SampleType) GValueLong() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SampleType) MutateGValueLong(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *SampleType) GValueLongArray(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SampleType) GValueLongArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleType) MutateGValueLongArray(j int, n int64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *SampleType) HValueUlong() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SampleType) MutateHValueUlong(n uint64) bool {
	return rcv._tab.MutateUint64Slot(32, n)
}

func (rcv *SampleType) HValueUlongArray(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SampleType) HValueUlongArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleType) MutateHValueUlongArray(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *SampleType) IValueDouble() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *SampleType) MutateIValueDouble(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

func (rcv *SampleType) IValueDoubleArray(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SampleType) IValueDoubleArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SampleType) MutateIValueDoubleArray(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *SampleType) JValueString() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SampleType) JValueStringArray(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SampleType) JValueStringArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func SampleTypeStart(builder *flatbuffers.Builder) {
	builder.StartObject(20)
}
func SampleTypeAddAValueBool(builder *flatbuffers.Builder, aValueBool bool) {
	builder.PrependBoolSlot(0, aValueBool, false)
}
func SampleTypeAddAValueBoolArray(builder *flatbuffers.Builder, aValueBoolArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(aValueBoolArray), 0)
}
func SampleTypeStartAValueBoolArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func SampleTypeAddBValueShort(builder *flatbuffers.Builder, bValueShort int16) {
	builder.PrependInt16Slot(2, bValueShort, 0)
}
func SampleTypeAddBValueShortArray(builder *flatbuffers.Builder, bValueShortArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(bValueShortArray), 0)
}
func SampleTypeStartBValueShortArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func SampleTypeAddCValueUshort(builder *flatbuffers.Builder, cValueUshort uint16) {
	builder.PrependUint16Slot(4, cValueUshort, 0)
}
func SampleTypeAddCValueUshortArray(builder *flatbuffers.Builder, cValueUshortArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(cValueUshortArray), 0)
}
func SampleTypeStartCValueUshortArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func SampleTypeAddDValueInt(builder *flatbuffers.Builder, dValueInt int32) {
	builder.PrependInt32Slot(6, dValueInt, 0)
}
func SampleTypeAddDValueIntArray(builder *flatbuffers.Builder, dValueIntArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(dValueIntArray), 0)
}
func SampleTypeStartDValueIntArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SampleTypeAddEValueUint(builder *flatbuffers.Builder, eValueUint uint32) {
	builder.PrependUint32Slot(8, eValueUint, 0)
}
func SampleTypeAddEValueUintArray(builder *flatbuffers.Builder, eValueUintArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(eValueUintArray), 0)
}
func SampleTypeStartEValueUintArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SampleTypeAddFValueFloat(builder *flatbuffers.Builder, fValueFloat float32) {
	builder.PrependFloat32Slot(10, fValueFloat, 0.0)
}
func SampleTypeAddFValueFloatArray(builder *flatbuffers.Builder, fValueFloatArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(fValueFloatArray), 0)
}
func SampleTypeStartFValueFloatArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SampleTypeAddGValueLong(builder *flatbuffers.Builder, gValueLong int64) {
	builder.PrependInt64Slot(12, gValueLong, 0)
}
func SampleTypeAddGValueLongArray(builder *flatbuffers.Builder, gValueLongArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(gValueLongArray), 0)
}
func SampleTypeStartGValueLongArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SampleTypeAddHValueUlong(builder *flatbuffers.Builder, hValueUlong uint64) {
	builder.PrependUint64Slot(14, hValueUlong, 0)
}
func SampleTypeAddHValueUlongArray(builder *flatbuffers.Builder, hValueUlongArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(hValueUlongArray), 0)
}
func SampleTypeStartHValueUlongArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SampleTypeAddIValueDouble(builder *flatbuffers.Builder, iValueDouble float64) {
	builder.PrependFloat64Slot(16, iValueDouble, 0.0)
}
func SampleTypeAddIValueDoubleArray(builder *flatbuffers.Builder, iValueDoubleArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(iValueDoubleArray), 0)
}
func SampleTypeStartIValueDoubleArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SampleTypeAddJValueString(builder *flatbuffers.Builder, jValueString flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(jValueString), 0)
}
func SampleTypeAddJValueStringArray(builder *flatbuffers.Builder, jValueStringArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(jValueStringArray), 0)
}
func SampleTypeStartJValueStringArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SampleTypeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
