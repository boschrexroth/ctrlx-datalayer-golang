// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package companion

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Mapping of one sourceUaNodeId to targetUaNodeId
type NodeIdMappingT struct {
	SourceUaNodeId string `json:"sourceUaNodeId"`
	TargetUaNodeId string `json:"targetUaNodeId"`
	MappingResult []MappingResult `json:"mappingResult"`
}

func (t *NodeIdMappingT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	sourceUaNodeIdOffset := flatbuffers.UOffsetT(0)
	if t.SourceUaNodeId != "" {
		sourceUaNodeIdOffset = builder.CreateString(t.SourceUaNodeId)
	}
	targetUaNodeIdOffset := flatbuffers.UOffsetT(0)
	if t.TargetUaNodeId != "" {
		targetUaNodeIdOffset = builder.CreateString(t.TargetUaNodeId)
	}
	mappingResultOffset := flatbuffers.UOffsetT(0)
	if t.MappingResult != nil {
		mappingResultLength := len(t.MappingResult)
		NodeIdMappingStartMappingResultVector(builder, mappingResultLength)
		for j := mappingResultLength - 1; j >= 0; j-- {
			builder.PrependInt8(int8(t.MappingResult[j]))
		}
		mappingResultOffset = builder.EndVector(mappingResultLength)
	}
	NodeIdMappingStart(builder)
	NodeIdMappingAddSourceUaNodeId(builder, sourceUaNodeIdOffset)
	NodeIdMappingAddTargetUaNodeId(builder, targetUaNodeIdOffset)
	NodeIdMappingAddMappingResult(builder, mappingResultOffset)
	return NodeIdMappingEnd(builder)
}

func (rcv *NodeIdMapping) UnPackTo(t *NodeIdMappingT) {
	t.SourceUaNodeId = string(rcv.SourceUaNodeId())
	t.TargetUaNodeId = string(rcv.TargetUaNodeId())
	mappingResultLength := rcv.MappingResultLength()
	t.MappingResult = make([]MappingResult, mappingResultLength)
	for j := 0; j < mappingResultLength; j++ {
		t.MappingResult[j] = rcv.MappingResult(j)
	}
}

func (rcv *NodeIdMapping) UnPack() *NodeIdMappingT {
	if rcv == nil { return nil }
	t := &NodeIdMappingT{}
	rcv.UnPackTo(t)
	return t
}

type NodeIdMapping struct {
	_tab flatbuffers.Table
}

func GetRootAsNodeIdMapping(buf []byte, offset flatbuffers.UOffsetT) *NodeIdMapping {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NodeIdMapping{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsNodeIdMapping(buf []byte, offset flatbuffers.UOffsetT) *NodeIdMapping {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NodeIdMapping{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *NodeIdMapping) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NodeIdMapping) Table() flatbuffers.Table {
	return rcv._tab
}

/// The original OPC UA NodeId which will be mapped into the OPC UA companion model, e.g. ns=2;s=plc/app/Appl/...
func (rcv *NodeIdMapping) SourceUaNodeId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The original OPC UA NodeId which will be mapped into the OPC UA companion model, e.g. ns=2;s=plc/app/Appl/...
/// The target OPC UA NodeId in the companion model, e.g. ns=20;s=myModel.myPlcNode
func (rcv *NodeIdMapping) TargetUaNodeId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The target OPC UA NodeId in the companion model, e.g. ns=20;s=myModel.myPlcNode
/// Verification of the mapping, used as output parameter
func (rcv *NodeIdMapping) MappingResult(j int) MappingResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return MappingResult(rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1)))
	}
	return 0
}

func (rcv *NodeIdMapping) MappingResultLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Verification of the mapping, used as output parameter
func (rcv *NodeIdMapping) MutateMappingResult(j int, n MappingResult) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), int8(n))
	}
	return false
}

func NodeIdMappingStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func NodeIdMappingAddSourceUaNodeId(builder *flatbuffers.Builder, sourceUaNodeId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(sourceUaNodeId), 0)
}
func NodeIdMappingAddTargetUaNodeId(builder *flatbuffers.Builder, targetUaNodeId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(targetUaNodeId), 0)
}
func NodeIdMappingAddMappingResult(builder *flatbuffers.Builder, mappingResult flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(mappingResult), 0)
}
func NodeIdMappingStartMappingResultVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func NodeIdMappingEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
