// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package server

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SecConfigTypeT struct {
	PolicyId uint32
	ModeNone bool
	ModeSign bool
	ModeSignAndEncrypt bool
}

func (t *SecConfigTypeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	SecConfigTypeStart(builder)
	SecConfigTypeAddPolicyId(builder, t.PolicyId)
	SecConfigTypeAddModeNone(builder, t.ModeNone)
	SecConfigTypeAddModeSign(builder, t.ModeSign)
	SecConfigTypeAddModeSignAndEncrypt(builder, t.ModeSignAndEncrypt)
	return SecConfigTypeEnd(builder)
}

func (rcv *SecConfigType) UnPackTo(t *SecConfigTypeT) {
	t.PolicyId = rcv.PolicyId()
	t.ModeNone = rcv.ModeNone()
	t.ModeSign = rcv.ModeSign()
	t.ModeSignAndEncrypt = rcv.ModeSignAndEncrypt()
}

func (rcv *SecConfigType) UnPack() *SecConfigTypeT {
	if rcv == nil { return nil }
	t := &SecConfigTypeT{}
	rcv.UnPackTo(t)
	return t
}

type SecConfigType struct {
	_tab flatbuffers.Table
}

func GetRootAsSecConfigType(buf []byte, offset flatbuffers.UOffsetT) *SecConfigType {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SecConfigType{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSecConfigType(buf []byte, offset flatbuffers.UOffsetT) *SecConfigType {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SecConfigType{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SecConfigType) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SecConfigType) Table() flatbuffers.Table {
	return rcv._tab
}

/// Identifier of the policy to use
/// UA_SECURITY_POLICY_NONE = 0,
/// UA_SECURITY_POLICY_BASIC128RSA15 = 1,
/// UA_SECURITY_POLICY_BASIC256 = 2,
/// UA_SECURITY_POLICY_BASIC256SHA256 = 3,
/// UA_SECURITY_POLICY_AES128_SHA256_RSAOAEP = 4,
/// UA_SECURITY_POLICY_AES256_SHA256_RSAPSS = 5,
/// UA_SECURITY_POLICY_ID_MAX = 6
func (rcv *SecConfigType) PolicyId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Identifier of the policy to use
/// UA_SECURITY_POLICY_NONE = 0,
/// UA_SECURITY_POLICY_BASIC128RSA15 = 1,
/// UA_SECURITY_POLICY_BASIC256 = 2,
/// UA_SECURITY_POLICY_BASIC256SHA256 = 3,
/// UA_SECURITY_POLICY_AES128_SHA256_RSAOAEP = 4,
/// UA_SECURITY_POLICY_AES256_SHA256_RSAPSS = 5,
/// UA_SECURITY_POLICY_ID_MAX = 6
func (rcv *SecConfigType) MutatePolicyId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// True if message security mode none is allowed
func (rcv *SecConfigType) ModeNone() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// True if message security mode none is allowed
func (rcv *SecConfigType) MutateModeNone(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

/// True if message security mode sign is allowed
func (rcv *SecConfigType) ModeSign() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// True if message security mode sign is allowed
func (rcv *SecConfigType) MutateModeSign(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

/// True if message security mode sign and encrypt is allowed
func (rcv *SecConfigType) ModeSignAndEncrypt() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// True if message security mode sign and encrypt is allowed
func (rcv *SecConfigType) MutateModeSignAndEncrypt(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func SecConfigTypeStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SecConfigTypeAddPolicyId(builder *flatbuffers.Builder, policyId uint32) {
	builder.PrependUint32Slot(0, policyId, 0)
}
func SecConfigTypeAddModeNone(builder *flatbuffers.Builder, modeNone bool) {
	builder.PrependBoolSlot(1, modeNone, false)
}
func SecConfigTypeAddModeSign(builder *flatbuffers.Builder, modeSign bool) {
	builder.PrependBoolSlot(2, modeSign, false)
}
func SecConfigTypeAddModeSignAndEncrypt(builder *flatbuffers.Builder, modeSignAndEncrypt bool) {
	builder.PrependBoolSlot(3, modeSignAndEncrypt, false)
}
func SecConfigTypeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
