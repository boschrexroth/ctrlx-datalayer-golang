// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package server

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UserTokenTypeT struct {
	Type uint32
	PolicyId uint32
}

func (t *UserTokenTypeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	UserTokenTypeStart(builder)
	UserTokenTypeAddType(builder, t.Type)
	UserTokenTypeAddPolicyId(builder, t.PolicyId)
	return UserTokenTypeEnd(builder)
}

func (rcv *UserTokenType) UnPackTo(t *UserTokenTypeT) {
	t.Type = rcv.Type()
	t.PolicyId = rcv.PolicyId()
}

func (rcv *UserTokenType) UnPack() *UserTokenTypeT {
	if rcv == nil { return nil }
	t := &UserTokenTypeT{}
	rcv.UnPackTo(t)
	return t
}

type UserTokenType struct {
	_tab flatbuffers.Table
}

func GetRootAsUserTokenType(buf []byte, offset flatbuffers.UOffsetT) *UserTokenType {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UserTokenType{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsUserTokenType(buf []byte, offset flatbuffers.UOffsetT) *UserTokenType {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UserTokenType{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *UserTokenType) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UserTokenType) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UserTokenType) Type() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UserTokenType) MutateType(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *UserTokenType) PolicyId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UserTokenType) MutatePolicyId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func UserTokenTypeStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func UserTokenTypeAddType(builder *flatbuffers.Builder, type_ uint32) {
	builder.PrependUint32Slot(0, type_, 0)
}
func UserTokenTypeAddPolicyId(builder *flatbuffers.Builder, policyId uint32) {
	builder.PrependUint32Slot(1, policyId, 0)
}
func UserTokenTypeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
