// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package server

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Sample1TypeMainT struct {
	A1 string
	A2 uint32
	A3 *Sample1TypeSub1SubT
	A4 []*Sample1TypeSub1SubT
	A5 uint32
	A6 *Sample1TypeSub2SubT
}

func (t *Sample1TypeMainT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	a1Offset := builder.CreateString(t.A1)
	a3Offset := t.A3.Pack(builder)
	a4Offset := flatbuffers.UOffsetT(0)
	if t.A4 != nil {
		a4Length := len(t.A4)
		a4Offsets := make([]flatbuffers.UOffsetT, a4Length)
		for j := 0; j < a4Length; j++ {
			a4Offsets[j] = t.A4[j].Pack(builder)
		}
		Sample1TypeMainStartA4Vector(builder, a4Length)
		for j := a4Length - 1; j >= 0; j-- {
			builder.PrependUOffsetT(a4Offsets[j])
		}
		a4Offset = builder.EndVector(a4Length)
	}
	a6Offset := t.A6.Pack(builder)
	Sample1TypeMainStart(builder)
	Sample1TypeMainAddA1(builder, a1Offset)
	Sample1TypeMainAddA2(builder, t.A2)
	Sample1TypeMainAddA3(builder, a3Offset)
	Sample1TypeMainAddA4(builder, a4Offset)
	Sample1TypeMainAddA5(builder, t.A5)
	Sample1TypeMainAddA6(builder, a6Offset)
	return Sample1TypeMainEnd(builder)
}

func (rcv *Sample1TypeMain) UnPackTo(t *Sample1TypeMainT) {
	t.A1 = string(rcv.A1())
	t.A2 = rcv.A2()
	t.A3 = rcv.A3(nil).UnPack()
	a4Length := rcv.A4Length()
	t.A4 = make([]*Sample1TypeSub1SubT, a4Length)
	for j := 0; j < a4Length; j++ {
		x := Sample1TypeSub1Sub{}
		rcv.A4(&x, j)
		t.A4[j] = x.UnPack()
	}
	t.A5 = rcv.A5()
	t.A6 = rcv.A6(nil).UnPack()
}

func (rcv *Sample1TypeMain) UnPack() *Sample1TypeMainT {
	if rcv == nil { return nil }
	t := &Sample1TypeMainT{}
	rcv.UnPackTo(t)
	return t
}

type Sample1TypeMain struct {
	_tab flatbuffers.Table
}

func GetRootAsSample1TypeMain(buf []byte, offset flatbuffers.UOffsetT) *Sample1TypeMain {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Sample1TypeMain{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSample1TypeMain(buf []byte, offset flatbuffers.UOffsetT) *Sample1TypeMain {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Sample1TypeMain{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Sample1TypeMain) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Sample1TypeMain) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Sample1TypeMain) A1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Sample1TypeMain) A2() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Sample1TypeMain) MutateA2(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *Sample1TypeMain) A3(obj *Sample1TypeSub1Sub) *Sample1TypeSub1Sub {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Sample1TypeSub1Sub)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Sample1TypeMain) A4(obj *Sample1TypeSub1Sub, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Sample1TypeMain) A4Length() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Sample1TypeMain) A5() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Sample1TypeMain) MutateA5(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *Sample1TypeMain) A6(obj *Sample1TypeSub2Sub) *Sample1TypeSub2Sub {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Sample1TypeSub2Sub)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func Sample1TypeMainStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func Sample1TypeMainAddA1(builder *flatbuffers.Builder, a1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(a1), 0)
}
func Sample1TypeMainAddA2(builder *flatbuffers.Builder, a2 uint32) {
	builder.PrependUint32Slot(1, a2, 0)
}
func Sample1TypeMainAddA3(builder *flatbuffers.Builder, a3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(a3), 0)
}
func Sample1TypeMainAddA4(builder *flatbuffers.Builder, a4 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(a4), 0)
}
func Sample1TypeMainStartA4Vector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Sample1TypeMainAddA5(builder *flatbuffers.Builder, a5 uint32) {
	builder.PrependUint32Slot(4, a5, 0)
}
func Sample1TypeMainAddA6(builder *flatbuffers.Builder, a6 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(a6), 0)
}
func Sample1TypeMainEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
