// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package builtin

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NodeIdT struct {
	NodeIdUnion *NodeIdUnionT `json:"nodeIdUnion"`
}

func (t *NodeIdT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nodeIdUnionOffset := t.NodeIdUnion.Pack(builder)
	
	NodeIdStart(builder)
	if t.NodeIdUnion != nil {
		NodeIdAddNodeIdUnionType(builder, t.NodeIdUnion.Type)
	}
	NodeIdAddNodeIdUnion(builder, nodeIdUnionOffset)
	return NodeIdEnd(builder)
}

func (rcv *NodeId) UnPackTo(t *NodeIdT) {
	nodeIdUnionTable := flatbuffers.Table{}
	if rcv.NodeIdUnion(&nodeIdUnionTable) {
		t.NodeIdUnion = rcv.NodeIdUnionType().UnPack(nodeIdUnionTable)
	}
}

func (rcv *NodeId) UnPack() *NodeIdT {
	if rcv == nil { return nil }
	t := &NodeIdT{}
	rcv.UnPackTo(t)
	return t
}

type NodeId struct {
	_tab flatbuffers.Table
}

func GetRootAsNodeId(buf []byte, offset flatbuffers.UOffsetT) *NodeId {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NodeId{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsNodeId(buf []byte, offset flatbuffers.UOffsetT) *NodeId {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NodeId{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *NodeId) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NodeId) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NodeId) NodeIdUnionType() NodeIdUnion {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return NodeIdUnion(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *NodeId) MutateNodeIdUnionType(n NodeIdUnion) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *NodeId) NodeIdUnion(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func NodeIdStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func NodeIdAddNodeIdUnionType(builder *flatbuffers.Builder, nodeIdUnionType NodeIdUnion) {
	builder.PrependByteSlot(0, byte(nodeIdUnionType), 0)
}
func NodeIdAddNodeIdUnion(builder *flatbuffers.Builder, nodeIdUnion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(nodeIdUnion), 0)
}
func NodeIdEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
