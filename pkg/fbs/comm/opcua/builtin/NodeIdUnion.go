// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package builtin

import (
	"strconv"
	flatbuffers "github.com/google/flatbuffers/go"
)

type NodeIdUnion byte

const (
	NodeIdUnionNONE          NodeIdUnion = 0
	NodeIdUnionNumericNodeId NodeIdUnion = 1
	NodeIdUnionStringNodeId  NodeIdUnion = 2
	NodeIdUnionGuidNodeId    NodeIdUnion = 3
	NodeIdUnionOpaqueNodeId  NodeIdUnion = 4
)

var EnumNamesNodeIdUnion = map[NodeIdUnion]string{
	NodeIdUnionNONE:          "NONE",
	NodeIdUnionNumericNodeId: "NumericNodeId",
	NodeIdUnionStringNodeId:  "StringNodeId",
	NodeIdUnionGuidNodeId:    "GuidNodeId",
	NodeIdUnionOpaqueNodeId:  "OpaqueNodeId",
}

var EnumValuesNodeIdUnion = map[string]NodeIdUnion{
	"NONE":          NodeIdUnionNONE,
	"NumericNodeId": NodeIdUnionNumericNodeId,
	"StringNodeId":  NodeIdUnionStringNodeId,
	"GuidNodeId":    NodeIdUnionGuidNodeId,
	"OpaqueNodeId":  NodeIdUnionOpaqueNodeId,
}

func (v NodeIdUnion) String() string {
	if s, ok := EnumNamesNodeIdUnion[v]; ok {
		return s
	}
	return "NodeIdUnion(" + strconv.FormatInt(int64(v), 10) + ")"
}

type NodeIdUnionT struct {
	Type NodeIdUnion
	Value interface{}
}

func (t *NodeIdUnionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case NodeIdUnionNumericNodeId:
		return t.Value.(*NumericNodeIdT).Pack(builder)
	case NodeIdUnionStringNodeId:
		return t.Value.(*StringNodeIdT).Pack(builder)
	case NodeIdUnionGuidNodeId:
		return t.Value.(*GuidNodeIdT).Pack(builder)
	case NodeIdUnionOpaqueNodeId:
		return t.Value.(*OpaqueNodeIdT).Pack(builder)
	}
	return 0
}

func (rcv NodeIdUnion) UnPack(table flatbuffers.Table) *NodeIdUnionT {
	switch rcv {
	case NodeIdUnionNumericNodeId:
		var x NumericNodeId
		x.Init(table.Bytes, table.Pos)
		return &NodeIdUnionT{ Type: NodeIdUnionNumericNodeId, Value: x.UnPack() }
	case NodeIdUnionStringNodeId:
		var x StringNodeId
		x.Init(table.Bytes, table.Pos)
		return &NodeIdUnionT{ Type: NodeIdUnionStringNodeId, Value: x.UnPack() }
	case NodeIdUnionGuidNodeId:
		var x GuidNodeId
		x.Init(table.Bytes, table.Pos)
		return &NodeIdUnionT{ Type: NodeIdUnionGuidNodeId, Value: x.UnPack() }
	case NodeIdUnionOpaqueNodeId:
		var x OpaqueNodeId
		x.Init(table.Bytes, table.Pos)
		return &NodeIdUnionT{ Type: NodeIdUnionOpaqueNodeId, Value: x.UnPack() }
	}
	return nil
}
