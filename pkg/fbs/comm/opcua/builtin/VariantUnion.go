// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package builtin

import (
	"strconv"
	flatbuffers "github.com/google/flatbuffers/go"
)

type VariantUnion byte

const (
	VariantUnionNONE              VariantUnion = 0
	VariantUnionBooleanVariant    VariantUnion = 1
	VariantUnionSByteVariant      VariantUnion = 2
	VariantUnionByteVariant       VariantUnion = 3
	VariantUnionInt16Variant      VariantUnion = 4
	VariantUnionUInt16Variant     VariantUnion = 5
	VariantUnionInt32Variant      VariantUnion = 6
	VariantUnionUInt32Variant     VariantUnion = 7
	VariantUnionInt64Variant      VariantUnion = 8
	VariantUnionUInt64Variant     VariantUnion = 9
	VariantUnionFloatVariant      VariantUnion = 10
	VariantUnionDoubleVariant     VariantUnion = 11
	VariantUnionStringVariant     VariantUnion = 12
	VariantUnionDateTimeVariant   VariantUnion = 13
	VariantUnionGuidVariant       VariantUnion = 14
	VariantUnionByteStringVariant VariantUnion = 15
)

var EnumNamesVariantUnion = map[VariantUnion]string{
	VariantUnionNONE:              "NONE",
	VariantUnionBooleanVariant:    "BooleanVariant",
	VariantUnionSByteVariant:      "SByteVariant",
	VariantUnionByteVariant:       "ByteVariant",
	VariantUnionInt16Variant:      "Int16Variant",
	VariantUnionUInt16Variant:     "UInt16Variant",
	VariantUnionInt32Variant:      "Int32Variant",
	VariantUnionUInt32Variant:     "UInt32Variant",
	VariantUnionInt64Variant:      "Int64Variant",
	VariantUnionUInt64Variant:     "UInt64Variant",
	VariantUnionFloatVariant:      "FloatVariant",
	VariantUnionDoubleVariant:     "DoubleVariant",
	VariantUnionStringVariant:     "StringVariant",
	VariantUnionDateTimeVariant:   "DateTimeVariant",
	VariantUnionGuidVariant:       "GuidVariant",
	VariantUnionByteStringVariant: "ByteStringVariant",
}

var EnumValuesVariantUnion = map[string]VariantUnion{
	"NONE":              VariantUnionNONE,
	"BooleanVariant":    VariantUnionBooleanVariant,
	"SByteVariant":      VariantUnionSByteVariant,
	"ByteVariant":       VariantUnionByteVariant,
	"Int16Variant":      VariantUnionInt16Variant,
	"UInt16Variant":     VariantUnionUInt16Variant,
	"Int32Variant":      VariantUnionInt32Variant,
	"UInt32Variant":     VariantUnionUInt32Variant,
	"Int64Variant":      VariantUnionInt64Variant,
	"UInt64Variant":     VariantUnionUInt64Variant,
	"FloatVariant":      VariantUnionFloatVariant,
	"DoubleVariant":     VariantUnionDoubleVariant,
	"StringVariant":     VariantUnionStringVariant,
	"DateTimeVariant":   VariantUnionDateTimeVariant,
	"GuidVariant":       VariantUnionGuidVariant,
	"ByteStringVariant": VariantUnionByteStringVariant,
}

func (v VariantUnion) String() string {
	if s, ok := EnumNamesVariantUnion[v]; ok {
		return s
	}
	return "VariantUnion(" + strconv.FormatInt(int64(v), 10) + ")"
}

type VariantUnionT struct {
	Type VariantUnion
	Value interface{}
}

func (t *VariantUnionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case VariantUnionBooleanVariant:
		return t.Value.(*BooleanVariantT).Pack(builder)
	case VariantUnionSByteVariant:
		return t.Value.(*SByteVariantT).Pack(builder)
	case VariantUnionByteVariant:
		return t.Value.(*ByteVariantT).Pack(builder)
	case VariantUnionInt16Variant:
		return t.Value.(*Int16VariantT).Pack(builder)
	case VariantUnionUInt16Variant:
		return t.Value.(*UInt16VariantT).Pack(builder)
	case VariantUnionInt32Variant:
		return t.Value.(*Int32VariantT).Pack(builder)
	case VariantUnionUInt32Variant:
		return t.Value.(*UInt32VariantT).Pack(builder)
	case VariantUnionInt64Variant:
		return t.Value.(*Int64VariantT).Pack(builder)
	case VariantUnionUInt64Variant:
		return t.Value.(*UInt64VariantT).Pack(builder)
	case VariantUnionFloatVariant:
		return t.Value.(*FloatVariantT).Pack(builder)
	case VariantUnionDoubleVariant:
		return t.Value.(*DoubleVariantT).Pack(builder)
	case VariantUnionStringVariant:
		return t.Value.(*StringVariantT).Pack(builder)
	case VariantUnionDateTimeVariant:
		return t.Value.(*DateTimeVariantT).Pack(builder)
	case VariantUnionGuidVariant:
		return t.Value.(*GuidVariantT).Pack(builder)
	case VariantUnionByteStringVariant:
		return t.Value.(*ByteStringVariantT).Pack(builder)
	}
	return 0
}

func (rcv VariantUnion) UnPack(table flatbuffers.Table) *VariantUnionT {
	switch rcv {
	case VariantUnionBooleanVariant:
		var x BooleanVariant
		x.Init(table.Bytes, table.Pos)
		return &VariantUnionT{ Type: VariantUnionBooleanVariant, Value: x.UnPack() }
	case VariantUnionSByteVariant:
		var x SByteVariant
		x.Init(table.Bytes, table.Pos)
		return &VariantUnionT{ Type: VariantUnionSByteVariant, Value: x.UnPack() }
	case VariantUnionByteVariant:
		var x ByteVariant
		x.Init(table.Bytes, table.Pos)
		return &VariantUnionT{ Type: VariantUnionByteVariant, Value: x.UnPack() }
	case VariantUnionInt16Variant:
		var x Int16Variant
		x.Init(table.Bytes, table.Pos)
		return &VariantUnionT{ Type: VariantUnionInt16Variant, Value: x.UnPack() }
	case VariantUnionUInt16Variant:
		var x UInt16Variant
		x.Init(table.Bytes, table.Pos)
		return &VariantUnionT{ Type: VariantUnionUInt16Variant, Value: x.UnPack() }
	case VariantUnionInt32Variant:
		var x Int32Variant
		x.Init(table.Bytes, table.Pos)
		return &VariantUnionT{ Type: VariantUnionInt32Variant, Value: x.UnPack() }
	case VariantUnionUInt32Variant:
		var x UInt32Variant
		x.Init(table.Bytes, table.Pos)
		return &VariantUnionT{ Type: VariantUnionUInt32Variant, Value: x.UnPack() }
	case VariantUnionInt64Variant:
		var x Int64Variant
		x.Init(table.Bytes, table.Pos)
		return &VariantUnionT{ Type: VariantUnionInt64Variant, Value: x.UnPack() }
	case VariantUnionUInt64Variant:
		var x UInt64Variant
		x.Init(table.Bytes, table.Pos)
		return &VariantUnionT{ Type: VariantUnionUInt64Variant, Value: x.UnPack() }
	case VariantUnionFloatVariant:
		var x FloatVariant
		x.Init(table.Bytes, table.Pos)
		return &VariantUnionT{ Type: VariantUnionFloatVariant, Value: x.UnPack() }
	case VariantUnionDoubleVariant:
		var x DoubleVariant
		x.Init(table.Bytes, table.Pos)
		return &VariantUnionT{ Type: VariantUnionDoubleVariant, Value: x.UnPack() }
	case VariantUnionStringVariant:
		var x StringVariant
		x.Init(table.Bytes, table.Pos)
		return &VariantUnionT{ Type: VariantUnionStringVariant, Value: x.UnPack() }
	case VariantUnionDateTimeVariant:
		var x DateTimeVariant
		x.Init(table.Bytes, table.Pos)
		return &VariantUnionT{ Type: VariantUnionDateTimeVariant, Value: x.UnPack() }
	case VariantUnionGuidVariant:
		var x GuidVariant
		x.Init(table.Bytes, table.Pos)
		return &VariantUnionT{ Type: VariantUnionGuidVariant, Value: x.UnPack() }
	case VariantUnionByteStringVariant:
		var x ByteStringVariant
		x.Init(table.Bytes, table.Pos)
		return &VariantUnionT{ Type: VariantUnionByteStringVariant, Value: x.UnPack() }
	}
	return nil
}
