// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package builtin

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type QualifiedNameT struct {
	NsIndex uint16 `json:"nsIndex"`
	Name string `json:"name"`
}

func (t *QualifiedNameT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	QualifiedNameStart(builder)
	QualifiedNameAddNsIndex(builder, t.NsIndex)
	QualifiedNameAddName(builder, nameOffset)
	return QualifiedNameEnd(builder)
}

func (rcv *QualifiedName) UnPackTo(t *QualifiedNameT) {
	t.NsIndex = rcv.NsIndex()
	t.Name = string(rcv.Name())
}

func (rcv *QualifiedName) UnPack() *QualifiedNameT {
	if rcv == nil { return nil }
	t := &QualifiedNameT{}
	rcv.UnPackTo(t)
	return t
}

type QualifiedName struct {
	_tab flatbuffers.Table
}

func GetRootAsQualifiedName(buf []byte, offset flatbuffers.UOffsetT) *QualifiedName {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &QualifiedName{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsQualifiedName(buf []byte, offset flatbuffers.UOffsetT) *QualifiedName {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &QualifiedName{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *QualifiedName) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *QualifiedName) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *QualifiedName) NsIndex() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *QualifiedName) MutateNsIndex(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *QualifiedName) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func QualifiedNameStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func QualifiedNameAddNsIndex(builder *flatbuffers.Builder, nsIndex uint16) {
	builder.PrependUint16Slot(0, nsIndex, 0)
}
func QualifiedNameAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func QualifiedNameEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
