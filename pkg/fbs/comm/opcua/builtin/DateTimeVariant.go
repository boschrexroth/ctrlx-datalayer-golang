// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package builtin

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DateTimeVariantT struct {
	Value *DateTimeT `json:"value"`
}

func (t *DateTimeVariantT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	valueOffset := t.Value.Pack(builder)
	DateTimeVariantStart(builder)
	DateTimeVariantAddValue(builder, valueOffset)
	return DateTimeVariantEnd(builder)
}

func (rcv *DateTimeVariant) UnPackTo(t *DateTimeVariantT) {
	t.Value = rcv.Value(nil).UnPack()
}

func (rcv *DateTimeVariant) UnPack() *DateTimeVariantT {
	if rcv == nil { return nil }
	t := &DateTimeVariantT{}
	rcv.UnPackTo(t)
	return t
}

type DateTimeVariant struct {
	_tab flatbuffers.Table
}

func GetRootAsDateTimeVariant(buf []byte, offset flatbuffers.UOffsetT) *DateTimeVariant {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DateTimeVariant{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDateTimeVariant(buf []byte, offset flatbuffers.UOffsetT) *DateTimeVariant {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DateTimeVariant{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DateTimeVariant) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DateTimeVariant) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DateTimeVariant) Value(obj *DateTime) *DateTime {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DateTime)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func DateTimeVariantStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func DateTimeVariantAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(value), 0)
}
func DateTimeVariantEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
