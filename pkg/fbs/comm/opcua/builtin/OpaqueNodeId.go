// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package builtin

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OpaqueNodeIdT struct {
	NsIndex uint16 `json:"nsIndex"`
	Identifier *ByteStringT `json:"identifier"`
}

func (t *OpaqueNodeIdT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	identifierOffset := t.Identifier.Pack(builder)
	OpaqueNodeIdStart(builder)
	OpaqueNodeIdAddNsIndex(builder, t.NsIndex)
	OpaqueNodeIdAddIdentifier(builder, identifierOffset)
	return OpaqueNodeIdEnd(builder)
}

func (rcv *OpaqueNodeId) UnPackTo(t *OpaqueNodeIdT) {
	t.NsIndex = rcv.NsIndex()
	t.Identifier = rcv.Identifier(nil).UnPack()
}

func (rcv *OpaqueNodeId) UnPack() *OpaqueNodeIdT {
	if rcv == nil { return nil }
	t := &OpaqueNodeIdT{}
	rcv.UnPackTo(t)
	return t
}

type OpaqueNodeId struct {
	_tab flatbuffers.Table
}

func GetRootAsOpaqueNodeId(buf []byte, offset flatbuffers.UOffsetT) *OpaqueNodeId {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OpaqueNodeId{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsOpaqueNodeId(buf []byte, offset flatbuffers.UOffsetT) *OpaqueNodeId {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OpaqueNodeId{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *OpaqueNodeId) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OpaqueNodeId) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OpaqueNodeId) NsIndex() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OpaqueNodeId) MutateNsIndex(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *OpaqueNodeId) Identifier(obj *ByteString) *ByteString {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ByteString)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func OpaqueNodeIdStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func OpaqueNodeIdAddNsIndex(builder *flatbuffers.Builder, nsIndex uint16) {
	builder.PrependUint16Slot(0, nsIndex, 0)
}
func OpaqueNodeIdAddIdentifier(builder *flatbuffers.Builder, identifier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(identifier), 0)
}
func OpaqueNodeIdEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
