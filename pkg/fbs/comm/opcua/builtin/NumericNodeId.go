// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package builtin

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NumericNodeIdT struct {
	NsIndex uint16 `json:"nsIndex"`
	Identifier uint32 `json:"identifier"`
}

func (t *NumericNodeIdT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	NumericNodeIdStart(builder)
	NumericNodeIdAddNsIndex(builder, t.NsIndex)
	NumericNodeIdAddIdentifier(builder, t.Identifier)
	return NumericNodeIdEnd(builder)
}

func (rcv *NumericNodeId) UnPackTo(t *NumericNodeIdT) {
	t.NsIndex = rcv.NsIndex()
	t.Identifier = rcv.Identifier()
}

func (rcv *NumericNodeId) UnPack() *NumericNodeIdT {
	if rcv == nil { return nil }
	t := &NumericNodeIdT{}
	rcv.UnPackTo(t)
	return t
}

type NumericNodeId struct {
	_tab flatbuffers.Table
}

func GetRootAsNumericNodeId(buf []byte, offset flatbuffers.UOffsetT) *NumericNodeId {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NumericNodeId{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsNumericNodeId(buf []byte, offset flatbuffers.UOffsetT) *NumericNodeId {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NumericNodeId{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *NumericNodeId) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NumericNodeId) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NumericNodeId) NsIndex() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NumericNodeId) MutateNsIndex(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *NumericNodeId) Identifier() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NumericNodeId) MutateIdentifier(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func NumericNodeIdStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func NumericNodeIdAddNsIndex(builder *flatbuffers.Builder, nsIndex uint16) {
	builder.PrependUint16Slot(0, nsIndex, 0)
}
func NumericNodeIdAddIdentifier(builder *flatbuffers.Builder, identifier uint32) {
	builder.PrependUint32Slot(1, identifier, 0)
}
func NumericNodeIdEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
