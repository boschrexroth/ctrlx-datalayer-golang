// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package builtin

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type VariantT struct {
	Value *VariantUnionT `json:"value"`
}

func (t *VariantT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	valueOffset := t.Value.Pack(builder)
	
	VariantStart(builder)
	if t.Value != nil {
		VariantAddValueType(builder, t.Value.Type)
	}
	VariantAddValue(builder, valueOffset)
	return VariantEnd(builder)
}

func (rcv *Variant) UnPackTo(t *VariantT) {
	valueTable := flatbuffers.Table{}
	if rcv.Value(&valueTable) {
		t.Value = rcv.ValueType().UnPack(valueTable)
	}
}

func (rcv *Variant) UnPack() *VariantT {
	if rcv == nil { return nil }
	t := &VariantT{}
	rcv.UnPackTo(t)
	return t
}

type Variant struct {
	_tab flatbuffers.Table
}

func GetRootAsVariant(buf []byte, offset flatbuffers.UOffsetT) *Variant {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Variant{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsVariant(buf []byte, offset flatbuffers.UOffsetT) *Variant {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Variant{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Variant) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Variant) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Variant) ValueType() VariantUnion {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return VariantUnion(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Variant) MutateValueType(n VariantUnion) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *Variant) Value(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func VariantStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func VariantAddValueType(builder *flatbuffers.Builder, valueType VariantUnion) {
	builder.PrependByteSlot(0, byte(valueType), 0)
}
func VariantAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}
func VariantEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
