// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package builtin

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SByteVariantT struct {
	Value int8 `json:"value"`
}

func (t *SByteVariantT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	SByteVariantStart(builder)
	SByteVariantAddValue(builder, t.Value)
	return SByteVariantEnd(builder)
}

func (rcv *SByteVariant) UnPackTo(t *SByteVariantT) {
	t.Value = rcv.Value()
}

func (rcv *SByteVariant) UnPack() *SByteVariantT {
	if rcv == nil { return nil }
	t := &SByteVariantT{}
	rcv.UnPackTo(t)
	return t
}

type SByteVariant struct {
	_tab flatbuffers.Table
}

func GetRootAsSByteVariant(buf []byte, offset flatbuffers.UOffsetT) *SByteVariant {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SByteVariant{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSByteVariant(buf []byte, offset flatbuffers.UOffsetT) *SByteVariant {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SByteVariant{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SByteVariant) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SByteVariant) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SByteVariant) Value() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SByteVariant) MutateValue(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func SByteVariantStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func SByteVariantAddValue(builder *flatbuffers.Builder, value int8) {
	builder.PrependInt8Slot(0, value, 0)
}
func SByteVariantEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
