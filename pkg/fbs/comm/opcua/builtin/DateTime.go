// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package builtin

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DateTimeT struct {
	Value int64 `json:"value"`
}

func (t *DateTimeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	DateTimeStart(builder)
	DateTimeAddValue(builder, t.Value)
	return DateTimeEnd(builder)
}

func (rcv *DateTime) UnPackTo(t *DateTimeT) {
	t.Value = rcv.Value()
}

func (rcv *DateTime) UnPack() *DateTimeT {
	if rcv == nil { return nil }
	t := &DateTimeT{}
	rcv.UnPackTo(t)
	return t
}

type DateTime struct {
	_tab flatbuffers.Table
}

func GetRootAsDateTime(buf []byte, offset flatbuffers.UOffsetT) *DateTime {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DateTime{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDateTime(buf []byte, offset flatbuffers.UOffsetT) *DateTime {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DateTime{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DateTime) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DateTime) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DateTime) Value() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DateTime) MutateValue(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func DateTimeStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func DateTimeAddValue(builder *flatbuffers.Builder, value int64) {
	builder.PrependInt64Slot(0, value, 0)
}
func DateTimeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
