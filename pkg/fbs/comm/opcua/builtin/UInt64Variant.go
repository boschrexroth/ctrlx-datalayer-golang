// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package builtin

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UInt64VariantT struct {
	Value uint64 `json:"value"`
}

func (t *UInt64VariantT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	UInt64VariantStart(builder)
	UInt64VariantAddValue(builder, t.Value)
	return UInt64VariantEnd(builder)
}

func (rcv *UInt64Variant) UnPackTo(t *UInt64VariantT) {
	t.Value = rcv.Value()
}

func (rcv *UInt64Variant) UnPack() *UInt64VariantT {
	if rcv == nil { return nil }
	t := &UInt64VariantT{}
	rcv.UnPackTo(t)
	return t
}

type UInt64Variant struct {
	_tab flatbuffers.Table
}

func GetRootAsUInt64Variant(buf []byte, offset flatbuffers.UOffsetT) *UInt64Variant {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UInt64Variant{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsUInt64Variant(buf []byte, offset flatbuffers.UOffsetT) *UInt64Variant {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UInt64Variant{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *UInt64Variant) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UInt64Variant) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UInt64Variant) Value() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UInt64Variant) MutateValue(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func UInt64VariantStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func UInt64VariantAddValue(builder *flatbuffers.Builder, value uint64) {
	builder.PrependUint64Slot(0, value, 0)
}
func UInt64VariantEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
