// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package builtin

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LocalizedTextT struct {
	Locale string `json:"locale"`
	Text string `json:"text"`
}

func (t *LocalizedTextT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	localeOffset := flatbuffers.UOffsetT(0)
	if t.Locale != "" {
		localeOffset = builder.CreateString(t.Locale)
	}
	textOffset := flatbuffers.UOffsetT(0)
	if t.Text != "" {
		textOffset = builder.CreateString(t.Text)
	}
	LocalizedTextStart(builder)
	LocalizedTextAddLocale(builder, localeOffset)
	LocalizedTextAddText(builder, textOffset)
	return LocalizedTextEnd(builder)
}

func (rcv *LocalizedText) UnPackTo(t *LocalizedTextT) {
	t.Locale = string(rcv.Locale())
	t.Text = string(rcv.Text())
}

func (rcv *LocalizedText) UnPack() *LocalizedTextT {
	if rcv == nil { return nil }
	t := &LocalizedTextT{}
	rcv.UnPackTo(t)
	return t
}

type LocalizedText struct {
	_tab flatbuffers.Table
}

func GetRootAsLocalizedText(buf []byte, offset flatbuffers.UOffsetT) *LocalizedText {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LocalizedText{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsLocalizedText(buf []byte, offset flatbuffers.UOffsetT) *LocalizedText {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LocalizedText{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *LocalizedText) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LocalizedText) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LocalizedText) Locale() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LocalizedText) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func LocalizedTextStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func LocalizedTextAddLocale(builder *flatbuffers.Builder, locale flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(locale), 0)
}
func LocalizedTextAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(text), 0)
}
func LocalizedTextEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
