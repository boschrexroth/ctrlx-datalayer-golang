// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package builtin

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StringNodeIdT struct {
	NsIndex uint16 `json:"nsIndex"`
	Identifier string `json:"identifier"`
}

func (t *StringNodeIdT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	identifierOffset := flatbuffers.UOffsetT(0)
	if t.Identifier != "" {
		identifierOffset = builder.CreateString(t.Identifier)
	}
	StringNodeIdStart(builder)
	StringNodeIdAddNsIndex(builder, t.NsIndex)
	StringNodeIdAddIdentifier(builder, identifierOffset)
	return StringNodeIdEnd(builder)
}

func (rcv *StringNodeId) UnPackTo(t *StringNodeIdT) {
	t.NsIndex = rcv.NsIndex()
	t.Identifier = string(rcv.Identifier())
}

func (rcv *StringNodeId) UnPack() *StringNodeIdT {
	if rcv == nil { return nil }
	t := &StringNodeIdT{}
	rcv.UnPackTo(t)
	return t
}

type StringNodeId struct {
	_tab flatbuffers.Table
}

func GetRootAsStringNodeId(buf []byte, offset flatbuffers.UOffsetT) *StringNodeId {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StringNodeId{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStringNodeId(buf []byte, offset flatbuffers.UOffsetT) *StringNodeId {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StringNodeId{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *StringNodeId) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StringNodeId) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StringNodeId) NsIndex() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StringNodeId) MutateNsIndex(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *StringNodeId) Identifier() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func StringNodeIdStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func StringNodeIdAddNsIndex(builder *flatbuffers.Builder, nsIndex uint16) {
	builder.PrependUint16Slot(0, nsIndex, 0)
}
func StringNodeIdAddIdentifier(builder *flatbuffers.Builder, identifier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(identifier), 0)
}
func StringNodeIdEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
