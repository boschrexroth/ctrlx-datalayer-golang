// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package builtin

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GuidT struct {
	Value string `json:"value"`
}

func (t *GuidT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	valueOffset := flatbuffers.UOffsetT(0)
	if t.Value != "" {
		valueOffset = builder.CreateString(t.Value)
	}
	GuidStart(builder)
	GuidAddValue(builder, valueOffset)
	return GuidEnd(builder)
}

func (rcv *Guid) UnPackTo(t *GuidT) {
	t.Value = string(rcv.Value())
}

func (rcv *Guid) UnPack() *GuidT {
	if rcv == nil { return nil }
	t := &GuidT{}
	rcv.UnPackTo(t)
	return t
}

type Guid struct {
	_tab flatbuffers.Table
}

func GetRootAsGuid(buf []byte, offset flatbuffers.UOffsetT) *Guid {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Guid{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsGuid(buf []byte, offset flatbuffers.UOffsetT) *Guid {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Guid{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Guid) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Guid) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Guid) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func GuidStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func GuidAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(value), 0)
}
func GuidEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
