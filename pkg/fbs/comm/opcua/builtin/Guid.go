// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package builtin

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GuidT struct {
	Data1 uint32 `json:"data1"`
	Data2 uint16 `json:"data2"`
	Data3 uint16 `json:"data3"`
	Data41 byte `json:"data41"`
	Data42 byte `json:"data42"`
	Data43 byte `json:"data43"`
	Data44 byte `json:"data44"`
	Data45 byte `json:"data45"`
	Data46 byte `json:"data46"`
	Data47 byte `json:"data47"`
	Data48 byte `json:"data48"`
}

func (t *GuidT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	GuidStart(builder)
	GuidAddData1(builder, t.Data1)
	GuidAddData2(builder, t.Data2)
	GuidAddData3(builder, t.Data3)
	GuidAddData41(builder, t.Data41)
	GuidAddData42(builder, t.Data42)
	GuidAddData43(builder, t.Data43)
	GuidAddData44(builder, t.Data44)
	GuidAddData45(builder, t.Data45)
	GuidAddData46(builder, t.Data46)
	GuidAddData47(builder, t.Data47)
	GuidAddData48(builder, t.Data48)
	return GuidEnd(builder)
}

func (rcv *Guid) UnPackTo(t *GuidT) {
	t.Data1 = rcv.Data1()
	t.Data2 = rcv.Data2()
	t.Data3 = rcv.Data3()
	t.Data41 = rcv.Data41()
	t.Data42 = rcv.Data42()
	t.Data43 = rcv.Data43()
	t.Data44 = rcv.Data44()
	t.Data45 = rcv.Data45()
	t.Data46 = rcv.Data46()
	t.Data47 = rcv.Data47()
	t.Data48 = rcv.Data48()
}

func (rcv *Guid) UnPack() *GuidT {
	if rcv == nil { return nil }
	t := &GuidT{}
	rcv.UnPackTo(t)
	return t
}

type Guid struct {
	_tab flatbuffers.Table
}

func GetRootAsGuid(buf []byte, offset flatbuffers.UOffsetT) *Guid {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Guid{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsGuid(buf []byte, offset flatbuffers.UOffsetT) *Guid {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Guid{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Guid) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Guid) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Guid) Data1() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Guid) MutateData1(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Guid) Data2() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Guid) MutateData2(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *Guid) Data3() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Guid) MutateData3(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *Guid) Data41() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Guid) MutateData41(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *Guid) Data42() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Guid) MutateData42(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func (rcv *Guid) Data43() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Guid) MutateData43(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func (rcv *Guid) Data44() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Guid) MutateData44(n byte) bool {
	return rcv._tab.MutateByteSlot(16, n)
}

func (rcv *Guid) Data45() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Guid) MutateData45(n byte) bool {
	return rcv._tab.MutateByteSlot(18, n)
}

func (rcv *Guid) Data46() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Guid) MutateData46(n byte) bool {
	return rcv._tab.MutateByteSlot(20, n)
}

func (rcv *Guid) Data47() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Guid) MutateData47(n byte) bool {
	return rcv._tab.MutateByteSlot(22, n)
}

func (rcv *Guid) Data48() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Guid) MutateData48(n byte) bool {
	return rcv._tab.MutateByteSlot(24, n)
}

func GuidStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func GuidAddData1(builder *flatbuffers.Builder, data1 uint32) {
	builder.PrependUint32Slot(0, data1, 0)
}
func GuidAddData2(builder *flatbuffers.Builder, data2 uint16) {
	builder.PrependUint16Slot(1, data2, 0)
}
func GuidAddData3(builder *flatbuffers.Builder, data3 uint16) {
	builder.PrependUint16Slot(2, data3, 0)
}
func GuidAddData41(builder *flatbuffers.Builder, data41 byte) {
	builder.PrependByteSlot(3, data41, 0)
}
func GuidAddData42(builder *flatbuffers.Builder, data42 byte) {
	builder.PrependByteSlot(4, data42, 0)
}
func GuidAddData43(builder *flatbuffers.Builder, data43 byte) {
	builder.PrependByteSlot(5, data43, 0)
}
func GuidAddData44(builder *flatbuffers.Builder, data44 byte) {
	builder.PrependByteSlot(6, data44, 0)
}
func GuidAddData45(builder *flatbuffers.Builder, data45 byte) {
	builder.PrependByteSlot(7, data45, 0)
}
func GuidAddData46(builder *flatbuffers.Builder, data46 byte) {
	builder.PrependByteSlot(8, data46, 0)
}
func GuidAddData47(builder *flatbuffers.Builder, data47 byte) {
	builder.PrependByteSlot(9, data47, 0)
}
func GuidAddData48(builder *flatbuffers.Builder, data48 byte) {
	builder.PrependByteSlot(10, data48, 0)
}
func GuidEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
