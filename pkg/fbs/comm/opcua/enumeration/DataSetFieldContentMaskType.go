// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package enumeration

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DataSetFieldContentMaskTypeT struct {
	Mask DataSetFieldContentMask `json:"mask"`
}

func (t *DataSetFieldContentMaskTypeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	DataSetFieldContentMaskTypeStart(builder)
	DataSetFieldContentMaskTypeAddMask(builder, t.Mask)
	return DataSetFieldContentMaskTypeEnd(builder)
}

func (rcv *DataSetFieldContentMaskType) UnPackTo(t *DataSetFieldContentMaskTypeT) {
	t.Mask = rcv.Mask()
}

func (rcv *DataSetFieldContentMaskType) UnPack() *DataSetFieldContentMaskTypeT {
	if rcv == nil { return nil }
	t := &DataSetFieldContentMaskTypeT{}
	rcv.UnPackTo(t)
	return t
}

type DataSetFieldContentMaskType struct {
	_tab flatbuffers.Table
}

func GetRootAsDataSetFieldContentMaskType(buf []byte, offset flatbuffers.UOffsetT) *DataSetFieldContentMaskType {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DataSetFieldContentMaskType{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDataSetFieldContentMaskType(buf []byte, offset flatbuffers.UOffsetT) *DataSetFieldContentMaskType {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DataSetFieldContentMaskType{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DataSetFieldContentMaskType) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DataSetFieldContentMaskType) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DataSetFieldContentMaskType) Mask() DataSetFieldContentMask {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return DataSetFieldContentMask(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DataSetFieldContentMaskType) MutateMask(n DataSetFieldContentMask) bool {
	return rcv._tab.MutateUint32Slot(4, uint32(n))
}

func DataSetFieldContentMaskTypeStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func DataSetFieldContentMaskTypeAddMask(builder *flatbuffers.Builder, mask DataSetFieldContentMask) {
	builder.PrependUint32Slot(0, uint32(mask), 0)
}
func DataSetFieldContentMaskTypeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
