// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package saveParamStart

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SaveParamStartT struct {
	FileName string `json:"fileName"`
	BackupType ParametersType `json:"backupType"`
}

func (t *SaveParamStartT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	fileNameOffset := flatbuffers.UOffsetT(0)
	if t.FileName != "" {
		fileNameOffset = builder.CreateString(t.FileName)
	}
	SaveParamStartStart(builder)
	SaveParamStartAddFileName(builder, fileNameOffset)
	SaveParamStartAddBackupType(builder, t.BackupType)
	return SaveParamStartEnd(builder)
}

func (rcv *SaveParamStart) UnPackTo(t *SaveParamStartT) {
	t.FileName = string(rcv.FileName())
	t.BackupType = rcv.BackupType()
}

func (rcv *SaveParamStart) UnPack() *SaveParamStartT {
	if rcv == nil { return nil }
	t := &SaveParamStartT{}
	rcv.UnPackTo(t)
	return t
}

type SaveParamStart struct {
	_tab flatbuffers.Table
}

func GetRootAsSaveParamStart(buf []byte, offset flatbuffers.UOffsetT) *SaveParamStart {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SaveParamStart{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSaveParamStart(buf []byte, offset flatbuffers.UOffsetT) *SaveParamStart {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SaveParamStart{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SaveParamStart) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SaveParamStart) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SaveParamStart) FileName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SaveParamStart) BackupType() ParametersType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ParametersType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SaveParamStart) MutateBackupType(n ParametersType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func SaveParamStartStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SaveParamStartAddFileName(builder *flatbuffers.Builder, fileName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(fileName), 0)
}
func SaveParamStartAddBackupType(builder *flatbuffers.Builder, backupType ParametersType) {
	builder.PrependInt8Slot(1, int8(backupType), 0)
}
func SaveParamStartEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
