// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package device

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SubDeviceDetailsT struct {
	Driver string `json:"driver"`
	DriverProperties []*PropertyT `json:"driverProperties"`
	LastSeen uint64 `json:"lastSeen"`
	LastSeenParam uint64 `json:"lastSeenParam"`
	LastSeenBrowse uint64 `json:"lastSeenBrowse"`
	LastSeenFile uint64 `json:"lastSeenFile"`
	LastAccess uint64 `json:"lastAccess"`
	LastAccessParam uint64 `json:"lastAccessParam"`
	LastAccessFile uint64 `json:"lastAccessFile"`
}

func (t *SubDeviceDetailsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	driverOffset := flatbuffers.UOffsetT(0)
	if t.Driver != "" {
		driverOffset = builder.CreateString(t.Driver)
	}
	driverPropertiesOffset := flatbuffers.UOffsetT(0)
	if t.DriverProperties != nil {
		driverPropertiesLength := len(t.DriverProperties)
		driverPropertiesOffsets := make([]flatbuffers.UOffsetT, driverPropertiesLength)
		for j := 0; j < driverPropertiesLength; j++ {
			driverPropertiesOffsets[j] = t.DriverProperties[j].Pack(builder)
		}
		SubDeviceDetailsStartDriverPropertiesVector(builder, driverPropertiesLength)
		for j := driverPropertiesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(driverPropertiesOffsets[j])
		}
		driverPropertiesOffset = builder.EndVector(driverPropertiesLength)
	}
	SubDeviceDetailsStart(builder)
	SubDeviceDetailsAddDriver(builder, driverOffset)
	SubDeviceDetailsAddDriverProperties(builder, driverPropertiesOffset)
	SubDeviceDetailsAddLastSeen(builder, t.LastSeen)
	SubDeviceDetailsAddLastSeenParam(builder, t.LastSeenParam)
	SubDeviceDetailsAddLastSeenBrowse(builder, t.LastSeenBrowse)
	SubDeviceDetailsAddLastSeenFile(builder, t.LastSeenFile)
	SubDeviceDetailsAddLastAccess(builder, t.LastAccess)
	SubDeviceDetailsAddLastAccessParam(builder, t.LastAccessParam)
	SubDeviceDetailsAddLastAccessFile(builder, t.LastAccessFile)
	return SubDeviceDetailsEnd(builder)
}

func (rcv *SubDeviceDetails) UnPackTo(t *SubDeviceDetailsT) {
	t.Driver = string(rcv.Driver())
	driverPropertiesLength := rcv.DriverPropertiesLength()
	t.DriverProperties = make([]*PropertyT, driverPropertiesLength)
	for j := 0; j < driverPropertiesLength; j++ {
		x := Property{}
		rcv.DriverProperties(&x, j)
		t.DriverProperties[j] = x.UnPack()
	}
	t.LastSeen = rcv.LastSeen()
	t.LastSeenParam = rcv.LastSeenParam()
	t.LastSeenBrowse = rcv.LastSeenBrowse()
	t.LastSeenFile = rcv.LastSeenFile()
	t.LastAccess = rcv.LastAccess()
	t.LastAccessParam = rcv.LastAccessParam()
	t.LastAccessFile = rcv.LastAccessFile()
}

func (rcv *SubDeviceDetails) UnPack() *SubDeviceDetailsT {
	if rcv == nil { return nil }
	t := &SubDeviceDetailsT{}
	rcv.UnPackTo(t)
	return t
}

type SubDeviceDetails struct {
	_tab flatbuffers.Table
}

func GetRootAsSubDeviceDetails(buf []byte, offset flatbuffers.UOffsetT) *SubDeviceDetails {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SubDeviceDetails{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSubDeviceDetails(buf []byte, offset flatbuffers.UOffsetT) *SubDeviceDetails {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SubDeviceDetails{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SubDeviceDetails) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SubDeviceDetails) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SubDeviceDetails) Driver() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SubDeviceDetails) DriverProperties(obj *Property, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SubDeviceDetails) DriverPropertiesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SubDeviceDetails) LastSeen() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SubDeviceDetails) MutateLastSeen(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *SubDeviceDetails) LastSeenParam() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SubDeviceDetails) MutateLastSeenParam(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *SubDeviceDetails) LastSeenBrowse() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SubDeviceDetails) MutateLastSeenBrowse(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *SubDeviceDetails) LastSeenFile() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SubDeviceDetails) MutateLastSeenFile(n uint64) bool {
	return rcv._tab.MutateUint64Slot(14, n)
}

func (rcv *SubDeviceDetails) LastAccess() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SubDeviceDetails) MutateLastAccess(n uint64) bool {
	return rcv._tab.MutateUint64Slot(16, n)
}

func (rcv *SubDeviceDetails) LastAccessParam() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SubDeviceDetails) MutateLastAccessParam(n uint64) bool {
	return rcv._tab.MutateUint64Slot(18, n)
}

func (rcv *SubDeviceDetails) LastAccessFile() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SubDeviceDetails) MutateLastAccessFile(n uint64) bool {
	return rcv._tab.MutateUint64Slot(20, n)
}

func SubDeviceDetailsStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func SubDeviceDetailsAddDriver(builder *flatbuffers.Builder, driver flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(driver), 0)
}
func SubDeviceDetailsAddDriverProperties(builder *flatbuffers.Builder, driverProperties flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(driverProperties), 0)
}
func SubDeviceDetailsStartDriverPropertiesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SubDeviceDetailsAddLastSeen(builder *flatbuffers.Builder, lastSeen uint64) {
	builder.PrependUint64Slot(2, lastSeen, 0)
}
func SubDeviceDetailsAddLastSeenParam(builder *flatbuffers.Builder, lastSeenParam uint64) {
	builder.PrependUint64Slot(3, lastSeenParam, 0)
}
func SubDeviceDetailsAddLastSeenBrowse(builder *flatbuffers.Builder, lastSeenBrowse uint64) {
	builder.PrependUint64Slot(4, lastSeenBrowse, 0)
}
func SubDeviceDetailsAddLastSeenFile(builder *flatbuffers.Builder, lastSeenFile uint64) {
	builder.PrependUint64Slot(5, lastSeenFile, 0)
}
func SubDeviceDetailsAddLastAccess(builder *flatbuffers.Builder, lastAccess uint64) {
	builder.PrependUint64Slot(6, lastAccess, 0)
}
func SubDeviceDetailsAddLastAccessParam(builder *flatbuffers.Builder, lastAccessParam uint64) {
	builder.PrependUint64Slot(7, lastAccessParam, 0)
}
func SubDeviceDetailsAddLastAccessFile(builder *flatbuffers.Builder, lastAccessFile uint64) {
	builder.PrependUint64Slot(8, lastAccessFile, 0)
}
func SubDeviceDetailsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
