// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package device

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DeviceDetailsT struct {
	Driver string `json:"driver"`
	Interface string `json:"interface"`
	LastSeen uint64 `json:"lastSeen"`
	LastAccess uint64 `json:"lastAccess"`
}

func (t *DeviceDetailsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	driverOffset := flatbuffers.UOffsetT(0)
	if t.Driver != "" {
		driverOffset = builder.CreateString(t.Driver)
	}
	interface_Offset := flatbuffers.UOffsetT(0)
	if t.Interface != "" {
		interface_Offset = builder.CreateString(t.Interface)
	}
	DeviceDetailsStart(builder)
	DeviceDetailsAddDriver(builder, driverOffset)
	DeviceDetailsAddInterface(builder, interface_Offset)
	DeviceDetailsAddLastSeen(builder, t.LastSeen)
	DeviceDetailsAddLastAccess(builder, t.LastAccess)
	return DeviceDetailsEnd(builder)
}

func (rcv *DeviceDetails) UnPackTo(t *DeviceDetailsT) {
	t.Driver = string(rcv.Driver())
	t.Interface = string(rcv.Interface())
	t.LastSeen = rcv.LastSeen()
	t.LastAccess = rcv.LastAccess()
}

func (rcv *DeviceDetails) UnPack() *DeviceDetailsT {
	if rcv == nil { return nil }
	t := &DeviceDetailsT{}
	rcv.UnPackTo(t)
	return t
}

type DeviceDetails struct {
	_tab flatbuffers.Table
}

func GetRootAsDeviceDetails(buf []byte, offset flatbuffers.UOffsetT) *DeviceDetails {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DeviceDetails{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDeviceDetails(buf []byte, offset flatbuffers.UOffsetT) *DeviceDetails {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DeviceDetails{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DeviceDetails) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DeviceDetails) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DeviceDetails) Driver() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DeviceDetails) Interface() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DeviceDetails) LastSeen() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DeviceDetails) MutateLastSeen(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *DeviceDetails) LastAccess() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DeviceDetails) MutateLastAccess(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func DeviceDetailsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DeviceDetailsAddDriver(builder *flatbuffers.Builder, driver flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(driver), 0)
}
func DeviceDetailsAddInterface(builder *flatbuffers.Builder, interface_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(interface_), 0)
}
func DeviceDetailsAddLastSeen(builder *flatbuffers.Builder, lastSeen uint64) {
	builder.PrependUint64Slot(2, lastSeen, 0)
}
func DeviceDetailsAddLastAccess(builder *flatbuffers.Builder, lastAccess uint64) {
	builder.PrependUint64Slot(3, lastAccess, 0)
}
func DeviceDetailsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
