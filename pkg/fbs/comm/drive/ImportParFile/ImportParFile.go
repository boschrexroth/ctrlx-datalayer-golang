// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ImportParFile

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ImportParFileT struct {
	FileName string `json:"fileName"`
	SetIndex int8 `json:"setIndex"`
}

func (t *ImportParFileT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	fileNameOffset := flatbuffers.UOffsetT(0)
	if t.FileName != "" {
		fileNameOffset = builder.CreateString(t.FileName)
	}
	ImportParFileStart(builder)
	ImportParFileAddFileName(builder, fileNameOffset)
	ImportParFileAddSetIndex(builder, t.SetIndex)
	return ImportParFileEnd(builder)
}

func (rcv *ImportParFile) UnPackTo(t *ImportParFileT) {
	t.FileName = string(rcv.FileName())
	t.SetIndex = rcv.SetIndex()
}

func (rcv *ImportParFile) UnPack() *ImportParFileT {
	if rcv == nil { return nil }
	t := &ImportParFileT{}
	rcv.UnPackTo(t)
	return t
}

type ImportParFile struct {
	_tab flatbuffers.Table
}

func GetRootAsImportParFile(buf []byte, offset flatbuffers.UOffsetT) *ImportParFile {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ImportParFile{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsImportParFile(buf []byte, offset flatbuffers.UOffsetT) *ImportParFile {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ImportParFile{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ImportParFile) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ImportParFile) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ImportParFile) FileName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ImportParFile) SetIndex() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImportParFile) MutateSetIndex(n int8) bool {
	return rcv._tab.MutateInt8Slot(6, n)
}

func ImportParFileStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ImportParFileAddFileName(builder *flatbuffers.Builder, fileName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(fileName), 0)
}
func ImportParFileAddSetIndex(builder *flatbuffers.Builder, setIndex int8) {
	builder.PrependInt8Slot(1, setIndex, 0)
}
func ImportParFileEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
