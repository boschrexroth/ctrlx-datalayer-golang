// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fileData

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FileDataT struct {
	FileName string `json:"fileName"`
	File []byte `json:"file"`
}

func (t *FileDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	fileNameOffset := flatbuffers.UOffsetT(0)
	if t.FileName != "" {
		fileNameOffset = builder.CreateString(t.FileName)
	}
	fileOffset := flatbuffers.UOffsetT(0)
	if t.File != nil {
		fileOffset = builder.CreateByteString(t.File)
	}
	FileDataStart(builder)
	FileDataAddFileName(builder, fileNameOffset)
	FileDataAddFile(builder, fileOffset)
	return FileDataEnd(builder)
}

func (rcv *FileData) UnPackTo(t *FileDataT) {
	t.FileName = string(rcv.FileName())
	t.File = rcv.FileBytes()
}

func (rcv *FileData) UnPack() *FileDataT {
	if rcv == nil { return nil }
	t := &FileDataT{}
	rcv.UnPackTo(t)
	return t
}

type FileData struct {
	_tab flatbuffers.Table
}

func GetRootAsFileData(buf []byte, offset flatbuffers.UOffsetT) *FileData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FileData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFileData(buf []byte, offset flatbuffers.UOffsetT) *FileData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FileData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *FileData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FileData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FileData) FileName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FileData) File(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *FileData) FileLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FileData) FileBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FileData) MutateFile(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func FileDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func FileDataAddFileName(builder *flatbuffers.Builder, fileName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(fileName), 0)
}
func FileDataAddFile(builder *flatbuffers.Builder, file flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(file), 0)
}
func FileDataStartFileVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func FileDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
