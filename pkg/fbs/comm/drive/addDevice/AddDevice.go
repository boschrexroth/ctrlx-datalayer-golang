// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package addDevice

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AddDeviceT struct {
	Devices []*SubDeviceT `json:"devices"`
}

func (t *AddDeviceT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	devicesOffset := flatbuffers.UOffsetT(0)
	if t.Devices != nil {
		devicesLength := len(t.Devices)
		devicesOffsets := make([]flatbuffers.UOffsetT, devicesLength)
		for j := 0; j < devicesLength; j++ {
			devicesOffsets[j] = t.Devices[j].Pack(builder)
		}
		AddDeviceStartDevicesVector(builder, devicesLength)
		for j := devicesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(devicesOffsets[j])
		}
		devicesOffset = builder.EndVector(devicesLength)
	}
	AddDeviceStart(builder)
	AddDeviceAddDevices(builder, devicesOffset)
	return AddDeviceEnd(builder)
}

func (rcv *AddDevice) UnPackTo(t *AddDeviceT) {
	devicesLength := rcv.DevicesLength()
	t.Devices = make([]*SubDeviceT, devicesLength)
	for j := 0; j < devicesLength; j++ {
		x := SubDevice{}
		rcv.Devices(&x, j)
		t.Devices[j] = x.UnPack()
	}
}

func (rcv *AddDevice) UnPack() *AddDeviceT {
	if rcv == nil { return nil }
	t := &AddDeviceT{}
	rcv.UnPackTo(t)
	return t
}

type AddDevice struct {
	_tab flatbuffers.Table
}

func GetRootAsAddDevice(buf []byte, offset flatbuffers.UOffsetT) *AddDevice {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AddDevice{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAddDevice(buf []byte, offset flatbuffers.UOffsetT) *AddDevice {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AddDevice{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AddDevice) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AddDevice) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AddDevice) Devices(obj *SubDevice, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AddDevice) DevicesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func AddDeviceStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AddDeviceAddDevices(builder *flatbuffers.Builder, devices flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(devices), 0)
}
func AddDeviceStartDevicesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AddDeviceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
