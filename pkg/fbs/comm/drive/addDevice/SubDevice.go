// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package addDevice

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SubDeviceT struct {
	Protocol Protocol `json:"protocol"`
	Info string `json:"info"`
	SubDeviceId int32 `json:"subDeviceID"`
}

func (t *SubDeviceT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	infoOffset := flatbuffers.UOffsetT(0)
	if t.Info != "" {
		infoOffset = builder.CreateString(t.Info)
	}
	SubDeviceStart(builder)
	SubDeviceAddProtocol(builder, t.Protocol)
	SubDeviceAddInfo(builder, infoOffset)
	SubDeviceAddSubDeviceId(builder, t.SubDeviceId)
	return SubDeviceEnd(builder)
}

func (rcv *SubDevice) UnPackTo(t *SubDeviceT) {
	t.Protocol = rcv.Protocol()
	t.Info = string(rcv.Info())
	t.SubDeviceId = rcv.SubDeviceId()
}

func (rcv *SubDevice) UnPack() *SubDeviceT {
	if rcv == nil { return nil }
	t := &SubDeviceT{}
	rcv.UnPackTo(t)
	return t
}

type SubDevice struct {
	_tab flatbuffers.Table
}

func GetRootAsSubDevice(buf []byte, offset flatbuffers.UOffsetT) *SubDevice {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SubDevice{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSubDevice(buf []byte, offset flatbuffers.UOffsetT) *SubDevice {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SubDevice{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SubDevice) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SubDevice) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SubDevice) Protocol() Protocol {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Protocol(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SubDevice) MutateProtocol(n Protocol) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *SubDevice) Info() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SubDevice) SubDeviceId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SubDevice) MutateSubDeviceId(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func SubDeviceStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SubDeviceAddProtocol(builder *flatbuffers.Builder, protocol Protocol) {
	builder.PrependInt8Slot(0, int8(protocol), 0)
}
func SubDeviceAddInfo(builder *flatbuffers.Builder, info flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(info), 0)
}
func SubDeviceAddSubDeviceId(builder *flatbuffers.Builder, subDeviceId int32) {
	builder.PrependInt32Slot(2, subDeviceId, 0)
}
func SubDeviceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
