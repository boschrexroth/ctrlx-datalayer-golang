// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package parameter

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ReadEverythingDetailsT struct {
	ValidElements uint16 `json:"validElements"`
	DataStatus uint16 `json:"dataStatus"`
	NameLength uint16 `json:"nameLength"`
	Attribute uint32 `json:"attribute"`
	UnitLength uint16 `json:"unitLength"`
	Min []byte `json:"min"`
	Max []byte `json:"max"`
	MaxListLength uint32 `json:"maxListLength"`
	ParameterDataLength uint32 `json:"parameterDataLength"`
	Name string `json:"name"`
	Unit string `json:"unit"`
	Data []byte `json:"data"`
}

func (t *ReadEverythingDetailsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	minOffset := flatbuffers.UOffsetT(0)
	if t.Min != nil {
		minOffset = builder.CreateByteString(t.Min)
	}
	maxOffset := flatbuffers.UOffsetT(0)
	if t.Max != nil {
		maxOffset = builder.CreateByteString(t.Max)
	}
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	unitOffset := flatbuffers.UOffsetT(0)
	if t.Unit != "" {
		unitOffset = builder.CreateString(t.Unit)
	}
	dataOffset := flatbuffers.UOffsetT(0)
	if t.Data != nil {
		dataOffset = builder.CreateByteString(t.Data)
	}
	ReadEverythingDetailsStart(builder)
	ReadEverythingDetailsAddValidElements(builder, t.ValidElements)
	ReadEverythingDetailsAddDataStatus(builder, t.DataStatus)
	ReadEverythingDetailsAddNameLength(builder, t.NameLength)
	ReadEverythingDetailsAddAttribute(builder, t.Attribute)
	ReadEverythingDetailsAddUnitLength(builder, t.UnitLength)
	ReadEverythingDetailsAddMin(builder, minOffset)
	ReadEverythingDetailsAddMax(builder, maxOffset)
	ReadEverythingDetailsAddMaxListLength(builder, t.MaxListLength)
	ReadEverythingDetailsAddParameterDataLength(builder, t.ParameterDataLength)
	ReadEverythingDetailsAddName(builder, nameOffset)
	ReadEverythingDetailsAddUnit(builder, unitOffset)
	ReadEverythingDetailsAddData(builder, dataOffset)
	return ReadEverythingDetailsEnd(builder)
}

func (rcv *ReadEverythingDetails) UnPackTo(t *ReadEverythingDetailsT) {
	t.ValidElements = rcv.ValidElements()
	t.DataStatus = rcv.DataStatus()
	t.NameLength = rcv.NameLength()
	t.Attribute = rcv.Attribute()
	t.UnitLength = rcv.UnitLength()
	t.Min = rcv.MinBytes()
	t.Max = rcv.MaxBytes()
	t.MaxListLength = rcv.MaxListLength()
	t.ParameterDataLength = rcv.ParameterDataLength()
	t.Name = string(rcv.Name())
	t.Unit = string(rcv.Unit())
	t.Data = rcv.DataBytes()
}

func (rcv *ReadEverythingDetails) UnPack() *ReadEverythingDetailsT {
	if rcv == nil { return nil }
	t := &ReadEverythingDetailsT{}
	rcv.UnPackTo(t)
	return t
}

type ReadEverythingDetails struct {
	_tab flatbuffers.Table
}

func GetRootAsReadEverythingDetails(buf []byte, offset flatbuffers.UOffsetT) *ReadEverythingDetails {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ReadEverythingDetails{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsReadEverythingDetails(buf []byte, offset flatbuffers.UOffsetT) *ReadEverythingDetails {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ReadEverythingDetails{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ReadEverythingDetails) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ReadEverythingDetails) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ReadEverythingDetails) ValidElements() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ReadEverythingDetails) MutateValidElements(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *ReadEverythingDetails) DataStatus() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ReadEverythingDetails) MutateDataStatus(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *ReadEverythingDetails) NameLength() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ReadEverythingDetails) MutateNameLength(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *ReadEverythingDetails) Attribute() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ReadEverythingDetails) MutateAttribute(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *ReadEverythingDetails) UnitLength() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ReadEverythingDetails) MutateUnitLength(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func (rcv *ReadEverythingDetails) Min(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ReadEverythingDetails) MinLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ReadEverythingDetails) MinBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ReadEverythingDetails) MutateMin(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *ReadEverythingDetails) Max(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ReadEverythingDetails) MaxLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ReadEverythingDetails) MaxBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ReadEverythingDetails) MutateMax(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *ReadEverythingDetails) MaxListLength() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ReadEverythingDetails) MutateMaxListLength(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

func (rcv *ReadEverythingDetails) ParameterDataLength() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ReadEverythingDetails) MutateParameterDataLength(n uint32) bool {
	return rcv._tab.MutateUint32Slot(20, n)
}

func (rcv *ReadEverythingDetails) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ReadEverythingDetails) Unit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ReadEverythingDetails) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ReadEverythingDetails) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ReadEverythingDetails) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ReadEverythingDetails) MutateData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func ReadEverythingDetailsStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func ReadEverythingDetailsAddValidElements(builder *flatbuffers.Builder, validElements uint16) {
	builder.PrependUint16Slot(0, validElements, 0)
}
func ReadEverythingDetailsAddDataStatus(builder *flatbuffers.Builder, dataStatus uint16) {
	builder.PrependUint16Slot(1, dataStatus, 0)
}
func ReadEverythingDetailsAddNameLength(builder *flatbuffers.Builder, nameLength uint16) {
	builder.PrependUint16Slot(2, nameLength, 0)
}
func ReadEverythingDetailsAddAttribute(builder *flatbuffers.Builder, attribute uint32) {
	builder.PrependUint32Slot(3, attribute, 0)
}
func ReadEverythingDetailsAddUnitLength(builder *flatbuffers.Builder, unitLength uint16) {
	builder.PrependUint16Slot(4, unitLength, 0)
}
func ReadEverythingDetailsAddMin(builder *flatbuffers.Builder, min flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(min), 0)
}
func ReadEverythingDetailsStartMinVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ReadEverythingDetailsAddMax(builder *flatbuffers.Builder, max flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(max), 0)
}
func ReadEverythingDetailsStartMaxVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ReadEverythingDetailsAddMaxListLength(builder *flatbuffers.Builder, maxListLength uint32) {
	builder.PrependUint32Slot(7, maxListLength, 0)
}
func ReadEverythingDetailsAddParameterDataLength(builder *flatbuffers.Builder, parameterDataLength uint32) {
	builder.PrependUint32Slot(8, parameterDataLength, 0)
}
func ReadEverythingDetailsAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(name), 0)
}
func ReadEverythingDetailsAddUnit(builder *flatbuffers.Builder, unit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(unit), 0)
}
func ReadEverythingDetailsAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(data), 0)
}
func ReadEverythingDetailsStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ReadEverythingDetailsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
