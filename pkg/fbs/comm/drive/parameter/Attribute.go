// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package parameter

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AttributeT struct {
	CommonErrorCode uint16 `json:"commonErrorCode"`
	SpecificErrorCode uint32 `json:"specificErrorCode"`
	ValidElements uint16 `json:"validElements"`
	Attribute uint32 `json:"attribute"`
}

func (t *AttributeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AttributeStart(builder)
	AttributeAddCommonErrorCode(builder, t.CommonErrorCode)
	AttributeAddSpecificErrorCode(builder, t.SpecificErrorCode)
	AttributeAddValidElements(builder, t.ValidElements)
	AttributeAddAttribute(builder, t.Attribute)
	return AttributeEnd(builder)
}

func (rcv *Attribute) UnPackTo(t *AttributeT) {
	t.CommonErrorCode = rcv.CommonErrorCode()
	t.SpecificErrorCode = rcv.SpecificErrorCode()
	t.ValidElements = rcv.ValidElements()
	t.Attribute = rcv.Attribute()
}

func (rcv *Attribute) UnPack() *AttributeT {
	if rcv == nil { return nil }
	t := &AttributeT{}
	rcv.UnPackTo(t)
	return t
}

type Attribute struct {
	_tab flatbuffers.Table
}

func GetRootAsAttribute(buf []byte, offset flatbuffers.UOffsetT) *Attribute {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Attribute{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAttribute(buf []byte, offset flatbuffers.UOffsetT) *Attribute {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Attribute{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Attribute) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Attribute) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Attribute) CommonErrorCode() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Attribute) MutateCommonErrorCode(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *Attribute) SpecificErrorCode() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Attribute) MutateSpecificErrorCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *Attribute) ValidElements() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Attribute) MutateValidElements(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *Attribute) Attribute() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Attribute) MutateAttribute(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func AttributeStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func AttributeAddCommonErrorCode(builder *flatbuffers.Builder, commonErrorCode uint16) {
	builder.PrependUint16Slot(0, commonErrorCode, 0)
}
func AttributeAddSpecificErrorCode(builder *flatbuffers.Builder, specificErrorCode uint32) {
	builder.PrependUint32Slot(1, specificErrorCode, 0)
}
func AttributeAddValidElements(builder *flatbuffers.Builder, validElements uint16) {
	builder.PrependUint16Slot(2, validElements, 0)
}
func AttributeAddAttribute(builder *flatbuffers.Builder, attribute uint32) {
	builder.PrependUint32Slot(3, attribute, 0)
}
func AttributeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
