// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package parameter

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AttributeDataT struct {
	Attribute uint32 `json:"attribute"`
	Data string `json:"data"`
}

func (t *AttributeDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	dataOffset := flatbuffers.UOffsetT(0)
	if t.Data != "" {
		dataOffset = builder.CreateString(t.Data)
	}
	AttributeDataStart(builder)
	AttributeDataAddAttribute(builder, t.Attribute)
	AttributeDataAddData(builder, dataOffset)
	return AttributeDataEnd(builder)
}

func (rcv *AttributeData) UnPackTo(t *AttributeDataT) {
	t.Attribute = rcv.Attribute()
	t.Data = string(rcv.Data())
}

func (rcv *AttributeData) UnPack() *AttributeDataT {
	if rcv == nil { return nil }
	t := &AttributeDataT{}
	rcv.UnPackTo(t)
	return t
}

type AttributeData struct {
	_tab flatbuffers.Table
}

func GetRootAsAttributeData(buf []byte, offset flatbuffers.UOffsetT) *AttributeData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AttributeData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAttributeData(buf []byte, offset flatbuffers.UOffsetT) *AttributeData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AttributeData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AttributeData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AttributeData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AttributeData) Attribute() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AttributeData) MutateAttribute(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *AttributeData) Data() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func AttributeDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AttributeDataAddAttribute(builder *flatbuffers.Builder, attribute uint32) {
	builder.PrependUint32Slot(0, attribute, 0)
}
func AttributeDataAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(data), 0)
}
func AttributeDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
