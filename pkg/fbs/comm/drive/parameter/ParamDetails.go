// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package parameter

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ParamDetailsT struct {
	DataState uint16 `json:"dataState"`
	Name string `json:"name"`
	Unit string `json:"unit"`
	Attribute uint32 `json:"attribute"`
	Data string `json:"data"`
	MaxListLength uint32 `json:"maxListLength"`
	Min string `json:"min"`
	Max string `json:"max"`
}

func (t *ParamDetailsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	unitOffset := flatbuffers.UOffsetT(0)
	if t.Unit != "" {
		unitOffset = builder.CreateString(t.Unit)
	}
	dataOffset := flatbuffers.UOffsetT(0)
	if t.Data != "" {
		dataOffset = builder.CreateString(t.Data)
	}
	minOffset := flatbuffers.UOffsetT(0)
	if t.Min != "" {
		minOffset = builder.CreateString(t.Min)
	}
	maxOffset := flatbuffers.UOffsetT(0)
	if t.Max != "" {
		maxOffset = builder.CreateString(t.Max)
	}
	ParamDetailsStart(builder)
	ParamDetailsAddDataState(builder, t.DataState)
	ParamDetailsAddName(builder, nameOffset)
	ParamDetailsAddUnit(builder, unitOffset)
	ParamDetailsAddAttribute(builder, t.Attribute)
	ParamDetailsAddData(builder, dataOffset)
	ParamDetailsAddMaxListLength(builder, t.MaxListLength)
	ParamDetailsAddMin(builder, minOffset)
	ParamDetailsAddMax(builder, maxOffset)
	return ParamDetailsEnd(builder)
}

func (rcv *ParamDetails) UnPackTo(t *ParamDetailsT) {
	t.DataState = rcv.DataState()
	t.Name = string(rcv.Name())
	t.Unit = string(rcv.Unit())
	t.Attribute = rcv.Attribute()
	t.Data = string(rcv.Data())
	t.MaxListLength = rcv.MaxListLength()
	t.Min = string(rcv.Min())
	t.Max = string(rcv.Max())
}

func (rcv *ParamDetails) UnPack() *ParamDetailsT {
	if rcv == nil { return nil }
	t := &ParamDetailsT{}
	rcv.UnPackTo(t)
	return t
}

type ParamDetails struct {
	_tab flatbuffers.Table
}

func GetRootAsParamDetails(buf []byte, offset flatbuffers.UOffsetT) *ParamDetails {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ParamDetails{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsParamDetails(buf []byte, offset flatbuffers.UOffsetT) *ParamDetails {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ParamDetails{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ParamDetails) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ParamDetails) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ParamDetails) DataState() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ParamDetails) MutateDataState(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *ParamDetails) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ParamDetails) Unit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ParamDetails) Attribute() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ParamDetails) MutateAttribute(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *ParamDetails) Data() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ParamDetails) MaxListLength() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ParamDetails) MutateMaxListLength(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *ParamDetails) Min() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ParamDetails) Max() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ParamDetailsStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func ParamDetailsAddDataState(builder *flatbuffers.Builder, dataState uint16) {
	builder.PrependUint16Slot(0, dataState, 0)
}
func ParamDetailsAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func ParamDetailsAddUnit(builder *flatbuffers.Builder, unit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(unit), 0)
}
func ParamDetailsAddAttribute(builder *flatbuffers.Builder, attribute uint32) {
	builder.PrependUint32Slot(3, attribute, 0)
}
func ParamDetailsAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(data), 0)
}
func ParamDetailsAddMaxListLength(builder *flatbuffers.Builder, maxListLength uint32) {
	builder.PrependUint32Slot(5, maxListLength, 0)
}
func ParamDetailsAddMin(builder *flatbuffers.Builder, min flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(min), 0)
}
func ParamDetailsAddMax(builder *flatbuffers.Builder, max flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(max), 0)
}
func ParamDetailsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
