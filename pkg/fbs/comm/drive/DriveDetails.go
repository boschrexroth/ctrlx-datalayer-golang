// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package drive

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DriveDetailsT struct {
	DeviceType string `json:"deviceType"`
	SerialNumber string `json:"serialNumber"`
	Interface string `json:"interface"`
	CommProtocol Protocols `json:"commProtocol"`
	SubDeviceCount int32 `json:"subDeviceCount"`
	SubDevices []string `json:"subDevices"`
	CommAddress []string `json:"commAddress"`
	Status []*ConnectionStatusT `json:"status"`
}

func (t *DriveDetailsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	deviceTypeOffset := flatbuffers.UOffsetT(0)
	if t.DeviceType != "" {
		deviceTypeOffset = builder.CreateString(t.DeviceType)
	}
	serialNumberOffset := flatbuffers.UOffsetT(0)
	if t.SerialNumber != "" {
		serialNumberOffset = builder.CreateString(t.SerialNumber)
	}
	interface_Offset := flatbuffers.UOffsetT(0)
	if t.Interface != "" {
		interface_Offset = builder.CreateString(t.Interface)
	}
	subDevicesOffset := flatbuffers.UOffsetT(0)
	if t.SubDevices != nil {
		subDevicesLength := len(t.SubDevices)
		subDevicesOffsets := make([]flatbuffers.UOffsetT, subDevicesLength)
		for j := 0; j < subDevicesLength; j++ {
			subDevicesOffsets[j] = builder.CreateString(t.SubDevices[j])
		}
		DriveDetailsStartSubDevicesVector(builder, subDevicesLength)
		for j := subDevicesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(subDevicesOffsets[j])
		}
		subDevicesOffset = builder.EndVector(subDevicesLength)
	}
	commAddressOffset := flatbuffers.UOffsetT(0)
	if t.CommAddress != nil {
		commAddressLength := len(t.CommAddress)
		commAddressOffsets := make([]flatbuffers.UOffsetT, commAddressLength)
		for j := 0; j < commAddressLength; j++ {
			commAddressOffsets[j] = builder.CreateString(t.CommAddress[j])
		}
		DriveDetailsStartCommAddressVector(builder, commAddressLength)
		for j := commAddressLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(commAddressOffsets[j])
		}
		commAddressOffset = builder.EndVector(commAddressLength)
	}
	statusOffset := flatbuffers.UOffsetT(0)
	if t.Status != nil {
		statusLength := len(t.Status)
		statusOffsets := make([]flatbuffers.UOffsetT, statusLength)
		for j := 0; j < statusLength; j++ {
			statusOffsets[j] = t.Status[j].Pack(builder)
		}
		DriveDetailsStartStatusVector(builder, statusLength)
		for j := statusLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(statusOffsets[j])
		}
		statusOffset = builder.EndVector(statusLength)
	}
	DriveDetailsStart(builder)
	DriveDetailsAddDeviceType(builder, deviceTypeOffset)
	DriveDetailsAddSerialNumber(builder, serialNumberOffset)
	DriveDetailsAddInterface(builder, interface_Offset)
	DriveDetailsAddCommProtocol(builder, t.CommProtocol)
	DriveDetailsAddSubDeviceCount(builder, t.SubDeviceCount)
	DriveDetailsAddSubDevices(builder, subDevicesOffset)
	DriveDetailsAddCommAddress(builder, commAddressOffset)
	DriveDetailsAddStatus(builder, statusOffset)
	return DriveDetailsEnd(builder)
}

func (rcv *DriveDetails) UnPackTo(t *DriveDetailsT) {
	t.DeviceType = string(rcv.DeviceType())
	t.SerialNumber = string(rcv.SerialNumber())
	t.Interface = string(rcv.Interface())
	t.CommProtocol = rcv.CommProtocol()
	t.SubDeviceCount = rcv.SubDeviceCount()
	subDevicesLength := rcv.SubDevicesLength()
	t.SubDevices = make([]string, subDevicesLength)
	for j := 0; j < subDevicesLength; j++ {
		t.SubDevices[j] = string(rcv.SubDevices(j))
	}
	commAddressLength := rcv.CommAddressLength()
	t.CommAddress = make([]string, commAddressLength)
	for j := 0; j < commAddressLength; j++ {
		t.CommAddress[j] = string(rcv.CommAddress(j))
	}
	statusLength := rcv.StatusLength()
	t.Status = make([]*ConnectionStatusT, statusLength)
	for j := 0; j < statusLength; j++ {
		x := ConnectionStatus{}
		rcv.Status(&x, j)
		t.Status[j] = x.UnPack()
	}
}

func (rcv *DriveDetails) UnPack() *DriveDetailsT {
	if rcv == nil { return nil }
	t := &DriveDetailsT{}
	rcv.UnPackTo(t)
	return t
}

type DriveDetails struct {
	_tab flatbuffers.Table
}

func GetRootAsDriveDetails(buf []byte, offset flatbuffers.UOffsetT) *DriveDetails {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DriveDetails{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDriveDetails(buf []byte, offset flatbuffers.UOffsetT) *DriveDetails {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DriveDetails{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DriveDetails) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DriveDetails) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DriveDetails) DeviceType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DriveDetails) SerialNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DriveDetails) Interface() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DriveDetails) CommProtocol() Protocols {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return Protocols(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DriveDetails) MutateCommProtocol(n Protocols) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func (rcv *DriveDetails) SubDeviceCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DriveDetails) MutateSubDeviceCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *DriveDetails) SubDevices(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DriveDetails) SubDevicesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DriveDetails) CommAddress(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DriveDetails) CommAddressLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DriveDetails) Status(obj *ConnectionStatus, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DriveDetails) StatusByKey(obj *ConnectionStatus, key string) bool{
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *DriveDetails) StatusLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func DriveDetailsStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func DriveDetailsAddDeviceType(builder *flatbuffers.Builder, deviceType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(deviceType), 0)
}
func DriveDetailsAddSerialNumber(builder *flatbuffers.Builder, serialNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(serialNumber), 0)
}
func DriveDetailsAddInterface(builder *flatbuffers.Builder, interface_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(interface_), 0)
}
func DriveDetailsAddCommProtocol(builder *flatbuffers.Builder, commProtocol Protocols) {
	builder.PrependInt8Slot(3, int8(commProtocol), 0)
}
func DriveDetailsAddSubDeviceCount(builder *flatbuffers.Builder, subDeviceCount int32) {
	builder.PrependInt32Slot(4, subDeviceCount, 0)
}
func DriveDetailsAddSubDevices(builder *flatbuffers.Builder, subDevices flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(subDevices), 0)
}
func DriveDetailsStartSubDevicesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DriveDetailsAddCommAddress(builder *flatbuffers.Builder, commAddress flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(commAddress), 0)
}
func DriveDetailsStartCommAddressVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DriveDetailsAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(status), 0)
}
func DriveDetailsStartStatusVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DriveDetailsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
