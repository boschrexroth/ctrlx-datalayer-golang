// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"

	comm__datalayer "github.com/boschrexroth/ctrlx-datalayer-golang/pkg/fbs/comm/datalayer"
)

type SlaveVariablesConfigInfoEntryT struct {
	VariableInfo *comm__datalayer.VariableT
	EtgBaseType uint16
	ProtocolInfo *VariableProtocolInfoT
}

func (t *SlaveVariablesConfigInfoEntryT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	variableInfoOffset := t.VariableInfo.Pack(builder)
	protocolInfoOffset := t.ProtocolInfo.Pack(builder)
	SlaveVariablesConfigInfoEntryStart(builder)
	SlaveVariablesConfigInfoEntryAddVariableInfo(builder, variableInfoOffset)
	SlaveVariablesConfigInfoEntryAddEtgBaseType(builder, t.EtgBaseType)
	SlaveVariablesConfigInfoEntryAddProtocolInfo(builder, protocolInfoOffset)
	return SlaveVariablesConfigInfoEntryEnd(builder)
}

func (rcv *SlaveVariablesConfigInfoEntry) UnPackTo(t *SlaveVariablesConfigInfoEntryT) {
	t.VariableInfo = rcv.VariableInfo(nil).UnPack()
	t.EtgBaseType = rcv.EtgBaseType()
	t.ProtocolInfo = rcv.ProtocolInfo(nil).UnPack()
}

func (rcv *SlaveVariablesConfigInfoEntry) UnPack() *SlaveVariablesConfigInfoEntryT {
	if rcv == nil { return nil }
	t := &SlaveVariablesConfigInfoEntryT{}
	rcv.UnPackTo(t)
	return t
}

type SlaveVariablesConfigInfoEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsSlaveVariablesConfigInfoEntry(buf []byte, offset flatbuffers.UOffsetT) *SlaveVariablesConfigInfoEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SlaveVariablesConfigInfoEntry{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSlaveVariablesConfigInfoEntry(buf []byte, offset flatbuffers.UOffsetT) *SlaveVariablesConfigInfoEntry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SlaveVariablesConfigInfoEntry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SlaveVariablesConfigInfoEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SlaveVariablesConfigInfoEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SlaveVariablesConfigInfoEntry) VariableInfo(obj *comm__datalayer.Variable) *comm__datalayer.Variable {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(comm__datalayer.Variable)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SlaveVariablesConfigInfoEntry) EtgBaseType() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SlaveVariablesConfigInfoEntry) MutateEtgBaseType(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *SlaveVariablesConfigInfoEntry) ProtocolInfo(obj *VariableProtocolInfo) *VariableProtocolInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(VariableProtocolInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func SlaveVariablesConfigInfoEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SlaveVariablesConfigInfoEntryAddVariableInfo(builder *flatbuffers.Builder, variableInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(variableInfo), 0)
}
func SlaveVariablesConfigInfoEntryAddEtgBaseType(builder *flatbuffers.Builder, etgBaseType uint16) {
	builder.PrependUint16Slot(1, etgBaseType, 0)
}
func SlaveVariablesConfigInfoEntryAddProtocolInfo(builder *flatbuffers.Builder, protocolInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(protocolInfo), 0)
}
func SlaveVariablesConfigInfoEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
