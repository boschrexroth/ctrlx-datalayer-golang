// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import "strconv"

///The SoE (Servo drive over EtherCAT) Element-Flags indicating which element of an IDN are read or written
///dataState    Bit 0: Service channel data status
///name         Bit 1: Name 
///attribute    Bit 2: Attribute
///unit         Bit 3: Unit 
///minValue     Bit 4: Min value 
///maxValue     Bit 5: Max value 
///value        Bit 6: Operation data
///defaultValue Bit 7: Default value 
type ElementFlags byte

const (
	ElementFlagsdataState    ElementFlags = 1
	ElementFlagsname         ElementFlags = 2
	ElementFlagsattribute    ElementFlags = 4
	ElementFlagsunit         ElementFlags = 8
	ElementFlagsminValue     ElementFlags = 16
	ElementFlagsmaxValue     ElementFlags = 32
	ElementFlagsvalue        ElementFlags = 64
	ElementFlagsdefaultValue ElementFlags = 128
)

var EnumNamesElementFlags = map[ElementFlags]string{
	ElementFlagsdataState:    "dataState",
	ElementFlagsname:         "name",
	ElementFlagsattribute:    "attribute",
	ElementFlagsunit:         "unit",
	ElementFlagsminValue:     "minValue",
	ElementFlagsmaxValue:     "maxValue",
	ElementFlagsvalue:        "value",
	ElementFlagsdefaultValue: "defaultValue",
}

var EnumValuesElementFlags = map[string]ElementFlags{
	"dataState":    ElementFlagsdataState,
	"name":         ElementFlagsname,
	"attribute":    ElementFlagsattribute,
	"unit":         ElementFlagsunit,
	"minValue":     ElementFlagsminValue,
	"maxValue":     ElementFlagsmaxValue,
	"value":        ElementFlagsvalue,
	"defaultValue": ElementFlagsdefaultValue,
}

func (v ElementFlags) String() string {
	if s, ok := EnumNamesElementFlags[v]; ok {
		return s
	}
	return "ElementFlags(" + strconv.FormatInt(int64(v), 10) + ")"
}
