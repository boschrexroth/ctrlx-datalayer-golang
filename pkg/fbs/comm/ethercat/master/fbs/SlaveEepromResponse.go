// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SlaveEepromResponseT struct {
	Data []uint16 `json:"data"`
}

func (t *SlaveEepromResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	dataOffset := flatbuffers.UOffsetT(0)
	if t.Data != nil {
		dataLength := len(t.Data)
		SlaveEepromResponseStartDataVector(builder, dataLength)
		for j := dataLength - 1; j >= 0; j-- {
			builder.PrependUint16(t.Data[j])
		}
		dataOffset = builder.EndVector(dataLength)
	}
	SlaveEepromResponseStart(builder)
	SlaveEepromResponseAddData(builder, dataOffset)
	return SlaveEepromResponseEnd(builder)
}

func (rcv *SlaveEepromResponse) UnPackTo(t *SlaveEepromResponseT) {
	dataLength := rcv.DataLength()
	t.Data = make([]uint16, dataLength)
	for j := 0; j < dataLength; j++ {
		t.Data[j] = rcv.Data(j)
	}
}

func (rcv *SlaveEepromResponse) UnPack() *SlaveEepromResponseT {
	if rcv == nil { return nil }
	t := &SlaveEepromResponseT{}
	rcv.UnPackTo(t)
	return t
}

type SlaveEepromResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsSlaveEepromResponse(buf []byte, offset flatbuffers.UOffsetT) *SlaveEepromResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SlaveEepromResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSlaveEepromResponse(buf []byte, offset flatbuffers.UOffsetT) *SlaveEepromResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SlaveEepromResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SlaveEepromResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SlaveEepromResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SlaveEepromResponse) Data(j int) uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *SlaveEepromResponse) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SlaveEepromResponse) MutateData(j int, n uint16) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint16(a+flatbuffers.UOffsetT(j*2), n)
	}
	return false
}

func SlaveEepromResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func SlaveEepromResponseAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(data), 0)
}
func SlaveEepromResponseStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func SlaveEepromResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
