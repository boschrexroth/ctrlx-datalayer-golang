// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SlaveStatisticModeAutoResponseT struct {
	Enable bool `json:"enable"`
	IdleTime uint32 `json:"idleTime"`
}

func (t *SlaveStatisticModeAutoResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	SlaveStatisticModeAutoResponseStart(builder)
	SlaveStatisticModeAutoResponseAddEnable(builder, t.Enable)
	SlaveStatisticModeAutoResponseAddIdleTime(builder, t.IdleTime)
	return SlaveStatisticModeAutoResponseEnd(builder)
}

func (rcv *SlaveStatisticModeAutoResponse) UnPackTo(t *SlaveStatisticModeAutoResponseT) {
	t.Enable = rcv.Enable()
	t.IdleTime = rcv.IdleTime()
}

func (rcv *SlaveStatisticModeAutoResponse) UnPack() *SlaveStatisticModeAutoResponseT {
	if rcv == nil { return nil }
	t := &SlaveStatisticModeAutoResponseT{}
	rcv.UnPackTo(t)
	return t
}

type SlaveStatisticModeAutoResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsSlaveStatisticModeAutoResponse(buf []byte, offset flatbuffers.UOffsetT) *SlaveStatisticModeAutoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SlaveStatisticModeAutoResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSlaveStatisticModeAutoResponse(buf []byte, offset flatbuffers.UOffsetT) *SlaveStatisticModeAutoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SlaveStatisticModeAutoResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SlaveStatisticModeAutoResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SlaveStatisticModeAutoResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SlaveStatisticModeAutoResponse) Enable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SlaveStatisticModeAutoResponse) MutateEnable(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *SlaveStatisticModeAutoResponse) IdleTime() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SlaveStatisticModeAutoResponse) MutateIdleTime(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func SlaveStatisticModeAutoResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SlaveStatisticModeAutoResponseAddEnable(builder *flatbuffers.Builder, enable bool) {
	builder.PrependBoolSlot(0, enable, false)
}
func SlaveStatisticModeAutoResponseAddIdleTime(builder *flatbuffers.Builder, idleTime uint32) {
	builder.PrependUint32Slot(1, idleTime, 0)
}
func SlaveStatisticModeAutoResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
