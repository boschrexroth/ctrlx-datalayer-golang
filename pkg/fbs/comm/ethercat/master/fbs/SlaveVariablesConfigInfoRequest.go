// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Slave variables config info request
type SlaveVariablesConfigInfoRequestT struct {
	AddressedRequest *AddressedRequestT `json:"addressedRequest"`
	VarType string `json:"varType"`
}

func (t *SlaveVariablesConfigInfoRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	addressedRequestOffset := t.AddressedRequest.Pack(builder)
	varTypeOffset := flatbuffers.UOffsetT(0)
	if t.VarType != "" {
		varTypeOffset = builder.CreateString(t.VarType)
	}
	SlaveVariablesConfigInfoRequestStart(builder)
	SlaveVariablesConfigInfoRequestAddAddressedRequest(builder, addressedRequestOffset)
	SlaveVariablesConfigInfoRequestAddVarType(builder, varTypeOffset)
	return SlaveVariablesConfigInfoRequestEnd(builder)
}

func (rcv *SlaveVariablesConfigInfoRequest) UnPackTo(t *SlaveVariablesConfigInfoRequestT) {
	t.AddressedRequest = rcv.AddressedRequest(nil).UnPack()
	t.VarType = string(rcv.VarType())
}

func (rcv *SlaveVariablesConfigInfoRequest) UnPack() *SlaveVariablesConfigInfoRequestT {
	if rcv == nil { return nil }
	t := &SlaveVariablesConfigInfoRequestT{}
	rcv.UnPackTo(t)
	return t
}

type SlaveVariablesConfigInfoRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsSlaveVariablesConfigInfoRequest(buf []byte, offset flatbuffers.UOffsetT) *SlaveVariablesConfigInfoRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SlaveVariablesConfigInfoRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSlaveVariablesConfigInfoRequest(buf []byte, offset flatbuffers.UOffsetT) *SlaveVariablesConfigInfoRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SlaveVariablesConfigInfoRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SlaveVariablesConfigInfoRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SlaveVariablesConfigInfoRequest) Table() flatbuffers.Table {
	return rcv._tab
}

///Type and value to address a specific slave
func (rcv *SlaveVariablesConfigInfoRequest) AddressedRequest(obj *AddressedRequest) *AddressedRequest {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(AddressedRequest)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

///Type and value to address a specific slave
///Variable type
///e.g. "input" or "output"
func (rcv *SlaveVariablesConfigInfoRequest) VarType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///Variable type
///e.g. "input" or "output"
func SlaveVariablesConfigInfoRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SlaveVariablesConfigInfoRequestAddAddressedRequest(builder *flatbuffers.Builder, addressedRequest flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(addressedRequest), 0)
}
func SlaveVariablesConfigInfoRequestAddVarType(builder *flatbuffers.Builder, varType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(varType), 0)
}
func SlaveVariablesConfigInfoRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
