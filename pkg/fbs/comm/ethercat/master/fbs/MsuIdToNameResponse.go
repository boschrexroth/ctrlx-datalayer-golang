// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Master sync unit id to name response.
type MsuIdToNameResponseT struct {
	Id uint16 `json:"id"`
	Name string `json:"name"`
}

func (t *MsuIdToNameResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	MsuIdToNameResponseStart(builder)
	MsuIdToNameResponseAddId(builder, t.Id)
	MsuIdToNameResponseAddName(builder, nameOffset)
	return MsuIdToNameResponseEnd(builder)
}

func (rcv *MsuIdToNameResponse) UnPackTo(t *MsuIdToNameResponseT) {
	t.Id = rcv.Id()
	t.Name = string(rcv.Name())
}

func (rcv *MsuIdToNameResponse) UnPack() *MsuIdToNameResponseT {
	if rcv == nil { return nil }
	t := &MsuIdToNameResponseT{}
	rcv.UnPackTo(t)
	return t
}

type MsuIdToNameResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsMsuIdToNameResponse(buf []byte, offset flatbuffers.UOffsetT) *MsuIdToNameResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MsuIdToNameResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMsuIdToNameResponse(buf []byte, offset flatbuffers.UOffsetT) *MsuIdToNameResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MsuIdToNameResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MsuIdToNameResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MsuIdToNameResponse) Table() flatbuffers.Table {
	return rcv._tab
}

///Master sync unit id.
func (rcv *MsuIdToNameResponse) Id() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

///Master sync unit id.
func (rcv *MsuIdToNameResponse) MutateId(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

///Master sync unit name.
func (rcv *MsuIdToNameResponse) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///Master sync unit name.
func MsuIdToNameResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func MsuIdToNameResponseAddId(builder *flatbuffers.Builder, id uint16) {
	builder.PrependUint16Slot(0, id, 0)
}
func MsuIdToNameResponseAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func MsuIdToNameResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
