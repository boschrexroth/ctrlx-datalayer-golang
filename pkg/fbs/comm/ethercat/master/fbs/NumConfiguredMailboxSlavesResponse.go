// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NumConfiguredMailboxSlavesResponseT struct {
	NumSlaves uint32
}

func (t *NumConfiguredMailboxSlavesResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	NumConfiguredMailboxSlavesResponseStart(builder)
	NumConfiguredMailboxSlavesResponseAddNumSlaves(builder, t.NumSlaves)
	return NumConfiguredMailboxSlavesResponseEnd(builder)
}

func (rcv *NumConfiguredMailboxSlavesResponse) UnPackTo(t *NumConfiguredMailboxSlavesResponseT) {
	t.NumSlaves = rcv.NumSlaves()
}

func (rcv *NumConfiguredMailboxSlavesResponse) UnPack() *NumConfiguredMailboxSlavesResponseT {
	if rcv == nil { return nil }
	t := &NumConfiguredMailboxSlavesResponseT{}
	rcv.UnPackTo(t)
	return t
}

type NumConfiguredMailboxSlavesResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsNumConfiguredMailboxSlavesResponse(buf []byte, offset flatbuffers.UOffsetT) *NumConfiguredMailboxSlavesResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NumConfiguredMailboxSlavesResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsNumConfiguredMailboxSlavesResponse(buf []byte, offset flatbuffers.UOffsetT) *NumConfiguredMailboxSlavesResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NumConfiguredMailboxSlavesResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *NumConfiguredMailboxSlavesResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NumConfiguredMailboxSlavesResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NumConfiguredMailboxSlavesResponse) NumSlaves() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NumConfiguredMailboxSlavesResponse) MutateNumSlaves(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func NumConfiguredMailboxSlavesResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func NumConfiguredMailboxSlavesResponseAddNumSlaves(builder *flatbuffers.Builder, numSlaves uint32) {
	builder.PrependUint32Slot(0, numSlaves, 0)
}
func NumConfiguredMailboxSlavesResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
