// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EthercatMemoryInfo struct {
	_tab flatbuffers.Struct
}

func (rcv *EthercatMemoryInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EthercatMemoryInfo) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *EthercatMemoryInfo) Offset() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *EthercatMemoryInfo) MutateOffset(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *EthercatMemoryInfo) Size() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *EthercatMemoryInfo) MutateSize(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func CreateEthercatMemoryInfo(builder *flatbuffers.Builder, offset uint32, size uint32) flatbuffers.UOffsetT {
	builder.Prep(4, 8)
	builder.PrependUint32(size)
	builder.PrependUint32(offset)
	return builder.Offset()
}
