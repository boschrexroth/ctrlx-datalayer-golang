// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ObjectDictionaryListResponseT struct {
	Indices []uint16 `json:"indices"`
}

func (t *ObjectDictionaryListResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	indicesOffset := flatbuffers.UOffsetT(0)
	if t.Indices != nil {
		indicesLength := len(t.Indices)
		ObjectDictionaryListResponseStartIndicesVector(builder, indicesLength)
		for j := indicesLength - 1; j >= 0; j-- {
			builder.PrependUint16(t.Indices[j])
		}
		indicesOffset = builder.EndVector(indicesLength)
	}
	ObjectDictionaryListResponseStart(builder)
	ObjectDictionaryListResponseAddIndices(builder, indicesOffset)
	return ObjectDictionaryListResponseEnd(builder)
}

func (rcv *ObjectDictionaryListResponse) UnPackTo(t *ObjectDictionaryListResponseT) {
	indicesLength := rcv.IndicesLength()
	t.Indices = make([]uint16, indicesLength)
	for j := 0; j < indicesLength; j++ {
		t.Indices[j] = rcv.Indices(j)
	}
}

func (rcv *ObjectDictionaryListResponse) UnPack() *ObjectDictionaryListResponseT {
	if rcv == nil { return nil }
	t := &ObjectDictionaryListResponseT{}
	rcv.UnPackTo(t)
	return t
}

type ObjectDictionaryListResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsObjectDictionaryListResponse(buf []byte, offset flatbuffers.UOffsetT) *ObjectDictionaryListResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ObjectDictionaryListResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsObjectDictionaryListResponse(buf []byte, offset flatbuffers.UOffsetT) *ObjectDictionaryListResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ObjectDictionaryListResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ObjectDictionaryListResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ObjectDictionaryListResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ObjectDictionaryListResponse) Indices(j int) uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *ObjectDictionaryListResponse) IndicesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ObjectDictionaryListResponse) MutateIndices(j int, n uint16) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint16(a+flatbuffers.UOffsetT(j*2), n)
	}
	return false
}

func ObjectDictionaryListResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ObjectDictionaryListResponseAddIndices(builder *flatbuffers.Builder, indices flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(indices), 0)
}
func ObjectDictionaryListResponseStartIndicesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func ObjectDictionaryListResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
