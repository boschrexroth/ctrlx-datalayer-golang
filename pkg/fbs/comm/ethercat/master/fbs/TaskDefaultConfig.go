// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Request a new EtherCAT-Master instance
type TaskDefaultConfigT struct {
	DefaultTaskConfig *TaskConfigurationT `json:"defaultTaskConfig"`
}

func (t *TaskDefaultConfigT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	defaultTaskConfigOffset := t.DefaultTaskConfig.Pack(builder)
	TaskDefaultConfigStart(builder)
	TaskDefaultConfigAddDefaultTaskConfig(builder, defaultTaskConfigOffset)
	return TaskDefaultConfigEnd(builder)
}

func (rcv *TaskDefaultConfig) UnPackTo(t *TaskDefaultConfigT) {
	t.DefaultTaskConfig = rcv.DefaultTaskConfig(nil).UnPack()
}

func (rcv *TaskDefaultConfig) UnPack() *TaskDefaultConfigT {
	if rcv == nil { return nil }
	t := &TaskDefaultConfigT{}
	rcv.UnPackTo(t)
	return t
}

type TaskDefaultConfig struct {
	_tab flatbuffers.Table
}

func GetRootAsTaskDefaultConfig(buf []byte, offset flatbuffers.UOffsetT) *TaskDefaultConfig {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TaskDefaultConfig{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTaskDefaultConfig(buf []byte, offset flatbuffers.UOffsetT) *TaskDefaultConfig {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TaskDefaultConfig{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TaskDefaultConfig) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TaskDefaultConfig) Table() flatbuffers.Table {
	return rcv._tab
}

///Default task configuration for EtherCAT callable
func (rcv *TaskDefaultConfig) DefaultTaskConfig(obj *TaskConfiguration) *TaskConfiguration {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TaskConfiguration)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

///Default task configuration for EtherCAT callable
func TaskDefaultConfigStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func TaskDefaultConfigAddDefaultTaskConfig(builder *flatbuffers.Builder, defaultTaskConfig flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(defaultTaskConfig), 0)
}
func TaskDefaultConfigEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
