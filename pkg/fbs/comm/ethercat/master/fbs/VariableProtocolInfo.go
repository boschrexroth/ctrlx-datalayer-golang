// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type VariableProtocolInfoT struct {
	Coe *CoeVariableInfoT `json:"coe"`
	Soe *SoeVariableInfoT `json:"soe"`
}

func (t *VariableProtocolInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	coeOffset := t.Coe.Pack(builder)
	soeOffset := t.Soe.Pack(builder)
	VariableProtocolInfoStart(builder)
	VariableProtocolInfoAddCoe(builder, coeOffset)
	VariableProtocolInfoAddSoe(builder, soeOffset)
	return VariableProtocolInfoEnd(builder)
}

func (rcv *VariableProtocolInfo) UnPackTo(t *VariableProtocolInfoT) {
	t.Coe = rcv.Coe(nil).UnPack()
	t.Soe = rcv.Soe(nil).UnPack()
}

func (rcv *VariableProtocolInfo) UnPack() *VariableProtocolInfoT {
	if rcv == nil { return nil }
	t := &VariableProtocolInfoT{}
	rcv.UnPackTo(t)
	return t
}

type VariableProtocolInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsVariableProtocolInfo(buf []byte, offset flatbuffers.UOffsetT) *VariableProtocolInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &VariableProtocolInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsVariableProtocolInfo(buf []byte, offset flatbuffers.UOffsetT) *VariableProtocolInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &VariableProtocolInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *VariableProtocolInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *VariableProtocolInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *VariableProtocolInfo) Coe(obj *CoeVariableInfo) *CoeVariableInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CoeVariableInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *VariableProtocolInfo) Soe(obj *SoeVariableInfo) *SoeVariableInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(SoeVariableInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func VariableProtocolInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func VariableProtocolInfoAddCoe(builder *flatbuffers.Builder, coe flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(coe), 0)
}
func VariableProtocolInfoAddSoe(builder *flatbuffers.Builder, soe flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(soe), 0)
}
func VariableProtocolInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
