// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Request a new EtherCAT-Master instance
type InstancesCreateRequestT struct {
	InstanceName string `json:"instanceName"`
	Port string `json:"port"`
	LinkLayer string `json:"linkLayer"`
	Arguments string `json:"arguments"`
	TaskConfig *TaskConfigurationT `json:"taskConfig"`
}

func (t *InstancesCreateRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	instanceNameOffset := flatbuffers.UOffsetT(0)
	if t.InstanceName != "" {
		instanceNameOffset = builder.CreateString(t.InstanceName)
	}
	portOffset := flatbuffers.UOffsetT(0)
	if t.Port != "" {
		portOffset = builder.CreateString(t.Port)
	}
	linkLayerOffset := flatbuffers.UOffsetT(0)
	if t.LinkLayer != "" {
		linkLayerOffset = builder.CreateString(t.LinkLayer)
	}
	argumentsOffset := flatbuffers.UOffsetT(0)
	if t.Arguments != "" {
		argumentsOffset = builder.CreateString(t.Arguments)
	}
	taskConfigOffset := t.TaskConfig.Pack(builder)
	InstancesCreateRequestStart(builder)
	InstancesCreateRequestAddInstanceName(builder, instanceNameOffset)
	InstancesCreateRequestAddPort(builder, portOffset)
	InstancesCreateRequestAddLinkLayer(builder, linkLayerOffset)
	InstancesCreateRequestAddArguments(builder, argumentsOffset)
	InstancesCreateRequestAddTaskConfig(builder, taskConfigOffset)
	return InstancesCreateRequestEnd(builder)
}

func (rcv *InstancesCreateRequest) UnPackTo(t *InstancesCreateRequestT) {
	t.InstanceName = string(rcv.InstanceName())
	t.Port = string(rcv.Port())
	t.LinkLayer = string(rcv.LinkLayer())
	t.Arguments = string(rcv.Arguments())
	t.TaskConfig = rcv.TaskConfig(nil).UnPack()
}

func (rcv *InstancesCreateRequest) UnPack() *InstancesCreateRequestT {
	if rcv == nil { return nil }
	t := &InstancesCreateRequestT{}
	rcv.UnPackTo(t)
	return t
}

type InstancesCreateRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsInstancesCreateRequest(buf []byte, offset flatbuffers.UOffsetT) *InstancesCreateRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &InstancesCreateRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsInstancesCreateRequest(buf []byte, offset flatbuffers.UOffsetT) *InstancesCreateRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &InstancesCreateRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *InstancesCreateRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *InstancesCreateRequest) Table() flatbuffers.Table {
	return rcv._tab
}

///Name of EtherCAT-Master instance 
///Must be unique, non case sensitive
///Must start with a letter, may contain numbers
///May contain underscore (_), but not in sequence
///May have up to 15 characters
func (rcv *InstancesCreateRequest) InstanceName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///Name of EtherCAT-Master instance 
///Must be unique, non case sensitive
///Must start with a letter, may contain numbers
///May contain underscore (_), but not in sequence
///May have up to 15 characters
///Port name
func (rcv *InstancesCreateRequest) Port() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///Port name
///Reserved for future use
func (rcv *InstancesCreateRequest) LinkLayer() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///Reserved for future use
///Reserved for future use
func (rcv *InstancesCreateRequest) Arguments() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///Reserved for future use
///Default task configuration for EtherCAT callable
func (rcv *InstancesCreateRequest) TaskConfig(obj *TaskConfiguration) *TaskConfiguration {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TaskConfiguration)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

///Default task configuration for EtherCAT callable
func InstancesCreateRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func InstancesCreateRequestAddInstanceName(builder *flatbuffers.Builder, instanceName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(instanceName), 0)
}
func InstancesCreateRequestAddPort(builder *flatbuffers.Builder, port flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(port), 0)
}
func InstancesCreateRequestAddLinkLayer(builder *flatbuffers.Builder, linkLayer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(linkLayer), 0)
}
func InstancesCreateRequestAddArguments(builder *flatbuffers.Builder, arguments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(arguments), 0)
}
func InstancesCreateRequestAddTaskConfig(builder *flatbuffers.Builder, taskConfig flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(taskConfig), 0)
}
func InstancesCreateRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
