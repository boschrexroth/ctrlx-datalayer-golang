// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Master sync unit id list response.
type MsuIdListResponseT struct {
	IdList []uint16 `json:"idList"`
}

func (t *MsuIdListResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	idListOffset := flatbuffers.UOffsetT(0)
	if t.IdList != nil {
		idListLength := len(t.IdList)
		MsuIdListResponseStartIdListVector(builder, idListLength)
		for j := idListLength - 1; j >= 0; j-- {
			builder.PrependUint16(t.IdList[j])
		}
		idListOffset = builder.EndVector(idListLength)
	}
	MsuIdListResponseStart(builder)
	MsuIdListResponseAddIdList(builder, idListOffset)
	return MsuIdListResponseEnd(builder)
}

func (rcv *MsuIdListResponse) UnPackTo(t *MsuIdListResponseT) {
	idListLength := rcv.IdListLength()
	t.IdList = make([]uint16, idListLength)
	for j := 0; j < idListLength; j++ {
		t.IdList[j] = rcv.IdList(j)
	}
}

func (rcv *MsuIdListResponse) UnPack() *MsuIdListResponseT {
	if rcv == nil { return nil }
	t := &MsuIdListResponseT{}
	rcv.UnPackTo(t)
	return t
}

type MsuIdListResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsMsuIdListResponse(buf []byte, offset flatbuffers.UOffsetT) *MsuIdListResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MsuIdListResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMsuIdListResponse(buf []byte, offset flatbuffers.UOffsetT) *MsuIdListResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MsuIdListResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MsuIdListResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MsuIdListResponse) Table() flatbuffers.Table {
	return rcv._tab
}

///Master sync unit id numbers.
func (rcv *MsuIdListResponse) IdList(j int) uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *MsuIdListResponse) IdListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///Master sync unit id numbers.
func (rcv *MsuIdListResponse) MutateIdList(j int, n uint16) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint16(a+flatbuffers.UOffsetT(j*2), n)
	}
	return false
}

func MsuIdListResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func MsuIdListResponseAddIdList(builder *flatbuffers.Builder, idList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(idList), 0)
}
func MsuIdListResponseStartIdListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func MsuIdListResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
