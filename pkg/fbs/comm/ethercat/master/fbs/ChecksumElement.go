// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ChecksumElementT struct {
	Id string
	Checksum []byte
}

func (t *ChecksumElementT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	idOffset := builder.CreateString(t.Id)
	checksumOffset := flatbuffers.UOffsetT(0)
	if t.Checksum != nil {
		checksumOffset = builder.CreateByteString(t.Checksum)
	}
	ChecksumElementStart(builder)
	ChecksumElementAddId(builder, idOffset)
	ChecksumElementAddChecksum(builder, checksumOffset)
	return ChecksumElementEnd(builder)
}

func (rcv *ChecksumElement) UnPackTo(t *ChecksumElementT) {
	t.Id = string(rcv.Id())
	t.Checksum = rcv.ChecksumBytes()
}

func (rcv *ChecksumElement) UnPack() *ChecksumElementT {
	if rcv == nil { return nil }
	t := &ChecksumElementT{}
	rcv.UnPackTo(t)
	return t
}

type ChecksumElement struct {
	_tab flatbuffers.Table
}

func GetRootAsChecksumElement(buf []byte, offset flatbuffers.UOffsetT) *ChecksumElement {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ChecksumElement{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsChecksumElement(buf []byte, offset flatbuffers.UOffsetT) *ChecksumElement {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ChecksumElement{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ChecksumElement) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ChecksumElement) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ChecksumElement) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ChecksumElement) Checksum(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ChecksumElement) ChecksumLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ChecksumElement) ChecksumBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ChecksumElement) MutateChecksum(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func ChecksumElementStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ChecksumElementAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ChecksumElementAddChecksum(builder *flatbuffers.Builder, checksum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(checksum), 0)
}
func ChecksumElementStartChecksumVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ChecksumElementEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
