// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Master syc unit online response
type MsuOnlineInfoResponseT struct {
	Id uint16 `json:"id"`
	ProcessDataIn *EthercatMemoryInfoT `json:"processDataIn"`
	ProcessDataOut *EthercatMemoryInfoT `json:"processDataOut"`
	WkcStateDiagOffsIn uint16 `json:"wkcStateDiagOffsIn"`
	WkcStateDiagOffsOut uint16 `json:"wkcStateDiagOffsOut"`
	WkcValidOffsetIn uint32 `json:"wkcValidOffsetIn"`
	WkcValidOffsetOut uint32 `json:"wkcValidOffsetOut"`
	WkcValidIn bool `json:"wkcValidIn"`
	WkcValidOut bool `json:"wkcValidOut"`
}

func (t *MsuOnlineInfoResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	MsuOnlineInfoResponseStart(builder)
	MsuOnlineInfoResponseAddId(builder, t.Id)
	processDataInOffset := t.ProcessDataIn.Pack(builder)
	MsuOnlineInfoResponseAddProcessDataIn(builder, processDataInOffset)
	processDataOutOffset := t.ProcessDataOut.Pack(builder)
	MsuOnlineInfoResponseAddProcessDataOut(builder, processDataOutOffset)
	MsuOnlineInfoResponseAddWkcStateDiagOffsIn(builder, t.WkcStateDiagOffsIn)
	MsuOnlineInfoResponseAddWkcStateDiagOffsOut(builder, t.WkcStateDiagOffsOut)
	MsuOnlineInfoResponseAddWkcValidOffsetIn(builder, t.WkcValidOffsetIn)
	MsuOnlineInfoResponseAddWkcValidOffsetOut(builder, t.WkcValidOffsetOut)
	MsuOnlineInfoResponseAddWkcValidIn(builder, t.WkcValidIn)
	MsuOnlineInfoResponseAddWkcValidOut(builder, t.WkcValidOut)
	return MsuOnlineInfoResponseEnd(builder)
}

func (rcv *MsuOnlineInfoResponse) UnPackTo(t *MsuOnlineInfoResponseT) {
	t.Id = rcv.Id()
	t.ProcessDataIn = rcv.ProcessDataIn(nil).UnPack()
	t.ProcessDataOut = rcv.ProcessDataOut(nil).UnPack()
	t.WkcStateDiagOffsIn = rcv.WkcStateDiagOffsIn()
	t.WkcStateDiagOffsOut = rcv.WkcStateDiagOffsOut()
	t.WkcValidOffsetIn = rcv.WkcValidOffsetIn()
	t.WkcValidOffsetOut = rcv.WkcValidOffsetOut()
	t.WkcValidIn = rcv.WkcValidIn()
	t.WkcValidOut = rcv.WkcValidOut()
}

func (rcv *MsuOnlineInfoResponse) UnPack() *MsuOnlineInfoResponseT {
	if rcv == nil { return nil }
	t := &MsuOnlineInfoResponseT{}
	rcv.UnPackTo(t)
	return t
}

type MsuOnlineInfoResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsMsuOnlineInfoResponse(buf []byte, offset flatbuffers.UOffsetT) *MsuOnlineInfoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MsuOnlineInfoResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMsuOnlineInfoResponse(buf []byte, offset flatbuffers.UOffsetT) *MsuOnlineInfoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MsuOnlineInfoResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MsuOnlineInfoResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MsuOnlineInfoResponse) Table() flatbuffers.Table {
	return rcv._tab
}

///Msu Id
func (rcv *MsuOnlineInfoResponse) Id() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

///Msu Id
func (rcv *MsuOnlineInfoResponse) MutateId(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

///Memory information of input process data.
func (rcv *MsuOnlineInfoResponse) ProcessDataIn(obj *EthercatMemoryInfo) *EthercatMemoryInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(EthercatMemoryInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

///Memory information of input process data.
///Memory information of output process data.
func (rcv *MsuOnlineInfoResponse) ProcessDataOut(obj *EthercatMemoryInfo) *EthercatMemoryInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(EthercatMemoryInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

///Memory information of output process data.
///(internal - do not use)
func (rcv *MsuOnlineInfoResponse) WkcStateDiagOffsIn() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

///(internal - do not use)
func (rcv *MsuOnlineInfoResponse) MutateWkcStateDiagOffsIn(n uint16) bool {
	return rcv._tab.MutateUint16Slot(10, n)
}

///(internal - do not use)
func (rcv *MsuOnlineInfoResponse) WkcStateDiagOffsOut() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

///(internal - do not use)
func (rcv *MsuOnlineInfoResponse) MutateWkcStateDiagOffsOut(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

///Wkc valid offset for inputs in data layer rt input image.
func (rcv *MsuOnlineInfoResponse) WkcValidOffsetIn() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///Wkc valid offset for inputs in data layer rt input image.
func (rcv *MsuOnlineInfoResponse) MutateWkcValidOffsetIn(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

///Wkc valid offset for outputs in data layer rt input image.
func (rcv *MsuOnlineInfoResponse) WkcValidOffsetOut() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///Wkc valid offset for outputs in data layer rt input image.
func (rcv *MsuOnlineInfoResponse) MutateWkcValidOffsetOut(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

/// Indication if input process data are valid.
func (rcv *MsuOnlineInfoResponse) WkcValidIn() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indication if input process data are valid.
func (rcv *MsuOnlineInfoResponse) MutateWkcValidIn(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

/// Indication if output process data are valid.
func (rcv *MsuOnlineInfoResponse) WkcValidOut() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indication if output process data are valid.
func (rcv *MsuOnlineInfoResponse) MutateWkcValidOut(n bool) bool {
	return rcv._tab.MutateBoolSlot(20, n)
}

func MsuOnlineInfoResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func MsuOnlineInfoResponseAddId(builder *flatbuffers.Builder, id uint16) {
	builder.PrependUint16Slot(0, id, 0)
}
func MsuOnlineInfoResponseAddProcessDataIn(builder *flatbuffers.Builder, processDataIn flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(processDataIn), 0)
}
func MsuOnlineInfoResponseAddProcessDataOut(builder *flatbuffers.Builder, processDataOut flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(processDataOut), 0)
}
func MsuOnlineInfoResponseAddWkcStateDiagOffsIn(builder *flatbuffers.Builder, wkcStateDiagOffsIn uint16) {
	builder.PrependUint16Slot(3, wkcStateDiagOffsIn, 0)
}
func MsuOnlineInfoResponseAddWkcStateDiagOffsOut(builder *flatbuffers.Builder, wkcStateDiagOffsOut uint16) {
	builder.PrependUint16Slot(4, wkcStateDiagOffsOut, 0)
}
func MsuOnlineInfoResponseAddWkcValidOffsetIn(builder *flatbuffers.Builder, wkcValidOffsetIn uint32) {
	builder.PrependUint32Slot(5, wkcValidOffsetIn, 0)
}
func MsuOnlineInfoResponseAddWkcValidOffsetOut(builder *flatbuffers.Builder, wkcValidOffsetOut uint32) {
	builder.PrependUint32Slot(6, wkcValidOffsetOut, 0)
}
func MsuOnlineInfoResponseAddWkcValidIn(builder *flatbuffers.Builder, wkcValidIn bool) {
	builder.PrependBoolSlot(7, wkcValidIn, false)
}
func MsuOnlineInfoResponseAddWkcValidOut(builder *flatbuffers.Builder, wkcValidOut bool) {
	builder.PrependBoolSlot(8, wkcValidOut, false)
}
func MsuOnlineInfoResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
