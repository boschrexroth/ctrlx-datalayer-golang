// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///DC slave configuration response
type DcSlaveConfigInfoResponseT struct {
	DcSupport bool `json:"dcSupport"`
	DcReferenceClock bool `json:"dcReferenceClock"`
	CycleTime0 uint32 `json:"CycleTime0"`
	CycleTime1 uint32 `json:"CycleTime1"`
	ShiftTime int32 `json:"ShiftTime"`
}

func (t *DcSlaveConfigInfoResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	DcSlaveConfigInfoResponseStart(builder)
	DcSlaveConfigInfoResponseAddDcSupport(builder, t.DcSupport)
	DcSlaveConfigInfoResponseAddDcReferenceClock(builder, t.DcReferenceClock)
	DcSlaveConfigInfoResponseAddCycleTime0(builder, t.CycleTime0)
	DcSlaveConfigInfoResponseAddCycleTime1(builder, t.CycleTime1)
	DcSlaveConfigInfoResponseAddShiftTime(builder, t.ShiftTime)
	return DcSlaveConfigInfoResponseEnd(builder)
}

func (rcv *DcSlaveConfigInfoResponse) UnPackTo(t *DcSlaveConfigInfoResponseT) {
	t.DcSupport = rcv.DcSupport()
	t.DcReferenceClock = rcv.DcReferenceClock()
	t.CycleTime0 = rcv.CycleTime0()
	t.CycleTime1 = rcv.CycleTime1()
	t.ShiftTime = rcv.ShiftTime()
}

func (rcv *DcSlaveConfigInfoResponse) UnPack() *DcSlaveConfigInfoResponseT {
	if rcv == nil { return nil }
	t := &DcSlaveConfigInfoResponseT{}
	rcv.UnPackTo(t)
	return t
}

type DcSlaveConfigInfoResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsDcSlaveConfigInfoResponse(buf []byte, offset flatbuffers.UOffsetT) *DcSlaveConfigInfoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DcSlaveConfigInfoResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDcSlaveConfigInfoResponse(buf []byte, offset flatbuffers.UOffsetT) *DcSlaveConfigInfoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DcSlaveConfigInfoResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DcSlaveConfigInfoResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DcSlaveConfigInfoResponse) Table() flatbuffers.Table {
	return rcv._tab
}

///Slave supports DC (Distributed Clock)
func (rcv *DcSlaveConfigInfoResponse) DcSupport() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

///Slave supports DC (Distributed Clock)
func (rcv *DcSlaveConfigInfoResponse) MutateDcSupport(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

///Slave is reference clock
func (rcv *DcSlaveConfigInfoResponse) DcReferenceClock() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

///Slave is reference clock
func (rcv *DcSlaveConfigInfoResponse) MutateDcReferenceClock(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

///Cycle time of Sync0 event (as defined in ETG.2100) in nanoseconds
func (rcv *DcSlaveConfigInfoResponse) CycleTime0() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///Cycle time of Sync0 event (as defined in ETG.2100) in nanoseconds
func (rcv *DcSlaveConfigInfoResponse) MutateCycleTime0(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

///Cycle time of Sync1 (calculated value as defined in ETG.2100) event in nanoseconds
func (rcv *DcSlaveConfigInfoResponse) CycleTime1() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///Cycle time of Sync1 (calculated value as defined in ETG.2100) event in nanoseconds
func (rcv *DcSlaveConfigInfoResponse) MutateCycleTime1(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

///Shift time of Sync 0 event (as defined in ETG.2100) in nanoseconds
func (rcv *DcSlaveConfigInfoResponse) ShiftTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///Shift time of Sync 0 event (as defined in ETG.2100) in nanoseconds
func (rcv *DcSlaveConfigInfoResponse) MutateShiftTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func DcSlaveConfigInfoResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func DcSlaveConfigInfoResponseAddDcSupport(builder *flatbuffers.Builder, dcSupport bool) {
	builder.PrependBoolSlot(0, dcSupport, false)
}
func DcSlaveConfigInfoResponseAddDcReferenceClock(builder *flatbuffers.Builder, dcReferenceClock bool) {
	builder.PrependBoolSlot(1, dcReferenceClock, false)
}
func DcSlaveConfigInfoResponseAddCycleTime0(builder *flatbuffers.Builder, cycleTime0 uint32) {
	builder.PrependUint32Slot(2, cycleTime0, 0)
}
func DcSlaveConfigInfoResponseAddCycleTime1(builder *flatbuffers.Builder, cycleTime1 uint32) {
	builder.PrependUint32Slot(3, cycleTime1, 0)
}
func DcSlaveConfigInfoResponseAddShiftTime(builder *flatbuffers.Builder, shiftTime int32) {
	builder.PrependInt32Slot(4, shiftTime, 0)
}
func DcSlaveConfigInfoResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
