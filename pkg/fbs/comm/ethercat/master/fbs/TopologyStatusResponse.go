// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TopologyStatusResponseT struct {
	State TopologyState
	NumChanges uint32
}

func (t *TopologyStatusResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	TopologyStatusResponseStart(builder)
	TopologyStatusResponseAddState(builder, t.State)
	TopologyStatusResponseAddNumChanges(builder, t.NumChanges)
	return TopologyStatusResponseEnd(builder)
}

func (rcv *TopologyStatusResponse) UnPackTo(t *TopologyStatusResponseT) {
	t.State = rcv.State()
	t.NumChanges = rcv.NumChanges()
}

func (rcv *TopologyStatusResponse) UnPack() *TopologyStatusResponseT {
	if rcv == nil { return nil }
	t := &TopologyStatusResponseT{}
	rcv.UnPackTo(t)
	return t
}

type TopologyStatusResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsTopologyStatusResponse(buf []byte, offset flatbuffers.UOffsetT) *TopologyStatusResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TopologyStatusResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTopologyStatusResponse(buf []byte, offset flatbuffers.UOffsetT) *TopologyStatusResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TopologyStatusResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TopologyStatusResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TopologyStatusResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TopologyStatusResponse) State() TopologyState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return TopologyState(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *TopologyStatusResponse) MutateState(n TopologyState) bool {
	return rcv._tab.MutateUint32Slot(4, uint32(n))
}

func (rcv *TopologyStatusResponse) NumChanges() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TopologyStatusResponse) MutateNumChanges(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func TopologyStatusResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TopologyStatusResponseAddState(builder *flatbuffers.Builder, state TopologyState) {
	builder.PrependUint32Slot(0, uint32(state), 0)
}
func TopologyStatusResponseAddNumChanges(builder *flatbuffers.Builder, numChanges uint32) {
	builder.PrependUint32Slot(1, numChanges, 0)
}
func TopologyStatusResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
