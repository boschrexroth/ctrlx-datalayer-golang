// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SlaveEepromRequestT struct {
	AddressType Addresstype
	Address uint16
	EepromOffset uint16
	Data []uint16
	MaxLength uint32
}

func (t *SlaveEepromRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	dataOffset := flatbuffers.UOffsetT(0)
	if t.Data != nil {
		dataLength := len(t.Data)
		SlaveEepromRequestStartDataVector(builder, dataLength)
		for j := dataLength - 1; j >= 0; j-- {
			builder.PrependUint16(t.Data[j])
		}
		dataOffset = builder.EndVector(dataLength)
	}
	SlaveEepromRequestStart(builder)
	SlaveEepromRequestAddAddressType(builder, t.AddressType)
	SlaveEepromRequestAddAddress(builder, t.Address)
	SlaveEepromRequestAddEepromOffset(builder, t.EepromOffset)
	SlaveEepromRequestAddData(builder, dataOffset)
	SlaveEepromRequestAddMaxLength(builder, t.MaxLength)
	return SlaveEepromRequestEnd(builder)
}

func (rcv *SlaveEepromRequest) UnPackTo(t *SlaveEepromRequestT) {
	t.AddressType = rcv.AddressType()
	t.Address = rcv.Address()
	t.EepromOffset = rcv.EepromOffset()
	dataLength := rcv.DataLength()
	t.Data = make([]uint16, dataLength)
	for j := 0; j < dataLength; j++ {
		t.Data[j] = rcv.Data(j)
	}
	t.MaxLength = rcv.MaxLength()
}

func (rcv *SlaveEepromRequest) UnPack() *SlaveEepromRequestT {
	if rcv == nil { return nil }
	t := &SlaveEepromRequestT{}
	rcv.UnPackTo(t)
	return t
}

type SlaveEepromRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsSlaveEepromRequest(buf []byte, offset flatbuffers.UOffsetT) *SlaveEepromRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SlaveEepromRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSlaveEepromRequest(buf []byte, offset flatbuffers.UOffsetT) *SlaveEepromRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SlaveEepromRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SlaveEepromRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SlaveEepromRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SlaveEepromRequest) AddressType() Addresstype {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Addresstype(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SlaveEepromRequest) MutateAddressType(n Addresstype) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *SlaveEepromRequest) Address() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SlaveEepromRequest) MutateAddress(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *SlaveEepromRequest) EepromOffset() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SlaveEepromRequest) MutateEepromOffset(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *SlaveEepromRequest) Data(j int) uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *SlaveEepromRequest) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SlaveEepromRequest) MutateData(j int, n uint16) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint16(a+flatbuffers.UOffsetT(j*2), n)
	}
	return false
}

func (rcv *SlaveEepromRequest) MaxLength() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SlaveEepromRequest) MutateMaxLength(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func SlaveEepromRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func SlaveEepromRequestAddAddressType(builder *flatbuffers.Builder, addressType Addresstype) {
	builder.PrependByteSlot(0, byte(addressType), 0)
}
func SlaveEepromRequestAddAddress(builder *flatbuffers.Builder, address uint16) {
	builder.PrependUint16Slot(1, address, 0)
}
func SlaveEepromRequestAddEepromOffset(builder *flatbuffers.Builder, eepromOffset uint16) {
	builder.PrependUint16Slot(2, eepromOffset, 0)
}
func SlaveEepromRequestAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(data), 0)
}
func SlaveEepromRequestStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func SlaveEepromRequestAddMaxLength(builder *flatbuffers.Builder, maxLength uint32) {
	builder.PrependUint32Slot(4, maxLength, 0)
}
func SlaveEepromRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
