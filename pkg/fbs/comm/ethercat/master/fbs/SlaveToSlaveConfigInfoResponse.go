// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Slave to slave configuration information response
type SlaveToSlaveConfigInfoResponseT struct {
	ProcessDataCopy bool `json:"processDataCopy"`
	ProcessDataCopyMode SlaveToSlaveCopyMode `json:"processDataCopyMode"`
}

func (t *SlaveToSlaveConfigInfoResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	SlaveToSlaveConfigInfoResponseStart(builder)
	SlaveToSlaveConfigInfoResponseAddProcessDataCopy(builder, t.ProcessDataCopy)
	SlaveToSlaveConfigInfoResponseAddProcessDataCopyMode(builder, t.ProcessDataCopyMode)
	return SlaveToSlaveConfigInfoResponseEnd(builder)
}

func (rcv *SlaveToSlaveConfigInfoResponse) UnPackTo(t *SlaveToSlaveConfigInfoResponseT) {
	t.ProcessDataCopy = rcv.ProcessDataCopy()
	t.ProcessDataCopyMode = rcv.ProcessDataCopyMode()
}

func (rcv *SlaveToSlaveConfigInfoResponse) UnPack() *SlaveToSlaveConfigInfoResponseT {
	if rcv == nil { return nil }
	t := &SlaveToSlaveConfigInfoResponseT{}
	rcv.UnPackTo(t)
	return t
}

type SlaveToSlaveConfigInfoResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsSlaveToSlaveConfigInfoResponse(buf []byte, offset flatbuffers.UOffsetT) *SlaveToSlaveConfigInfoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SlaveToSlaveConfigInfoResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSlaveToSlaveConfigInfoResponse(buf []byte, offset flatbuffers.UOffsetT) *SlaveToSlaveConfigInfoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SlaveToSlaveConfigInfoResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SlaveToSlaveConfigInfoResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SlaveToSlaveConfigInfoResponse) Table() flatbuffers.Table {
	return rcv._tab
}

///Slave to slave copy configured
func (rcv *SlaveToSlaveConfigInfoResponse) ProcessDataCopy() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

///Slave to slave copy configured
func (rcv *SlaveToSlaveConfigInfoResponse) MutateProcessDataCopy(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

///Slave to slave copy mode for process data communication
func (rcv *SlaveToSlaveConfigInfoResponse) ProcessDataCopyMode() SlaveToSlaveCopyMode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return SlaveToSlaveCopyMode(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

///Slave to slave copy mode for process data communication
func (rcv *SlaveToSlaveConfigInfoResponse) MutateProcessDataCopyMode(n SlaveToSlaveCopyMode) bool {
	return rcv._tab.MutateUint32Slot(6, uint32(n))
}

func SlaveToSlaveConfigInfoResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SlaveToSlaveConfigInfoResponseAddProcessDataCopy(builder *flatbuffers.Builder, processDataCopy bool) {
	builder.PrependBoolSlot(0, processDataCopy, false)
}
func SlaveToSlaveConfigInfoResponseAddProcessDataCopyMode(builder *flatbuffers.Builder, processDataCopyMode SlaveToSlaveCopyMode) {
	builder.PrependUint32Slot(1, uint32(processDataCopyMode), 0)
}
func SlaveToSlaveConfigInfoResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
