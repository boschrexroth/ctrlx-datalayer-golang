// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SlaveStateResponseT struct {
	CurrentState EthercatState
	RequestedState EthercatState
}

func (t *SlaveStateResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	SlaveStateResponseStart(builder)
	SlaveStateResponseAddCurrentState(builder, t.CurrentState)
	SlaveStateResponseAddRequestedState(builder, t.RequestedState)
	return SlaveStateResponseEnd(builder)
}

func (rcv *SlaveStateResponse) UnPackTo(t *SlaveStateResponseT) {
	t.CurrentState = rcv.CurrentState()
	t.RequestedState = rcv.RequestedState()
}

func (rcv *SlaveStateResponse) UnPack() *SlaveStateResponseT {
	if rcv == nil { return nil }
	t := &SlaveStateResponseT{}
	rcv.UnPackTo(t)
	return t
}

type SlaveStateResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsSlaveStateResponse(buf []byte, offset flatbuffers.UOffsetT) *SlaveStateResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SlaveStateResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSlaveStateResponse(buf []byte, offset flatbuffers.UOffsetT) *SlaveStateResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SlaveStateResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SlaveStateResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SlaveStateResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SlaveStateResponse) CurrentState() EthercatState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return EthercatState(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SlaveStateResponse) MutateCurrentState(n EthercatState) bool {
	return rcv._tab.MutateUint16Slot(4, uint16(n))
}

func (rcv *SlaveStateResponse) RequestedState() EthercatState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return EthercatState(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SlaveStateResponse) MutateRequestedState(n EthercatState) bool {
	return rcv._tab.MutateUint16Slot(6, uint16(n))
}

func SlaveStateResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SlaveStateResponseAddCurrentState(builder *flatbuffers.Builder, currentState EthercatState) {
	builder.PrependUint16Slot(0, uint16(currentState), 0)
}
func SlaveStateResponseAddRequestedState(builder *flatbuffers.Builder, requestedState EthercatState) {
	builder.PrependUint16Slot(1, uint16(requestedState), 0)
}
func SlaveStateResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
