// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Master sync unit id to name request.
type MsuIdToNameRequestT struct {
	Id uint16 `json:"id"`
}

func (t *MsuIdToNameRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	MsuIdToNameRequestStart(builder)
	MsuIdToNameRequestAddId(builder, t.Id)
	return MsuIdToNameRequestEnd(builder)
}

func (rcv *MsuIdToNameRequest) UnPackTo(t *MsuIdToNameRequestT) {
	t.Id = rcv.Id()
}

func (rcv *MsuIdToNameRequest) UnPack() *MsuIdToNameRequestT {
	if rcv == nil { return nil }
	t := &MsuIdToNameRequestT{}
	rcv.UnPackTo(t)
	return t
}

type MsuIdToNameRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsMsuIdToNameRequest(buf []byte, offset flatbuffers.UOffsetT) *MsuIdToNameRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MsuIdToNameRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMsuIdToNameRequest(buf []byte, offset flatbuffers.UOffsetT) *MsuIdToNameRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MsuIdToNameRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MsuIdToNameRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MsuIdToNameRequest) Table() flatbuffers.Table {
	return rcv._tab
}

///Master sync unit id.
func (rcv *MsuIdToNameRequest) Id() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

///Master sync unit id.
func (rcv *MsuIdToNameRequest) MutateId(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func MsuIdToNameRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func MsuIdToNameRequestAddId(builder *flatbuffers.Builder, id uint16) {
	builder.PrependUint16Slot(0, id, 0)
}
func MsuIdToNameRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
