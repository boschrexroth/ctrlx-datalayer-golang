// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EoeConfigInfoResponseT struct {
	MacAddress []byte `json:"macAddress"`
	IpAddress []byte `json:"ipAddress"`
	SubnetMask []byte `json:"subnetMask"`
	DefaultGateway []byte `json:"defaultGateway"`
	DnsIpAddress []byte `json:"dnsIpAddress"`
	DnsName string `json:"dnsName"`
}

func (t *EoeConfigInfoResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	macAddressOffset := flatbuffers.UOffsetT(0)
	if t.MacAddress != nil {
		macAddressOffset = builder.CreateByteString(t.MacAddress)
	}
	ipAddressOffset := flatbuffers.UOffsetT(0)
	if t.IpAddress != nil {
		ipAddressOffset = builder.CreateByteString(t.IpAddress)
	}
	subnetMaskOffset := flatbuffers.UOffsetT(0)
	if t.SubnetMask != nil {
		subnetMaskOffset = builder.CreateByteString(t.SubnetMask)
	}
	defaultGatewayOffset := flatbuffers.UOffsetT(0)
	if t.DefaultGateway != nil {
		defaultGatewayOffset = builder.CreateByteString(t.DefaultGateway)
	}
	dnsIpAddressOffset := flatbuffers.UOffsetT(0)
	if t.DnsIpAddress != nil {
		dnsIpAddressOffset = builder.CreateByteString(t.DnsIpAddress)
	}
	dnsNameOffset := flatbuffers.UOffsetT(0)
	if t.DnsName != "" {
		dnsNameOffset = builder.CreateString(t.DnsName)
	}
	EoeConfigInfoResponseStart(builder)
	EoeConfigInfoResponseAddMacAddress(builder, macAddressOffset)
	EoeConfigInfoResponseAddIpAddress(builder, ipAddressOffset)
	EoeConfigInfoResponseAddSubnetMask(builder, subnetMaskOffset)
	EoeConfigInfoResponseAddDefaultGateway(builder, defaultGatewayOffset)
	EoeConfigInfoResponseAddDnsIpAddress(builder, dnsIpAddressOffset)
	EoeConfigInfoResponseAddDnsName(builder, dnsNameOffset)
	return EoeConfigInfoResponseEnd(builder)
}

func (rcv *EoeConfigInfoResponse) UnPackTo(t *EoeConfigInfoResponseT) {
	t.MacAddress = rcv.MacAddressBytes()
	t.IpAddress = rcv.IpAddressBytes()
	t.SubnetMask = rcv.SubnetMaskBytes()
	t.DefaultGateway = rcv.DefaultGatewayBytes()
	t.DnsIpAddress = rcv.DnsIpAddressBytes()
	t.DnsName = string(rcv.DnsName())
}

func (rcv *EoeConfigInfoResponse) UnPack() *EoeConfigInfoResponseT {
	if rcv == nil { return nil }
	t := &EoeConfigInfoResponseT{}
	rcv.UnPackTo(t)
	return t
}

type EoeConfigInfoResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsEoeConfigInfoResponse(buf []byte, offset flatbuffers.UOffsetT) *EoeConfigInfoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EoeConfigInfoResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEoeConfigInfoResponse(buf []byte, offset flatbuffers.UOffsetT) *EoeConfigInfoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EoeConfigInfoResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EoeConfigInfoResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EoeConfigInfoResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EoeConfigInfoResponse) MacAddress(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *EoeConfigInfoResponse) MacAddressLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EoeConfigInfoResponse) MacAddressBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EoeConfigInfoResponse) MutateMacAddress(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *EoeConfigInfoResponse) IpAddress(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *EoeConfigInfoResponse) IpAddressLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EoeConfigInfoResponse) IpAddressBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EoeConfigInfoResponse) MutateIpAddress(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *EoeConfigInfoResponse) SubnetMask(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *EoeConfigInfoResponse) SubnetMaskLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EoeConfigInfoResponse) SubnetMaskBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EoeConfigInfoResponse) MutateSubnetMask(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *EoeConfigInfoResponse) DefaultGateway(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *EoeConfigInfoResponse) DefaultGatewayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EoeConfigInfoResponse) DefaultGatewayBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EoeConfigInfoResponse) MutateDefaultGateway(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *EoeConfigInfoResponse) DnsIpAddress(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *EoeConfigInfoResponse) DnsIpAddressLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EoeConfigInfoResponse) DnsIpAddressBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EoeConfigInfoResponse) MutateDnsIpAddress(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *EoeConfigInfoResponse) DnsName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func EoeConfigInfoResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func EoeConfigInfoResponseAddMacAddress(builder *flatbuffers.Builder, macAddress flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(macAddress), 0)
}
func EoeConfigInfoResponseStartMacAddressVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func EoeConfigInfoResponseAddIpAddress(builder *flatbuffers.Builder, ipAddress flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(ipAddress), 0)
}
func EoeConfigInfoResponseStartIpAddressVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func EoeConfigInfoResponseAddSubnetMask(builder *flatbuffers.Builder, subnetMask flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(subnetMask), 0)
}
func EoeConfigInfoResponseStartSubnetMaskVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func EoeConfigInfoResponseAddDefaultGateway(builder *flatbuffers.Builder, defaultGateway flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(defaultGateway), 0)
}
func EoeConfigInfoResponseStartDefaultGatewayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func EoeConfigInfoResponseAddDnsIpAddress(builder *flatbuffers.Builder, dnsIpAddress flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(dnsIpAddress), 0)
}
func EoeConfigInfoResponseStartDnsIpAddressVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func EoeConfigInfoResponseAddDnsName(builder *flatbuffers.Builder, dnsName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(dnsName), 0)
}
func EoeConfigInfoResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
