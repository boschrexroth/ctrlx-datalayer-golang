// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FrameStatisticResetRequestT struct {
	NumTxFrames bool
	NumRxFrames bool
	NumLostFrames bool
	NumCyclicFrames bool
	NumCyclicDatagrams bool
	NumAcyclicFrames bool
	NumAcyclicDatagrams bool
}

func (t *FrameStatisticResetRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	FrameStatisticResetRequestStart(builder)
	FrameStatisticResetRequestAddNumTxFrames(builder, t.NumTxFrames)
	FrameStatisticResetRequestAddNumRxFrames(builder, t.NumRxFrames)
	FrameStatisticResetRequestAddNumLostFrames(builder, t.NumLostFrames)
	FrameStatisticResetRequestAddNumCyclicFrames(builder, t.NumCyclicFrames)
	FrameStatisticResetRequestAddNumCyclicDatagrams(builder, t.NumCyclicDatagrams)
	FrameStatisticResetRequestAddNumAcyclicFrames(builder, t.NumAcyclicFrames)
	FrameStatisticResetRequestAddNumAcyclicDatagrams(builder, t.NumAcyclicDatagrams)
	return FrameStatisticResetRequestEnd(builder)
}

func (rcv *FrameStatisticResetRequest) UnPackTo(t *FrameStatisticResetRequestT) {
	t.NumTxFrames = rcv.NumTxFrames()
	t.NumRxFrames = rcv.NumRxFrames()
	t.NumLostFrames = rcv.NumLostFrames()
	t.NumCyclicFrames = rcv.NumCyclicFrames()
	t.NumCyclicDatagrams = rcv.NumCyclicDatagrams()
	t.NumAcyclicFrames = rcv.NumAcyclicFrames()
	t.NumAcyclicDatagrams = rcv.NumAcyclicDatagrams()
}

func (rcv *FrameStatisticResetRequest) UnPack() *FrameStatisticResetRequestT {
	if rcv == nil { return nil }
	t := &FrameStatisticResetRequestT{}
	rcv.UnPackTo(t)
	return t
}

type FrameStatisticResetRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsFrameStatisticResetRequest(buf []byte, offset flatbuffers.UOffsetT) *FrameStatisticResetRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FrameStatisticResetRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFrameStatisticResetRequest(buf []byte, offset flatbuffers.UOffsetT) *FrameStatisticResetRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FrameStatisticResetRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *FrameStatisticResetRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FrameStatisticResetRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FrameStatisticResetRequest) NumTxFrames() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FrameStatisticResetRequest) MutateNumTxFrames(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *FrameStatisticResetRequest) NumRxFrames() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FrameStatisticResetRequest) MutateNumRxFrames(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *FrameStatisticResetRequest) NumLostFrames() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FrameStatisticResetRequest) MutateNumLostFrames(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *FrameStatisticResetRequest) NumCyclicFrames() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FrameStatisticResetRequest) MutateNumCyclicFrames(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *FrameStatisticResetRequest) NumCyclicDatagrams() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FrameStatisticResetRequest) MutateNumCyclicDatagrams(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *FrameStatisticResetRequest) NumAcyclicFrames() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FrameStatisticResetRequest) MutateNumAcyclicFrames(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *FrameStatisticResetRequest) NumAcyclicDatagrams() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FrameStatisticResetRequest) MutateNumAcyclicDatagrams(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func FrameStatisticResetRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func FrameStatisticResetRequestAddNumTxFrames(builder *flatbuffers.Builder, numTxFrames bool) {
	builder.PrependBoolSlot(0, numTxFrames, false)
}
func FrameStatisticResetRequestAddNumRxFrames(builder *flatbuffers.Builder, numRxFrames bool) {
	builder.PrependBoolSlot(1, numRxFrames, false)
}
func FrameStatisticResetRequestAddNumLostFrames(builder *flatbuffers.Builder, numLostFrames bool) {
	builder.PrependBoolSlot(2, numLostFrames, false)
}
func FrameStatisticResetRequestAddNumCyclicFrames(builder *flatbuffers.Builder, numCyclicFrames bool) {
	builder.PrependBoolSlot(3, numCyclicFrames, false)
}
func FrameStatisticResetRequestAddNumCyclicDatagrams(builder *flatbuffers.Builder, numCyclicDatagrams bool) {
	builder.PrependBoolSlot(4, numCyclicDatagrams, false)
}
func FrameStatisticResetRequestAddNumAcyclicFrames(builder *flatbuffers.Builder, numAcyclicFrames bool) {
	builder.PrependBoolSlot(5, numAcyclicFrames, false)
}
func FrameStatisticResetRequestAddNumAcyclicDatagrams(builder *flatbuffers.Builder, numAcyclicDatagrams bool) {
	builder.PrependBoolSlot(6, numAcyclicDatagrams, false)
}
func FrameStatisticResetRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
