// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AddressedRequestT struct {
	AddressType Addresstype `json:"addressType"`
	Address uint16 `json:"address"`
}

func (t *AddressedRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AddressedRequestStart(builder)
	AddressedRequestAddAddressType(builder, t.AddressType)
	AddressedRequestAddAddress(builder, t.Address)
	return AddressedRequestEnd(builder)
}

func (rcv *AddressedRequest) UnPackTo(t *AddressedRequestT) {
	t.AddressType = rcv.AddressType()
	t.Address = rcv.Address()
}

func (rcv *AddressedRequest) UnPack() *AddressedRequestT {
	if rcv == nil { return nil }
	t := &AddressedRequestT{}
	rcv.UnPackTo(t)
	return t
}

type AddressedRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsAddressedRequest(buf []byte, offset flatbuffers.UOffsetT) *AddressedRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AddressedRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAddressedRequest(buf []byte, offset flatbuffers.UOffsetT) *AddressedRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AddressedRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AddressedRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AddressedRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AddressedRequest) AddressType() Addresstype {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Addresstype(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *AddressedRequest) MutateAddressType(n Addresstype) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *AddressedRequest) Address() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AddressedRequest) MutateAddress(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func AddressedRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AddressedRequestAddAddressType(builder *flatbuffers.Builder, addressType Addresstype) {
	builder.PrependByteSlot(0, byte(addressType), 0)
}
func AddressedRequestAddAddress(builder *flatbuffers.Builder, address uint16) {
	builder.PrependUint16Slot(1, address, 0)
}
func AddressedRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
