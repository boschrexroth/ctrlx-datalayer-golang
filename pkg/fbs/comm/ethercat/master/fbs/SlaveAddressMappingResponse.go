// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SlaveAddressMappingResponseT struct {
	AddressMappingEntryList []*AddressMappingEntryT
}

func (t *SlaveAddressMappingResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	AddressMappingEntryListOffset := flatbuffers.UOffsetT(0)
	if t.AddressMappingEntryList != nil {
		AddressMappingEntryListLength := len(t.AddressMappingEntryList)
		AddressMappingEntryListOffsets := make([]flatbuffers.UOffsetT, AddressMappingEntryListLength)
		for j := 0; j < AddressMappingEntryListLength; j++ {
			AddressMappingEntryListOffsets[j] = t.AddressMappingEntryList[j].Pack(builder)
		}
		SlaveAddressMappingResponseStartAddressMappingEntryListVector(builder, AddressMappingEntryListLength)
		for j := AddressMappingEntryListLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(AddressMappingEntryListOffsets[j])
		}
		AddressMappingEntryListOffset = builder.EndVector(AddressMappingEntryListLength)
	}
	SlaveAddressMappingResponseStart(builder)
	SlaveAddressMappingResponseAddAddressMappingEntryList(builder, AddressMappingEntryListOffset)
	return SlaveAddressMappingResponseEnd(builder)
}

func (rcv *SlaveAddressMappingResponse) UnPackTo(t *SlaveAddressMappingResponseT) {
	AddressMappingEntryListLength := rcv.AddressMappingEntryListLength()
	t.AddressMappingEntryList = make([]*AddressMappingEntryT, AddressMappingEntryListLength)
	for j := 0; j < AddressMappingEntryListLength; j++ {
		x := AddressMappingEntry{}
		rcv.AddressMappingEntryList(&x, j)
		t.AddressMappingEntryList[j] = x.UnPack()
	}
}

func (rcv *SlaveAddressMappingResponse) UnPack() *SlaveAddressMappingResponseT {
	if rcv == nil { return nil }
	t := &SlaveAddressMappingResponseT{}
	rcv.UnPackTo(t)
	return t
}

type SlaveAddressMappingResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsSlaveAddressMappingResponse(buf []byte, offset flatbuffers.UOffsetT) *SlaveAddressMappingResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SlaveAddressMappingResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSlaveAddressMappingResponse(buf []byte, offset flatbuffers.UOffsetT) *SlaveAddressMappingResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SlaveAddressMappingResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SlaveAddressMappingResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SlaveAddressMappingResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SlaveAddressMappingResponse) AddressMappingEntryList(obj *AddressMappingEntry, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SlaveAddressMappingResponse) AddressMappingEntryListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func SlaveAddressMappingResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func SlaveAddressMappingResponseAddAddressMappingEntryList(builder *flatbuffers.Builder, AddressMappingEntryList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(AddressMappingEntryList), 0)
}
func SlaveAddressMappingResponseStartAddressMappingEntryListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SlaveAddressMappingResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
