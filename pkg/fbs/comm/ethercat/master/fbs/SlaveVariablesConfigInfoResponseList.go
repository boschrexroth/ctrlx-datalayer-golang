// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SlaveVariablesConfigInfoResponseListT struct {
	SlVarConfInfoResponseList []*SlaveVariablesConfigInfoEntryT `json:"slVarConfInfoResponseList"`
}

func (t *SlaveVariablesConfigInfoResponseListT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	slVarConfInfoResponseListOffset := flatbuffers.UOffsetT(0)
	if t.SlVarConfInfoResponseList != nil {
		slVarConfInfoResponseListLength := len(t.SlVarConfInfoResponseList)
		slVarConfInfoResponseListOffsets := make([]flatbuffers.UOffsetT, slVarConfInfoResponseListLength)
		for j := 0; j < slVarConfInfoResponseListLength; j++ {
			slVarConfInfoResponseListOffsets[j] = t.SlVarConfInfoResponseList[j].Pack(builder)
		}
		SlaveVariablesConfigInfoResponseListStartSlVarConfInfoResponseListVector(builder, slVarConfInfoResponseListLength)
		for j := slVarConfInfoResponseListLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(slVarConfInfoResponseListOffsets[j])
		}
		slVarConfInfoResponseListOffset = builder.EndVector(slVarConfInfoResponseListLength)
	}
	SlaveVariablesConfigInfoResponseListStart(builder)
	SlaveVariablesConfigInfoResponseListAddSlVarConfInfoResponseList(builder, slVarConfInfoResponseListOffset)
	return SlaveVariablesConfigInfoResponseListEnd(builder)
}

func (rcv *SlaveVariablesConfigInfoResponseList) UnPackTo(t *SlaveVariablesConfigInfoResponseListT) {
	slVarConfInfoResponseListLength := rcv.SlVarConfInfoResponseListLength()
	t.SlVarConfInfoResponseList = make([]*SlaveVariablesConfigInfoEntryT, slVarConfInfoResponseListLength)
	for j := 0; j < slVarConfInfoResponseListLength; j++ {
		x := SlaveVariablesConfigInfoEntry{}
		rcv.SlVarConfInfoResponseList(&x, j)
		t.SlVarConfInfoResponseList[j] = x.UnPack()
	}
}

func (rcv *SlaveVariablesConfigInfoResponseList) UnPack() *SlaveVariablesConfigInfoResponseListT {
	if rcv == nil { return nil }
	t := &SlaveVariablesConfigInfoResponseListT{}
	rcv.UnPackTo(t)
	return t
}

type SlaveVariablesConfigInfoResponseList struct {
	_tab flatbuffers.Table
}

func GetRootAsSlaveVariablesConfigInfoResponseList(buf []byte, offset flatbuffers.UOffsetT) *SlaveVariablesConfigInfoResponseList {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SlaveVariablesConfigInfoResponseList{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSlaveVariablesConfigInfoResponseList(buf []byte, offset flatbuffers.UOffsetT) *SlaveVariablesConfigInfoResponseList {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SlaveVariablesConfigInfoResponseList{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SlaveVariablesConfigInfoResponseList) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SlaveVariablesConfigInfoResponseList) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SlaveVariablesConfigInfoResponseList) SlVarConfInfoResponseList(obj *SlaveVariablesConfigInfoEntry, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SlaveVariablesConfigInfoResponseList) SlVarConfInfoResponseListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func SlaveVariablesConfigInfoResponseListStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func SlaveVariablesConfigInfoResponseListAddSlVarConfInfoResponseList(builder *flatbuffers.Builder, slVarConfInfoResponseList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(slVarConfInfoResponseList), 0)
}
func SlaveVariablesConfigInfoResponseListStartSlVarConfInfoResponseListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SlaveVariablesConfigInfoResponseListEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
