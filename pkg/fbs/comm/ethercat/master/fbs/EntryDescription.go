// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EntryDescriptionT struct {
	Request *EntryDescriptionRequestT
	Response *EntryDescriptionResponseT
}

func (t *EntryDescriptionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	requestOffset := t.Request.Pack(builder)
	responseOffset := t.Response.Pack(builder)
	EntryDescriptionStart(builder)
	EntryDescriptionAddRequest(builder, requestOffset)
	EntryDescriptionAddResponse(builder, responseOffset)
	return EntryDescriptionEnd(builder)
}

func (rcv *EntryDescription) UnPackTo(t *EntryDescriptionT) {
	t.Request = rcv.Request(nil).UnPack()
	t.Response = rcv.Response(nil).UnPack()
}

func (rcv *EntryDescription) UnPack() *EntryDescriptionT {
	if rcv == nil { return nil }
	t := &EntryDescriptionT{}
	rcv.UnPackTo(t)
	return t
}

type EntryDescription struct {
	_tab flatbuffers.Table
}

func GetRootAsEntryDescription(buf []byte, offset flatbuffers.UOffsetT) *EntryDescription {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EntryDescription{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEntryDescription(buf []byte, offset flatbuffers.UOffsetT) *EntryDescription {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EntryDescription{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EntryDescription) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EntryDescription) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EntryDescription) Request(obj *EntryDescriptionRequest) *EntryDescriptionRequest {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(EntryDescriptionRequest)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *EntryDescription) Response(obj *EntryDescriptionResponse) *EntryDescriptionResponse {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(EntryDescriptionResponse)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func EntryDescriptionStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func EntryDescriptionAddRequest(builder *flatbuffers.Builder, request flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(request), 0)
}
func EntryDescriptionAddResponse(builder *flatbuffers.Builder, response flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(response), 0)
}
func EntryDescriptionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
