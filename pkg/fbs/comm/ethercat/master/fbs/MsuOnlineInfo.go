// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///This node delivers master sync unit online information.
type MsuOnlineInfoT struct {
	Request *MsuOnlineInfoRequestT `json:"request"`
	Response *MsuOnlineInfoResponseT `json:"response"`
}

func (t *MsuOnlineInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	requestOffset := t.Request.Pack(builder)
	responseOffset := t.Response.Pack(builder)
	MsuOnlineInfoStart(builder)
	MsuOnlineInfoAddRequest(builder, requestOffset)
	MsuOnlineInfoAddResponse(builder, responseOffset)
	return MsuOnlineInfoEnd(builder)
}

func (rcv *MsuOnlineInfo) UnPackTo(t *MsuOnlineInfoT) {
	t.Request = rcv.Request(nil).UnPack()
	t.Response = rcv.Response(nil).UnPack()
}

func (rcv *MsuOnlineInfo) UnPack() *MsuOnlineInfoT {
	if rcv == nil { return nil }
	t := &MsuOnlineInfoT{}
	rcv.UnPackTo(t)
	return t
}

type MsuOnlineInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsMsuOnlineInfo(buf []byte, offset flatbuffers.UOffsetT) *MsuOnlineInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MsuOnlineInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMsuOnlineInfo(buf []byte, offset flatbuffers.UOffsetT) *MsuOnlineInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MsuOnlineInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MsuOnlineInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MsuOnlineInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MsuOnlineInfo) Request(obj *MsuOnlineInfoRequest) *MsuOnlineInfoRequest {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MsuOnlineInfoRequest)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MsuOnlineInfo) Response(obj *MsuOnlineInfoResponse) *MsuOnlineInfoResponse {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MsuOnlineInfoResponse)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MsuOnlineInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func MsuOnlineInfoAddRequest(builder *flatbuffers.Builder, request flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(request), 0)
}
func MsuOnlineInfoAddResponse(builder *flatbuffers.Builder, response flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(response), 0)
}
func MsuOnlineInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
