// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TaskConfigurationT struct {
	Task string `json:"task"`
	CoreIndex string `json:"coreIndex"`
	Priority string `json:"priority"`
	BeforeSyncPoints []string `json:"beforeSyncPoints"`
	AfterSyncPoints []string `json:"afterSyncPoints"`
}

func (t *TaskConfigurationT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	taskOffset := flatbuffers.UOffsetT(0)
	if t.Task != "" {
		taskOffset = builder.CreateString(t.Task)
	}
	coreIndexOffset := flatbuffers.UOffsetT(0)
	if t.CoreIndex != "" {
		coreIndexOffset = builder.CreateString(t.CoreIndex)
	}
	priorityOffset := flatbuffers.UOffsetT(0)
	if t.Priority != "" {
		priorityOffset = builder.CreateString(t.Priority)
	}
	beforeSyncPointsOffset := flatbuffers.UOffsetT(0)
	if t.BeforeSyncPoints != nil {
		beforeSyncPointsLength := len(t.BeforeSyncPoints)
		beforeSyncPointsOffsets := make([]flatbuffers.UOffsetT, beforeSyncPointsLength)
		for j := 0; j < beforeSyncPointsLength; j++ {
			beforeSyncPointsOffsets[j] = builder.CreateString(t.BeforeSyncPoints[j])
		}
		TaskConfigurationStartBeforeSyncPointsVector(builder, beforeSyncPointsLength)
		for j := beforeSyncPointsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(beforeSyncPointsOffsets[j])
		}
		beforeSyncPointsOffset = builder.EndVector(beforeSyncPointsLength)
	}
	afterSyncPointsOffset := flatbuffers.UOffsetT(0)
	if t.AfterSyncPoints != nil {
		afterSyncPointsLength := len(t.AfterSyncPoints)
		afterSyncPointsOffsets := make([]flatbuffers.UOffsetT, afterSyncPointsLength)
		for j := 0; j < afterSyncPointsLength; j++ {
			afterSyncPointsOffsets[j] = builder.CreateString(t.AfterSyncPoints[j])
		}
		TaskConfigurationStartAfterSyncPointsVector(builder, afterSyncPointsLength)
		for j := afterSyncPointsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(afterSyncPointsOffsets[j])
		}
		afterSyncPointsOffset = builder.EndVector(afterSyncPointsLength)
	}
	TaskConfigurationStart(builder)
	TaskConfigurationAddTask(builder, taskOffset)
	TaskConfigurationAddCoreIndex(builder, coreIndexOffset)
	TaskConfigurationAddPriority(builder, priorityOffset)
	TaskConfigurationAddBeforeSyncPoints(builder, beforeSyncPointsOffset)
	TaskConfigurationAddAfterSyncPoints(builder, afterSyncPointsOffset)
	return TaskConfigurationEnd(builder)
}

func (rcv *TaskConfiguration) UnPackTo(t *TaskConfigurationT) {
	t.Task = string(rcv.Task())
	t.CoreIndex = string(rcv.CoreIndex())
	t.Priority = string(rcv.Priority())
	beforeSyncPointsLength := rcv.BeforeSyncPointsLength()
	t.BeforeSyncPoints = make([]string, beforeSyncPointsLength)
	for j := 0; j < beforeSyncPointsLength; j++ {
		t.BeforeSyncPoints[j] = string(rcv.BeforeSyncPoints(j))
	}
	afterSyncPointsLength := rcv.AfterSyncPointsLength()
	t.AfterSyncPoints = make([]string, afterSyncPointsLength)
	for j := 0; j < afterSyncPointsLength; j++ {
		t.AfterSyncPoints[j] = string(rcv.AfterSyncPoints(j))
	}
}

func (rcv *TaskConfiguration) UnPack() *TaskConfigurationT {
	if rcv == nil { return nil }
	t := &TaskConfigurationT{}
	rcv.UnPackTo(t)
	return t
}

type TaskConfiguration struct {
	_tab flatbuffers.Table
}

func GetRootAsTaskConfiguration(buf []byte, offset flatbuffers.UOffsetT) *TaskConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TaskConfiguration{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTaskConfiguration(buf []byte, offset flatbuffers.UOffsetT) *TaskConfiguration {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TaskConfiguration{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TaskConfiguration) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TaskConfiguration) Table() flatbuffers.Table {
	return rcv._tab
}

/// Default task context for the callable
func (rcv *TaskConfiguration) Task() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Default task context for the callable
/// Default CPU index on which the task should run
/// Is composed of the preferred CPU type and an index.
/// The cpu type can be 'rt' for isolated cores or 'nrt' for non-isolated cores.
func (rcv *TaskConfiguration) CoreIndex() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Default CPU index on which the task should run
/// Is composed of the preferred CPU type and an index.
/// The cpu type can be 'rt' for isolated cores or 'nrt' for non-isolated cores.
/// Default priority of the task e.g. high, mid, low
func (rcv *TaskConfiguration) Priority() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Default priority of the task e.g. high, mid, low
/// User defined synchronization points, execute callable in order before these points, any alphanumeric character
func (rcv *TaskConfiguration) BeforeSyncPoints(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TaskConfiguration) BeforeSyncPointsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// User defined synchronization points, execute callable in order before these points, any alphanumeric character
/// User defined synchronization points, execute callable in order after these points
func (rcv *TaskConfiguration) AfterSyncPoints(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TaskConfiguration) AfterSyncPointsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// User defined synchronization points, execute callable in order after these points
func TaskConfigurationStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func TaskConfigurationAddTask(builder *flatbuffers.Builder, task flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(task), 0)
}
func TaskConfigurationAddCoreIndex(builder *flatbuffers.Builder, coreIndex flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(coreIndex), 0)
}
func TaskConfigurationAddPriority(builder *flatbuffers.Builder, priority flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(priority), 0)
}
func TaskConfigurationAddBeforeSyncPoints(builder *flatbuffers.Builder, beforeSyncPoints flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(beforeSyncPoints), 0)
}
func TaskConfigurationStartBeforeSyncPointsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TaskConfigurationAddAfterSyncPoints(builder *flatbuffers.Builder, afterSyncPoints flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(afterSyncPoints), 0)
}
func TaskConfigurationStartAfterSyncPointsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TaskConfigurationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
