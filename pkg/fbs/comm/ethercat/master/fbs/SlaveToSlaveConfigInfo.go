// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///This node returns the slave to slave configuration information response
type SlaveToSlaveConfigInfoT struct {
	Response *SlaveToSlaveConfigInfoResponseT `json:"response"`
}

func (t *SlaveToSlaveConfigInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	responseOffset := t.Response.Pack(builder)
	SlaveToSlaveConfigInfoStart(builder)
	SlaveToSlaveConfigInfoAddResponse(builder, responseOffset)
	return SlaveToSlaveConfigInfoEnd(builder)
}

func (rcv *SlaveToSlaveConfigInfo) UnPackTo(t *SlaveToSlaveConfigInfoT) {
	t.Response = rcv.Response(nil).UnPack()
}

func (rcv *SlaveToSlaveConfigInfo) UnPack() *SlaveToSlaveConfigInfoT {
	if rcv == nil { return nil }
	t := &SlaveToSlaveConfigInfoT{}
	rcv.UnPackTo(t)
	return t
}

type SlaveToSlaveConfigInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsSlaveToSlaveConfigInfo(buf []byte, offset flatbuffers.UOffsetT) *SlaveToSlaveConfigInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SlaveToSlaveConfigInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSlaveToSlaveConfigInfo(buf []byte, offset flatbuffers.UOffsetT) *SlaveToSlaveConfigInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SlaveToSlaveConfigInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SlaveToSlaveConfigInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SlaveToSlaveConfigInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SlaveToSlaveConfigInfo) Response(obj *SlaveToSlaveConfigInfoResponse) *SlaveToSlaveConfigInfoResponse {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(SlaveToSlaveConfigInfoResponse)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func SlaveToSlaveConfigInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func SlaveToSlaveConfigInfoAddResponse(builder *flatbuffers.Builder, response flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(response), 0)
}
func SlaveToSlaveConfigInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
