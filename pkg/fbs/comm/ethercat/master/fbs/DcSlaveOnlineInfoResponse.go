// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///DC slave configuration response
type DcSlaveOnlineInfoResponseT struct {
	DcSupport bool `json:"dcSupport"`
	Dc64Support bool `json:"dc64Support"`
	DcReferenceClock bool `json:"dcReferenceClock"`
	CycleTime0 uint32 `json:"CycleTime0"`
	CycleTime1 uint32 `json:"CycleTime1"`
	ShiftTime int32 `json:"ShiftTime"`
	SystemTimeDifference uint32 `json:"systemTimeDifference"`
	SlaveDelay uint32 `json:"slaveDelay"`
	PropagationDelay uint32 `json:"propagationDelay"`
}

func (t *DcSlaveOnlineInfoResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	DcSlaveOnlineInfoResponseStart(builder)
	DcSlaveOnlineInfoResponseAddDcSupport(builder, t.DcSupport)
	DcSlaveOnlineInfoResponseAddDc64Support(builder, t.Dc64Support)
	DcSlaveOnlineInfoResponseAddDcReferenceClock(builder, t.DcReferenceClock)
	DcSlaveOnlineInfoResponseAddCycleTime0(builder, t.CycleTime0)
	DcSlaveOnlineInfoResponseAddCycleTime1(builder, t.CycleTime1)
	DcSlaveOnlineInfoResponseAddShiftTime(builder, t.ShiftTime)
	DcSlaveOnlineInfoResponseAddSystemTimeDifference(builder, t.SystemTimeDifference)
	DcSlaveOnlineInfoResponseAddSlaveDelay(builder, t.SlaveDelay)
	DcSlaveOnlineInfoResponseAddPropagationDelay(builder, t.PropagationDelay)
	return DcSlaveOnlineInfoResponseEnd(builder)
}

func (rcv *DcSlaveOnlineInfoResponse) UnPackTo(t *DcSlaveOnlineInfoResponseT) {
	t.DcSupport = rcv.DcSupport()
	t.Dc64Support = rcv.Dc64Support()
	t.DcReferenceClock = rcv.DcReferenceClock()
	t.CycleTime0 = rcv.CycleTime0()
	t.CycleTime1 = rcv.CycleTime1()
	t.ShiftTime = rcv.ShiftTime()
	t.SystemTimeDifference = rcv.SystemTimeDifference()
	t.SlaveDelay = rcv.SlaveDelay()
	t.PropagationDelay = rcv.PropagationDelay()
}

func (rcv *DcSlaveOnlineInfoResponse) UnPack() *DcSlaveOnlineInfoResponseT {
	if rcv == nil { return nil }
	t := &DcSlaveOnlineInfoResponseT{}
	rcv.UnPackTo(t)
	return t
}

type DcSlaveOnlineInfoResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsDcSlaveOnlineInfoResponse(buf []byte, offset flatbuffers.UOffsetT) *DcSlaveOnlineInfoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DcSlaveOnlineInfoResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDcSlaveOnlineInfoResponse(buf []byte, offset flatbuffers.UOffsetT) *DcSlaveOnlineInfoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DcSlaveOnlineInfoResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DcSlaveOnlineInfoResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DcSlaveOnlineInfoResponse) Table() flatbuffers.Table {
	return rcv._tab
}

///Slave supports DC (Distributed Clock)
func (rcv *DcSlaveOnlineInfoResponse) DcSupport() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

///Slave supports DC (Distributed Clock)
func (rcv *DcSlaveOnlineInfoResponse) MutateDcSupport(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

///Slave supports 64 bit DC
func (rcv *DcSlaveOnlineInfoResponse) Dc64Support() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

///Slave supports 64 bit DC
func (rcv *DcSlaveOnlineInfoResponse) MutateDc64Support(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

///Slave is reference clock
func (rcv *DcSlaveOnlineInfoResponse) DcReferenceClock() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

///Slave is reference clock
func (rcv *DcSlaveOnlineInfoResponse) MutateDcReferenceClock(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

///Cycle time of Sync0 event (as defined in ETG.2100) in nanoseconds
func (rcv *DcSlaveOnlineInfoResponse) CycleTime0() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///Cycle time of Sync0 event (as defined in ETG.2100) in nanoseconds
func (rcv *DcSlaveOnlineInfoResponse) MutateCycleTime0(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

///Cycle time of Sync1 (calculated value as defined in ETG.2100) event in nanoseconds
func (rcv *DcSlaveOnlineInfoResponse) CycleTime1() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///Cycle time of Sync1 (calculated value as defined in ETG.2100) event in nanoseconds
func (rcv *DcSlaveOnlineInfoResponse) MutateCycleTime1(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

///Shift time of Sync 0 event (as defined in ETG.2100) in nanoseconds
func (rcv *DcSlaveOnlineInfoResponse) ShiftTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///Shift time of Sync 0 event (as defined in ETG.2100) in nanoseconds
func (rcv *DcSlaveOnlineInfoResponse) MutateShiftTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

///System time difference in nanoseconds (only if DC is configured) (ESC register 0x092C)
func (rcv *DcSlaveOnlineInfoResponse) SystemTimeDifference() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///System time difference in nanoseconds (only if DC is configured) (ESC register 0x092C)
func (rcv *DcSlaveOnlineInfoResponse) MutateSystemTimeDifference(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

///Time delay "behind" slave in nanoseconds (only if DC is configured)
func (rcv *DcSlaveOnlineInfoResponse) SlaveDelay() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///Time delay "behind" slave in nanoseconds (only if DC is configured)
func (rcv *DcSlaveOnlineInfoResponse) MutateSlaveDelay(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

///Propagation delay in nanoseconds (only if DC is configured) (ESC register 0x0928)
func (rcv *DcSlaveOnlineInfoResponse) PropagationDelay() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///Propagation delay in nanoseconds (only if DC is configured) (ESC register 0x0928)
func (rcv *DcSlaveOnlineInfoResponse) MutatePropagationDelay(n uint32) bool {
	return rcv._tab.MutateUint32Slot(20, n)
}

func DcSlaveOnlineInfoResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func DcSlaveOnlineInfoResponseAddDcSupport(builder *flatbuffers.Builder, dcSupport bool) {
	builder.PrependBoolSlot(0, dcSupport, false)
}
func DcSlaveOnlineInfoResponseAddDc64Support(builder *flatbuffers.Builder, dc64Support bool) {
	builder.PrependBoolSlot(1, dc64Support, false)
}
func DcSlaveOnlineInfoResponseAddDcReferenceClock(builder *flatbuffers.Builder, dcReferenceClock bool) {
	builder.PrependBoolSlot(2, dcReferenceClock, false)
}
func DcSlaveOnlineInfoResponseAddCycleTime0(builder *flatbuffers.Builder, cycleTime0 uint32) {
	builder.PrependUint32Slot(3, cycleTime0, 0)
}
func DcSlaveOnlineInfoResponseAddCycleTime1(builder *flatbuffers.Builder, cycleTime1 uint32) {
	builder.PrependUint32Slot(4, cycleTime1, 0)
}
func DcSlaveOnlineInfoResponseAddShiftTime(builder *flatbuffers.Builder, shiftTime int32) {
	builder.PrependInt32Slot(5, shiftTime, 0)
}
func DcSlaveOnlineInfoResponseAddSystemTimeDifference(builder *flatbuffers.Builder, systemTimeDifference uint32) {
	builder.PrependUint32Slot(6, systemTimeDifference, 0)
}
func DcSlaveOnlineInfoResponseAddSlaveDelay(builder *flatbuffers.Builder, slaveDelay uint32) {
	builder.PrependUint32Slot(7, slaveDelay, 0)
}
func DcSlaveOnlineInfoResponseAddPropagationDelay(builder *flatbuffers.Builder, propagationDelay uint32) {
	builder.PrependUint32Slot(8, propagationDelay, 0)
}
func DcSlaveOnlineInfoResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
