// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Master syc unit configuration response
type MsuConfigInfoResponseT struct {
	Id uint16 `json:"id"`
	MsuName string `json:"msuName"`
	ProcessDataIn *EthercatMemoryInfoT `json:"processDataIn"`
	ProcessDataOut *EthercatMemoryInfoT `json:"processDataOut"`
	WkcStateDiagOffsIn uint16 `json:"wkcStateDiagOffsIn"`
	WkcStateDiagOffsOut uint16 `json:"wkcStateDiagOffsOut"`
	WkcValidOffsetIn uint32 `json:"wkcValidOffsetIn"`
	WkcValidOffsetOut uint32 `json:"wkcValidOffsetOut"`
}

func (t *MsuConfigInfoResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	msuNameOffset := flatbuffers.UOffsetT(0)
	if t.MsuName != "" {
		msuNameOffset = builder.CreateString(t.MsuName)
	}
	MsuConfigInfoResponseStart(builder)
	MsuConfigInfoResponseAddId(builder, t.Id)
	MsuConfigInfoResponseAddMsuName(builder, msuNameOffset)
	processDataInOffset := t.ProcessDataIn.Pack(builder)
	MsuConfigInfoResponseAddProcessDataIn(builder, processDataInOffset)
	processDataOutOffset := t.ProcessDataOut.Pack(builder)
	MsuConfigInfoResponseAddProcessDataOut(builder, processDataOutOffset)
	MsuConfigInfoResponseAddWkcStateDiagOffsIn(builder, t.WkcStateDiagOffsIn)
	MsuConfigInfoResponseAddWkcStateDiagOffsOut(builder, t.WkcStateDiagOffsOut)
	MsuConfigInfoResponseAddWkcValidOffsetIn(builder, t.WkcValidOffsetIn)
	MsuConfigInfoResponseAddWkcValidOffsetOut(builder, t.WkcValidOffsetOut)
	return MsuConfigInfoResponseEnd(builder)
}

func (rcv *MsuConfigInfoResponse) UnPackTo(t *MsuConfigInfoResponseT) {
	t.Id = rcv.Id()
	t.MsuName = string(rcv.MsuName())
	t.ProcessDataIn = rcv.ProcessDataIn(nil).UnPack()
	t.ProcessDataOut = rcv.ProcessDataOut(nil).UnPack()
	t.WkcStateDiagOffsIn = rcv.WkcStateDiagOffsIn()
	t.WkcStateDiagOffsOut = rcv.WkcStateDiagOffsOut()
	t.WkcValidOffsetIn = rcv.WkcValidOffsetIn()
	t.WkcValidOffsetOut = rcv.WkcValidOffsetOut()
}

func (rcv *MsuConfigInfoResponse) UnPack() *MsuConfigInfoResponseT {
	if rcv == nil { return nil }
	t := &MsuConfigInfoResponseT{}
	rcv.UnPackTo(t)
	return t
}

type MsuConfigInfoResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsMsuConfigInfoResponse(buf []byte, offset flatbuffers.UOffsetT) *MsuConfigInfoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MsuConfigInfoResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMsuConfigInfoResponse(buf []byte, offset flatbuffers.UOffsetT) *MsuConfigInfoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MsuConfigInfoResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MsuConfigInfoResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MsuConfigInfoResponse) Table() flatbuffers.Table {
	return rcv._tab
}

///Msu Id
func (rcv *MsuConfigInfoResponse) Id() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

///Msu Id
func (rcv *MsuConfigInfoResponse) MutateId(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

///configured Msu name
func (rcv *MsuConfigInfoResponse) MsuName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///configured Msu name
///Memory information of input process data.
func (rcv *MsuConfigInfoResponse) ProcessDataIn(obj *EthercatMemoryInfo) *EthercatMemoryInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(EthercatMemoryInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

///Memory information of input process data.
///Memory information of output process data.
func (rcv *MsuConfigInfoResponse) ProcessDataOut(obj *EthercatMemoryInfo) *EthercatMemoryInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(EthercatMemoryInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

///Memory information of output process data.
///(internal - do not use)
func (rcv *MsuConfigInfoResponse) WkcStateDiagOffsIn() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

///(internal - do not use)
func (rcv *MsuConfigInfoResponse) MutateWkcStateDiagOffsIn(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

///(internal - do not use)
func (rcv *MsuConfigInfoResponse) WkcStateDiagOffsOut() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

///(internal - do not use)
func (rcv *MsuConfigInfoResponse) MutateWkcStateDiagOffsOut(n uint16) bool {
	return rcv._tab.MutateUint16Slot(14, n)
}

///Wkc valid offset for inputs in data layer rt input image.
func (rcv *MsuConfigInfoResponse) WkcValidOffsetIn() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///Wkc valid offset for inputs in data layer rt input image.
func (rcv *MsuConfigInfoResponse) MutateWkcValidOffsetIn(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

///Wkc valid offset for outputs in data layer rt input image.
func (rcv *MsuConfigInfoResponse) WkcValidOffsetOut() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///Wkc valid offset for outputs in data layer rt input image.
func (rcv *MsuConfigInfoResponse) MutateWkcValidOffsetOut(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

func MsuConfigInfoResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func MsuConfigInfoResponseAddId(builder *flatbuffers.Builder, id uint16) {
	builder.PrependUint16Slot(0, id, 0)
}
func MsuConfigInfoResponseAddMsuName(builder *flatbuffers.Builder, msuName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(msuName), 0)
}
func MsuConfigInfoResponseAddProcessDataIn(builder *flatbuffers.Builder, processDataIn flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(processDataIn), 0)
}
func MsuConfigInfoResponseAddProcessDataOut(builder *flatbuffers.Builder, processDataOut flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(processDataOut), 0)
}
func MsuConfigInfoResponseAddWkcStateDiagOffsIn(builder *flatbuffers.Builder, wkcStateDiagOffsIn uint16) {
	builder.PrependUint16Slot(4, wkcStateDiagOffsIn, 0)
}
func MsuConfigInfoResponseAddWkcStateDiagOffsOut(builder *flatbuffers.Builder, wkcStateDiagOffsOut uint16) {
	builder.PrependUint16Slot(5, wkcStateDiagOffsOut, 0)
}
func MsuConfigInfoResponseAddWkcValidOffsetIn(builder *flatbuffers.Builder, wkcValidOffsetIn uint32) {
	builder.PrependUint32Slot(6, wkcValidOffsetIn, 0)
}
func MsuConfigInfoResponseAddWkcValidOffsetOut(builder *flatbuffers.Builder, wkcValidOffsetOut uint32) {
	builder.PrependUint32Slot(7, wkcValidOffsetOut, 0)
}
func MsuConfigInfoResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
