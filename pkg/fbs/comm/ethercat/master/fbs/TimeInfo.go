// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Time info
type TimeInfoT struct {
	Time uint64 `json:"time"`
	LocalOffset int64 `json:"localOffset"`
	DaylightSavingTime int32 `json:"daylightSavingTime"`
	TimeZoneInfo *TimeZoneInfoT `json:"timeZoneInfo"`
}

func (t *TimeInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	timeZoneInfoOffset := t.TimeZoneInfo.Pack(builder)
	TimeInfoStart(builder)
	TimeInfoAddTime(builder, t.Time)
	TimeInfoAddLocalOffset(builder, t.LocalOffset)
	TimeInfoAddDaylightSavingTime(builder, t.DaylightSavingTime)
	TimeInfoAddTimeZoneInfo(builder, timeZoneInfoOffset)
	return TimeInfoEnd(builder)
}

func (rcv *TimeInfo) UnPackTo(t *TimeInfoT) {
	t.Time = rcv.Time()
	t.LocalOffset = rcv.LocalOffset()
	t.DaylightSavingTime = rcv.DaylightSavingTime()
	t.TimeZoneInfo = rcv.TimeZoneInfo(nil).UnPack()
}

func (rcv *TimeInfo) UnPack() *TimeInfoT {
	if rcv == nil { return nil }
	t := &TimeInfoT{}
	rcv.UnPackTo(t)
	return t
}

type TimeInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsTimeInfo(buf []byte, offset flatbuffers.UOffsetT) *TimeInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TimeInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTimeInfo(buf []byte, offset flatbuffers.UOffsetT) *TimeInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TimeInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TimeInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TimeInfo) Table() flatbuffers.Table {
	return rcv._tab
}

///Time as coordinated universal time (UTC) since start of Unix epoche (1970-01-01)
func (rcv *TimeInfo) Time() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

///Time as coordinated universal time (UTC) since start of Unix epoche (1970-01-01)
func (rcv *TimeInfo) MutateTime(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

///Local offset (time zone offset and daylight saving time) between UTC and local time
func (rcv *TimeInfo) LocalOffset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///Local offset (time zone offset and daylight saving time) between UTC and local time
func (rcv *TimeInfo) MutateLocalOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

///Indicates if localOffset includes daylight saving time
/// -1: information not available
/// 0: not included
/// 1: included
func (rcv *TimeInfo) DaylightSavingTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

///Indicates if localOffset includes daylight saving time
/// -1: information not available
/// 0: not included
/// 1: included
func (rcv *TimeInfo) MutateDaylightSavingTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *TimeInfo) TimeZoneInfo(obj *TimeZoneInfo) *TimeZoneInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TimeZoneInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func TimeInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func TimeInfoAddTime(builder *flatbuffers.Builder, time uint64) {
	builder.PrependUint64Slot(0, time, 0)
}
func TimeInfoAddLocalOffset(builder *flatbuffers.Builder, localOffset int64) {
	builder.PrependInt64Slot(1, localOffset, 0)
}
func TimeInfoAddDaylightSavingTime(builder *flatbuffers.Builder, daylightSavingTime int32) {
	builder.PrependInt32Slot(2, daylightSavingTime, -1)
}
func TimeInfoAddTimeZoneInfo(builder *flatbuffers.Builder, timeZoneInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(timeZoneInfo), 0)
}
func TimeInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
