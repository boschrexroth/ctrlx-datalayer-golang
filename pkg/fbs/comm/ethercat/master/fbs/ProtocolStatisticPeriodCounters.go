// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ProtocolStatisticPeriodCountersT struct {
	Total *ProtocolStatisticCountersT
	LastSecond *ProtocolStatisticCountersT
}

func (t *ProtocolStatisticPeriodCountersT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	return CreateProtocolStatisticPeriodCounters(builder, t.Total.NumRequests, t.Total.NumBytes, t.LastSecond.NumRequests, t.LastSecond.NumBytes)
}
func (rcv *ProtocolStatisticPeriodCounters) UnPackTo(t *ProtocolStatisticPeriodCountersT) {
	t.Total = rcv.Total(nil).UnPack()
	t.LastSecond = rcv.LastSecond(nil).UnPack()
}

func (rcv *ProtocolStatisticPeriodCounters) UnPack() *ProtocolStatisticPeriodCountersT {
	if rcv == nil { return nil }
	t := &ProtocolStatisticPeriodCountersT{}
	rcv.UnPackTo(t)
	return t
}

type ProtocolStatisticPeriodCounters struct {
	_tab flatbuffers.Struct
}

func (rcv *ProtocolStatisticPeriodCounters) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProtocolStatisticPeriodCounters) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *ProtocolStatisticPeriodCounters) Total(obj *ProtocolStatisticCounters) *ProtocolStatisticCounters {
	if obj == nil {
		obj = new(ProtocolStatisticCounters)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+0)
	return obj
}
func (rcv *ProtocolStatisticPeriodCounters) LastSecond(obj *ProtocolStatisticCounters) *ProtocolStatisticCounters {
	if obj == nil {
		obj = new(ProtocolStatisticCounters)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+8)
	return obj
}

func CreateProtocolStatisticPeriodCounters(builder *flatbuffers.Builder, total_numRequests uint32, total_numBytes uint32, lastSecond_numRequests uint32, lastSecond_numBytes uint32) flatbuffers.UOffsetT {
	builder.Prep(4, 16)
	builder.Prep(4, 8)
	builder.PrependUint32(lastSecond_numBytes)
	builder.PrependUint32(lastSecond_numRequests)
	builder.Prep(4, 8)
	builder.PrependUint32(total_numBytes)
	builder.PrependUint32(total_numRequests)
	return builder.Offset()
}
