// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Master syc unit configuration request
type MsuConfigInfoRequestT struct {
	Id uint16 `json:"id"`
}

func (t *MsuConfigInfoRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	MsuConfigInfoRequestStart(builder)
	MsuConfigInfoRequestAddId(builder, t.Id)
	return MsuConfigInfoRequestEnd(builder)
}

func (rcv *MsuConfigInfoRequest) UnPackTo(t *MsuConfigInfoRequestT) {
	t.Id = rcv.Id()
}

func (rcv *MsuConfigInfoRequest) UnPack() *MsuConfigInfoRequestT {
	if rcv == nil { return nil }
	t := &MsuConfigInfoRequestT{}
	rcv.UnPackTo(t)
	return t
}

type MsuConfigInfoRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsMsuConfigInfoRequest(buf []byte, offset flatbuffers.UOffsetT) *MsuConfigInfoRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MsuConfigInfoRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMsuConfigInfoRequest(buf []byte, offset flatbuffers.UOffsetT) *MsuConfigInfoRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MsuConfigInfoRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MsuConfigInfoRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MsuConfigInfoRequest) Table() flatbuffers.Table {
	return rcv._tab
}

///Msu Id
func (rcv *MsuConfigInfoRequest) Id() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

///Msu Id
func (rcv *MsuConfigInfoRequest) MutateId(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func MsuConfigInfoRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func MsuConfigInfoRequestAddId(builder *flatbuffers.Builder, id uint16) {
	builder.PrependUint16Slot(0, id, 0)
}
func MsuConfigInfoRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
