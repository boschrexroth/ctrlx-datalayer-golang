// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Slave register request 
type SlaveRegisterRequestT struct {
	AddressType Addresstype `json:"addressType"`
	Address uint16 `json:"address"`
	RegisterOffset uint16 `json:"registerOffset"`
	Data []byte `json:"data"`
	MaxLength uint32 `json:"maxLength"`
}

func (t *SlaveRegisterRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	dataOffset := flatbuffers.UOffsetT(0)
	if t.Data != nil {
		dataOffset = builder.CreateByteString(t.Data)
	}
	SlaveRegisterRequestStart(builder)
	SlaveRegisterRequestAddAddressType(builder, t.AddressType)
	SlaveRegisterRequestAddAddress(builder, t.Address)
	SlaveRegisterRequestAddRegisterOffset(builder, t.RegisterOffset)
	SlaveRegisterRequestAddData(builder, dataOffset)
	SlaveRegisterRequestAddMaxLength(builder, t.MaxLength)
	return SlaveRegisterRequestEnd(builder)
}

func (rcv *SlaveRegisterRequest) UnPackTo(t *SlaveRegisterRequestT) {
	t.AddressType = rcv.AddressType()
	t.Address = rcv.Address()
	t.RegisterOffset = rcv.RegisterOffset()
	t.Data = rcv.DataBytes()
	t.MaxLength = rcv.MaxLength()
}

func (rcv *SlaveRegisterRequest) UnPack() *SlaveRegisterRequestT {
	if rcv == nil { return nil }
	t := &SlaveRegisterRequestT{}
	rcv.UnPackTo(t)
	return t
}

type SlaveRegisterRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsSlaveRegisterRequest(buf []byte, offset flatbuffers.UOffsetT) *SlaveRegisterRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SlaveRegisterRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSlaveRegisterRequest(buf []byte, offset flatbuffers.UOffsetT) *SlaveRegisterRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SlaveRegisterRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SlaveRegisterRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SlaveRegisterRequest) Table() flatbuffers.Table {
	return rcv._tab
}

///Address type: 
///undefined: Undefined - do not use
///autoincrement: Auto increment address
///fixedphysical: EtherCAT address (fixed physical address)
func (rcv *SlaveRegisterRequest) AddressType() Addresstype {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Addresstype(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

///Address type: 
///undefined: Undefined - do not use
///autoincrement: Auto increment address
///fixedphysical: EtherCAT address (fixed physical address)
func (rcv *SlaveRegisterRequest) MutateAddressType(n Addresstype) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

///Address depending on addressType.
func (rcv *SlaveRegisterRequest) Address() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

///Address depending on addressType.
func (rcv *SlaveRegisterRequest) MutateAddress(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

///Register offset in bytes e.g. 0x0120 for AL Control register 
func (rcv *SlaveRegisterRequest) RegisterOffset() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

///Register offset in bytes e.g. 0x0120 for AL Control register 
func (rcv *SlaveRegisterRequest) MutateRegisterOffset(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

///Data buffer
func (rcv *SlaveRegisterRequest) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *SlaveRegisterRequest) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SlaveRegisterRequest) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///Data buffer
func (rcv *SlaveRegisterRequest) MutateData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

///Max length of data in bytes
func (rcv *SlaveRegisterRequest) MaxLength() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///Max length of data in bytes
func (rcv *SlaveRegisterRequest) MutateMaxLength(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func SlaveRegisterRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func SlaveRegisterRequestAddAddressType(builder *flatbuffers.Builder, addressType Addresstype) {
	builder.PrependByteSlot(0, byte(addressType), 0)
}
func SlaveRegisterRequestAddAddress(builder *flatbuffers.Builder, address uint16) {
	builder.PrependUint16Slot(1, address, 0)
}
func SlaveRegisterRequestAddRegisterOffset(builder *flatbuffers.Builder, registerOffset uint16) {
	builder.PrependUint16Slot(2, registerOffset, 0)
}
func SlaveRegisterRequestAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(data), 0)
}
func SlaveRegisterRequestStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func SlaveRegisterRequestAddMaxLength(builder *flatbuffers.Builder, maxLength uint32) {
	builder.PrependUint32Slot(4, maxLength, 0)
}
func SlaveRegisterRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
