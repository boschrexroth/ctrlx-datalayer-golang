// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MinActMaxValuesT struct {
	Minimum uint32
	Actual uint32
	Maximum uint32
}

func (t *MinActMaxValuesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	return CreateMinActMaxValues(builder, t.Minimum, t.Actual, t.Maximum)
}
func (rcv *MinActMaxValues) UnPackTo(t *MinActMaxValuesT) {
	t.Minimum = rcv.Minimum()
	t.Actual = rcv.Actual()
	t.Maximum = rcv.Maximum()
}

func (rcv *MinActMaxValues) UnPack() *MinActMaxValuesT {
	if rcv == nil { return nil }
	t := &MinActMaxValuesT{}
	rcv.UnPackTo(t)
	return t
}

type MinActMaxValues struct {
	_tab flatbuffers.Struct
}

func (rcv *MinActMaxValues) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MinActMaxValues) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *MinActMaxValues) Minimum() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *MinActMaxValues) MutateMinimum(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *MinActMaxValues) Actual() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *MinActMaxValues) MutateActual(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *MinActMaxValues) Maximum() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *MinActMaxValues) MutateMaximum(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func CreateMinActMaxValues(builder *flatbuffers.Builder, minimum uint32, actual uint32, maximum uint32) flatbuffers.UOffsetT {
	builder.Prep(4, 12)
	builder.PrependUint32(maximum)
	builder.PrependUint32(actual)
	builder.PrependUint32(minimum)
	return builder.Offset()
}
