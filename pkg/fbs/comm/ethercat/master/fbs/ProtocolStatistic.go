// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ProtocolStatisticT struct {
	Read *ProtocolStatisticPeriodCountersT `json:"read"`
	Write *ProtocolStatisticPeriodCountersT `json:"write"`
}

func (t *ProtocolStatisticT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	return CreateProtocolStatistic(builder, t.Read.Total.NumRequests, t.Read.Total.NumBytes, t.Read.LastSecond.NumRequests, t.Read.LastSecond.NumBytes, t.Write.Total.NumRequests, t.Write.Total.NumBytes, t.Write.LastSecond.NumRequests, t.Write.LastSecond.NumBytes)
}
func (rcv *ProtocolStatistic) UnPackTo(t *ProtocolStatisticT) {
	t.Read = rcv.Read(nil).UnPack()
	t.Write = rcv.Write(nil).UnPack()
}

func (rcv *ProtocolStatistic) UnPack() *ProtocolStatisticT {
	if rcv == nil { return nil }
	t := &ProtocolStatisticT{}
	rcv.UnPackTo(t)
	return t
}

type ProtocolStatistic struct {
	_tab flatbuffers.Struct
}

func (rcv *ProtocolStatistic) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProtocolStatistic) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *ProtocolStatistic) Read(obj *ProtocolStatisticPeriodCounters) *ProtocolStatisticPeriodCounters {
	if obj == nil {
		obj = new(ProtocolStatisticPeriodCounters)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+0)
	return obj
}
func (rcv *ProtocolStatistic) Write(obj *ProtocolStatisticPeriodCounters) *ProtocolStatisticPeriodCounters {
	if obj == nil {
		obj = new(ProtocolStatisticPeriodCounters)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+16)
	return obj
}

func CreateProtocolStatistic(builder *flatbuffers.Builder, read_total_numRequests uint32, read_total_numBytes uint32, read_lastSecond_numRequests uint32, read_lastSecond_numBytes uint32, write_total_numRequests uint32, write_total_numBytes uint32, write_lastSecond_numRequests uint32, write_lastSecond_numBytes uint32) flatbuffers.UOffsetT {
	builder.Prep(4, 32)
	builder.Prep(4, 16)
	builder.Prep(4, 8)
	builder.PrependUint32(write_lastSecond_numBytes)
	builder.PrependUint32(write_lastSecond_numRequests)
	builder.Prep(4, 8)
	builder.PrependUint32(write_total_numBytes)
	builder.PrependUint32(write_total_numRequests)
	builder.Prep(4, 16)
	builder.Prep(4, 8)
	builder.PrependUint32(read_lastSecond_numBytes)
	builder.PrependUint32(read_lastSecond_numRequests)
	builder.Prep(4, 8)
	builder.PrependUint32(read_total_numBytes)
	builder.PrependUint32(read_total_numRequests)
	return builder.Offset()
}
