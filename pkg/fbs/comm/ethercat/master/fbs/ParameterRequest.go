// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ParameterRequestT struct {
	AddressType Addresstype `json:"addressType"`
	Address uint16 `json:"address"`
	DriveNumber byte `json:"driveNumber"`
	ElementFlags ElementFlags `json:"elementFlags"`
	Idn uint16 `json:"idn"`
	Data []byte `json:"data"`
	MaxLength uint32 `json:"maxLength"`
}

func (t *ParameterRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	dataOffset := flatbuffers.UOffsetT(0)
	if t.Data != nil {
		dataOffset = builder.CreateByteString(t.Data)
	}
	ParameterRequestStart(builder)
	ParameterRequestAddAddressType(builder, t.AddressType)
	ParameterRequestAddAddress(builder, t.Address)
	ParameterRequestAddDriveNumber(builder, t.DriveNumber)
	ParameterRequestAddElementFlags(builder, t.ElementFlags)
	ParameterRequestAddIdn(builder, t.Idn)
	ParameterRequestAddData(builder, dataOffset)
	ParameterRequestAddMaxLength(builder, t.MaxLength)
	return ParameterRequestEnd(builder)
}

func (rcv *ParameterRequest) UnPackTo(t *ParameterRequestT) {
	t.AddressType = rcv.AddressType()
	t.Address = rcv.Address()
	t.DriveNumber = rcv.DriveNumber()
	t.ElementFlags = rcv.ElementFlags()
	t.Idn = rcv.Idn()
	t.Data = rcv.DataBytes()
	t.MaxLength = rcv.MaxLength()
}

func (rcv *ParameterRequest) UnPack() *ParameterRequestT {
	if rcv == nil { return nil }
	t := &ParameterRequestT{}
	rcv.UnPackTo(t)
	return t
}

type ParameterRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsParameterRequest(buf []byte, offset flatbuffers.UOffsetT) *ParameterRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ParameterRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsParameterRequest(buf []byte, offset flatbuffers.UOffsetT) *ParameterRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ParameterRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ParameterRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ParameterRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ParameterRequest) AddressType() Addresstype {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Addresstype(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ParameterRequest) MutateAddressType(n Addresstype) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *ParameterRequest) Address() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ParameterRequest) MutateAddress(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *ParameterRequest) DriveNumber() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ParameterRequest) MutateDriveNumber(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *ParameterRequest) ElementFlags() ElementFlags {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return ElementFlags(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ParameterRequest) MutateElementFlags(n ElementFlags) bool {
	return rcv._tab.MutateByteSlot(10, byte(n))
}

func (rcv *ParameterRequest) Idn() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ParameterRequest) MutateIdn(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func (rcv *ParameterRequest) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ParameterRequest) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ParameterRequest) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ParameterRequest) MutateData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *ParameterRequest) MaxLength() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ParameterRequest) MutateMaxLength(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func ParameterRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func ParameterRequestAddAddressType(builder *flatbuffers.Builder, addressType Addresstype) {
	builder.PrependByteSlot(0, byte(addressType), 0)
}
func ParameterRequestAddAddress(builder *flatbuffers.Builder, address uint16) {
	builder.PrependUint16Slot(1, address, 0)
}
func ParameterRequestAddDriveNumber(builder *flatbuffers.Builder, driveNumber byte) {
	builder.PrependByteSlot(2, driveNumber, 0)
}
func ParameterRequestAddElementFlags(builder *flatbuffers.Builder, elementFlags ElementFlags) {
	builder.PrependByteSlot(3, byte(elementFlags), 0)
}
func ParameterRequestAddIdn(builder *flatbuffers.Builder, idn uint16) {
	builder.PrependUint16Slot(4, idn, 0)
}
func ParameterRequestAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(data), 0)
}
func ParameterRequestStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ParameterRequestAddMaxLength(builder *flatbuffers.Builder, maxLength uint32) {
	builder.PrependUint32Slot(6, maxLength, 0)
}
func ParameterRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
