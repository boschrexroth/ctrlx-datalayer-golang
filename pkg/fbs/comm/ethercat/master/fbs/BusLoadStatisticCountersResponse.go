// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Bus load statistic counters
type BusLoadStatisticCountersResponseT struct {
	TxBytesPerSecond *MinActMaxValuesT `json:"txBytesPerSecond"`
	TxBytesPerCycle *MinActMaxValuesT `json:"txBytesPerCycle"`
}

func (t *BusLoadStatisticCountersResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	BusLoadStatisticCountersResponseStart(builder)
	txBytesPerSecondOffset := t.TxBytesPerSecond.Pack(builder)
	BusLoadStatisticCountersResponseAddTxBytesPerSecond(builder, txBytesPerSecondOffset)
	txBytesPerCycleOffset := t.TxBytesPerCycle.Pack(builder)
	BusLoadStatisticCountersResponseAddTxBytesPerCycle(builder, txBytesPerCycleOffset)
	return BusLoadStatisticCountersResponseEnd(builder)
}

func (rcv *BusLoadStatisticCountersResponse) UnPackTo(t *BusLoadStatisticCountersResponseT) {
	t.TxBytesPerSecond = rcv.TxBytesPerSecond(nil).UnPack()
	t.TxBytesPerCycle = rcv.TxBytesPerCycle(nil).UnPack()
}

func (rcv *BusLoadStatisticCountersResponse) UnPack() *BusLoadStatisticCountersResponseT {
	if rcv == nil { return nil }
	t := &BusLoadStatisticCountersResponseT{}
	rcv.UnPackTo(t)
	return t
}

type BusLoadStatisticCountersResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsBusLoadStatisticCountersResponse(buf []byte, offset flatbuffers.UOffsetT) *BusLoadStatisticCountersResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BusLoadStatisticCountersResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBusLoadStatisticCountersResponse(buf []byte, offset flatbuffers.UOffsetT) *BusLoadStatisticCountersResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BusLoadStatisticCountersResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BusLoadStatisticCountersResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BusLoadStatisticCountersResponse) Table() flatbuffers.Table {
	return rcv._tab
}

///Transmitted bytes per second
func (rcv *BusLoadStatisticCountersResponse) TxBytesPerSecond(obj *MinActMaxValues) *MinActMaxValues {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(MinActMaxValues)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

///Transmitted bytes per second
///Transmitted bytes per cycle
func (rcv *BusLoadStatisticCountersResponse) TxBytesPerCycle(obj *MinActMaxValues) *MinActMaxValues {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(MinActMaxValues)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

///Transmitted bytes per cycle
func BusLoadStatisticCountersResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func BusLoadStatisticCountersResponseAddTxBytesPerSecond(builder *flatbuffers.Builder, txBytesPerSecond flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(txBytesPerSecond), 0)
}
func BusLoadStatisticCountersResponseAddTxBytesPerCycle(builder *flatbuffers.Builder, txBytesPerCycle flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(txBytesPerCycle), 0)
}
func BusLoadStatisticCountersResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
