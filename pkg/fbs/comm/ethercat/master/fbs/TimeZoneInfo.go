// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Time zone info
type TimeZoneInfoT struct {
	Offset int64 `json:"offset"`
	Abbreviation string `json:"abbreviation"`
	Name string `json:"name"`
}

func (t *TimeZoneInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	abbreviationOffset := flatbuffers.UOffsetT(0)
	if t.Abbreviation != "" {
		abbreviationOffset = builder.CreateString(t.Abbreviation)
	}
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	TimeZoneInfoStart(builder)
	TimeZoneInfoAddOffset(builder, t.Offset)
	TimeZoneInfoAddAbbreviation(builder, abbreviationOffset)
	TimeZoneInfoAddName(builder, nameOffset)
	return TimeZoneInfoEnd(builder)
}

func (rcv *TimeZoneInfo) UnPackTo(t *TimeZoneInfoT) {
	t.Offset = rcv.Offset()
	t.Abbreviation = string(rcv.Abbreviation())
	t.Name = string(rcv.Name())
}

func (rcv *TimeZoneInfo) UnPack() *TimeZoneInfoT {
	if rcv == nil { return nil }
	t := &TimeZoneInfoT{}
	rcv.UnPackTo(t)
	return t
}

type TimeZoneInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsTimeZoneInfo(buf []byte, offset flatbuffers.UOffsetT) *TimeZoneInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TimeZoneInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTimeZoneInfo(buf []byte, offset flatbuffers.UOffsetT) *TimeZoneInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TimeZoneInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TimeZoneInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TimeZoneInfo) Table() flatbuffers.Table {
	return rcv._tab
}

///Offset
func (rcv *TimeZoneInfo) Offset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///Offset
func (rcv *TimeZoneInfo) MutateOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

///Abbreviation, e.g. UTC, CET, CEST, ...
func (rcv *TimeZoneInfo) Abbreviation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///Abbreviation, e.g. UTC, CET, CEST, ...
///Name, e.g. Europe/Berlin ...
func (rcv *TimeZoneInfo) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///Name, e.g. Europe/Berlin ...
func TimeZoneInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func TimeZoneInfoAddOffset(builder *flatbuffers.Builder, offset int64) {
	builder.PrependInt64Slot(0, offset, 0)
}
func TimeZoneInfoAddAbbreviation(builder *flatbuffers.Builder, abbreviation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(abbreviation), 0)
}
func TimeZoneInfoAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func TimeZoneInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
