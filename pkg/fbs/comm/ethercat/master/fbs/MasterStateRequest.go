// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MasterStateRequestT struct {
	NewState EthercatState `json:"newState"`
}

func (t *MasterStateRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	MasterStateRequestStart(builder)
	MasterStateRequestAddNewState(builder, t.NewState)
	return MasterStateRequestEnd(builder)
}

func (rcv *MasterStateRequest) UnPackTo(t *MasterStateRequestT) {
	t.NewState = rcv.NewState()
}

func (rcv *MasterStateRequest) UnPack() *MasterStateRequestT {
	if rcv == nil { return nil }
	t := &MasterStateRequestT{}
	rcv.UnPackTo(t)
	return t
}

type MasterStateRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsMasterStateRequest(buf []byte, offset flatbuffers.UOffsetT) *MasterStateRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MasterStateRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMasterStateRequest(buf []byte, offset flatbuffers.UOffsetT) *MasterStateRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MasterStateRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MasterStateRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MasterStateRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MasterStateRequest) NewState() EthercatState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return EthercatState(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MasterStateRequest) MutateNewState(n EthercatState) bool {
	return rcv._tab.MutateUint16Slot(4, uint16(n))
}

func MasterStateRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func MasterStateRequestAddNewState(builder *flatbuffers.Builder, newState EthercatState) {
	builder.PrependUint16Slot(0, uint16(newState), 0)
}
func MasterStateRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
