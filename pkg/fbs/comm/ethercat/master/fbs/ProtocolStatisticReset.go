// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ProtocolStatisticResetT struct {
	Read *ProtocolStatisticPeriodResetT
	Write *ProtocolStatisticPeriodResetT
}

func (t *ProtocolStatisticResetT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	return CreateProtocolStatisticReset(builder, t.Read.Total.NumRequests, t.Read.Total.NumBytes, t.Read.LastSecond.NumRequests, t.Read.LastSecond.NumBytes, t.Write.Total.NumRequests, t.Write.Total.NumBytes, t.Write.LastSecond.NumRequests, t.Write.LastSecond.NumBytes)
}
func (rcv *ProtocolStatisticReset) UnPackTo(t *ProtocolStatisticResetT) {
	t.Read = rcv.Read(nil).UnPack()
	t.Write = rcv.Write(nil).UnPack()
}

func (rcv *ProtocolStatisticReset) UnPack() *ProtocolStatisticResetT {
	if rcv == nil { return nil }
	t := &ProtocolStatisticResetT{}
	rcv.UnPackTo(t)
	return t
}

type ProtocolStatisticReset struct {
	_tab flatbuffers.Struct
}

func (rcv *ProtocolStatisticReset) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProtocolStatisticReset) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *ProtocolStatisticReset) Read(obj *ProtocolStatisticPeriodReset) *ProtocolStatisticPeriodReset {
	if obj == nil {
		obj = new(ProtocolStatisticPeriodReset)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+0)
	return obj
}
func (rcv *ProtocolStatisticReset) Write(obj *ProtocolStatisticPeriodReset) *ProtocolStatisticPeriodReset {
	if obj == nil {
		obj = new(ProtocolStatisticPeriodReset)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+4)
	return obj
}

func CreateProtocolStatisticReset(builder *flatbuffers.Builder, read_total_numRequests bool, read_total_numBytes bool, read_lastSecond_numRequests bool, read_lastSecond_numBytes bool, write_total_numRequests bool, write_total_numBytes bool, write_lastSecond_numRequests bool, write_lastSecond_numBytes bool) flatbuffers.UOffsetT {
	builder.Prep(1, 8)
	builder.Prep(1, 4)
	builder.Prep(1, 2)
	builder.PrependBool(write_lastSecond_numBytes)
	builder.PrependBool(write_lastSecond_numRequests)
	builder.Prep(1, 2)
	builder.PrependBool(write_total_numBytes)
	builder.PrependBool(write_total_numRequests)
	builder.Prep(1, 4)
	builder.Prep(1, 2)
	builder.PrependBool(read_lastSecond_numBytes)
	builder.PrependBool(read_lastSecond_numRequests)
	builder.Prep(1, 2)
	builder.PrependBool(read_total_numBytes)
	builder.PrependBool(read_total_numRequests)
	return builder.Offset()
}
