// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Object dictionary request
type ObjectDictionaryListRequestT struct {
	AddressType Addresstype `json:"addressType"`
	Address uint16 `json:"address"`
	ListType ObjectDictionaryListType `json:"listType"`
	MaxElements uint32 `json:"maxElements"`
}

func (t *ObjectDictionaryListRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	ObjectDictionaryListRequestStart(builder)
	ObjectDictionaryListRequestAddAddressType(builder, t.AddressType)
	ObjectDictionaryListRequestAddAddress(builder, t.Address)
	ObjectDictionaryListRequestAddListType(builder, t.ListType)
	ObjectDictionaryListRequestAddMaxElements(builder, t.MaxElements)
	return ObjectDictionaryListRequestEnd(builder)
}

func (rcv *ObjectDictionaryListRequest) UnPackTo(t *ObjectDictionaryListRequestT) {
	t.AddressType = rcv.AddressType()
	t.Address = rcv.Address()
	t.ListType = rcv.ListType()
	t.MaxElements = rcv.MaxElements()
}

func (rcv *ObjectDictionaryListRequest) UnPack() *ObjectDictionaryListRequestT {
	if rcv == nil { return nil }
	t := &ObjectDictionaryListRequestT{}
	rcv.UnPackTo(t)
	return t
}

type ObjectDictionaryListRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsObjectDictionaryListRequest(buf []byte, offset flatbuffers.UOffsetT) *ObjectDictionaryListRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ObjectDictionaryListRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsObjectDictionaryListRequest(buf []byte, offset flatbuffers.UOffsetT) *ObjectDictionaryListRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ObjectDictionaryListRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ObjectDictionaryListRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ObjectDictionaryListRequest) Table() flatbuffers.Table {
	return rcv._tab
}

///Address type: 
///undefined: Undefined - do not use
///autoincrement: Auto increment address
///fixedphysical: EtherCAT address (fixed physical address)
func (rcv *ObjectDictionaryListRequest) AddressType() Addresstype {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Addresstype(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

///Address type: 
///undefined: Undefined - do not use
///autoincrement: Auto increment address
///fixedphysical: EtherCAT address (fixed physical address)
func (rcv *ObjectDictionaryListRequest) MutateAddressType(n Addresstype) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

///Address depending on addressType
func (rcv *ObjectDictionaryListRequest) Address() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

///Address depending on addressType
func (rcv *ObjectDictionaryListRequest) MutateAddress(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

///Object dictionary list type
///length: lengths of each list type
///all: all objects
///rxPDOMap: only pdo mappable objects
///txPDOMap: only pdo mappable objects that can be changed
///storeForeReplacement: only stored for a device replacement object
///startupParam: only startup parameter objects
func (rcv *ObjectDictionaryListRequest) ListType() ObjectDictionaryListType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ObjectDictionaryListType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

///Object dictionary list type
///length: lengths of each list type
///all: all objects
///rxPDOMap: only pdo mappable objects
///txPDOMap: only pdo mappable objects that can be changed
///storeForeReplacement: only stored for a device replacement object
///startupParam: only startup parameter objects
func (rcv *ObjectDictionaryListRequest) MutateListType(n ObjectDictionaryListType) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

///Max number of elements returned by the request
func (rcv *ObjectDictionaryListRequest) MaxElements() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///Max number of elements returned by the request
func (rcv *ObjectDictionaryListRequest) MutateMaxElements(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func ObjectDictionaryListRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ObjectDictionaryListRequestAddAddressType(builder *flatbuffers.Builder, addressType Addresstype) {
	builder.PrependByteSlot(0, byte(addressType), 0)
}
func ObjectDictionaryListRequestAddAddress(builder *flatbuffers.Builder, address uint16) {
	builder.PrependUint16Slot(1, address, 0)
}
func ObjectDictionaryListRequestAddListType(builder *flatbuffers.Builder, listType ObjectDictionaryListType) {
	builder.PrependByteSlot(2, byte(listType), 0)
}
func ObjectDictionaryListRequestAddMaxElements(builder *flatbuffers.Builder, maxElements uint32) {
	builder.PrependUint32Slot(3, maxElements, 0)
}
func ObjectDictionaryListRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
