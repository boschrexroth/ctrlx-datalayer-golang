// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Checksum response 
type ChecksumResponseT struct {
	Checksums []*ChecksumElementT `json:"checksums"`
}

func (t *ChecksumResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	checksumsOffset := flatbuffers.UOffsetT(0)
	if t.Checksums != nil {
		checksumsLength := len(t.Checksums)
		checksumsOffsets := make([]flatbuffers.UOffsetT, checksumsLength)
		for j := 0; j < checksumsLength; j++ {
			checksumsOffsets[j] = t.Checksums[j].Pack(builder)
		}
		ChecksumResponseStartChecksumsVector(builder, checksumsLength)
		for j := checksumsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(checksumsOffsets[j])
		}
		checksumsOffset = builder.EndVector(checksumsLength)
	}
	ChecksumResponseStart(builder)
	ChecksumResponseAddChecksums(builder, checksumsOffset)
	return ChecksumResponseEnd(builder)
}

func (rcv *ChecksumResponse) UnPackTo(t *ChecksumResponseT) {
	checksumsLength := rcv.ChecksumsLength()
	t.Checksums = make([]*ChecksumElementT, checksumsLength)
	for j := 0; j < checksumsLength; j++ {
		x := ChecksumElement{}
		rcv.Checksums(&x, j)
		t.Checksums[j] = x.UnPack()
	}
}

func (rcv *ChecksumResponse) UnPack() *ChecksumResponseT {
	if rcv == nil { return nil }
	t := &ChecksumResponseT{}
	rcv.UnPackTo(t)
	return t
}

type ChecksumResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsChecksumResponse(buf []byte, offset flatbuffers.UOffsetT) *ChecksumResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ChecksumResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsChecksumResponse(buf []byte, offset flatbuffers.UOffsetT) *ChecksumResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ChecksumResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ChecksumResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ChecksumResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ChecksumResponse) Checksums(obj *ChecksumElement, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ChecksumResponse) ChecksumsByKey(obj *ChecksumElement, key string) bool{
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *ChecksumResponse) ChecksumsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ChecksumResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ChecksumResponseAddChecksums(builder *flatbuffers.Builder, checksums flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(checksums), 0)
}
func ChecksumResponseStartChecksumsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ChecksumResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
