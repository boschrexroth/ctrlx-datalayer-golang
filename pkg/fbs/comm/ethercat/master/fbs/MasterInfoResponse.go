// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"

	common__scheduler__fbs2 "github.com/boschrexroth/ctrlx-datalayer-golang/pkg/fbs/common/scheduler/fbs2"
)

type MasterInfoResponseT struct {
	MasterState *MasterStateResponseT
	MasterStatus uint32
	Checksums []*ChecksumElementT
	TopologyStatus *TopologyStatusResponseT
	SystemTime uint64
	TaskInfos []*taskInfoT
	ComponentState *common__scheduler__fbs2.StateT
}

func (t *MasterInfoResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	masterStateOffset := t.MasterState.Pack(builder)
	checksumsOffset := flatbuffers.UOffsetT(0)
	if t.Checksums != nil {
		checksumsLength := len(t.Checksums)
		checksumsOffsets := make([]flatbuffers.UOffsetT, checksumsLength)
		for j := 0; j < checksumsLength; j++ {
			checksumsOffsets[j] = t.Checksums[j].Pack(builder)
		}
		MasterInfoResponseStartChecksumsVector(builder, checksumsLength)
		for j := checksumsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(checksumsOffsets[j])
		}
		checksumsOffset = builder.EndVector(checksumsLength)
	}
	topologyStatusOffset := t.TopologyStatus.Pack(builder)
	taskInfosOffset := flatbuffers.UOffsetT(0)
	if t.TaskInfos != nil {
		taskInfosLength := len(t.TaskInfos)
		taskInfosOffsets := make([]flatbuffers.UOffsetT, taskInfosLength)
		for j := 0; j < taskInfosLength; j++ {
			taskInfosOffsets[j] = t.TaskInfos[j].Pack(builder)
		}
		MasterInfoResponseStartTaskInfosVector(builder, taskInfosLength)
		for j := taskInfosLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(taskInfosOffsets[j])
		}
		taskInfosOffset = builder.EndVector(taskInfosLength)
	}
	componentStateOffset := t.ComponentState.Pack(builder)
	MasterInfoResponseStart(builder)
	MasterInfoResponseAddMasterState(builder, masterStateOffset)
	MasterInfoResponseAddMasterStatus(builder, t.MasterStatus)
	MasterInfoResponseAddChecksums(builder, checksumsOffset)
	MasterInfoResponseAddTopologyStatus(builder, topologyStatusOffset)
	MasterInfoResponseAddSystemTime(builder, t.SystemTime)
	MasterInfoResponseAddTaskInfos(builder, taskInfosOffset)
	MasterInfoResponseAddComponentState(builder, componentStateOffset)
	return MasterInfoResponseEnd(builder)
}

func (rcv *MasterInfoResponse) UnPackTo(t *MasterInfoResponseT) {
	t.MasterState = rcv.MasterState(nil).UnPack()
	t.MasterStatus = rcv.MasterStatus()
	checksumsLength := rcv.ChecksumsLength()
	t.Checksums = make([]*ChecksumElementT, checksumsLength)
	for j := 0; j < checksumsLength; j++ {
		x := ChecksumElement{}
		rcv.Checksums(&x, j)
		t.Checksums[j] = x.UnPack()
	}
	t.TopologyStatus = rcv.TopologyStatus(nil).UnPack()
	t.SystemTime = rcv.SystemTime()
	taskInfosLength := rcv.TaskInfosLength()
	t.TaskInfos = make([]*taskInfoT, taskInfosLength)
	for j := 0; j < taskInfosLength; j++ {
		x := taskInfo{}
		rcv.TaskInfos(&x, j)
		t.TaskInfos[j] = x.UnPack()
	}
	t.ComponentState = rcv.ComponentState(nil).UnPack()
}

func (rcv *MasterInfoResponse) UnPack() *MasterInfoResponseT {
	if rcv == nil { return nil }
	t := &MasterInfoResponseT{}
	rcv.UnPackTo(t)
	return t
}

type MasterInfoResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsMasterInfoResponse(buf []byte, offset flatbuffers.UOffsetT) *MasterInfoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MasterInfoResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMasterInfoResponse(buf []byte, offset flatbuffers.UOffsetT) *MasterInfoResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MasterInfoResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MasterInfoResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MasterInfoResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MasterInfoResponse) MasterState(obj *MasterStateResponse) *MasterStateResponse {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MasterStateResponse)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MasterInfoResponse) MasterStatus() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MasterInfoResponse) MutateMasterStatus(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *MasterInfoResponse) Checksums(obj *ChecksumElement, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MasterInfoResponse) ChecksumsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MasterInfoResponse) TopologyStatus(obj *TopologyStatusResponse) *TopologyStatusResponse {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TopologyStatusResponse)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MasterInfoResponse) SystemTime() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MasterInfoResponse) MutateSystemTime(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *MasterInfoResponse) TaskInfos(obj *taskInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MasterInfoResponse) TaskInfosLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MasterInfoResponse) ComponentState(obj *common__scheduler__fbs2.State) *common__scheduler__fbs2.State {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(common__scheduler__fbs2.State)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MasterInfoResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func MasterInfoResponseAddMasterState(builder *flatbuffers.Builder, masterState flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(masterState), 0)
}
func MasterInfoResponseAddMasterStatus(builder *flatbuffers.Builder, masterStatus uint32) {
	builder.PrependUint32Slot(1, masterStatus, 0)
}
func MasterInfoResponseAddChecksums(builder *flatbuffers.Builder, checksums flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(checksums), 0)
}
func MasterInfoResponseStartChecksumsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MasterInfoResponseAddTopologyStatus(builder *flatbuffers.Builder, topologyStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(topologyStatus), 0)
}
func MasterInfoResponseAddSystemTime(builder *flatbuffers.Builder, systemTime uint64) {
	builder.PrependUint64Slot(4, systemTime, 0)
}
func MasterInfoResponseAddTaskInfos(builder *flatbuffers.Builder, taskInfos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(taskInfos), 0)
}
func MasterInfoResponseStartTaskInfosVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MasterInfoResponseAddComponentState(builder *flatbuffers.Builder, componentState flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(componentState), 0)
}
func MasterInfoResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
