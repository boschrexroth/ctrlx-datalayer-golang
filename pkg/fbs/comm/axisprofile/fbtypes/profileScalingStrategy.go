// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type profileScalingStrategyT struct {
	Strategy ScalingStrategy
}

func (t *profileScalingStrategyT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	profileScalingStrategyStart(builder)
	profileScalingStrategyAddStrategy(builder, t.Strategy)
	return profileScalingStrategyEnd(builder)
}

func (rcv *profileScalingStrategy) UnPackTo(t *profileScalingStrategyT) {
	t.Strategy = rcv.Strategy()
}

func (rcv *profileScalingStrategy) UnPack() *profileScalingStrategyT {
	if rcv == nil { return nil }
	t := &profileScalingStrategyT{}
	rcv.UnPackTo(t)
	return t
}

type profileScalingStrategy struct {
	_tab flatbuffers.Table
}

func GetRootAsprofileScalingStrategy(buf []byte, offset flatbuffers.UOffsetT) *profileScalingStrategy {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &profileScalingStrategy{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsprofileScalingStrategy(buf []byte, offset flatbuffers.UOffsetT) *profileScalingStrategy {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &profileScalingStrategy{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *profileScalingStrategy) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *profileScalingStrategy) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *profileScalingStrategy) Strategy() ScalingStrategy {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ScalingStrategy(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *profileScalingStrategy) MutateStrategy(n ScalingStrategy) bool {
	return rcv._tab.MutateUint32Slot(4, uint32(n))
}

func profileScalingStrategyStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func profileScalingStrategyAddStrategy(builder *flatbuffers.Builder, strategy ScalingStrategy) {
	builder.PrependUint32Slot(0, uint32(strategy), 0)
}
func profileScalingStrategyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
