// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type dummyFbs struct {
	_tab flatbuffers.Table
}

func GetRootAsdummyFbs(buf []byte, offset flatbuffers.UOffsetT) *dummyFbs {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &dummyFbs{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsdummyFbs(buf []byte, offset flatbuffers.UOffsetT) *dummyFbs {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &dummyFbs{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *dummyFbs) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *dummyFbs) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *dummyFbs) DummyByte() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *dummyFbs) MutateDummyByte(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *dummyFbs) DummyStr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *dummyFbs) DummyInt() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *dummyFbs) MutateDummyInt(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *dummyFbs) DummyDouble() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *dummyFbs) MutateDummyDouble(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *dummyFbs) DummyDoublePtr(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *dummyFbs) DummyDoublePtrLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *dummyFbs) MutateDummyDoublePtr(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func dummyFbsStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func dummyFbsAddDummyByte(builder *flatbuffers.Builder, dummyByte int8) {
	builder.PrependInt8Slot(0, dummyByte, 0)
}
func dummyFbsAddDummyStr(builder *flatbuffers.Builder, dummyStr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dummyStr), 0)
}
func dummyFbsAddDummyInt(builder *flatbuffers.Builder, dummyInt int32) {
	builder.PrependInt32Slot(2, dummyInt, 0)
}
func dummyFbsAddDummyDouble(builder *flatbuffers.Builder, dummyDouble float64) {
	builder.PrependFloat64Slot(3, dummyDouble, 0.0)
}
func dummyFbsAddDummyDoublePtr(builder *flatbuffers.Builder, dummyDoublePtr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(dummyDoublePtr), 0)
}
func dummyFbsStartDummyDoublePtrVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func dummyFbsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
