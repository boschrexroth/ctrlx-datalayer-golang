// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type profileConfig struct {
	_tab flatbuffers.Table
}

func GetRootAsprofileConfig(buf []byte, offset flatbuffers.UOffsetT) *profileConfig {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &profileConfig{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsprofileConfig(buf []byte, offset flatbuffers.UOffsetT) *profileConfig {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &profileConfig{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *profileConfig) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *profileConfig) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *profileConfig) DeviceAddress() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *profileConfig) MutateDeviceAddress(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *profileConfig) InputBuffer() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *profileConfig) OutputBuffer() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *profileConfig) ProfileBasicData(obj *profile) *profile {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(profile)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *profileConfig) InputMapping(obj *valueMapping) *valueMapping {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(valueMapping)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *profileConfig) OutputMapping(obj *valueMapping) *valueMapping {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(valueMapping)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func profileConfigStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func profileConfigAddDeviceAddress(builder *flatbuffers.Builder, deviceAddress uint32) {
	builder.PrependUint32Slot(0, deviceAddress, 0)
}
func profileConfigAddInputBuffer(builder *flatbuffers.Builder, inputBuffer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(inputBuffer), 0)
}
func profileConfigAddOutputBuffer(builder *flatbuffers.Builder, outputBuffer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(outputBuffer), 0)
}
func profileConfigAddProfileBasicData(builder *flatbuffers.Builder, profileBasicData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(profileBasicData), 0)
}
func profileConfigAddInputMapping(builder *flatbuffers.Builder, inputMapping flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(inputMapping), 0)
}
func profileConfigAddOutputMapping(builder *flatbuffers.Builder, outputMapping flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(outputMapping), 0)
}
func profileConfigEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
