// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type mappingEntryT struct {
	ValueID string
	DatalayerURI string
	ProfileVar variableType
}

func (t *mappingEntryT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	valueIDOffset := builder.CreateString(t.ValueID)
	datalayerURIOffset := builder.CreateString(t.DatalayerURI)
	mappingEntryStart(builder)
	mappingEntryAddValueID(builder, valueIDOffset)
	mappingEntryAddDatalayerURI(builder, datalayerURIOffset)
	mappingEntryAddProfileVar(builder, t.ProfileVar)
	return mappingEntryEnd(builder)
}

func (rcv *mappingEntry) UnPackTo(t *mappingEntryT) {
	t.ValueID = string(rcv.ValueID())
	t.DatalayerURI = string(rcv.DatalayerURI())
	t.ProfileVar = rcv.ProfileVar()
}

func (rcv *mappingEntry) UnPack() *mappingEntryT {
	if rcv == nil { return nil }
	t := &mappingEntryT{}
	rcv.UnPackTo(t)
	return t
}

type mappingEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsmappingEntry(buf []byte, offset flatbuffers.UOffsetT) *mappingEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &mappingEntry{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsmappingEntry(buf []byte, offset flatbuffers.UOffsetT) *mappingEntry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &mappingEntry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *mappingEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *mappingEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *mappingEntry) ValueID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *mappingEntry) DatalayerURI() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *mappingEntry) ProfileVar() variableType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return variableType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *mappingEntry) MutateProfileVar(n variableType) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func mappingEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func mappingEntryAddValueID(builder *flatbuffers.Builder, valueID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(valueID), 0)
}
func mappingEntryAddDatalayerURI(builder *flatbuffers.Builder, datalayerURI flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(datalayerURI), 0)
}
func mappingEntryAddProfileVar(builder *flatbuffers.Builder, profileVar variableType) {
	builder.PrependInt8Slot(2, int8(profileVar), 0)
}
func mappingEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
