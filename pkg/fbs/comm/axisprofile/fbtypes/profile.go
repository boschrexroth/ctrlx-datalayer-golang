// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type profileT struct {
	Name string
	Type ProfileType
}

func (t *profileT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	profileStart(builder)
	profileAddName(builder, nameOffset)
	profileAddType(builder, t.Type)
	return profileEnd(builder)
}

func (rcv *profile) UnPackTo(t *profileT) {
	t.Name = string(rcv.Name())
	t.Type = rcv.Type()
}

func (rcv *profile) UnPack() *profileT {
	if rcv == nil { return nil }
	t := &profileT{}
	rcv.UnPackTo(t)
	return t
}

type profile struct {
	_tab flatbuffers.Table
}

func GetRootAsprofile(buf []byte, offset flatbuffers.UOffsetT) *profile {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &profile{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsprofile(buf []byte, offset flatbuffers.UOffsetT) *profile {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &profile{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *profile) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *profile) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *profile) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *profile) Type() ProfileType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ProfileType(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *profile) MutateType(n ProfileType) bool {
	return rcv._tab.MutateUint32Slot(6, uint32(n))
}

func profileStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func profileAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func profileAddType(builder *flatbuffers.Builder, type_ ProfileType) {
	builder.PrependUint32Slot(1, uint32(type_), 0)
}
func profileEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
