// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// return type of requests of the current boot state
type APRBootStateT struct {
	Text string
	ActStep uint32
	MaxSteps uint32
}

func (t *APRBootStateT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	textOffset := builder.CreateString(t.Text)
	APRBootStateStart(builder)
	APRBootStateAddText(builder, textOffset)
	APRBootStateAddActStep(builder, t.ActStep)
	APRBootStateAddMaxSteps(builder, t.MaxSteps)
	return APRBootStateEnd(builder)
}

func (rcv *APRBootState) UnPackTo(t *APRBootStateT) {
	t.Text = string(rcv.Text())
	t.ActStep = rcv.ActStep()
	t.MaxSteps = rcv.MaxSteps()
}

func (rcv *APRBootState) UnPack() *APRBootStateT {
	if rcv == nil { return nil }
	t := &APRBootStateT{}
	rcv.UnPackTo(t)
	return t
}

type APRBootState struct {
	_tab flatbuffers.Table
}

func GetRootAsAPRBootState(buf []byte, offset flatbuffers.UOffsetT) *APRBootState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &APRBootState{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAPRBootState(buf []byte, offset flatbuffers.UOffsetT) *APRBootState {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &APRBootState{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *APRBootState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *APRBootState) Table() flatbuffers.Table {
	return rcv._tab
}

/// text of the boot step (can be shown in an HMI)
func (rcv *APRBootState) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// text of the boot step (can be shown in an HMI)
/// current boot step (starts with 0, ends with maxSteps)
func (rcv *APRBootState) ActStep() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// current boot step (starts with 0, ends with maxSteps)
func (rcv *APRBootState) MutateActStep(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

/// number of boot steps (when actStep == maxSteps then the booting is finished)
func (rcv *APRBootState) MaxSteps() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// number of boot steps (when actStep == maxSteps then the booting is finished)
func (rcv *APRBootState) MutateMaxSteps(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func APRBootStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func APRBootStateAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(text), 0)
}
func APRBootStateAddActStep(builder *flatbuffers.Builder, actStep uint32) {
	builder.PrependUint32Slot(1, actStep, 0)
}
func APRBootStateAddMaxSteps(builder *flatbuffers.Builder, maxSteps uint32) {
	builder.PrependUint32Slot(2, maxSteps, 0)
}
func APRBootStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
