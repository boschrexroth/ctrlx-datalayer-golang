// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type profileTypeData struct {
	_tab flatbuffers.Table
}

func GetRootAsprofileTypeData(buf []byte, offset flatbuffers.UOffsetT) *profileTypeData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &profileTypeData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsprofileTypeData(buf []byte, offset flatbuffers.UOffsetT) *profileTypeData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &profileTypeData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *profileTypeData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *profileTypeData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *profileTypeData) Type() ProfileType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ProfileType(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *profileTypeData) MutateType(n ProfileType) bool {
	return rcv._tab.MutateUint32Slot(4, uint32(n))
}

func profileTypeDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func profileTypeDataAddType(builder *flatbuffers.Builder, type_ ProfileType) {
	builder.PrependUint32Slot(0, uint32(type_), 0)
}
func profileTypeDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
