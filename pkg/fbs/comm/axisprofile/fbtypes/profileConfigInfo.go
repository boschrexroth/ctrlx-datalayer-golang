// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type profileConfigInfoT struct {
	DeviceAddress uint32
	InputBuffer string
	OutputBuffer string
	ProfileType *profileTypeDataT
	ProfileName string
	InputMapping *valueMappingT
	OutputMapping *valueMappingT
	ScalingInfo *profileScalingCfgT
}

func (t *profileConfigInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	inputBufferOffset := builder.CreateString(t.InputBuffer)
	outputBufferOffset := builder.CreateString(t.OutputBuffer)
	profileTypeOffset := t.ProfileType.Pack(builder)
	profileNameOffset := builder.CreateString(t.ProfileName)
	inputMappingOffset := t.InputMapping.Pack(builder)
	outputMappingOffset := t.OutputMapping.Pack(builder)
	scalingInfoOffset := t.ScalingInfo.Pack(builder)
	profileConfigInfoStart(builder)
	profileConfigInfoAddDeviceAddress(builder, t.DeviceAddress)
	profileConfigInfoAddInputBuffer(builder, inputBufferOffset)
	profileConfigInfoAddOutputBuffer(builder, outputBufferOffset)
	profileConfigInfoAddProfileType(builder, profileTypeOffset)
	profileConfigInfoAddProfileName(builder, profileNameOffset)
	profileConfigInfoAddInputMapping(builder, inputMappingOffset)
	profileConfigInfoAddOutputMapping(builder, outputMappingOffset)
	profileConfigInfoAddScalingInfo(builder, scalingInfoOffset)
	return profileConfigInfoEnd(builder)
}

func (rcv *profileConfigInfo) UnPackTo(t *profileConfigInfoT) {
	t.DeviceAddress = rcv.DeviceAddress()
	t.InputBuffer = string(rcv.InputBuffer())
	t.OutputBuffer = string(rcv.OutputBuffer())
	t.ProfileType = rcv.ProfileType(nil).UnPack()
	t.ProfileName = string(rcv.ProfileName())
	t.InputMapping = rcv.InputMapping(nil).UnPack()
	t.OutputMapping = rcv.OutputMapping(nil).UnPack()
	t.ScalingInfo = rcv.ScalingInfo(nil).UnPack()
}

func (rcv *profileConfigInfo) UnPack() *profileConfigInfoT {
	if rcv == nil { return nil }
	t := &profileConfigInfoT{}
	rcv.UnPackTo(t)
	return t
}

type profileConfigInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsprofileConfigInfo(buf []byte, offset flatbuffers.UOffsetT) *profileConfigInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &profileConfigInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsprofileConfigInfo(buf []byte, offset flatbuffers.UOffsetT) *profileConfigInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &profileConfigInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *profileConfigInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *profileConfigInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *profileConfigInfo) DeviceAddress() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *profileConfigInfo) MutateDeviceAddress(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *profileConfigInfo) InputBuffer() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *profileConfigInfo) OutputBuffer() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *profileConfigInfo) ProfileType(obj *profileTypeData) *profileTypeData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(profileTypeData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *profileConfigInfo) ProfileName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *profileConfigInfo) InputMapping(obj *valueMapping) *valueMapping {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(valueMapping)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *profileConfigInfo) OutputMapping(obj *valueMapping) *valueMapping {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(valueMapping)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *profileConfigInfo) ScalingInfo(obj *profileScalingCfg) *profileScalingCfg {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(profileScalingCfg)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func profileConfigInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func profileConfigInfoAddDeviceAddress(builder *flatbuffers.Builder, deviceAddress uint32) {
	builder.PrependUint32Slot(0, deviceAddress, 0)
}
func profileConfigInfoAddInputBuffer(builder *flatbuffers.Builder, inputBuffer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(inputBuffer), 0)
}
func profileConfigInfoAddOutputBuffer(builder *flatbuffers.Builder, outputBuffer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(outputBuffer), 0)
}
func profileConfigInfoAddProfileType(builder *flatbuffers.Builder, profileType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(profileType), 0)
}
func profileConfigInfoAddProfileName(builder *flatbuffers.Builder, profileName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(profileName), 0)
}
func profileConfigInfoAddInputMapping(builder *flatbuffers.Builder, inputMapping flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(inputMapping), 0)
}
func profileConfigInfoAddOutputMapping(builder *flatbuffers.Builder, outputMapping flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(outputMapping), 0)
}
func profileConfigInfoAddScalingInfo(builder *flatbuffers.Builder, scalingInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(scalingInfo), 0)
}
func profileConfigInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
