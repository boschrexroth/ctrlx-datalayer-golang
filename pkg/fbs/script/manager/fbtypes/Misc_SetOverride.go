// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Misc_SetOverrideT struct {
	Base *Cmd_BaseT
	Value float64
}

func (t *Misc_SetOverrideT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	baseOffset := t.Base.Pack(builder)
	Misc_SetOverrideStart(builder)
	Misc_SetOverrideAddBase(builder, baseOffset)
	Misc_SetOverrideAddValue(builder, t.Value)
	return Misc_SetOverrideEnd(builder)
}

func (rcv *Misc_SetOverride) UnPackTo(t *Misc_SetOverrideT) {
	t.Base = rcv.Base(nil).UnPack()
	t.Value = rcv.Value()
}

func (rcv *Misc_SetOverride) UnPack() *Misc_SetOverrideT {
	if rcv == nil { return nil }
	t := &Misc_SetOverrideT{}
	rcv.UnPackTo(t)
	return t
}

type Misc_SetOverride struct {
	_tab flatbuffers.Table
}

func GetRootAsMisc_SetOverride(buf []byte, offset flatbuffers.UOffsetT) *Misc_SetOverride {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Misc_SetOverride{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMisc_SetOverride(buf []byte, offset flatbuffers.UOffsetT) *Misc_SetOverride {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Misc_SetOverride{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Misc_SetOverride) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Misc_SetOverride) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Misc_SetOverride) Base(obj *Cmd_Base) *Cmd_Base {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Cmd_Base)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Misc_SetOverride) Value() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Misc_SetOverride) MutateValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func Misc_SetOverrideStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func Misc_SetOverrideAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func Misc_SetOverrideAddValue(builder *flatbuffers.Builder, value float64) {
	builder.PrependFloat64Slot(1, value, 0.0)
}
func Misc_SetOverrideEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
