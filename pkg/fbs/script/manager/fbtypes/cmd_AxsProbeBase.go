// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// base parameters of the axis probe and axis probe abort command
type cmd_AxsProbeBaseT struct {
	Base *Cmd_BaseT `json:"base"`
	TriggerSrc string `json:"triggerSrc"`
	ProbeIndex string `json:"probeIndex"`
}

func (t *cmd_AxsProbeBaseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	baseOffset := t.Base.Pack(builder)
	triggerSrcOffset := flatbuffers.UOffsetT(0)
	if t.TriggerSrc != "" {
		triggerSrcOffset = builder.CreateString(t.TriggerSrc)
	}
	probeIndexOffset := flatbuffers.UOffsetT(0)
	if t.ProbeIndex != "" {
		probeIndexOffset = builder.CreateString(t.ProbeIndex)
	}
	cmd_AxsProbeBaseStart(builder)
	cmd_AxsProbeBaseAddBase(builder, baseOffset)
	cmd_AxsProbeBaseAddTriggerSrc(builder, triggerSrcOffset)
	cmd_AxsProbeBaseAddProbeIndex(builder, probeIndexOffset)
	return cmd_AxsProbeBaseEnd(builder)
}

func (rcv *cmd_AxsProbeBase) UnPackTo(t *cmd_AxsProbeBaseT) {
	t.Base = rcv.Base(nil).UnPack()
	t.TriggerSrc = string(rcv.TriggerSrc())
	t.ProbeIndex = string(rcv.ProbeIndex())
}

func (rcv *cmd_AxsProbeBase) UnPack() *cmd_AxsProbeBaseT {
	if rcv == nil { return nil }
	t := &cmd_AxsProbeBaseT{}
	rcv.UnPackTo(t)
	return t
}

type cmd_AxsProbeBase struct {
	_tab flatbuffers.Table
}

func GetRootAscmd_AxsProbeBase(buf []byte, offset flatbuffers.UOffsetT) *cmd_AxsProbeBase {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &cmd_AxsProbeBase{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAscmd_AxsProbeBase(buf []byte, offset flatbuffers.UOffsetT) *cmd_AxsProbeBase {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &cmd_AxsProbeBase{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *cmd_AxsProbeBase) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *cmd_AxsProbeBase) Table() flatbuffers.Table {
	return rcv._tab
}

/// command base input
func (rcv *cmd_AxsProbeBase) Base(obj *Cmd_Base) *Cmd_Base {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Cmd_Base)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// command base input
/// probe trigger source
func (rcv *cmd_AxsProbeBase) TriggerSrc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// probe trigger source
/// probe index
func (rcv *cmd_AxsProbeBase) ProbeIndex() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// probe index
func cmd_AxsProbeBaseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func cmd_AxsProbeBaseAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func cmd_AxsProbeBaseAddTriggerSrc(builder *flatbuffers.Builder, triggerSrc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(triggerSrc), 0)
}
func cmd_AxsProbeBaseAddProbeIndex(builder *flatbuffers.Builder, probeIndex flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(probeIndex), 0)
}
func cmd_AxsProbeBaseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
