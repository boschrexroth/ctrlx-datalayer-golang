// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// currently the actual values of the probe
type state_AxsProbeActualValuesRespT struct {
	Valid bool `json:"valid"`
	PosEdgeValue float64 `json:"posEdgeValue"`
	NegEdgeValue float64 `json:"negEdgeValue"`
	DifferValue float64 `json:"differValue"`
	DiffCount uint32 `json:"diffCount"`
	PosEdgeCount uint32 `json:"posEdgeCount"`
	NegEdgeCount uint32 `json:"negEdgeCount"`
	MarksEdgeCount uint32 `json:"marksEdgeCount"`
	Status string `json:"status"`
}

func (t *state_AxsProbeActualValuesRespT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	statusOffset := flatbuffers.UOffsetT(0)
	if t.Status != "" {
		statusOffset = builder.CreateString(t.Status)
	}
	state_AxsProbeActualValuesRespStart(builder)
	state_AxsProbeActualValuesRespAddValid(builder, t.Valid)
	state_AxsProbeActualValuesRespAddPosEdgeValue(builder, t.PosEdgeValue)
	state_AxsProbeActualValuesRespAddNegEdgeValue(builder, t.NegEdgeValue)
	state_AxsProbeActualValuesRespAddDifferValue(builder, t.DifferValue)
	state_AxsProbeActualValuesRespAddDiffCount(builder, t.DiffCount)
	state_AxsProbeActualValuesRespAddPosEdgeCount(builder, t.PosEdgeCount)
	state_AxsProbeActualValuesRespAddNegEdgeCount(builder, t.NegEdgeCount)
	state_AxsProbeActualValuesRespAddMarksEdgeCount(builder, t.MarksEdgeCount)
	state_AxsProbeActualValuesRespAddStatus(builder, statusOffset)
	return state_AxsProbeActualValuesRespEnd(builder)
}

func (rcv *state_AxsProbeActualValuesResp) UnPackTo(t *state_AxsProbeActualValuesRespT) {
	t.Valid = rcv.Valid()
	t.PosEdgeValue = rcv.PosEdgeValue()
	t.NegEdgeValue = rcv.NegEdgeValue()
	t.DifferValue = rcv.DifferValue()
	t.DiffCount = rcv.DiffCount()
	t.PosEdgeCount = rcv.PosEdgeCount()
	t.NegEdgeCount = rcv.NegEdgeCount()
	t.MarksEdgeCount = rcv.MarksEdgeCount()
	t.Status = string(rcv.Status())
}

func (rcv *state_AxsProbeActualValuesResp) UnPack() *state_AxsProbeActualValuesRespT {
	if rcv == nil { return nil }
	t := &state_AxsProbeActualValuesRespT{}
	rcv.UnPackTo(t)
	return t
}

type state_AxsProbeActualValuesResp struct {
	_tab flatbuffers.Table
}

func GetRootAsstate_AxsProbeActualValuesResp(buf []byte, offset flatbuffers.UOffsetT) *state_AxsProbeActualValuesResp {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &state_AxsProbeActualValuesResp{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsstate_AxsProbeActualValuesResp(buf []byte, offset flatbuffers.UOffsetT) *state_AxsProbeActualValuesResp {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &state_AxsProbeActualValuesResp{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *state_AxsProbeActualValuesResp) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *state_AxsProbeActualValuesResp) Table() flatbuffers.Table {
	return rcv._tab
}

/// currently the data of vaild 
func (rcv *state_AxsProbeActualValuesResp) Valid() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// currently the data of vaild 
func (rcv *state_AxsProbeActualValuesResp) MutateValid(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// currently positive edge value
func (rcv *state_AxsProbeActualValuesResp) PosEdgeValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// currently positive edge value
func (rcv *state_AxsProbeActualValuesResp) MutatePosEdgeValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// currently negative edge value
func (rcv *state_AxsProbeActualValuesResp) NegEdgeValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// currently negative edge value
func (rcv *state_AxsProbeActualValuesResp) MutateNegEdgeValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// currently difference of probe values
func (rcv *state_AxsProbeActualValuesResp) DifferValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// currently difference of probe values
func (rcv *state_AxsProbeActualValuesResp) MutateDifferValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// currently difference count
func (rcv *state_AxsProbeActualValuesResp) DiffCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// currently difference count
func (rcv *state_AxsProbeActualValuesResp) MutateDiffCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

/// currently positive edge count
func (rcv *state_AxsProbeActualValuesResp) PosEdgeCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// currently positive edge count
func (rcv *state_AxsProbeActualValuesResp) MutatePosEdgeCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

/// currently negative edge count
func (rcv *state_AxsProbeActualValuesResp) NegEdgeCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// currently negative edge count
func (rcv *state_AxsProbeActualValuesResp) MutateNegEdgeCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

/// currently marks edge count
func (rcv *state_AxsProbeActualValuesResp) MarksEdgeCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// currently marks edge count
func (rcv *state_AxsProbeActualValuesResp) MutateMarksEdgeCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

/// currently probe status
func (rcv *state_AxsProbeActualValuesResp) Status() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// currently probe status
func state_AxsProbeActualValuesRespStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func state_AxsProbeActualValuesRespAddValid(builder *flatbuffers.Builder, valid bool) {
	builder.PrependBoolSlot(0, valid, false)
}
func state_AxsProbeActualValuesRespAddPosEdgeValue(builder *flatbuffers.Builder, posEdgeValue float64) {
	builder.PrependFloat64Slot(1, posEdgeValue, 0.0)
}
func state_AxsProbeActualValuesRespAddNegEdgeValue(builder *flatbuffers.Builder, negEdgeValue float64) {
	builder.PrependFloat64Slot(2, negEdgeValue, 0.0)
}
func state_AxsProbeActualValuesRespAddDifferValue(builder *flatbuffers.Builder, differValue float64) {
	builder.PrependFloat64Slot(3, differValue, 0.0)
}
func state_AxsProbeActualValuesRespAddDiffCount(builder *flatbuffers.Builder, diffCount uint32) {
	builder.PrependUint32Slot(4, diffCount, 0)
}
func state_AxsProbeActualValuesRespAddPosEdgeCount(builder *flatbuffers.Builder, posEdgeCount uint32) {
	builder.PrependUint32Slot(5, posEdgeCount, 0)
}
func state_AxsProbeActualValuesRespAddNegEdgeCount(builder *flatbuffers.Builder, negEdgeCount uint32) {
	builder.PrependUint32Slot(6, negEdgeCount, 0)
}
func state_AxsProbeActualValuesRespAddMarksEdgeCount(builder *flatbuffers.Builder, marksEdgeCount uint32) {
	builder.PrependUint32Slot(7, marksEdgeCount, 0)
}
func state_AxsProbeActualValuesRespAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(status), 0)
}
func state_AxsProbeActualValuesRespEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
