// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters for the command option ActivePlane for kinematics
type CmdOpt_KinActivePlaneT struct {
	Base *CmdOpt_BaseT `json:"base"`
	Plane ActivePlaneType `json:"plane"`
}

func (t *CmdOpt_KinActivePlaneT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	baseOffset := t.Base.Pack(builder)
	CmdOpt_KinActivePlaneStart(builder)
	CmdOpt_KinActivePlaneAddBase(builder, baseOffset)
	CmdOpt_KinActivePlaneAddPlane(builder, t.Plane)
	return CmdOpt_KinActivePlaneEnd(builder)
}

func (rcv *CmdOpt_KinActivePlane) UnPackTo(t *CmdOpt_KinActivePlaneT) {
	t.Base = rcv.Base(nil).UnPack()
	t.Plane = rcv.Plane()
}

func (rcv *CmdOpt_KinActivePlane) UnPack() *CmdOpt_KinActivePlaneT {
	if rcv == nil { return nil }
	t := &CmdOpt_KinActivePlaneT{}
	rcv.UnPackTo(t)
	return t
}

type CmdOpt_KinActivePlane struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdOpt_KinActivePlane(buf []byte, offset flatbuffers.UOffsetT) *CmdOpt_KinActivePlane {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdOpt_KinActivePlane{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCmdOpt_KinActivePlane(buf []byte, offset flatbuffers.UOffsetT) *CmdOpt_KinActivePlane {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdOpt_KinActivePlane{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CmdOpt_KinActivePlane) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdOpt_KinActivePlane) Table() flatbuffers.Table {
	return rcv._tab
}

/// command option base
func (rcv *CmdOpt_KinActivePlane) Base(obj *CmdOpt_Base) *CmdOpt_Base {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CmdOpt_Base)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// command option base
/// type of the new active plane
func (rcv *CmdOpt_KinActivePlane) Plane() ActivePlaneType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ActivePlaneType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// type of the new active plane
func (rcv *CmdOpt_KinActivePlane) MutatePlane(n ActivePlaneType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func CmdOpt_KinActivePlaneStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CmdOpt_KinActivePlaneAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func CmdOpt_KinActivePlaneAddPlane(builder *flatbuffers.Builder, plane ActivePlaneType) {
	builder.PrependInt8Slot(1, int8(plane), 0)
}
func CmdOpt_KinActivePlaneEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
