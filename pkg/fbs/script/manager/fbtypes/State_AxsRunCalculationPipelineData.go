// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Parameters of the runCalculationPipeline function
type State_AxsRunCalculationPipelineDataT struct {
	AxsName string
	PipelineName string
	SyncMode SyncMode
	MasterName string
	Inputs []float64
}

func (t *State_AxsRunCalculationPipelineDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	axsNameOffset := builder.CreateString(t.AxsName)
	pipelineNameOffset := builder.CreateString(t.PipelineName)
	masterNameOffset := builder.CreateString(t.MasterName)
	inputsOffset := flatbuffers.UOffsetT(0)
	if t.Inputs != nil {
		inputsLength := len(t.Inputs)
		State_AxsRunCalculationPipelineDataStartInputsVector(builder, inputsLength)
		for j := inputsLength - 1; j >= 0; j-- {
			builder.PrependFloat64(t.Inputs[j])
		}
		inputsOffset = builder.EndVector(inputsLength)
	}
	State_AxsRunCalculationPipelineDataStart(builder)
	State_AxsRunCalculationPipelineDataAddAxsName(builder, axsNameOffset)
	State_AxsRunCalculationPipelineDataAddPipelineName(builder, pipelineNameOffset)
	State_AxsRunCalculationPipelineDataAddSyncMode(builder, t.SyncMode)
	State_AxsRunCalculationPipelineDataAddMasterName(builder, masterNameOffset)
	State_AxsRunCalculationPipelineDataAddInputs(builder, inputsOffset)
	return State_AxsRunCalculationPipelineDataEnd(builder)
}

func (rcv *State_AxsRunCalculationPipelineData) UnPackTo(t *State_AxsRunCalculationPipelineDataT) {
	t.AxsName = string(rcv.AxsName())
	t.PipelineName = string(rcv.PipelineName())
	t.SyncMode = rcv.SyncMode()
	t.MasterName = string(rcv.MasterName())
	inputsLength := rcv.InputsLength()
	t.Inputs = make([]float64, inputsLength)
	for j := 0; j < inputsLength; j++ {
		t.Inputs[j] = rcv.Inputs(j)
	}
}

func (rcv *State_AxsRunCalculationPipelineData) UnPack() *State_AxsRunCalculationPipelineDataT {
	if rcv == nil { return nil }
	t := &State_AxsRunCalculationPipelineDataT{}
	rcv.UnPackTo(t)
	return t
}

type State_AxsRunCalculationPipelineData struct {
	_tab flatbuffers.Table
}

func GetRootAsState_AxsRunCalculationPipelineData(buf []byte, offset flatbuffers.UOffsetT) *State_AxsRunCalculationPipelineData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &State_AxsRunCalculationPipelineData{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsState_AxsRunCalculationPipelineData(buf []byte, offset flatbuffers.UOffsetT) *State_AxsRunCalculationPipelineData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &State_AxsRunCalculationPipelineData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *State_AxsRunCalculationPipelineData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *State_AxsRunCalculationPipelineData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *State_AxsRunCalculationPipelineData) AxsName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *State_AxsRunCalculationPipelineData) PipelineName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *State_AxsRunCalculationPipelineData) SyncMode() SyncMode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return SyncMode(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *State_AxsRunCalculationPipelineData) MutateSyncMode(n SyncMode) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func (rcv *State_AxsRunCalculationPipelineData) MasterName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *State_AxsRunCalculationPipelineData) Inputs(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *State_AxsRunCalculationPipelineData) InputsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *State_AxsRunCalculationPipelineData) MutateInputs(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func State_AxsRunCalculationPipelineDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func State_AxsRunCalculationPipelineDataAddAxsName(builder *flatbuffers.Builder, axsName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(axsName), 0)
}
func State_AxsRunCalculationPipelineDataAddPipelineName(builder *flatbuffers.Builder, pipelineName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(pipelineName), 0)
}
func State_AxsRunCalculationPipelineDataAddSyncMode(builder *flatbuffers.Builder, syncMode SyncMode) {
	builder.PrependInt8Slot(2, int8(syncMode), 0)
}
func State_AxsRunCalculationPipelineDataAddMasterName(builder *flatbuffers.Builder, masterName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(masterName), 0)
}
func State_AxsRunCalculationPipelineDataAddInputs(builder *flatbuffers.Builder, inputs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(inputs), 0)
}
func State_AxsRunCalculationPipelineDataStartInputsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func State_AxsRunCalculationPipelineDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
