// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type State_AxsBrakingDistanceExReqT struct {
	AxsName string
	SelectedTypes []BrakingDistanceTypeReq
}

func (t *State_AxsBrakingDistanceExReqT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	axsNameOffset := builder.CreateString(t.AxsName)
	selectedTypesOffset := flatbuffers.UOffsetT(0)
	if t.SelectedTypes != nil {
		selectedTypesLength := len(t.SelectedTypes)
		State_AxsBrakingDistanceExReqStartSelectedTypesVector(builder, selectedTypesLength)
		for j := selectedTypesLength - 1; j >= 0; j-- {
			builder.PrependInt8(int8(t.SelectedTypes[j]))
		}
		selectedTypesOffset = builder.EndVector(selectedTypesLength)
	}
	State_AxsBrakingDistanceExReqStart(builder)
	State_AxsBrakingDistanceExReqAddAxsName(builder, axsNameOffset)
	State_AxsBrakingDistanceExReqAddSelectedTypes(builder, selectedTypesOffset)
	return State_AxsBrakingDistanceExReqEnd(builder)
}

func (rcv *State_AxsBrakingDistanceExReq) UnPackTo(t *State_AxsBrakingDistanceExReqT) {
	t.AxsName = string(rcv.AxsName())
	selectedTypesLength := rcv.SelectedTypesLength()
	t.SelectedTypes = make([]BrakingDistanceTypeReq, selectedTypesLength)
	for j := 0; j < selectedTypesLength; j++ {
		t.SelectedTypes[j] = rcv.SelectedTypes(j)
	}
}

func (rcv *State_AxsBrakingDistanceExReq) UnPack() *State_AxsBrakingDistanceExReqT {
	if rcv == nil { return nil }
	t := &State_AxsBrakingDistanceExReqT{}
	rcv.UnPackTo(t)
	return t
}

type State_AxsBrakingDistanceExReq struct {
	_tab flatbuffers.Table
}

func GetRootAsState_AxsBrakingDistanceExReq(buf []byte, offset flatbuffers.UOffsetT) *State_AxsBrakingDistanceExReq {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &State_AxsBrakingDistanceExReq{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsState_AxsBrakingDistanceExReq(buf []byte, offset flatbuffers.UOffsetT) *State_AxsBrakingDistanceExReq {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &State_AxsBrakingDistanceExReq{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *State_AxsBrakingDistanceExReq) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *State_AxsBrakingDistanceExReq) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *State_AxsBrakingDistanceExReq) AxsName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *State_AxsBrakingDistanceExReq) SelectedTypes(j int) BrakingDistanceTypeReq {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return BrakingDistanceTypeReq(rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1)))
	}
	return 0
}

func (rcv *State_AxsBrakingDistanceExReq) SelectedTypesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *State_AxsBrakingDistanceExReq) MutateSelectedTypes(j int, n BrakingDistanceTypeReq) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), int8(n))
	}
	return false
}

func State_AxsBrakingDistanceExReqStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func State_AxsBrakingDistanceExReqAddAxsName(builder *flatbuffers.Builder, axsName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(axsName), 0)
}
func State_AxsBrakingDistanceExReqAddSelectedTypes(builder *flatbuffers.Builder, selectedTypes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(selectedTypes), 0)
}
func State_AxsBrakingDistanceExReqStartSelectedTypesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func State_AxsBrakingDistanceExReqEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
