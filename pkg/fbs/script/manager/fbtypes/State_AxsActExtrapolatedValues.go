// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type State_AxsActExtrapolatedValuesT struct {
	Pos float64 `json:"pos"`
	Vel float64 `json:"vel"`
	Acc float64 `json:"acc"`
}

func (t *State_AxsActExtrapolatedValuesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	State_AxsActExtrapolatedValuesStart(builder)
	State_AxsActExtrapolatedValuesAddPos(builder, t.Pos)
	State_AxsActExtrapolatedValuesAddVel(builder, t.Vel)
	State_AxsActExtrapolatedValuesAddAcc(builder, t.Acc)
	return State_AxsActExtrapolatedValuesEnd(builder)
}

func (rcv *State_AxsActExtrapolatedValues) UnPackTo(t *State_AxsActExtrapolatedValuesT) {
	t.Pos = rcv.Pos()
	t.Vel = rcv.Vel()
	t.Acc = rcv.Acc()
}

func (rcv *State_AxsActExtrapolatedValues) UnPack() *State_AxsActExtrapolatedValuesT {
	if rcv == nil { return nil }
	t := &State_AxsActExtrapolatedValuesT{}
	rcv.UnPackTo(t)
	return t
}

type State_AxsActExtrapolatedValues struct {
	_tab flatbuffers.Table
}

func GetRootAsState_AxsActExtrapolatedValues(buf []byte, offset flatbuffers.UOffsetT) *State_AxsActExtrapolatedValues {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &State_AxsActExtrapolatedValues{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsState_AxsActExtrapolatedValues(buf []byte, offset flatbuffers.UOffsetT) *State_AxsActExtrapolatedValues {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &State_AxsActExtrapolatedValues{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *State_AxsActExtrapolatedValues) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *State_AxsActExtrapolatedValues) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *State_AxsActExtrapolatedValues) Pos() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *State_AxsActExtrapolatedValues) MutatePos(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

func (rcv *State_AxsActExtrapolatedValues) Vel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *State_AxsActExtrapolatedValues) MutateVel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *State_AxsActExtrapolatedValues) Acc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *State_AxsActExtrapolatedValues) MutateAcc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func State_AxsActExtrapolatedValuesStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func State_AxsActExtrapolatedValuesAddPos(builder *flatbuffers.Builder, pos float64) {
	builder.PrependFloat64Slot(0, pos, 0.0)
}
func State_AxsActExtrapolatedValuesAddVel(builder *flatbuffers.Builder, vel float64) {
	builder.PrependFloat64Slot(1, vel, 0.0)
}
func State_AxsActExtrapolatedValuesAddAcc(builder *flatbuffers.Builder, acc float64) {
	builder.PrependFloat64Slot(2, acc, 0.0)
}
func State_AxsActExtrapolatedValuesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
