// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Cmd_AxsTorqueT struct {
	Base *Cmd_BaseT `json:"base"`
	TargetTrq float64 `json:"targetTrq"`
	TrqRamp float64 `json:"trqRamp"`
	Lim *Cmd_DynLimitsT `json:"lim"`
}

func (t *Cmd_AxsTorqueT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	baseOffset := t.Base.Pack(builder)
	limOffset := t.Lim.Pack(builder)
	Cmd_AxsTorqueStart(builder)
	Cmd_AxsTorqueAddBase(builder, baseOffset)
	Cmd_AxsTorqueAddTargetTrq(builder, t.TargetTrq)
	Cmd_AxsTorqueAddTrqRamp(builder, t.TrqRamp)
	Cmd_AxsTorqueAddLim(builder, limOffset)
	return Cmd_AxsTorqueEnd(builder)
}

func (rcv *Cmd_AxsTorque) UnPackTo(t *Cmd_AxsTorqueT) {
	t.Base = rcv.Base(nil).UnPack()
	t.TargetTrq = rcv.TargetTrq()
	t.TrqRamp = rcv.TrqRamp()
	t.Lim = rcv.Lim(nil).UnPack()
}

func (rcv *Cmd_AxsTorque) UnPack() *Cmd_AxsTorqueT {
	if rcv == nil { return nil }
	t := &Cmd_AxsTorqueT{}
	rcv.UnPackTo(t)
	return t
}

type Cmd_AxsTorque struct {
	_tab flatbuffers.Table
}

func GetRootAsCmd_AxsTorque(buf []byte, offset flatbuffers.UOffsetT) *Cmd_AxsTorque {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Cmd_AxsTorque{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCmd_AxsTorque(buf []byte, offset flatbuffers.UOffsetT) *Cmd_AxsTorque {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Cmd_AxsTorque{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Cmd_AxsTorque) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Cmd_AxsTorque) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Cmd_AxsTorque) Base(obj *Cmd_Base) *Cmd_Base {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Cmd_Base)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Cmd_AxsTorque) TargetTrq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Cmd_AxsTorque) MutateTargetTrq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *Cmd_AxsTorque) TrqRamp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Cmd_AxsTorque) MutateTrqRamp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *Cmd_AxsTorque) Lim(obj *Cmd_DynLimits) *Cmd_DynLimits {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Cmd_DynLimits)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func Cmd_AxsTorqueStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func Cmd_AxsTorqueAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func Cmd_AxsTorqueAddTargetTrq(builder *flatbuffers.Builder, targetTrq float64) {
	builder.PrependFloat64Slot(1, targetTrq, 0.0)
}
func Cmd_AxsTorqueAddTrqRamp(builder *flatbuffers.Builder, trqRamp float64) {
	builder.PrependFloat64Slot(2, trqRamp, 0.0)
}
func Cmd_AxsTorqueAddLim(builder *flatbuffers.Builder, lim flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(lim), 0)
}
func Cmd_AxsTorqueEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
