// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Cmd_AxsJogT struct {
	Base *Cmd_BaseT
	Dir string
	Incr float64
	Lim *Cmd_DynLimitsT
}

func (t *Cmd_AxsJogT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	baseOffset := t.Base.Pack(builder)
	dirOffset := builder.CreateString(t.Dir)
	limOffset := t.Lim.Pack(builder)
	Cmd_AxsJogStart(builder)
	Cmd_AxsJogAddBase(builder, baseOffset)
	Cmd_AxsJogAddDir(builder, dirOffset)
	Cmd_AxsJogAddIncr(builder, t.Incr)
	Cmd_AxsJogAddLim(builder, limOffset)
	return Cmd_AxsJogEnd(builder)
}

func (rcv *Cmd_AxsJog) UnPackTo(t *Cmd_AxsJogT) {
	t.Base = rcv.Base(nil).UnPack()
	t.Dir = string(rcv.Dir())
	t.Incr = rcv.Incr()
	t.Lim = rcv.Lim(nil).UnPack()
}

func (rcv *Cmd_AxsJog) UnPack() *Cmd_AxsJogT {
	if rcv == nil { return nil }
	t := &Cmd_AxsJogT{}
	rcv.UnPackTo(t)
	return t
}

type Cmd_AxsJog struct {
	_tab flatbuffers.Table
}

func GetRootAsCmd_AxsJog(buf []byte, offset flatbuffers.UOffsetT) *Cmd_AxsJog {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Cmd_AxsJog{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCmd_AxsJog(buf []byte, offset flatbuffers.UOffsetT) *Cmd_AxsJog {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Cmd_AxsJog{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Cmd_AxsJog) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Cmd_AxsJog) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Cmd_AxsJog) Base(obj *Cmd_Base) *Cmd_Base {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Cmd_Base)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Cmd_AxsJog) Dir() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Cmd_AxsJog) Incr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Cmd_AxsJog) MutateIncr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *Cmd_AxsJog) Lim(obj *Cmd_DynLimits) *Cmd_DynLimits {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Cmd_DynLimits)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func Cmd_AxsJogStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func Cmd_AxsJogAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func Cmd_AxsJogAddDir(builder *flatbuffers.Builder, dir flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dir), 0)
}
func Cmd_AxsJogAddIncr(builder *flatbuffers.Builder, incr float64) {
	builder.PrependFloat64Slot(2, incr, 0.0)
}
func Cmd_AxsJogAddLim(builder *flatbuffers.Builder, lim flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(lim), 0)
}
func Cmd_AxsJogEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
