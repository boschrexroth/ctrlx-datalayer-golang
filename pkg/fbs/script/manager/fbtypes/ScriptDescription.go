// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ScriptDescriptionT struct {
	Language string
	Version string
	Executable string
	FileEnding []string
	License string
	LicenseVersion string
}

func (t *ScriptDescriptionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	languageOffset := builder.CreateString(t.Language)
	versionOffset := builder.CreateString(t.Version)
	executableOffset := builder.CreateString(t.Executable)
	fileEndingOffset := flatbuffers.UOffsetT(0)
	if t.FileEnding != nil {
		fileEndingLength := len(t.FileEnding)
		fileEndingOffsets := make([]flatbuffers.UOffsetT, fileEndingLength)
		for j := 0; j < fileEndingLength; j++ {
			fileEndingOffsets[j] = builder.CreateString(t.FileEnding[j])
		}
		ScriptDescriptionStartFileEndingVector(builder, fileEndingLength)
		for j := fileEndingLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(fileEndingOffsets[j])
		}
		fileEndingOffset = builder.EndVector(fileEndingLength)
	}
	licenseOffset := builder.CreateString(t.License)
	licenseVersionOffset := builder.CreateString(t.LicenseVersion)
	ScriptDescriptionStart(builder)
	ScriptDescriptionAddLanguage(builder, languageOffset)
	ScriptDescriptionAddVersion(builder, versionOffset)
	ScriptDescriptionAddExecutable(builder, executableOffset)
	ScriptDescriptionAddFileEnding(builder, fileEndingOffset)
	ScriptDescriptionAddLicense(builder, licenseOffset)
	ScriptDescriptionAddLicenseVersion(builder, licenseVersionOffset)
	return ScriptDescriptionEnd(builder)
}

func (rcv *ScriptDescription) UnPackTo(t *ScriptDescriptionT) {
	t.Language = string(rcv.Language())
	t.Version = string(rcv.Version())
	t.Executable = string(rcv.Executable())
	fileEndingLength := rcv.FileEndingLength()
	t.FileEnding = make([]string, fileEndingLength)
	for j := 0; j < fileEndingLength; j++ {
		t.FileEnding[j] = string(rcv.FileEnding(j))
	}
	t.License = string(rcv.License())
	t.LicenseVersion = string(rcv.LicenseVersion())
}

func (rcv *ScriptDescription) UnPack() *ScriptDescriptionT {
	if rcv == nil { return nil }
	t := &ScriptDescriptionT{}
	rcv.UnPackTo(t)
	return t
}

type ScriptDescription struct {
	_tab flatbuffers.Table
}

func GetRootAsScriptDescription(buf []byte, offset flatbuffers.UOffsetT) *ScriptDescription {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ScriptDescription{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsScriptDescription(buf []byte, offset flatbuffers.UOffsetT) *ScriptDescription {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ScriptDescription{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ScriptDescription) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ScriptDescription) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ScriptDescription) Language() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ScriptDescription) Version() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ScriptDescription) Executable() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ScriptDescription) FileEnding(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ScriptDescription) FileEndingLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ScriptDescription) License() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ScriptDescription) LicenseVersion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ScriptDescriptionStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ScriptDescriptionAddLanguage(builder *flatbuffers.Builder, language flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(language), 0)
}
func ScriptDescriptionAddVersion(builder *flatbuffers.Builder, version flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(version), 0)
}
func ScriptDescriptionAddExecutable(builder *flatbuffers.Builder, executable flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(executable), 0)
}
func ScriptDescriptionAddFileEnding(builder *flatbuffers.Builder, fileEnding flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(fileEnding), 0)
}
func ScriptDescriptionStartFileEndingVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ScriptDescriptionAddLicense(builder *flatbuffers.Builder, license flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(license), 0)
}
func ScriptDescriptionAddLicenseVersion(builder *flatbuffers.Builder, licenseVersion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(licenseVersion), 0)
}
func ScriptDescriptionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
