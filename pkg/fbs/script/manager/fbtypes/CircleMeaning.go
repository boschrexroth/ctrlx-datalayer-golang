// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import "strconv"

/// Meaning for commanded circle
type CircleMeaning int8

const (
	/// radius of the circle commanded
	CircleMeaningRADIUS CircleMeaning = 0
	/// center point of the circle X-coordinate
	CircleMeaningCP_X   CircleMeaning = 1
	/// center point of the circle Y-coordinate
	CircleMeaningCP_Y   CircleMeaning = 2
	/// center point of the circle Z-coordinate
	CircleMeaningCP_Z   CircleMeaning = 3
	/// intermediate point of the circle X-coordinate
	CircleMeaningIP_X   CircleMeaning = 4
	/// intermediate point of the circle Y-coordinate
	CircleMeaningIP_Y   CircleMeaning = 5
	/// intermediate point of the circle Z-coordinate
	CircleMeaningIP_Z   CircleMeaning = 6
	/// circle revolutions
	CircleMeaningREV    CircleMeaning = 7
)

var EnumNamesCircleMeaning = map[CircleMeaning]string{
	CircleMeaningRADIUS: "RADIUS",
	CircleMeaningCP_X:   "CP_X",
	CircleMeaningCP_Y:   "CP_Y",
	CircleMeaningCP_Z:   "CP_Z",
	CircleMeaningIP_X:   "IP_X",
	CircleMeaningIP_Y:   "IP_Y",
	CircleMeaningIP_Z:   "IP_Z",
	CircleMeaningREV:    "REV",
}

var EnumValuesCircleMeaning = map[string]CircleMeaning{
	"RADIUS": CircleMeaningRADIUS,
	"CP_X":   CircleMeaningCP_X,
	"CP_Y":   CircleMeaningCP_Y,
	"CP_Z":   CircleMeaningCP_Z,
	"IP_X":   CircleMeaningIP_X,
	"IP_Y":   CircleMeaningIP_Y,
	"IP_Z":   CircleMeaningIP_Z,
	"REV":    CircleMeaningREV,
}

func (v CircleMeaning) String() string {
	if s, ok := EnumNamesCircleMeaning[v]; ok {
		return s
	}
	return "CircleMeaning(" + strconv.FormatInt(int64(v), 10) + ")"
}
