// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type cmd_AxsProbeExT struct {
	Base *Cmd_BaseT `json:"base"`
	ProbeIndex ProbeIndexType `json:"probeIndex"`
}

func (t *cmd_AxsProbeExT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	baseOffset := t.Base.Pack(builder)
	cmd_AxsProbeExStart(builder)
	cmd_AxsProbeExAddBase(builder, baseOffset)
	cmd_AxsProbeExAddProbeIndex(builder, t.ProbeIndex)
	return cmd_AxsProbeExEnd(builder)
}

func (rcv *cmd_AxsProbeEx) UnPackTo(t *cmd_AxsProbeExT) {
	t.Base = rcv.Base(nil).UnPack()
	t.ProbeIndex = rcv.ProbeIndex()
}

func (rcv *cmd_AxsProbeEx) UnPack() *cmd_AxsProbeExT {
	if rcv == nil { return nil }
	t := &cmd_AxsProbeExT{}
	rcv.UnPackTo(t)
	return t
}

type cmd_AxsProbeEx struct {
	_tab flatbuffers.Table
}

func GetRootAscmd_AxsProbeEx(buf []byte, offset flatbuffers.UOffsetT) *cmd_AxsProbeEx {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &cmd_AxsProbeEx{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAscmd_AxsProbeEx(buf []byte, offset flatbuffers.UOffsetT) *cmd_AxsProbeEx {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &cmd_AxsProbeEx{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *cmd_AxsProbeEx) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *cmd_AxsProbeEx) Table() flatbuffers.Table {
	return rcv._tab
}

/// command base input
func (rcv *cmd_AxsProbeEx) Base(obj *Cmd_Base) *Cmd_Base {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Cmd_Base)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// command base input
/// probe index
func (rcv *cmd_AxsProbeEx) ProbeIndex() ProbeIndexType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ProbeIndexType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// probe index
func (rcv *cmd_AxsProbeEx) MutateProbeIndex(n ProbeIndexType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func cmd_AxsProbeExStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func cmd_AxsProbeExAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func cmd_AxsProbeExAddProbeIndex(builder *flatbuffers.Builder, probeIndex ProbeIndexType) {
	builder.PrependInt8Slot(1, int8(probeIndex), 0)
}
func cmd_AxsProbeExEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
