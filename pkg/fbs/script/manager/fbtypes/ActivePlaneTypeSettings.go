// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ActivePlaneTypeSettingsT struct {
	Type ActivePlaneType `json:"type"`
}

func (t *ActivePlaneTypeSettingsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	ActivePlaneTypeSettingsStart(builder)
	ActivePlaneTypeSettingsAddType(builder, t.Type)
	return ActivePlaneTypeSettingsEnd(builder)
}

func (rcv *ActivePlaneTypeSettings) UnPackTo(t *ActivePlaneTypeSettingsT) {
	t.Type = rcv.Type()
}

func (rcv *ActivePlaneTypeSettings) UnPack() *ActivePlaneTypeSettingsT {
	if rcv == nil { return nil }
	t := &ActivePlaneTypeSettingsT{}
	rcv.UnPackTo(t)
	return t
}

type ActivePlaneTypeSettings struct {
	_tab flatbuffers.Table
}

func GetRootAsActivePlaneTypeSettings(buf []byte, offset flatbuffers.UOffsetT) *ActivePlaneTypeSettings {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ActivePlaneTypeSettings{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsActivePlaneTypeSettings(buf []byte, offset flatbuffers.UOffsetT) *ActivePlaneTypeSettings {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ActivePlaneTypeSettings{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ActivePlaneTypeSettings) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ActivePlaneTypeSettings) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ActivePlaneTypeSettings) Type() ActivePlaneType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ActivePlaneType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ActivePlaneTypeSettings) MutateType(n ActivePlaneType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func ActivePlaneTypeSettingsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ActivePlaneTypeSettingsAddType(builder *flatbuffers.Builder, type_ ActivePlaneType) {
	builder.PrependInt8Slot(0, int8(type_), 0)
}
func ActivePlaneTypeSettingsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
