// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Misc_CmdOptionInfoReqT struct {
	CmdName string `json:"cmdName"`
	ObjType ObjectType_CmdOptionInfoReq `json:"objType"`
	CmdType CmdType_CmdOptionInfoReq `json:"cmdType"`
}

func (t *Misc_CmdOptionInfoReqT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	cmdNameOffset := flatbuffers.UOffsetT(0)
	if t.CmdName != "" {
		cmdNameOffset = builder.CreateString(t.CmdName)
	}
	Misc_CmdOptionInfoReqStart(builder)
	Misc_CmdOptionInfoReqAddCmdName(builder, cmdNameOffset)
	Misc_CmdOptionInfoReqAddObjType(builder, t.ObjType)
	Misc_CmdOptionInfoReqAddCmdType(builder, t.CmdType)
	return Misc_CmdOptionInfoReqEnd(builder)
}

func (rcv *Misc_CmdOptionInfoReq) UnPackTo(t *Misc_CmdOptionInfoReqT) {
	t.CmdName = string(rcv.CmdName())
	t.ObjType = rcv.ObjType()
	t.CmdType = rcv.CmdType()
}

func (rcv *Misc_CmdOptionInfoReq) UnPack() *Misc_CmdOptionInfoReqT {
	if rcv == nil { return nil }
	t := &Misc_CmdOptionInfoReqT{}
	rcv.UnPackTo(t)
	return t
}

type Misc_CmdOptionInfoReq struct {
	_tab flatbuffers.Table
}

func GetRootAsMisc_CmdOptionInfoReq(buf []byte, offset flatbuffers.UOffsetT) *Misc_CmdOptionInfoReq {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Misc_CmdOptionInfoReq{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMisc_CmdOptionInfoReq(buf []byte, offset flatbuffers.UOffsetT) *Misc_CmdOptionInfoReq {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Misc_CmdOptionInfoReq{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Misc_CmdOptionInfoReq) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Misc_CmdOptionInfoReq) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Misc_CmdOptionInfoReq) CmdName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Misc_CmdOptionInfoReq) ObjType() ObjectType_CmdOptionInfoReq {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ObjectType_CmdOptionInfoReq(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Misc_CmdOptionInfoReq) MutateObjType(n ObjectType_CmdOptionInfoReq) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func (rcv *Misc_CmdOptionInfoReq) CmdType() CmdType_CmdOptionInfoReq {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return CmdType_CmdOptionInfoReq(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Misc_CmdOptionInfoReq) MutateCmdType(n CmdType_CmdOptionInfoReq) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func Misc_CmdOptionInfoReqStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func Misc_CmdOptionInfoReqAddCmdName(builder *flatbuffers.Builder, cmdName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(cmdName), 0)
}
func Misc_CmdOptionInfoReqAddObjType(builder *flatbuffers.Builder, objType ObjectType_CmdOptionInfoReq) {
	builder.PrependInt8Slot(1, int8(objType), 0)
}
func Misc_CmdOptionInfoReqAddCmdType(builder *flatbuffers.Builder, cmdType CmdType_CmdOptionInfoReq) {
	builder.PrependInt8Slot(2, int8(cmdType), 0)
}
func Misc_CmdOptionInfoReqEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
