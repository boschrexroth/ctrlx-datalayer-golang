// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CmdOpt_KinSetSafeAreaT struct {
	Base *CmdOpt_BaseT
	SafeArea string
}

func (t *CmdOpt_KinSetSafeAreaT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	baseOffset := t.Base.Pack(builder)
	safeAreaOffset := builder.CreateString(t.SafeArea)
	CmdOpt_KinSetSafeAreaStart(builder)
	CmdOpt_KinSetSafeAreaAddBase(builder, baseOffset)
	CmdOpt_KinSetSafeAreaAddSafeArea(builder, safeAreaOffset)
	return CmdOpt_KinSetSafeAreaEnd(builder)
}

func (rcv *CmdOpt_KinSetSafeArea) UnPackTo(t *CmdOpt_KinSetSafeAreaT) {
	t.Base = rcv.Base(nil).UnPack()
	t.SafeArea = string(rcv.SafeArea())
}

func (rcv *CmdOpt_KinSetSafeArea) UnPack() *CmdOpt_KinSetSafeAreaT {
	if rcv == nil { return nil }
	t := &CmdOpt_KinSetSafeAreaT{}
	rcv.UnPackTo(t)
	return t
}

type CmdOpt_KinSetSafeArea struct {
	_tab flatbuffers.Table
}

func GetRootAsCmdOpt_KinSetSafeArea(buf []byte, offset flatbuffers.UOffsetT) *CmdOpt_KinSetSafeArea {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CmdOpt_KinSetSafeArea{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCmdOpt_KinSetSafeArea(buf []byte, offset flatbuffers.UOffsetT) *CmdOpt_KinSetSafeArea {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CmdOpt_KinSetSafeArea{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CmdOpt_KinSetSafeArea) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CmdOpt_KinSetSafeArea) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CmdOpt_KinSetSafeArea) Base(obj *CmdOpt_Base) *CmdOpt_Base {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CmdOpt_Base)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CmdOpt_KinSetSafeArea) SafeArea() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CmdOpt_KinSetSafeAreaStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CmdOpt_KinSetSafeAreaAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func CmdOpt_KinSetSafeAreaAddSafeArea(builder *flatbuffers.Builder, safeArea flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(safeArea), 0)
}
func CmdOpt_KinSetSafeAreaEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
