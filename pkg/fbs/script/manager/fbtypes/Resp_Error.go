// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Resp_ErrorT struct {
	MainCode uint32
	DetailCode uint32
	Text string
	Trace []string
}

func (t *Resp_ErrorT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	textOffset := builder.CreateString(t.Text)
	traceOffset := flatbuffers.UOffsetT(0)
	if t.Trace != nil {
		traceLength := len(t.Trace)
		traceOffsets := make([]flatbuffers.UOffsetT, traceLength)
		for j := 0; j < traceLength; j++ {
			traceOffsets[j] = builder.CreateString(t.Trace[j])
		}
		Resp_ErrorStartTraceVector(builder, traceLength)
		for j := traceLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(traceOffsets[j])
		}
		traceOffset = builder.EndVector(traceLength)
	}
	Resp_ErrorStart(builder)
	Resp_ErrorAddMainCode(builder, t.MainCode)
	Resp_ErrorAddDetailCode(builder, t.DetailCode)
	Resp_ErrorAddText(builder, textOffset)
	Resp_ErrorAddTrace(builder, traceOffset)
	return Resp_ErrorEnd(builder)
}

func (rcv *Resp_Error) UnPackTo(t *Resp_ErrorT) {
	t.MainCode = rcv.MainCode()
	t.DetailCode = rcv.DetailCode()
	t.Text = string(rcv.Text())
	traceLength := rcv.TraceLength()
	t.Trace = make([]string, traceLength)
	for j := 0; j < traceLength; j++ {
		t.Trace[j] = string(rcv.Trace(j))
	}
}

func (rcv *Resp_Error) UnPack() *Resp_ErrorT {
	if rcv == nil { return nil }
	t := &Resp_ErrorT{}
	rcv.UnPackTo(t)
	return t
}

type Resp_Error struct {
	_tab flatbuffers.Table
}

func GetRootAsResp_Error(buf []byte, offset flatbuffers.UOffsetT) *Resp_Error {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Resp_Error{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsResp_Error(buf []byte, offset flatbuffers.UOffsetT) *Resp_Error {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Resp_Error{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Resp_Error) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Resp_Error) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Resp_Error) MainCode() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Resp_Error) MutateMainCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Resp_Error) DetailCode() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Resp_Error) MutateDetailCode(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *Resp_Error) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Resp_Error) Trace(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Resp_Error) TraceLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func Resp_ErrorStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func Resp_ErrorAddMainCode(builder *flatbuffers.Builder, mainCode uint32) {
	builder.PrependUint32Slot(0, mainCode, 0)
}
func Resp_ErrorAddDetailCode(builder *flatbuffers.Builder, detailCode uint32) {
	builder.PrependUint32Slot(1, detailCode, 0)
}
func Resp_ErrorAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(text), 0)
}
func Resp_ErrorAddTrace(builder *flatbuffers.Builder, trace flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(trace), 0)
}
func Resp_ErrorStartTraceVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Resp_ErrorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
