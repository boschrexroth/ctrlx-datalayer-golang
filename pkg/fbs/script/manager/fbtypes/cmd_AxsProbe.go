// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// parameters of the axis probe command
type cmd_AxsProbeT struct {
	Base *Cmd_BaseT
	BaseData *cmd_AxsProbeBaseT
	CfgData *CfgProbeDataT
}

func (t *cmd_AxsProbeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	baseOffset := t.Base.Pack(builder)
	baseDataOffset := t.BaseData.Pack(builder)
	cfgDataOffset := t.CfgData.Pack(builder)
	cmd_AxsProbeStart(builder)
	cmd_AxsProbeAddBase(builder, baseOffset)
	cmd_AxsProbeAddBaseData(builder, baseDataOffset)
	cmd_AxsProbeAddCfgData(builder, cfgDataOffset)
	return cmd_AxsProbeEnd(builder)
}

func (rcv *cmd_AxsProbe) UnPackTo(t *cmd_AxsProbeT) {
	t.Base = rcv.Base(nil).UnPack()
	t.BaseData = rcv.BaseData(nil).UnPack()
	t.CfgData = rcv.CfgData(nil).UnPack()
}

func (rcv *cmd_AxsProbe) UnPack() *cmd_AxsProbeT {
	if rcv == nil { return nil }
	t := &cmd_AxsProbeT{}
	rcv.UnPackTo(t)
	return t
}

type cmd_AxsProbe struct {
	_tab flatbuffers.Table
}

func GetRootAscmd_AxsProbe(buf []byte, offset flatbuffers.UOffsetT) *cmd_AxsProbe {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &cmd_AxsProbe{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAscmd_AxsProbe(buf []byte, offset flatbuffers.UOffsetT) *cmd_AxsProbe {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &cmd_AxsProbe{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *cmd_AxsProbe) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *cmd_AxsProbe) Table() flatbuffers.Table {
	return rcv._tab
}

/// command base input
func (rcv *cmd_AxsProbe) Base(obj *Cmd_Base) *Cmd_Base {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Cmd_Base)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// command base input
/// probe base parameter
func (rcv *cmd_AxsProbe) BaseData(obj *cmd_AxsProbeBase) *cmd_AxsProbeBase {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(cmd_AxsProbeBase)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// probe base parameter
/// probe configure parameter
func (rcv *cmd_AxsProbe) CfgData(obj *CfgProbeData) *CfgProbeData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CfgProbeData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// probe configure parameter
func cmd_AxsProbeStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func cmd_AxsProbeAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func cmd_AxsProbeAddBaseData(builder *flatbuffers.Builder, baseData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(baseData), 0)
}
func cmd_AxsProbeAddCfgData(builder *flatbuffers.Builder, cfgData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(cfgData), 0)
}
func cmd_AxsProbeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
