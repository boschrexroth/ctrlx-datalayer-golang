// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GlobalCfgT struct {
	InitScript string
	InitScriptParam []string
}

func (t *GlobalCfgT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	initScriptOffset := builder.CreateString(t.InitScript)
	initScriptParamOffset := flatbuffers.UOffsetT(0)
	if t.InitScriptParam != nil {
		initScriptParamLength := len(t.InitScriptParam)
		initScriptParamOffsets := make([]flatbuffers.UOffsetT, initScriptParamLength)
		for j := 0; j < initScriptParamLength; j++ {
			initScriptParamOffsets[j] = builder.CreateString(t.InitScriptParam[j])
		}
		GlobalCfgStartInitScriptParamVector(builder, initScriptParamLength)
		for j := initScriptParamLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(initScriptParamOffsets[j])
		}
		initScriptParamOffset = builder.EndVector(initScriptParamLength)
	}
	GlobalCfgStart(builder)
	GlobalCfgAddInitScript(builder, initScriptOffset)
	GlobalCfgAddInitScriptParam(builder, initScriptParamOffset)
	return GlobalCfgEnd(builder)
}

func (rcv *GlobalCfg) UnPackTo(t *GlobalCfgT) {
	t.InitScript = string(rcv.InitScript())
	initScriptParamLength := rcv.InitScriptParamLength()
	t.InitScriptParam = make([]string, initScriptParamLength)
	for j := 0; j < initScriptParamLength; j++ {
		t.InitScriptParam[j] = string(rcv.InitScriptParam(j))
	}
}

func (rcv *GlobalCfg) UnPack() *GlobalCfgT {
	if rcv == nil { return nil }
	t := &GlobalCfgT{}
	rcv.UnPackTo(t)
	return t
}

type GlobalCfg struct {
	_tab flatbuffers.Table
}

func GetRootAsGlobalCfg(buf []byte, offset flatbuffers.UOffsetT) *GlobalCfg {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GlobalCfg{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsGlobalCfg(buf []byte, offset flatbuffers.UOffsetT) *GlobalCfg {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GlobalCfg{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *GlobalCfg) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GlobalCfg) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GlobalCfg) InitScript() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GlobalCfg) InitScriptParam(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GlobalCfg) InitScriptParamLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func GlobalCfgStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func GlobalCfgAddInitScript(builder *flatbuffers.Builder, initScript flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(initScript), 0)
}
func GlobalCfgAddInitScriptParam(builder *flatbuffers.Builder, initScriptParam flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(initScriptParam), 0)
}
func GlobalCfgStartInitScriptParamVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GlobalCfgEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
