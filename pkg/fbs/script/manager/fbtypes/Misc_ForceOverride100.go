// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Misc_ForceOverride100T struct {
	Base *Cmd_BaseT `json:"base"`
	Force100 bool `json:"force100"`
}

func (t *Misc_ForceOverride100T) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	baseOffset := t.Base.Pack(builder)
	Misc_ForceOverride100Start(builder)
	Misc_ForceOverride100AddBase(builder, baseOffset)
	Misc_ForceOverride100AddForce100(builder, t.Force100)
	return Misc_ForceOverride100End(builder)
}

func (rcv *Misc_ForceOverride100) UnPackTo(t *Misc_ForceOverride100T) {
	t.Base = rcv.Base(nil).UnPack()
	t.Force100 = rcv.Force100()
}

func (rcv *Misc_ForceOverride100) UnPack() *Misc_ForceOverride100T {
	if rcv == nil { return nil }
	t := &Misc_ForceOverride100T{}
	rcv.UnPackTo(t)
	return t
}

type Misc_ForceOverride100 struct {
	_tab flatbuffers.Table
}

func GetRootAsMisc_ForceOverride100(buf []byte, offset flatbuffers.UOffsetT) *Misc_ForceOverride100 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Misc_ForceOverride100{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMisc_ForceOverride100(buf []byte, offset flatbuffers.UOffsetT) *Misc_ForceOverride100 {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Misc_ForceOverride100{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Misc_ForceOverride100) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Misc_ForceOverride100) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Misc_ForceOverride100) Base(obj *Cmd_Base) *Cmd_Base {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Cmd_Base)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Misc_ForceOverride100) Force100() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Misc_ForceOverride100) MutateForce100(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func Misc_ForceOverride100Start(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func Misc_ForceOverride100AddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func Misc_ForceOverride100AddForce100(builder *flatbuffers.Builder, force100 bool) {
	builder.PrependBoolSlot(1, force100, false)
}
func Misc_ForceOverride100End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
