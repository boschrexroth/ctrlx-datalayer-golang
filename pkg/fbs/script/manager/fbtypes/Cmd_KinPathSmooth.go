// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Cmd_KinPathSmoothT struct {
	Base *Cmd_BaseT `json:"base"`
	IsStart bool `json:"isStart"`
	Eps float64 `json:"eps"`
	PrepCmds uint32 `json:"prepCmds"`
	RoundingType RoundingType `json:"roundingType"`
}

func (t *Cmd_KinPathSmoothT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	baseOffset := t.Base.Pack(builder)
	Cmd_KinPathSmoothStart(builder)
	Cmd_KinPathSmoothAddBase(builder, baseOffset)
	Cmd_KinPathSmoothAddIsStart(builder, t.IsStart)
	Cmd_KinPathSmoothAddEps(builder, t.Eps)
	Cmd_KinPathSmoothAddPrepCmds(builder, t.PrepCmds)
	Cmd_KinPathSmoothAddRoundingType(builder, t.RoundingType)
	return Cmd_KinPathSmoothEnd(builder)
}

func (rcv *Cmd_KinPathSmooth) UnPackTo(t *Cmd_KinPathSmoothT) {
	t.Base = rcv.Base(nil).UnPack()
	t.IsStart = rcv.IsStart()
	t.Eps = rcv.Eps()
	t.PrepCmds = rcv.PrepCmds()
	t.RoundingType = rcv.RoundingType()
}

func (rcv *Cmd_KinPathSmooth) UnPack() *Cmd_KinPathSmoothT {
	if rcv == nil { return nil }
	t := &Cmd_KinPathSmoothT{}
	rcv.UnPackTo(t)
	return t
}

type Cmd_KinPathSmooth struct {
	_tab flatbuffers.Table
}

func GetRootAsCmd_KinPathSmooth(buf []byte, offset flatbuffers.UOffsetT) *Cmd_KinPathSmooth {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Cmd_KinPathSmooth{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCmd_KinPathSmooth(buf []byte, offset flatbuffers.UOffsetT) *Cmd_KinPathSmooth {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Cmd_KinPathSmooth{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Cmd_KinPathSmooth) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Cmd_KinPathSmooth) Table() flatbuffers.Table {
	return rcv._tab
}

/// command base input
func (rcv *Cmd_KinPathSmooth) Base(obj *Cmd_Base) *Cmd_Base {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Cmd_Base)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// command base input
/// is this the start of the path smooth 
func (rcv *Cmd_KinPathSmooth) IsStart() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// is this the start of the path smooth 
func (rcv *Cmd_KinPathSmooth) MutateIsStart(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

/// maximum permissible tolerance eps
func (rcv *Cmd_KinPathSmooth) Eps() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// maximum permissible tolerance eps
func (rcv *Cmd_KinPathSmooth) MutateEps(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// number of following commands, that should be completely prepared
func (rcv *Cmd_KinPathSmooth) PrepCmds() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// number of following commands, that should be completely prepared
func (rcv *Cmd_KinPathSmooth) MutatePrepCmds(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

/// rounding type
func (rcv *Cmd_KinPathSmooth) RoundingType() RoundingType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return RoundingType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// rounding type
func (rcv *Cmd_KinPathSmooth) MutateRoundingType(n RoundingType) bool {
	return rcv._tab.MutateInt8Slot(12, int8(n))
}

func Cmd_KinPathSmoothStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func Cmd_KinPathSmoothAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func Cmd_KinPathSmoothAddIsStart(builder *flatbuffers.Builder, isStart bool) {
	builder.PrependBoolSlot(1, isStart, true)
}
func Cmd_KinPathSmoothAddEps(builder *flatbuffers.Builder, eps float64) {
	builder.PrependFloat64Slot(2, eps, 0.0)
}
func Cmd_KinPathSmoothAddPrepCmds(builder *flatbuffers.Builder, prepCmds uint32) {
	builder.PrependUint32Slot(3, prepCmds, 0)
}
func Cmd_KinPathSmoothAddRoundingType(builder *flatbuffers.Builder, roundingType RoundingType) {
	builder.PrependInt8Slot(4, int8(roundingType), 0)
}
func Cmd_KinPathSmoothEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
