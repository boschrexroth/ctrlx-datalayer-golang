// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Cmd_AxsAddToGantry struct {
	_tab flatbuffers.Table
}

func GetRootAsCmd_AxsAddToGantry(buf []byte, offset flatbuffers.UOffsetT) *Cmd_AxsAddToGantry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Cmd_AxsAddToGantry{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCmd_AxsAddToGantry(buf []byte, offset flatbuffers.UOffsetT) *Cmd_AxsAddToGantry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Cmd_AxsAddToGantry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Cmd_AxsAddToGantry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Cmd_AxsAddToGantry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Cmd_AxsAddToGantry) Base(obj *Cmd_Base) *Cmd_Base {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Cmd_Base)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Cmd_AxsAddToGantry) MasterName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Cmd_AxsAddToGantry) Buffered() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Cmd_AxsAddToGantry) MutateBuffered(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func Cmd_AxsAddToGantryStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func Cmd_AxsAddToGantryAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func Cmd_AxsAddToGantryAddMasterName(builder *flatbuffers.Builder, masterName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(masterName), 0)
}
func Cmd_AxsAddToGantryAddBuffered(builder *flatbuffers.Builder, buffered bool) {
	builder.PrependBoolSlot(2, buffered, false)
}
func Cmd_AxsAddToGantryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
