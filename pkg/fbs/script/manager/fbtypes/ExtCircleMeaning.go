// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Packed pair of target position meaning and attribute
type ExtCircleMeaningT struct {
	Meaning CircleMeaning `json:"meaning"`
	AddAttributes AddAttributes `json:"addAttributes"`
}

func (t *ExtCircleMeaningT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	ExtCircleMeaningStart(builder)
	ExtCircleMeaningAddMeaning(builder, t.Meaning)
	ExtCircleMeaningAddAddAttributes(builder, t.AddAttributes)
	return ExtCircleMeaningEnd(builder)
}

func (rcv *ExtCircleMeaning) UnPackTo(t *ExtCircleMeaningT) {
	t.Meaning = rcv.Meaning()
	t.AddAttributes = rcv.AddAttributes()
}

func (rcv *ExtCircleMeaning) UnPack() *ExtCircleMeaningT {
	if rcv == nil { return nil }
	t := &ExtCircleMeaningT{}
	rcv.UnPackTo(t)
	return t
}

type ExtCircleMeaning struct {
	_tab flatbuffers.Table
}

func GetRootAsExtCircleMeaning(buf []byte, offset flatbuffers.UOffsetT) *ExtCircleMeaning {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ExtCircleMeaning{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsExtCircleMeaning(buf []byte, offset flatbuffers.UOffsetT) *ExtCircleMeaning {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ExtCircleMeaning{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ExtCircleMeaning) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ExtCircleMeaning) Table() flatbuffers.Table {
	return rcv._tab
}

/// related meaning of the value
/// possible meanings are: "RADIUS", "CP_X", "CP_Y", "CP_Z", "IP_X", "IP_Y", "IP_Z", "REV"
func (rcv *ExtCircleMeaning) Meaning() CircleMeaning {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return CircleMeaning(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// related meaning of the value
/// possible meanings are: "RADIUS", "CP_X", "CP_Y", "CP_Z", "IP_X", "IP_Y", "IP_Z", "REV"
func (rcv *ExtCircleMeaning) MutateMeaning(n CircleMeaning) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

/// attributes for the target position meaning
/// possible meanings are: "UNDEF", "INCR_VALUE", "ABS_VALUE", "SHORT_WAY", "POS_ROT_DIR", "NEG_ROT_DIR"
func (rcv *ExtCircleMeaning) AddAttributes() AddAttributes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return AddAttributes(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// attributes for the target position meaning
/// possible meanings are: "UNDEF", "INCR_VALUE", "ABS_VALUE", "SHORT_WAY", "POS_ROT_DIR", "NEG_ROT_DIR"
func (rcv *ExtCircleMeaning) MutateAddAttributes(n AddAttributes) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func ExtCircleMeaningStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ExtCircleMeaningAddMeaning(builder *flatbuffers.Builder, meaning CircleMeaning) {
	builder.PrependInt8Slot(0, int8(meaning), 0)
}
func ExtCircleMeaningAddAddAttributes(builder *flatbuffers.Builder, addAttributes AddAttributes) {
	builder.PrependInt8Slot(1, int8(addAttributes), 0)
}
func ExtCircleMeaningEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
