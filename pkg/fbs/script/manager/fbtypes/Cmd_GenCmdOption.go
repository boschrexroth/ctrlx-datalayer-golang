// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Cmd_GenCmdOptionT struct {
	Base *Cmd_BaseT
	CmdName string
	ObjType ObjectTypeGenCmdOption
	Params []byte
}

func (t *Cmd_GenCmdOptionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	baseOffset := t.Base.Pack(builder)
	cmdNameOffset := builder.CreateString(t.CmdName)
	paramsOffset := flatbuffers.UOffsetT(0)
	if t.Params != nil {
		paramsOffset = builder.CreateByteString(t.Params)
	}
	Cmd_GenCmdOptionStart(builder)
	Cmd_GenCmdOptionAddBase(builder, baseOffset)
	Cmd_GenCmdOptionAddCmdName(builder, cmdNameOffset)
	Cmd_GenCmdOptionAddObjType(builder, t.ObjType)
	Cmd_GenCmdOptionAddParams(builder, paramsOffset)
	return Cmd_GenCmdOptionEnd(builder)
}

func (rcv *Cmd_GenCmdOption) UnPackTo(t *Cmd_GenCmdOptionT) {
	t.Base = rcv.Base(nil).UnPack()
	t.CmdName = string(rcv.CmdName())
	t.ObjType = rcv.ObjType()
	t.Params = rcv.ParamsBytes()
}

func (rcv *Cmd_GenCmdOption) UnPack() *Cmd_GenCmdOptionT {
	if rcv == nil { return nil }
	t := &Cmd_GenCmdOptionT{}
	rcv.UnPackTo(t)
	return t
}

type Cmd_GenCmdOption struct {
	_tab flatbuffers.Table
}

func GetRootAsCmd_GenCmdOption(buf []byte, offset flatbuffers.UOffsetT) *Cmd_GenCmdOption {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Cmd_GenCmdOption{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCmd_GenCmdOption(buf []byte, offset flatbuffers.UOffsetT) *Cmd_GenCmdOption {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Cmd_GenCmdOption{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Cmd_GenCmdOption) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Cmd_GenCmdOption) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Cmd_GenCmdOption) Base(obj *Cmd_Base) *Cmd_Base {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Cmd_Base)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Cmd_GenCmdOption) CmdName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Cmd_GenCmdOption) ObjType() ObjectTypeGenCmdOption {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ObjectTypeGenCmdOption(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Cmd_GenCmdOption) MutateObjType(n ObjectTypeGenCmdOption) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func (rcv *Cmd_GenCmdOption) Params(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Cmd_GenCmdOption) ParamsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Cmd_GenCmdOption) ParamsBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Cmd_GenCmdOption) MutateParams(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func Cmd_GenCmdOptionStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func Cmd_GenCmdOptionAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func Cmd_GenCmdOptionAddCmdName(builder *flatbuffers.Builder, cmdName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(cmdName), 0)
}
func Cmd_GenCmdOptionAddObjType(builder *flatbuffers.Builder, objType ObjectTypeGenCmdOption) {
	builder.PrependInt8Slot(2, int8(objType), 0)
}
func Cmd_GenCmdOptionAddParams(builder *flatbuffers.Builder, params flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(params), 0)
}
func Cmd_GenCmdOptionStartParamsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func Cmd_GenCmdOptionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
