// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Cmd_KinMoveToPointT struct {
	Base *Cmd_BaseT `json:"base"`
	TargetPointName string `json:"targetPointName"`
	Lim *Cmd_DynLimitsT `json:"lim"`
	Buffered bool `json:"buffered"`
}

func (t *Cmd_KinMoveToPointT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	baseOffset := t.Base.Pack(builder)
	targetPointNameOffset := flatbuffers.UOffsetT(0)
	if t.TargetPointName != "" {
		targetPointNameOffset = builder.CreateString(t.TargetPointName)
	}
	limOffset := t.Lim.Pack(builder)
	Cmd_KinMoveToPointStart(builder)
	Cmd_KinMoveToPointAddBase(builder, baseOffset)
	Cmd_KinMoveToPointAddTargetPointName(builder, targetPointNameOffset)
	Cmd_KinMoveToPointAddLim(builder, limOffset)
	Cmd_KinMoveToPointAddBuffered(builder, t.Buffered)
	return Cmd_KinMoveToPointEnd(builder)
}

func (rcv *Cmd_KinMoveToPoint) UnPackTo(t *Cmd_KinMoveToPointT) {
	t.Base = rcv.Base(nil).UnPack()
	t.TargetPointName = string(rcv.TargetPointName())
	t.Lim = rcv.Lim(nil).UnPack()
	t.Buffered = rcv.Buffered()
}

func (rcv *Cmd_KinMoveToPoint) UnPack() *Cmd_KinMoveToPointT {
	if rcv == nil { return nil }
	t := &Cmd_KinMoveToPointT{}
	rcv.UnPackTo(t)
	return t
}

type Cmd_KinMoveToPoint struct {
	_tab flatbuffers.Table
}

func GetRootAsCmd_KinMoveToPoint(buf []byte, offset flatbuffers.UOffsetT) *Cmd_KinMoveToPoint {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Cmd_KinMoveToPoint{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCmd_KinMoveToPoint(buf []byte, offset flatbuffers.UOffsetT) *Cmd_KinMoveToPoint {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Cmd_KinMoveToPoint{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Cmd_KinMoveToPoint) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Cmd_KinMoveToPoint) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Cmd_KinMoveToPoint) Base(obj *Cmd_Base) *Cmd_Base {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Cmd_Base)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Name of the commanded target point
func (rcv *Cmd_KinMoveToPoint) TargetPointName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the commanded target point
/// dynamic limits for the motion of this command
func (rcv *Cmd_KinMoveToPoint) Lim(obj *Cmd_DynLimits) *Cmd_DynLimits {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Cmd_DynLimits)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// dynamic limits for the motion of this command
/// buffered or unbuffered command
func (rcv *Cmd_KinMoveToPoint) Buffered() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// buffered or unbuffered command
func (rcv *Cmd_KinMoveToPoint) MutateBuffered(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func Cmd_KinMoveToPointStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func Cmd_KinMoveToPointAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func Cmd_KinMoveToPointAddTargetPointName(builder *flatbuffers.Builder, targetPointName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(targetPointName), 0)
}
func Cmd_KinMoveToPointAddLim(builder *flatbuffers.Builder, lim flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(lim), 0)
}
func Cmd_KinMoveToPointAddBuffered(builder *flatbuffers.Builder, buffered bool) {
	builder.PrependBoolSlot(3, buffered, true)
}
func Cmd_KinMoveToPointEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
