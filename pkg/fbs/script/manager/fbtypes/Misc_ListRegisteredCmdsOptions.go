// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Misc_ListRegisteredCmdsOptionsT struct {
	ObjType ObjectType_ListRegisteredCmdsOptions `json:"objType"`
	CmdType CmdType_ListRegisteredCmdsOptions `json:"cmdType"`
}

func (t *Misc_ListRegisteredCmdsOptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	Misc_ListRegisteredCmdsOptionsStart(builder)
	Misc_ListRegisteredCmdsOptionsAddObjType(builder, t.ObjType)
	Misc_ListRegisteredCmdsOptionsAddCmdType(builder, t.CmdType)
	return Misc_ListRegisteredCmdsOptionsEnd(builder)
}

func (rcv *Misc_ListRegisteredCmdsOptions) UnPackTo(t *Misc_ListRegisteredCmdsOptionsT) {
	t.ObjType = rcv.ObjType()
	t.CmdType = rcv.CmdType()
}

func (rcv *Misc_ListRegisteredCmdsOptions) UnPack() *Misc_ListRegisteredCmdsOptionsT {
	if rcv == nil { return nil }
	t := &Misc_ListRegisteredCmdsOptionsT{}
	rcv.UnPackTo(t)
	return t
}

type Misc_ListRegisteredCmdsOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsMisc_ListRegisteredCmdsOptions(buf []byte, offset flatbuffers.UOffsetT) *Misc_ListRegisteredCmdsOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Misc_ListRegisteredCmdsOptions{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMisc_ListRegisteredCmdsOptions(buf []byte, offset flatbuffers.UOffsetT) *Misc_ListRegisteredCmdsOptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Misc_ListRegisteredCmdsOptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Misc_ListRegisteredCmdsOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Misc_ListRegisteredCmdsOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Misc_ListRegisteredCmdsOptions) ObjType() ObjectType_ListRegisteredCmdsOptions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ObjectType_ListRegisteredCmdsOptions(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Misc_ListRegisteredCmdsOptions) MutateObjType(n ObjectType_ListRegisteredCmdsOptions) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *Misc_ListRegisteredCmdsOptions) CmdType() CmdType_ListRegisteredCmdsOptions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return CmdType_ListRegisteredCmdsOptions(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Misc_ListRegisteredCmdsOptions) MutateCmdType(n CmdType_ListRegisteredCmdsOptions) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func Misc_ListRegisteredCmdsOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func Misc_ListRegisteredCmdsOptionsAddObjType(builder *flatbuffers.Builder, objType ObjectType_ListRegisteredCmdsOptions) {
	builder.PrependInt8Slot(0, int8(objType), 0)
}
func Misc_ListRegisteredCmdsOptionsAddCmdType(builder *flatbuffers.Builder, cmdType CmdType_ListRegisteredCmdsOptions) {
	builder.PrependInt8Slot(1, int8(cmdType), 0)
}
func Misc_ListRegisteredCmdsOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
