// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type State_AxsIpoValuesT struct {
	Pos float64
	Vel float64
	Acc float64
	Jrk float64
}

func (t *State_AxsIpoValuesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	State_AxsIpoValuesStart(builder)
	State_AxsIpoValuesAddPos(builder, t.Pos)
	State_AxsIpoValuesAddVel(builder, t.Vel)
	State_AxsIpoValuesAddAcc(builder, t.Acc)
	State_AxsIpoValuesAddJrk(builder, t.Jrk)
	return State_AxsIpoValuesEnd(builder)
}

func (rcv *State_AxsIpoValues) UnPackTo(t *State_AxsIpoValuesT) {
	t.Pos = rcv.Pos()
	t.Vel = rcv.Vel()
	t.Acc = rcv.Acc()
	t.Jrk = rcv.Jrk()
}

func (rcv *State_AxsIpoValues) UnPack() *State_AxsIpoValuesT {
	if rcv == nil { return nil }
	t := &State_AxsIpoValuesT{}
	rcv.UnPackTo(t)
	return t
}

type State_AxsIpoValues struct {
	_tab flatbuffers.Table
}

func GetRootAsState_AxsIpoValues(buf []byte, offset flatbuffers.UOffsetT) *State_AxsIpoValues {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &State_AxsIpoValues{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsState_AxsIpoValues(buf []byte, offset flatbuffers.UOffsetT) *State_AxsIpoValues {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &State_AxsIpoValues{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *State_AxsIpoValues) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *State_AxsIpoValues) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *State_AxsIpoValues) Pos() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *State_AxsIpoValues) MutatePos(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

func (rcv *State_AxsIpoValues) Vel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *State_AxsIpoValues) MutateVel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *State_AxsIpoValues) Acc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *State_AxsIpoValues) MutateAcc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *State_AxsIpoValues) Jrk() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *State_AxsIpoValues) MutateJrk(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func State_AxsIpoValuesStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func State_AxsIpoValuesAddPos(builder *flatbuffers.Builder, pos float64) {
	builder.PrependFloat64Slot(0, pos, 0.0)
}
func State_AxsIpoValuesAddVel(builder *flatbuffers.Builder, vel float64) {
	builder.PrependFloat64Slot(1, vel, 0.0)
}
func State_AxsIpoValuesAddAcc(builder *flatbuffers.Builder, acc float64) {
	builder.PrependFloat64Slot(2, acc, 0.0)
}
func State_AxsIpoValuesAddJrk(builder *flatbuffers.Builder, jrk float64) {
	builder.PrependFloat64Slot(3, jrk, 0.0)
}
func State_AxsIpoValuesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
