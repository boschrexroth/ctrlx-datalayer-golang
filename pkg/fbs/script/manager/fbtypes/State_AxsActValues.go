// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type State_AxsActValues struct {
	_tab flatbuffers.Table
}

func GetRootAsState_AxsActValues(buf []byte, offset flatbuffers.UOffsetT) *State_AxsActValues {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &State_AxsActValues{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsState_AxsActValues(buf []byte, offset flatbuffers.UOffsetT) *State_AxsActValues {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &State_AxsActValues{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *State_AxsActValues) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *State_AxsActValues) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *State_AxsActValues) Pos() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *State_AxsActValues) MutatePos(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

func (rcv *State_AxsActValues) DistLeft() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *State_AxsActValues) MutateDistLeft(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *State_AxsActValues) Vel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *State_AxsActValues) MutateVel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *State_AxsActValues) Acc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *State_AxsActValues) MutateAcc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *State_AxsActValues) Torque() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *State_AxsActValues) MutateTorque(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func State_AxsActValuesStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func State_AxsActValuesAddPos(builder *flatbuffers.Builder, pos float64) {
	builder.PrependFloat64Slot(0, pos, 0.0)
}
func State_AxsActValuesAddDistLeft(builder *flatbuffers.Builder, distLeft float64) {
	builder.PrependFloat64Slot(1, distLeft, 0.0)
}
func State_AxsActValuesAddVel(builder *flatbuffers.Builder, vel float64) {
	builder.PrependFloat64Slot(2, vel, 0.0)
}
func State_AxsActValuesAddAcc(builder *flatbuffers.Builder, acc float64) {
	builder.PrependFloat64Slot(3, acc, 0.0)
}
func State_AxsActValuesAddTorque(builder *flatbuffers.Builder, torque float64) {
	builder.PrependFloat64Slot(4, torque, 0.0)
}
func State_AxsActValuesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
