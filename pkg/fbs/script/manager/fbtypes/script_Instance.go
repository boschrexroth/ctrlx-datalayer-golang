// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type script_InstanceT struct {
	Name string `json:"name"`
	Language string `json:"language"`
}

func (t *script_InstanceT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	languageOffset := flatbuffers.UOffsetT(0)
	if t.Language != "" {
		languageOffset = builder.CreateString(t.Language)
	}
	script_InstanceStart(builder)
	script_InstanceAddName(builder, nameOffset)
	script_InstanceAddLanguage(builder, languageOffset)
	return script_InstanceEnd(builder)
}

func (rcv *script_Instance) UnPackTo(t *script_InstanceT) {
	t.Name = string(rcv.Name())
	t.Language = string(rcv.Language())
}

func (rcv *script_Instance) UnPack() *script_InstanceT {
	if rcv == nil { return nil }
	t := &script_InstanceT{}
	rcv.UnPackTo(t)
	return t
}

type script_Instance struct {
	_tab flatbuffers.Table
}

func GetRootAsscript_Instance(buf []byte, offset flatbuffers.UOffsetT) *script_Instance {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &script_Instance{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsscript_Instance(buf []byte, offset flatbuffers.UOffsetT) *script_Instance {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &script_Instance{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *script_Instance) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *script_Instance) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *script_Instance) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *script_Instance) Language() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func script_InstanceStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func script_InstanceAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func script_InstanceAddLanguage(builder *flatbuffers.Builder, language flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(language), 0)
}
func script_InstanceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
