// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Cmd_KinAbortT struct {
	Base *Cmd_BaseT
	Type string
}

func (t *Cmd_KinAbortT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	baseOffset := t.Base.Pack(builder)
	typeOffset := builder.CreateString(t.Type)
	Cmd_KinAbortStart(builder)
	Cmd_KinAbortAddBase(builder, baseOffset)
	Cmd_KinAbortAddType(builder, typeOffset)
	return Cmd_KinAbortEnd(builder)
}

func (rcv *Cmd_KinAbort) UnPackTo(t *Cmd_KinAbortT) {
	t.Base = rcv.Base(nil).UnPack()
	t.Type = string(rcv.Type())
}

func (rcv *Cmd_KinAbort) UnPack() *Cmd_KinAbortT {
	if rcv == nil { return nil }
	t := &Cmd_KinAbortT{}
	rcv.UnPackTo(t)
	return t
}

type Cmd_KinAbort struct {
	_tab flatbuffers.Table
}

func GetRootAsCmd_KinAbort(buf []byte, offset flatbuffers.UOffsetT) *Cmd_KinAbort {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Cmd_KinAbort{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCmd_KinAbort(buf []byte, offset flatbuffers.UOffsetT) *Cmd_KinAbort {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Cmd_KinAbort{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Cmd_KinAbort) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Cmd_KinAbort) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Cmd_KinAbort) Base(obj *Cmd_Base) *Cmd_Base {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Cmd_Base)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Cmd_KinAbort) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func Cmd_KinAbortStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func Cmd_KinAbortAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func Cmd_KinAbortAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(type_), 0)
}
func Cmd_KinAbortEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
