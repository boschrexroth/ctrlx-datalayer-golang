// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbtypes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type State_AxsBrakingDistanceExRespT struct {
	BrakingDistance float64
	DistanceType BrakingDistanceTypeResp
}

func (t *State_AxsBrakingDistanceExRespT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	State_AxsBrakingDistanceExRespStart(builder)
	State_AxsBrakingDistanceExRespAddBrakingDistance(builder, t.BrakingDistance)
	State_AxsBrakingDistanceExRespAddDistanceType(builder, t.DistanceType)
	return State_AxsBrakingDistanceExRespEnd(builder)
}

func (rcv *State_AxsBrakingDistanceExResp) UnPackTo(t *State_AxsBrakingDistanceExRespT) {
	t.BrakingDistance = rcv.BrakingDistance()
	t.DistanceType = rcv.DistanceType()
}

func (rcv *State_AxsBrakingDistanceExResp) UnPack() *State_AxsBrakingDistanceExRespT {
	if rcv == nil { return nil }
	t := &State_AxsBrakingDistanceExRespT{}
	rcv.UnPackTo(t)
	return t
}

type State_AxsBrakingDistanceExResp struct {
	_tab flatbuffers.Table
}

func GetRootAsState_AxsBrakingDistanceExResp(buf []byte, offset flatbuffers.UOffsetT) *State_AxsBrakingDistanceExResp {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &State_AxsBrakingDistanceExResp{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsState_AxsBrakingDistanceExResp(buf []byte, offset flatbuffers.UOffsetT) *State_AxsBrakingDistanceExResp {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &State_AxsBrakingDistanceExResp{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *State_AxsBrakingDistanceExResp) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *State_AxsBrakingDistanceExResp) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *State_AxsBrakingDistanceExResp) BrakingDistance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *State_AxsBrakingDistanceExResp) MutateBrakingDistance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

func (rcv *State_AxsBrakingDistanceExResp) DistanceType() BrakingDistanceTypeResp {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return BrakingDistanceTypeResp(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *State_AxsBrakingDistanceExResp) MutateDistanceType(n BrakingDistanceTypeResp) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func State_AxsBrakingDistanceExRespStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func State_AxsBrakingDistanceExRespAddBrakingDistance(builder *flatbuffers.Builder, brakingDistance float64) {
	builder.PrependFloat64Slot(0, brakingDistance, 0.0)
}
func State_AxsBrakingDistanceExRespAddDistanceType(builder *flatbuffers.Builder, distanceType BrakingDistanceTypeResp) {
	builder.PrependInt8Slot(1, int8(distanceType), 0)
}
func State_AxsBrakingDistanceExRespEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
