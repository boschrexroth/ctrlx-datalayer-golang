// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package automation

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StatsSSEDetailT struct {
	Sessions []*StatsSSESessionT `json:"sessions"`
	Subscriptions []*StatsSSESubscriptionsT `json:"subscriptions"`
}

func (t *StatsSSEDetailT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	sessionsOffset := flatbuffers.UOffsetT(0)
	if t.Sessions != nil {
		sessionsLength := len(t.Sessions)
		sessionsOffsets := make([]flatbuffers.UOffsetT, sessionsLength)
		for j := 0; j < sessionsLength; j++ {
			sessionsOffsets[j] = t.Sessions[j].Pack(builder)
		}
		StatsSSEDetailStartSessionsVector(builder, sessionsLength)
		for j := sessionsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(sessionsOffsets[j])
		}
		sessionsOffset = builder.EndVector(sessionsLength)
	}
	subscriptionsOffset := flatbuffers.UOffsetT(0)
	if t.Subscriptions != nil {
		subscriptionsLength := len(t.Subscriptions)
		subscriptionsOffsets := make([]flatbuffers.UOffsetT, subscriptionsLength)
		for j := 0; j < subscriptionsLength; j++ {
			subscriptionsOffsets[j] = t.Subscriptions[j].Pack(builder)
		}
		StatsSSEDetailStartSubscriptionsVector(builder, subscriptionsLength)
		for j := subscriptionsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(subscriptionsOffsets[j])
		}
		subscriptionsOffset = builder.EndVector(subscriptionsLength)
	}
	StatsSSEDetailStart(builder)
	StatsSSEDetailAddSessions(builder, sessionsOffset)
	StatsSSEDetailAddSubscriptions(builder, subscriptionsOffset)
	return StatsSSEDetailEnd(builder)
}

func (rcv *StatsSSEDetail) UnPackTo(t *StatsSSEDetailT) {
	sessionsLength := rcv.SessionsLength()
	t.Sessions = make([]*StatsSSESessionT, sessionsLength)
	for j := 0; j < sessionsLength; j++ {
		x := StatsSSESession{}
		rcv.Sessions(&x, j)
		t.Sessions[j] = x.UnPack()
	}
	subscriptionsLength := rcv.SubscriptionsLength()
	t.Subscriptions = make([]*StatsSSESubscriptionsT, subscriptionsLength)
	for j := 0; j < subscriptionsLength; j++ {
		x := StatsSSESubscriptions{}
		rcv.Subscriptions(&x, j)
		t.Subscriptions[j] = x.UnPack()
	}
}

func (rcv *StatsSSEDetail) UnPack() *StatsSSEDetailT {
	if rcv == nil { return nil }
	t := &StatsSSEDetailT{}
	rcv.UnPackTo(t)
	return t
}

type StatsSSEDetail struct {
	_tab flatbuffers.Table
}

func GetRootAsStatsSSEDetail(buf []byte, offset flatbuffers.UOffsetT) *StatsSSEDetail {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StatsSSEDetail{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStatsSSEDetail(buf []byte, offset flatbuffers.UOffsetT) *StatsSSEDetail {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StatsSSEDetail{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *StatsSSEDetail) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StatsSSEDetail) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StatsSSEDetail) Sessions(obj *StatsSSESession, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *StatsSSEDetail) SessionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *StatsSSEDetail) Subscriptions(obj *StatsSSESubscriptions, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *StatsSSEDetail) SubscriptionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func StatsSSEDetailStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func StatsSSEDetailAddSessions(builder *flatbuffers.Builder, sessions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(sessions), 0)
}
func StatsSSEDetailStartSessionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StatsSSEDetailAddSubscriptions(builder *flatbuffers.Builder, subscriptions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(subscriptions), 0)
}
func StatsSSEDetailStartSubscriptionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StatsSSEDetailEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
