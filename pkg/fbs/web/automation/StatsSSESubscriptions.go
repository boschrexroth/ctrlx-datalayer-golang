// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package automation

import (
	flatbuffers "github.com/google/flatbuffers/go"

	comm__datalayer "github.com/boschrexroth/ctrlx-datalayer-golang/v2/pkg/fbs/comm/datalayer"
)

type StatsSSESubscriptionsT struct {
	Name string `json:"name"`
	UsageCounter uint32 `json:"usageCounter"`
	LastUsed uint64 `json:"lastUsed"`
	Timeout uint32 `json:"timeout"`
	Subscription *comm__datalayer.SubscriptionT `json:"subscription"`
}

func (t *StatsSSESubscriptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	subscriptionOffset := t.Subscription.Pack(builder)
	StatsSSESubscriptionsStart(builder)
	StatsSSESubscriptionsAddName(builder, nameOffset)
	StatsSSESubscriptionsAddUsageCounter(builder, t.UsageCounter)
	StatsSSESubscriptionsAddLastUsed(builder, t.LastUsed)
	StatsSSESubscriptionsAddTimeout(builder, t.Timeout)
	StatsSSESubscriptionsAddSubscription(builder, subscriptionOffset)
	return StatsSSESubscriptionsEnd(builder)
}

func (rcv *StatsSSESubscriptions) UnPackTo(t *StatsSSESubscriptionsT) {
	t.Name = string(rcv.Name())
	t.UsageCounter = rcv.UsageCounter()
	t.LastUsed = rcv.LastUsed()
	t.Timeout = rcv.Timeout()
	t.Subscription = rcv.Subscription(nil).UnPack()
}

func (rcv *StatsSSESubscriptions) UnPack() *StatsSSESubscriptionsT {
	if rcv == nil { return nil }
	t := &StatsSSESubscriptionsT{}
	rcv.UnPackTo(t)
	return t
}

type StatsSSESubscriptions struct {
	_tab flatbuffers.Table
}

func GetRootAsStatsSSESubscriptions(buf []byte, offset flatbuffers.UOffsetT) *StatsSSESubscriptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StatsSSESubscriptions{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStatsSSESubscriptions(buf []byte, offset flatbuffers.UOffsetT) *StatsSSESubscriptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StatsSSESubscriptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *StatsSSESubscriptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StatsSSESubscriptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StatsSSESubscriptions) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StatsSSESubscriptions) UsageCounter() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatsSSESubscriptions) MutateUsageCounter(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *StatsSSESubscriptions) LastUsed() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatsSSESubscriptions) MutateLastUsed(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *StatsSSESubscriptions) Timeout() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatsSSESubscriptions) MutateTimeout(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *StatsSSESubscriptions) Subscription(obj *comm__datalayer.Subscription) *comm__datalayer.Subscription {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(comm__datalayer.Subscription)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func StatsSSESubscriptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func StatsSSESubscriptionsAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func StatsSSESubscriptionsAddUsageCounter(builder *flatbuffers.Builder, usageCounter uint32) {
	builder.PrependUint32Slot(1, usageCounter, 0)
}
func StatsSSESubscriptionsAddLastUsed(builder *flatbuffers.Builder, lastUsed uint64) {
	builder.PrependUint64Slot(2, lastUsed, 0)
}
func StatsSSESubscriptionsAddTimeout(builder *flatbuffers.Builder, timeout uint32) {
	builder.PrependUint32Slot(3, timeout, 0)
}
func StatsSSESubscriptionsAddSubscription(builder *flatbuffers.Builder, subscription flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(subscription), 0)
}
func StatsSSESubscriptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
