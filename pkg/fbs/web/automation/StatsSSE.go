// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package automation

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StatsSSET struct {
	OpenSubscriptions uint32 `json:"openSubscriptions"`
	OpenSse uint32 `json:"openSSE"`
	RequestsSse uint32 `json:"requestsSSE"`
}

func (t *StatsSSET) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	StatsSSEStart(builder)
	StatsSSEAddOpenSubscriptions(builder, t.OpenSubscriptions)
	StatsSSEAddOpenSse(builder, t.OpenSse)
	StatsSSEAddRequestsSse(builder, t.RequestsSse)
	return StatsSSEEnd(builder)
}

func (rcv *StatsSSE) UnPackTo(t *StatsSSET) {
	t.OpenSubscriptions = rcv.OpenSubscriptions()
	t.OpenSse = rcv.OpenSse()
	t.RequestsSse = rcv.RequestsSse()
}

func (rcv *StatsSSE) UnPack() *StatsSSET {
	if rcv == nil { return nil }
	t := &StatsSSET{}
	rcv.UnPackTo(t)
	return t
}

type StatsSSE struct {
	_tab flatbuffers.Table
}

func GetRootAsStatsSSE(buf []byte, offset flatbuffers.UOffsetT) *StatsSSE {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StatsSSE{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStatsSSE(buf []byte, offset flatbuffers.UOffsetT) *StatsSSE {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StatsSSE{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *StatsSSE) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StatsSSE) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StatsSSE) OpenSubscriptions() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatsSSE) MutateOpenSubscriptions(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *StatsSSE) OpenSse() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatsSSE) MutateOpenSse(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *StatsSSE) RequestsSse() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatsSSE) MutateRequestsSse(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func StatsSSEStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func StatsSSEAddOpenSubscriptions(builder *flatbuffers.Builder, openSubscriptions uint32) {
	builder.PrependUint32Slot(0, openSubscriptions, 0)
}
func StatsSSEAddOpenSse(builder *flatbuffers.Builder, openSse uint32) {
	builder.PrependUint32Slot(1, openSse, 0)
}
func StatsSSEAddRequestsSse(builder *flatbuffers.Builder, requestsSse uint32) {
	builder.PrependUint32Slot(2, requestsSse, 0)
}
func StatsSSEEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
