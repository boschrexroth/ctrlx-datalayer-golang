// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package automation

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StatsRestbedT struct {
	OpenSessions uint32
}

func (t *StatsRestbedT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	StatsRestbedStart(builder)
	StatsRestbedAddOpenSessions(builder, t.OpenSessions)
	return StatsRestbedEnd(builder)
}

func (rcv *StatsRestbed) UnPackTo(t *StatsRestbedT) {
	t.OpenSessions = rcv.OpenSessions()
}

func (rcv *StatsRestbed) UnPack() *StatsRestbedT {
	if rcv == nil { return nil }
	t := &StatsRestbedT{}
	rcv.UnPackTo(t)
	return t
}

type StatsRestbed struct {
	_tab flatbuffers.Table
}

func GetRootAsStatsRestbed(buf []byte, offset flatbuffers.UOffsetT) *StatsRestbed {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StatsRestbed{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStatsRestbed(buf []byte, offset flatbuffers.UOffsetT) *StatsRestbed {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StatsRestbed{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *StatsRestbed) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StatsRestbed) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StatsRestbed) OpenSessions() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatsRestbed) MutateOpenSessions(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func StatsRestbedStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func StatsRestbedAddOpenSessions(builder *flatbuffers.Builder, openSessions uint32) {
	builder.PrependUint32Slot(0, openSessions, 0)
}
func StatsRestbedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
