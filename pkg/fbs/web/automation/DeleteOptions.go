// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package automation

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DeleteOptionsT struct {
	Forceclose bool `json:"forceclose"`
}

func (t *DeleteOptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	DeleteOptionsStart(builder)
	DeleteOptionsAddForceclose(builder, t.Forceclose)
	return DeleteOptionsEnd(builder)
}

func (rcv *DeleteOptions) UnPackTo(t *DeleteOptionsT) {
	t.Forceclose = rcv.Forceclose()
}

func (rcv *DeleteOptions) UnPack() *DeleteOptionsT {
	if rcv == nil { return nil }
	t := &DeleteOptionsT{}
	rcv.UnPackTo(t)
	return t
}

type DeleteOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsDeleteOptions(buf []byte, offset flatbuffers.UOffsetT) *DeleteOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DeleteOptions{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDeleteOptions(buf []byte, offset flatbuffers.UOffsetT) *DeleteOptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DeleteOptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DeleteOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DeleteOptions) Table() flatbuffers.Table {
	return rcv._tab
}

/// force close of all connections for this subscription
func (rcv *DeleteOptions) Forceclose() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// force close of all connections for this subscription
func (rcv *DeleteOptions) MutateForceclose(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func DeleteOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func DeleteOptionsAddForceclose(builder *flatbuffers.Builder, forceclose bool) {
	builder.PrependBoolSlot(0, forceclose, false)
}
func DeleteOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
